#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`()
		`(1,)
		`(1, 2, 3)
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Property') {
	Tuple.PrintPropSlots()
}

TestCase('IndexGet') {
	tbl = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten')
	Tester(`tbl)
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('for statement') {
	for (x in ('hello', 'world', 3, 4, 5)) {
		Println(x)
	}
}

TestCase('assignment') {
	[a, b, c] = (3, 4, 5)
	Printf('%d %d %d\n', a, b, c)
}

TestCase('not affected by implicit mapping') {
	f(x):map = Println(x)
	f((3, 4, 5))
}

TestCase('Operator') {
	Tester(`(() == ()))
	Tester(`(() != ()))
	Tester(`(() < ()))
	Tester(`(() <= ()))
	Tester(`(() > ()))
	Tester(`(() >= ()))
	Tester(`(() == (1,)))
	Tester(`(() != (1,)))
	Tester(`(() < (1,)))
	Tester(`(() <= (1,)))
	Tester(`(() > (1,)))
	Tester(`(() >= (1,)))
	Tester(`((1,) == ()))
	Tester(`((1,) != ()))
	Tester(`((1,) < ()))
	Tester(`((1,) <= ()))
	Tester(`((1,) > ()))
	Tester(`((1,) >= ()))
	Tester(`((1, 2) == (1, 2)))
	Tester(`((1, 2) != (1, 2)))
	Tester(`((1, 2) < (1, 2)))
	Tester(`((1, 2) <= (1, 2)))
	Tester(`((1, 2) > (1, 2)))
	Tester(`((1, 2) >= (1, 2)))
	Tester(`((1, 2) == (1, 3)))
	Tester(`((1, 2) != (1, 3)))
	Tester(`((1, 2) < (1, 3)))
	Tester(`((1, 2) <= (1, 3)))
	Tester(`((1, 2) > (1, 3)))
	Tester(`((1, 2) >= (1, 3)))
	Tester(`((1, 3) == (1, 2)))
	Tester(`((1, 3) != (1, 2)))
	Tester(`((1, 3) < (1, 2)))
	Tester(`((1, 3) <= (1, 2)))
	Tester(`((1, 3) > (1, 2)))
	Tester(`((1, 3) >= (1, 2)))
	Tester(`((1, 2) == (1, 2, 3)))
	Tester(`((1, 2) != (1, 2, 3)))
	Tester(`((1, 2) < (1, 2, 3)))
	Tester(`((1, 2) <= (1, 2, 3)))
	Tester(`((1, 2) > (1, 2, 3)))
	Tester(`((1, 2) >= (1, 2, 3)))
	Tester(`((1, 2, 3) == (1, 2)))
	Tester(`((1, 2, 3) != (1, 2)))
	Tester(`((1, 2, 3) < (1, 2)))
	Tester(`((1, 2, 3) <= (1, 2)))
	Tester(`((1, 2, 3) > (1, 2)))
	Tester(`((1, 2, 3) >= (1, 2)))

}
