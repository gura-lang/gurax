#!/usr/bin/env gurax
import(util.tester) {*}

words10 = [
	'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining'
]

TestCase('PUnit') {
	exprs = [
		`()
		`(1,)
		`(1, 2, 3)
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Property') {
	Tuple.PrintPropSlots()
}

TestCase('IndexGet') {
	tbl = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten')
	Tester(`tbl)
	Tester(`tbl[])
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('for statement') {
	for (x in ('hello', 'world', 3, 4, 5)) {
		Println(x)
	}
}

TestCase('assignment') {
	[a, b, c] = (3, 4, 5)
	Printf('%d %d %d\n', a, b, c)
}

TestCase('not affected by implicit mapping') {
	f(x):map = Println(x)
	f((3, 4, 5))
}

TestCase('Tuple#Each()') {
	tbl = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten')
	Tester(`tbl.Each():list)
}

TestCase('Tuple#IsEmpty()') {
	Tester(`().IsEmpty())
	Tester(`(1, 2, 3).IsEmpty())
}

TestCase('Operator') {
	Tester(`(() == ()))
	Tester(`(() != ()))
	Tester(`(() < ()))
	Tester(`(() <= ()))
	Tester(`(() > ()))
	Tester(`(() >= ()))
	Tester(`(() == (1,)))
	Tester(`(() != (1,)))
	Tester(`(() < (1,)))
	Tester(`(() <= (1,)))
	Tester(`(() > (1,)))
	Tester(`(() >= (1,)))
	Tester(`((1,) == ()))
	Tester(`((1,) != ()))
	Tester(`((1,) < ()))
	Tester(`((1,) <= ()))
	Tester(`((1,) > ()))
	Tester(`((1,) >= ()))
	Tester(`((1, 2) == (1, 2)))
	Tester(`((1, 2) != (1, 2)))
	Tester(`((1, 2) < (1, 2)))
	Tester(`((1, 2) <= (1, 2)))
	Tester(`((1, 2) > (1, 2)))
	Tester(`((1, 2) >= (1, 2)))
	Tester(`((1, 2) == (1, 3)))
	Tester(`((1, 2) != (1, 3)))
	Tester(`((1, 2) < (1, 3)))
	Tester(`((1, 2) <= (1, 3)))
	Tester(`((1, 2) > (1, 3)))
	Tester(`((1, 2) >= (1, 3)))
	Tester(`((1, 3) == (1, 2)))
	Tester(`((1, 3) != (1, 2)))
	Tester(`((1, 3) < (1, 2)))
	Tester(`((1, 3) <= (1, 2)))
	Tester(`((1, 3) > (1, 2)))
	Tester(`((1, 3) >= (1, 2)))
	Tester(`((1, 2) == (1, 2, 3)))
	Tester(`((1, 2) != (1, 2, 3)))
	Tester(`((1, 2) < (1, 2, 3)))
	Tester(`((1, 2) <= (1, 2, 3)))
	Tester(`((1, 2) > (1, 2, 3)))
	Tester(`((1, 2) >= (1, 2, 3)))
	Tester(`((1, 2, 3) == (1, 2)))
	Tester(`((1, 2, 3) != (1, 2)))
	Tester(`((1, 2, 3) < (1, 2)))
	Tester(`((1, 2, 3) <= (1, 2)))
	Tester(`((1, 2, 3) > (1, 2)))
	Tester(`((1, 2, 3) >= (1, 2)))
}

TestCase('Expansion') {
	Tester(`(['The', 'quick', 'brown'], 'fox', ['jumps', 'over'], ['the', 'lazy', 'dog']))
	Tester(`(['The', 'quick', 'brown']*, 'fox', ['jumps', 'over']*, ['the', 'lazy', 'dog']*))
	Tester(`(('The', 'quick', 'brown'), 'fox', ('jumps', 'over'), ('the', 'lazy', 'dog')))
	Tester(`(('The', 'quick', 'brown')*, 'fox', ('jumps', 'over')*, ('the', 'lazy', 'dog')*))
	Tester(`(Range(6), 6, 7, Range(8, 11)))
	Tester(`(Range(6)*, 6, 7, Range(8, 11)*))
}

TestCase('Sort') {
	rand = Random(0)
	tuples = repeat (20):list { (rand.Int(4), rand.Int(4), rand.Int(4)) }
	Tester(`tuples)
	Tester(`tuples.Sort())
}

TestCase('Tuple |+| Tuple') {
	Tester(`(() |+| ()))
	Tester(`((1,) |+| ()))
	Tester(`(() |+| (2,)))
	Tester(`((1,) |+| (2,)))
	Tester(`((1, 2, 3, 4) |+| (5, 6, 7, 8)))
	Tester(`(([1, 2], [3, 4]) |+| ([5, 6], [7, 8])))
	a = (1, 2, 3, 4)
	Tester(`a)
	Tester(`(a |+| (5, 6, 7, 8)))
	Tester(`a)
}

TestCase('Any |+| Tuple, Tuple |+| Any') {
	Tester(`(() |+| 111))
	Tester(`(111 |+| ()))
	Tester(`((1, 2, 3, 4) |+| 111))
	Tester(`(111 |+| (1, 2, 3, 4)))
	Tester(`(111 |+| (1, 2, 3, 4) |+| 222))
}
