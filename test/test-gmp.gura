#!/usr/bin/env gurax
//==============================================================================
// test-gmp.gura
//==============================================================================
import(util.tester) {*}
import(gmp)

TestCase('Property') {
	gmp.Float.PrintPropSlots()
	gmp.Int.PrintPropSlots()
	gmp.Random.PrintPropSlots()
	gmp.Rational.PrintPropSlots()
}

TestCase('gmp.Int') {
	Tester(`Format('%d', 0L))
	Tester(`Format('%d', 1L))
	Tester(`Format('%d', 1234567890123456789012345678901234567890123456789012345678901234567890L))
	Tester(`Format('%x', 0x0L))
	Tester(`Format('%x', 0x1L))
	Tester(`Format('%x', 0x1234567890123456789012345678901234567890123456789012345678901234567890L))
	Tester(`gmp.Int(0))
	Tester(`gmp.Int(0L))
	Tester(`gmp.Int(0Lr))
	Tester(`gmp.Int(0.L))
	Tester(`gmp.Int(1))
	Tester(`gmp.Int(123.456))
	Tester(`gmp.Int(1L))
	Tester(`gmp.Int(1Lr))
	Tester(`gmp.Int(1.L))
	Tester(`gmp.Int(12345))
	Tester(`gmp.Int(12345L))
	Tester(`gmp.Int(12345Lr))
	Tester(`gmp.Int(12345.L))
	Tester(`gmp.Int(12.5L))
	Tester(`gmp.Int(12.25L))
}

TestCase('gmp.Rational') {
	Tester(`(0Lr))
	Tester(`(1Lr))
	Tester(`(3Lr))
	Tester(`(1 / 2Lr))
	Tester(`(-1Lr))
	Tester(`(-1Lr / 3))
	Tester(`gmp.Rational(0))
	Tester(`gmp.Rational(0L))
	Tester(`gmp.Rational(0Lr))
	Tester(`gmp.Rational(0.L))
	Tester(`gmp.Rational(1))
	Tester(`gmp.Rational(1L))
	Tester(`gmp.Rational(1Lr))
	Tester(`gmp.Rational(1.L))
	Tester(`gmp.Rational(12345))
	Tester(`gmp.Rational(12345L))
	Tester(`gmp.Rational(12345Lr))
	Tester(`gmp.Rational(12345.L))
	Tester(`gmp.Rational(12.5L))
	Tester(`gmp.Rational(12.25L))
}

TestCase('gmp.Float') {
	prec = gmp.Float.default_prec
	Tester(`Format('%f', 0.L))
	Tester(`Format('%f', 1.L))
	gmp.Float.default_prec = 64
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 128
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 256
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 512
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = prec
}

TestCase('!a') {
	Tester(`(!0L))	
	Tester(`(!0Lr))	
	Tester(`(!0.L))	
	Tester(`(!3L))	
	Tester(`(!3Lr))	
	Tester(`(!3.L))	
}

TestCase('~a') {
	Tester(`(~0L))	
	Tester(`(~0Lr))	
	Tester(`(~0.L))	
	Tester(`(~3L))	
	Tester(`(~3Lr))	
	Tester(`(~3.L))	
}

TestCase('-a') {
	Tester(`(-0L))	
	Tester(`(-0Lr))	
	Tester(`(-0.L))	
	Tester(`(-3L))	
	Tester(`(-3Lr))	
	Tester(`(-3.L))	
}

TestCase('a + b') {
	Tester(`(3L + 4))
	Tester(`(3L + 4L))
	Tester(`(3L + 4Lr))
	Tester(`(3L + 4.L))
	Tester(`(3Lr + 4))
	Tester(`(3Lr + 4L))
	Tester(`(3Lr + 4Lr))
	Tester(`(3Lr + 4.L))
	Tester(`(3.L + 4))
	Tester(`(3.L + 4L))
	Tester(`(3.L + 4Lr))
	Tester(`(3.L + 4.L))
}

TestCase('a - b') {
	Tester(`(3L - 4))
	Tester(`(3L - 4L))
	Tester(`(3L - 4Lr))
	Tester(`(3L - 4.L))
	Tester(`(3Lr - 4))
	Tester(`(3Lr - 4L))
	Tester(`(3Lr - 4Lr))
	Tester(`(3Lr - 4.L))
	Tester(`(3.L - 4))
	Tester(`(3.L - 4L))
	Tester(`(3.L - 4Lr))
	Tester(`(3.L - 4.L))
}

TestCase('a * b') {
	Tester(`(3L * 4))
	Tester(`(3L * 4L))
	Tester(`(3L * 4Lr))
	Tester(`(3L * 4.L))
	Tester(`(3Lr * 4))
	Tester(`(3Lr * 4L))
	Tester(`(3Lr * 4Lr))
	Tester(`(3Lr * 4.L))
	Tester(`(3.L * 4))
	Tester(`(3.L * 4L))
	Tester(`(3.L * 4Lr))
	Tester(`(3.L * 4.L))
}

TestCase('a / b') {
	Tester(`(13L / 4))
	Tester(`(13L / 4L))
	Tester(`(13L / 4Lr))
	Tester(`(13L / 4.L))
	Tester(`(13Lr / 4))
	Tester(`(13Lr / 4L))
	Tester(`(13Lr / 4Lr))
	Tester(`(13Lr / 4.L))
	Tester(`(13.L / 4))
	Tester(`(13.L / 4L))
	Tester(`(13.L / 4Lr))
	Tester(`(13.L / 4.L))
}

TestCase('math.Abs()') {
	Tester(`(math.Abs(0L)))
	Tester(`(math.Abs(0Lr)))
	Tester(`(math.Abs(0.L)))
	Tester(`(math.Abs(3L)))
	Tester(`(math.Abs(3Lr)))
	Tester(`(math.Abs(2/3Lr)))
	Tester(`(math.Abs(3.L)))
	Tester(`(math.Abs(3.14L)))
	Tester(`(math.Abs(-3L)))
	Tester(`(math.Abs(-3Lr)))
	Tester(`(math.Abs(-2/3Lr)))
	Tester(`(math.Abs(-3.L)))
	Tester(`(math.Abs(-3.14L)))
}

TestCase('math.Ceil()') {
	Tester(`(math.Ceil(0L)))
	Tester(`(math.Ceil(0Lr)))
	Tester(`(math.Ceil(0.L)))
	Tester(`(math.Ceil(3L)))
	Tester(`(math.Ceil(3Lr)))
	Tester(`(math.Ceil(2/3Lr)))
	Tester(`(math.Ceil(3.L)))
	Tester(`(math.Ceil(3.14L)))
	Tester(`(math.Ceil(-3L)))
	Tester(`(math.Ceil(-3Lr)))
	Tester(`(math.Ceil(-2/3Lr)))
	Tester(`(math.Ceil(-3.L)))
	Tester(`(math.Ceil(-3.14L)))
}

TestCase('math.Floor()') {
	Tester(`(math.Floor(0L)))
	Tester(`(math.Floor(0Lr)))
	Tester(`(math.Floor(0.L)))
	Tester(`(math.Floor(3L)))
	Tester(`(math.Floor(3Lr)))
	Tester(`(math.Floor(2/3Lr)))
	Tester(`(math.Floor(3.L)))
	Tester(`(math.Floor(3.14L)))
	Tester(`(math.Floor(-3L)))
	Tester(`(math.Floor(-3Lr)))
	Tester(`(math.Floor(-2/3Lr)))
	Tester(`(math.Floor(-3.L)))
	Tester(`(math.Floor(-3.14L)))
}

TestCase('math.Sqrt()') {
	Tester(`(math.Sqrt(0L)))
	Tester(`(math.Sqrt(0Lr)))
	Tester(`(math.Sqrt(0.L)))
	Tester(`(math.Sqrt(1L)))
	Tester(`(math.Sqrt(1Lr)))
	Tester(`(math.Sqrt(1.L)))
	Tester(`(math.Sqrt(2L)))
	Tester(`(math.Sqrt(2.L)))
	Tester(`(math.Sqrt(3L)))
	Tester(`(math.Sqrt(3.L)))
	Tester(`(math.Sqrt(9L)))
	Tester(`(math.Sqrt(9.L)))
	Tester(`(math.Sqrt(12345L)))
	Tester(`(math.Sqrt(12345.L)))
}

TestCase('gmp.Random##Float()') {
	r = gmp.Random(0)
	Tester(`(r.Float()))
	Tester(`(r.Float()))
	Tester(`(r.Float()))
	Tester(`(r.Float()))
	Tester(`(r.Float()))
	gmp.Random.seed = 0
	Tester(`(gmp.Random.Float()))
	Tester(`(gmp.Random.Float()))
	Tester(`(gmp.Random.Float()))
	Tester(`(gmp.Random.Float()))
	Tester(`(gmp.Random.Float()))
}

TestCase('gmp.Random##FloatSeq()') {
	r = gmp.Random(0)
	Tester(`[r.FloatSeq(5)*])
}

TestCase('gmp.Random##Int()') {
	r = gmp.Random(0)
	Tester(`(r.Int(10)))
	Tester(`(r.Int(10)))
	Tester(`(r.Int(10)))
	Tester(`(r.Int(10)))
	Tester(`(r.Int(10)))
	Tester(`(r.Int(1234567890123456789L)))
	gmp.Random.seed = 0
	Tester(`(gmp.Random.Int(10)))
	Tester(`(gmp.Random.Int(10)))
	Tester(`(gmp.Random.Int(10)))
	Tester(`(gmp.Random.Int(10)))
	Tester(`(gmp.Random.Int(10)))
	Tester(`(gmp.Random.Int(1234567890123456789L)))
}

TestCase('gmp.Random##IntBits()') {
	r = gmp.Random(0)
	Tester(`(r.IntBits(4)))
	Tester(`(r.IntBits(4)))
	Tester(`(r.IntBits(4)))
	Tester(`(r.IntBits(4)))
	Tester(`(r.IntBits(4)))
	gmp.Random.seed = 0
	Tester(`(gmp.Random.IntBits(4)))
	Tester(`(gmp.Random.IntBits(4)))
	Tester(`(gmp.Random.IntBits(4)))
	Tester(`(gmp.Random.IntBits(4)))
	Tester(`(gmp.Random.IntBits(4)))
}

TestCase('gmp.Random##IntSeq()') {
	r = gmp.Random(0)
	Tester(`[r.IntSeq(10, 5)*])
}
