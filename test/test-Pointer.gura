#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	Tester(`Pointer.__prop__(`bytesAvail))
	Tester(`Pointer.__prop__(`bytesEntire))
	Tester(`Pointer.__prop__(`offset))
	Tester(`Pointer.__prop__(`int8))
	Tester(`Pointer.__prop__(`int16))
	Tester(`Pointer.__prop__(`int32))
	Tester(`Pointer.__prop__(`int64))
	Tester(`Pointer.__prop__(`uint8))
	Tester(`Pointer.__prop__(`uint16))
	Tester(`Pointer.__prop__(`uint32))
	Tester(`Pointer.__prop__(`uint64))
	Tester(`Pointer.__prop__(`float))
	Tester(`Pointer.__prop__(`double))
}

TestCase('Pointer#Pack()/Unpack()') {
	sys.formatForNum = '%.0f'
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('bb', -0x80, 0x7f))
		Tester(`buff.p.Pack('b', -0x81))
		Tester(`buff.p.Pack('b', 0x80))
		buff.Dump()
		Tester(`Format('%d', buff.p.Unpack('bb')))
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('BB', 0x00, 0xff))
		Tester(`buff.p.Pack('B', -1))
		Tester(`buff.p.Pack('B', 0x100))
		buff.Dump()
		Tester(`Format('%d', buff.p.Unpack('BB')))
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('hh', -0x8000, 0x7fff))
		Tester(`buff.p.Pack('h', -0x8001))
		Tester(`buff.p.Pack('h', 0x8000))
		buff.Dump()
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('HH', 0, 0xffff))
		Tester(`buff.p.Pack('H', -1))
		Tester(`buff.p.Pack('H', 0x10000))
		buff.Dump()
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('ii', -0x80000000, 0x7fffffff))
		Tester(`buff.p.Pack('i', -0x80000001))
		Tester(`buff.p.Pack('i', 0x80000000))
		buff.Dump()
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('II', 0x00000000, 0xffffffff))
		Tester(`buff.p.Pack('I', -1))
		Tester(`buff.p.Pack('I', 0x100000000))
		buff.Dump()
	}
	scope {
		Println('---')
		buff = B''
		Tester(`buff.p.Pack('fff', 0, 1., .1))
		buff.Dump()
	}
	sys.formatForNum = '%g'
}

TestCase('Pointer#Unpack()') {
}

TestCase('Operators') {
	b = b'abcdefghijklmnopqrstuvwxyz'
	p1 = b.p + 10
	p2 = b.p + 23
	Tester(`p1)
	Tester(`p2)
	Tester(`(p1 + 7))
	Tester(`(7 + p1))
	Tester(`(p1 - 7))
	Tester(`(p1 - 10))
	Tester(`(p1 - 11))
	Tester(`(p1 - p2))
	Tester(`(p2 - p1))
}
