#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	Tester(`Pointer.__prop__(`bytesAvail))
	Tester(`Pointer.__prop__(`bytesEntire))
	Tester(`Pointer.__prop__(`offset))
	Tester(`Pointer.__prop__(`int8))
	Tester(`Pointer.__prop__(`int16))
	Tester(`Pointer.__prop__(`int32))
	Tester(`Pointer.__prop__(`int64))
	Tester(`Pointer.__prop__(`uint8))
	Tester(`Pointer.__prop__(`uint16))
	Tester(`Pointer.__prop__(`uint32))
	Tester(`Pointer.__prop__(`uint64))
	Tester(`Pointer.__prop__(`float))
	Tester(`Pointer.__prop__(`double))
}

TestCase('Basic test of pack/unpack') {
	Number.format = '%.0f'
	f(strPre:String) = {
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'bbbb', 0, -0x80, 0x7f, 0x12))
			Tester(`buff.p.Pack(strPre + 'b', -0x81))
			Tester(`buff.p.Pack(strPre + 'b', 0x80))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'bbbb')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'BBB', 0x00, 0xff, 0x12))
			Tester(`buff.p.Pack(strPre + 'B', -1))
			Tester(`buff.p.Pack(strPre + 'B', 0x100))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'BBB')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'hhhh', 0, -0x8000, 0x7fff, 0x1234))
			Tester(`buff.p.Pack(strPre + 'h', -0x8001))
			Tester(`buff.p.Pack(strPre + 'h', 0x8000))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'hhhh')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'HHHH', 0, 0x8000, 0xffff, 0x1234))
			Tester(`buff.p.Pack(strPre + 'H', -1))
			Tester(`buff.p.Pack(strPre + 'H', 0x10000))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'HHHH')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'iiii', 0, -0x80000000, 0x7fffffff, 0x12345678))
			Tester(`buff.p.Pack(strPre + 'i', -0x80000001))
			Tester(`buff.p.Pack(strPre + 'i', 0x80000000))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'iiii')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'III', 0x00000000, 0xffffffff, 0x12345678))
			Tester(`buff.p.Pack(strPre + 'I', -1))
			Tester(`buff.p.Pack(strPre + 'I', 0x100000000))
			buff.Dump()
			Tester(`Format('%d', buff.p.Unpack(strPre + 'III')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'fff', 0, 1., .5))
			buff.Dump()
			Tester(`Format('%f', buff.p.Unpack(strPre + 'fff')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + 'ddd', 0, 1., .5))
			buff.Dump()
			Tester(`Format('%f', buff.p.Unpack(strPre + 'ddd')))
		}
		scope {
			Println('---')
			buff = B''
			Tester(`buff.p.Pack(strPre + '20s', 'Hello World'))
			buff.Dump()
			Tester(`Format('%s', buff.p.Unpack(strPre + '20s')))
		}
	}
	f('')
	f('>')
	f('<')
	Number.format = '%g'
}

TestCase('Pointer#Pack()') {
}

TestCase('Pointer#Put()') {
	for (elemType in [`int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64, `float, `double]) {
		Println('--------')
		Printf('%s:\n', elemType)
		Println('1 element')
		(buff = B'').p.Put(elemType, 0x00), buff.Dump()
		Println('2 elements')
		(buff = B'').p.Put(elemType, 0x00, 0x11), buff.Dump()
		Println('6 elements')
		(buff = B'').p.Put(elemType, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55), buff.Dump()
		Println('0 element in list')
		(buff = B'').p.Put(elemType, []), buff.Dump()
		Println('1 element in list')
		(buff = B'').p.Put(elemType, [0x00]), buff.Dump()
		Println('2 elements in list')
		(buff = B'').p.Put(elemType, [0x00, 0x11]), buff.Dump()
		Println('6 elements in list')
		(buff = B'').p.Put(elemType, [0x00, 0x11, 0x22, 0x33, 0x44, 0x55]), buff.Dump()
		Println('0 element in iterator')
		(buff = B'').p.Put(elemType, ()), buff.Dump()
		Println('1 element in iterator')
		(buff = B'').p.Put(elemType, (0x00,)), buff.Dump()
		Println('2 elements in iterator')
		(buff = B'').p.Put(elemType, (0x00, 0x11)), buff.Dump()
		Println('6 elements in iterator')
		(buff = B'').p.Put(elemType, (0x00, 0x11, 0x22, 0x33, 0x44, 0x55)), buff.Dump()
	}
}

TestCase('Pointer#Unpack()') {
	buff = b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e'
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('B')):list {Format('%02x', tbl[0])}).Join(',')})
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('H')):list {Format('%04x', tbl[0])}).Join(',')})
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('I')):list {Format('%08x', tbl[0])}).Join(',')})
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('>B')):list {Format('%02x', tbl[0])}).Join(',')})
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('>H')):list {Format('%04x', tbl[0])}).Join(',')})
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('>I')):list {Format('%08x', tbl[0])}).Join(',')})
	buff = b'abcdefghijklmnopqrstuvwxyz'
	Tester(`buff.Pointer {|p| (while (tbl = p.Unpack('4s')):list {tbl[0]}).Join(',')})
}

TestCase('Operators') {
	buff1 = b'abcdefghijklmnopqrstuvwxyz'
	buff2 = b'abcdefghijklmnopqrstuvwxyz'
	p1 = buff1.p + 10
	p2 = buff1.p + 23
	p3 = buff2.p + 23
	Tester(`p1)
	Tester(`p2)
	Tester(`(p1 + 7))
	Tester(`(7 + p1))
	Tester(`(p1 - 7))
	Tester(`(p1 - 10))
	Tester(`(p1 - 11))
	Tester(`(p1 - p2))
	Tester(`(p2 - p1))
	Tester(`(p3 - p1))
}
