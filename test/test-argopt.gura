#!/usr/bin/env gurax -I../module
import(argopt)

p = argopt.Parser()
p.OptBool('bool-a', 'a', 'help-a')
p.OptBool('bool-b', 'b', 'help-b')
p.OptBool('bool-c', 'c', 'help-c')
p.OptBool('bool-d', 'd', 'help-d')
p.OptBool('bool-e', 'e', 'help-e')
p.OptString('string-A', 'A', 'help-A')
p.OptString('string-B', 'B', 'help-B')
p.OptString('string-C', 'C', 'help-C')
p.OptString('string-D', 'D', 'help-D')
p.OptString('string-E', 'E', 'help-E')
p.OptInt('int-F', 'F', 'help-F')
p.OptInt('int-G', 'G', 'help-G')
p.OptInt('int-H', 'H', 'help-H')
p.OptInt('int-I', 'I', 'help-I')
p.OptInt('int-J', 'J', 'help-J')

Println(p.FormatHelp())


Tester(argv[] as String) = {
	try {
		[argvRest, opt] = p.Parse([''] |+| argv)
	} catch {|e|
		Printf('%s -> ** %s **\n', argv, e.text):noMap
		return
	}
	Printf('%s -> %s, %s\n', argv, argvRest, opt):noMap
}

Tester([''])
Tester(['file1'])
Tester(['file1', 'file2', 'file3'])
Tester(['--bool-a'])
Tester(['-a'])
Tester(['--bool-a', '--bool-b'])
Tester(['-a', '-b'])
Tester(['--bool-a', '--bool-b', '--bool-c', '--bool-d', '--bool-e'])
Tester(['-a', '-b', '-c', '-d', '-e'])
Tester(['--bool-a', '--bool-a'])
Tester(['-a', '-a'])
Tester(['file1', '--bool-a', 'file2', '--bool-b', '--bool-c', 'file3', '--bool-d', '--bool-e', 'file4'])
Tester(['--string-A=value-A'])
Tester(['-A', 'value-A'])
Tester(['--string-A=value-A', '--string-B=vaue-B'])
Tester(['-A', 'value-A', '-B', 'value-B'])
Tester(['--string-A=value-A', '--string-B=value-B', '--string-C=value-C', '--string-D=value-D', '--string-E=value-E'])
Tester(['-A', 'value-A', '-B', 'value-B', '-C', 'value-C', '-D', 'value-D', '-E', 'value-E'])
Tester(['--string-A'])
Tester(['--bool-a=value'])
Tester(['--int-F=1111'])
Tester(['--int-F=1111', '--int-G=2222'])
Tester(['--int-F=1111', '--int-G=2222', '--int-H=3333', '--int-I=4444', '--int-J=5555'])
Tester(['-F', '1111'])
Tester(['-F', '1111', '-G', '2222'])
Tester(['-F', '1111', '-G', '2222', '-H', '3333', '-I', '4444', '-J', '5555'])
Tester(['--int-F=1a111'])
Tester(['--int-F=0xffa3'])
