#!/usr/bin/env gurax
import(util.tester) {*}

InspectExpr(x:Expr) = {
	Printf('%s .. %s\n', x.ToString():quoteSymbol, x.type)
	[`attr, `block, `car, `child, `left, `memberMode, `operator,
	 `right, `string, `symbol, `target, `trailer, `value].Each {|prop|
		Printf('  %-10s %s\n', prop,
				x.__GetProp__(prop).ToString():nilVisible:quote)
	}
	Printf('  %-10s %s\n', 'EachCdr', cond(x, x.EachCdr():list).ToString())
	Printf('  %-10s %s\n', 'EachElem', cond(x, x.EachElem():list).ToString())
	Printf('  %-10s %s\n', 'EachParam', cond(x, x.EachParam():list).ToString())
}

TestCase('Inspection') {
	/*
	// Value
	InspectExpr(`3.14)
	// Identifier
	InspectExpr(`foo)
	InspectExpr(`foo:a:b:c:[d,e,f])
	*/
	// String
	InspectExpr(`'hello')
	// Suffixed
	InspectExpr(`3.14foo)
	InspectExpr(`'hello'foo)
	// Member
	InspectExpr(`aaa.bbb)
	InspectExpr(`aaa:&bbb)
	InspectExpr(`aaa:*bbb)
	InspectExpr(`aaa::bbb)
	// UnaryOp
	InspectExpr(`(-a))
	// BinaryOp
	InspectExpr(`(a + b))
	// Assign
	InspectExpr(`(a = b))
	// Root
	// Block
	InspectExpr(`{})
	// Lister
	InspectExpr(`[])
	// Iter
	InspectExpr(`())
	// Indexer
	InspectExpr(`a[])
	InspectExpr(`a[2])
	InspectExpr(`a[2, 3, 4])
	InspectExpr(`a[]:a:b:c)
	InspectExpr(`a[2]:a:b:c)
	InspectExpr(`a[2, 3, 4,]:a:b:c)
	// Caller
	InspectExpr(`a())
	InspectExpr(`a(2))
	InspectExpr(`a(2, 3, 4))
	InspectExpr(`a():a:b:c)
	InspectExpr(`a(2):a:b:c)
	InspectExpr(`a(2, 3, 4):a:b:c)
	InspectExpr(`a.b.c())
	InspectExpr(`a.b.c(2))
	InspectExpr(`a.b.c(2, 3, 4))
	InspectExpr(`a(2, 3, 4) b() c())
}

sys.Exit()

TestCase('PUnit') {
	f(`expr) = {
		Println('--------')
		Printf('f(`(%s))\n', expr)
		expr.PrintPUnit(strIndent = '  ')
	}
	f(a)
	f({a = 3})
	f(a + b)
	exprs = []
	exprs = [
		`{
			foo
		}
		`{
			foo
			bar
		}
		`{
			foo = 2
			bar = 'hello'
		}
		`{
			foo.bar
		}
		`{
			foo.bar = 3
		}
	]
	exprs.Each {|expr|
		Println('--------')
		expr.PrintPUnitWithLabel()
	}
}

TestCase('Property') {
	Expr.PrintPropSlots()
}

TestCase('Assignment') {
	Tester(`{[x] = [], [x]})
	Tester(`{[x] = [1], [x]})
	Tester(`{[a, b, c] = 1, [a, b, c]})
	Tester(`{[a, b, c] = [1], [a, b, c]})
	Tester(`{[a, b, c] = [1, 2], [a, b, c]})
	Tester(`{[a, b, c] = [1, 2, 3], [a, b, c]})
	Tester(`{[a, b, c] = [1, 2, 3, 4], [a, b, c]})
	X = struct {p1, p2, p3}
	x = X()
	Tester(`{[x.p1, x.p2, x.p3] = 1, [x.p1, x.p2, x.p3]})
	Tester(`{[x.p1, x.p2, x.p3] = [1], [x.p1, x.p2, x.p3]})
	Tester(`{[x.p1, x.p2, x.p3] = [1, 2], [x.p1, x.p2, x.p3]})
	Tester(`{[x.p1, x.p2, x.p3] = [1, 2, 3], [x.p1, x.p2, x.p3]})
	Tester(`{[x.p1, x.p2, x.p3] = [1, 2, 3, 4], [x.p1, x.p2, x.p3]})
	x = [nil, nil, nil]
	Tester(`{[x[0], x[1], x[2]] = 1, x})
	Tester(`{[x[0], x[1], x[2]] = [1], x})
	Tester(`{[x[0], x[1], x[2]] = [1, 2], x})
	Tester(`{[x[0], x[1], x[2]] = [1, 2, 3], x})
	Tester(`{[x[0], x[1], x[2]] = [1, 2, 3, 4], x})
}
