#!/usr/bin/env gurax
import(util.tester) {*}

TesterPerm(expr:Expr) = {
	try {
		tbl = expr.Eval()
		Println('----')
		Printf('%s .. %d : %s\n', expr, tbl.len, tbl):nomap
	} catch {|e|
		Printf('%s .. %s\n', expr, e.text)
	}
}

TestCase('PUnit') {
	exprs = [
		`[]
		`[1]
		`[1, 2, 3]
		`(foo = [])
		`(foo = [1])
		`(foo = [1, 2, 3])
		`foo[]
		`(foo[0])
		`(foo[0, 2])
		`(foo[0, 2, 6])
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('Property') {
	Tester(`List.__PropHandler__(`first))
	Tester(`List.__PropHandler__(`last))
	Tester(`List.__PropHandler__(`len))
	Tester(`List.__PropHandler__(`vtypeOfElem))
}

TestCase('Initializer') {
	Tester(`[3, 1, 4, 1, 5, 9, 2, 6])
}

TestCase('Get') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('List#len, List#first and List#last') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.len)
	Tester(`tbl.first)
	Tester(`tbl.last)
}

TestCase('List#vtypeOfELem') {
	Tester(`[].vtypeOfElem)
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem)
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
	Tester(`['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
}

TestCase('List#Add()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add([1, 2, 3]))
	Tester(`tbl.Add(4..9))
	Tester(`tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Add('a', 'b', 'c', 'd', 'e', 'f'))
}

TestCase('List#Append()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append([1, 2, 3]))
	Tester(`tbl.Append(4..9))
	Tester(`tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Append('a', 'b', 'c', 'd', 'e', 'f'))
	Tester(`tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]))
	Tester(`tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']))
}

TestCase('List#Clear()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.Clear())
}

TestCase('List#Erase()') {
	tbl = [0..20]
	Tester(`tbl)
	Tester(`tbl.Erase(0))
	Tester(`tbl.Erase(0, 1, 2, 3))
	Tester(`tbl.Erase(-1, -2, -3))
	Tester(`tbl.Erase(0, 2, 4, 6, 8))
}

TestCase('List#Get()') {
}

TestCase('List#Insert()') {
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 'hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, [1, 2, 3]))
	Tester(`tbl.Insert(3, 4..9))
	Tester(`tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f'))
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.Insert(-1, 3))
	Tester(`tbl.Insert(20, 3))
	Tester(`tbl.Insert(-20, 3))
}

TestCase('List#IsEmpty()') {
	Tester(`[].IsEmpty())
	Tester(`[1, 2, 3].IsEmpty())
}

TestCase('List#Put()') {
}

TestCase('List#Shift()') {
	x = [0..3]
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift():raise)
}

TestCase('List#Shuffle()') {
	rnd = Random(0)
	Tester(`(tbl = [0..99].Shuffle(rnd)))
}

TestCase('List#After()') {
}

TestCase('List#Align()') {
}

TestCase('List#And()') {
	Tester(`[].And())
	Tester(`[false].And())
	Tester(`[nil].And())
	Tester(`[true].And())
	Tester(`[false, false].And())
	Tester(`[false, true].And())
	Tester(`[true, false].And())
	Tester(`[true, true].And())
	Tester(`[true, true, true, true, true, true, true, true].And())
	Tester(`[true, true, true, true, true, true, false, true].And())
	Tester(`[0].And())
	Tester(`[0, 1, 2, 3].And())
	Tester(`[5].And())
	Tester(`[5, true].And())
	Tester(`[true, 5].And())
	Tester(`[true, true, true, 5].And())
	Tester(`[true, true, true, 5, false].And())
}

TestCase('List#ArgMax()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():last_index)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():indices)
}

TestCase('List#ArgMin()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():last_index)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():indices)
}

TestCase('List#Before()') {
}

TestCase('List#Combination()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(4):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(6):list)
}

TestCase('List#Contains()') {
}

TestCase('List#Count()') {
}

TestCase('List#Cycle()') {
}

TestCase('List#Each()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
	Tester(`tbl.Each { break })
	Tester(`tbl.Each { continue })
}

TestCase('List#Each():list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():list {|x| x})
	Tester(`tbl.Each():xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each():xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list { break })
	Tester(`tbl.Each():list { break(nil) })
	Tester(`tbl.Each():list { continue })
	Tester(`tbl.Each():list { continue(nil) })
	Tester(`tbl.Each():xlist { break })
	Tester(`tbl.Each():xlist { break(nil) })
	Tester(`tbl.Each():xlist { continue })
	Tester(`tbl.Each():xlist { continue(nil) })
}

TestCase('List#Each():iter') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`[tbl.Each():iter {|x| x}])
	Tester(`[tbl.Each():xiter {|x|
		if (x.StartsWith('t')) { x }
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	}])
	Tester(`[tbl.Each():xiter {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter { break }])
	Tester(`[tbl.Each():iter { break(nil) }])
	Tester(`[tbl.Each():iter { continue }])
	Tester(`[tbl.Each():iter { continue(nil) }])
	Tester(`[tbl.Each():xiter { break }])
	Tester(`[tbl.Each():xiter { break(nil) }])
	Tester(`[tbl.Each():xiter { continue }])
	Tester(`[tbl.Each():xiter { continue(nil) }])
}

TestCase('List#Filter()') {
}

TestCase('List#Find()') {
}

TestCase('List#Flatten()') {
}

TestCase('List#Fold()') {
}

TestCase('List#Format()') {
}

TestCase('List#Head()') {
}

TestCase('List#Join()') {
	Tester(`[].Join()):quote
	Tester(`[].Join(',')):quote
	Tester(`['abc'].Join()):quote
	Tester(`['abc'].Join(',')):quote
	Tester(`['abc', 'def'].Join()):quote
	Tester(`['abc', 'def'].Join(',')):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Join()):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Join(',')):quote
}

TestCase('List#Joinb()') {
}

TestCase('List#Map()') {
}

TestCase('List#Max()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Max())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Max())
}

TestCase('List#Mean()') {
	Tester(`[].Mean())
	Tester(`[0].Mean())
	Tester(`[0, 1].Mean())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Mean())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Mean())
}

TestCase('List#Min()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Min())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Min())
}

TestCase('List#NilTo()') {
}

TestCase('List#Offset()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`[tbl.Offset(0)])
	Tester(`[tbl.Offset(1)])
	Tester(`[tbl.Offset(2)])
	Tester(`[tbl.Offset(3)])
	Tester(`[tbl.Offset(10)])
	Tester(`[tbl.Offset(11)])
	Tester(`[tbl.Offset(11):raise])
	Tester(`[tbl.Offset(-1)])
}

TestCase('List#Or()') {
	Tester(`[].Or())
	Tester(`[false].Or())
	Tester(`[nil].Or())
	Tester(`[true].Or())
	Tester(`[false, false].Or())
	Tester(`[false, true].Or())
	Tester(`[true, false].Or())
	Tester(`[true, true].Or())
	Tester(`[true, true, true, true, true, true, true, true].Or())
	Tester(`[true, true, true, true, true, true, false, true].Or())
	Tester(`[0].Or())
	Tester(`[0, 1, 2, 3].Or())
	Tester(`[5].Or())
	Tester(`[5, true].Or())
	Tester(`[true, 5].Or())
	Tester(`[true, true, true, 5].Or())
	Tester(`[true, true, true, 5, false].Or())
}

TestCase('List#Pack()') {
}

TestCase('List#Permutation()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation():list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(6):list)
}

TestCase('List#PingPong()') {
}

TestCase('List#Print()') {
}

TestCase('List#Printf()') {
}

TestCase('List#Println()') {
}

TestCase('List#Prod()') {
}

TestCase('List#Rank()') {
}

TestCase('List#Reduce()') {
}

TestCase('List#Replace()') {
}

TestCase('List#Reverse()') {
}

TestCase('List#RoundOff()') {
}

TestCase('List#RunLength()') {
}

TestCase('List#Since()') {
}

TestCase('List#Skip()') {
}

TestCase('List#SkipNil()') {
}

TestCase('List#Sort()') {
	words100 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen',
		'demonic', 'horn', 'motion' 'whip', 'rampant', 'bruise', 'religion', 'ignore',
		'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic'
		'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore'
		'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile'
		'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy'
		'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable'
		'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply'
		'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired'
		'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam'
		'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal'
		'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle'
	]
	words10 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining'
	]
	Tester(`words100.Sort())
	Tester(`words100.Sort(`ascend))
	Tester(`words100.Sort(`descend))
	Tester(`words100.Sort(&{$a < $b}))
	Tester(`words100.Sort(&{$a > $b}))
	Tester(`words100.Sort(&{$a.last < $b.last}))
	Println(words100.Sort(&{$a.len < $b.len}))
	Println(words100.Sort(&{$a.len > $b.len}))
	Tester(`words10.Sort(`ascend, [0..9]))
	Tester(`words10.Sort(`ascend, [9..0]))
	Tester(`words10.Sort(`descend, [0..9]))
	Tester(`words10.Sort(`descend, [9..0]))
	Tester(`words10.Sort(&{$a < $b}, [9..0]))
	Tester(`words10.Sort(&{$a > $b}, [9..0]))
	Tester(`words100.Sort(`ascend, [0..99]))
	Tester(`words100.Sort(`ascend, [99..0]))
}

TestCase('List#Std()') {
}

TestCase('List#Sum()') {
	Tester(`[].Sum())
	Tester(`[0].Sum())
	Tester(`[0, 1].Sum())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Sum())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Sum())
}

TestCase('List#Tail()') {
}

TestCase('List#Until()') {
}

TestCase('List#Var()') {
}

TestCase('List#While()') {
}

TestCase('List |+| List') {
	Tester(`([] |+| []))
	Tester(`([1] |+| []))
	Tester(`([] |+| [2]))
	Tester(`([1] |+| [2]))
	Tester(`([1, 2, 3, 4] |+| [5, 6, 7, 8]))
	Tester(`([[1, 2], [3, 4]] |+| [[5, 6], [7, 8]]))
}
