#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`[]
		`[1]
		`[1, 2, 3]
		`(foo = [])
		`(foo = [1])
		`(foo = [1, 2, 3])
		`foo[]
		`(foo[0])
		`(foo[0, 2])
		`(foo[0, 2, 6])
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('Property') {
	Tester(`List.__PropHandler__(`len))
	Tester(`List.__PropHandler__(`vtypeOfElem))
}

TestCase('Initializer') {
	Tester(`[3, 1, 4, 1, 5, 9, 2, 6])
}

TestCase('Get') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('List#len') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.len)
}

TestCase('List#vtypeOfELem') {
	Tester(`[].vtypeOfElem)
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem)
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
	Tester(`['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
}

TestCase('Each') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
}
TestCase('Each with :list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():list {|x| x})
	Tester(`tbl.Each():xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each():xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
}
