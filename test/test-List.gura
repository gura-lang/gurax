#!/usr/bin/env gurax
import(util.tester) {*}

TesterPerm(expr as Expr) = {
	try {
		tbl = expr.Eval()
		Println('----')
		Printf('%s .. %d : %s\n', expr, tbl.len, tbl):noMap
	} catch {|e|
		Printf('%s .. %s\n', expr, e.text)
	}
}

TestCase('PUnit') {
	exprs = [
		`[]
		`[1]
		`[1, 2, 3]
		`(foo = [])
		`(foo = [1])
		`(foo = [1, 2, 3])
		`foo[]
		`(foo[0])
		`(foo[0, 2])
		`(foo[0, 2, 6])
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Property') {
	List.PrintPropSlots()
}

TestCase('Initializer') {
	Tester(`[3, 1, 4, 1, 5, 9, 2, 6])
	Tester(`[{1, 2}, {3, 4, {5, 6}}, {7, 8}])
	Tester(`@{{1, 2}, {3, 4, {5, 6}}, {7, 8}})
	Person = struct {
		name as String, email as String, age as Number
		ToString() = Format('%s, %s, %d', this.name, this.email, this.age)
	}
	people = @(Person) {
		{ 'hayasaka hiroko',	'hayasaka_hiroko@example.com',	33	},
		{ 'hannda takashi',		'hannda_takashi@example.com',	75	},
		{ 'honma masahiko',		'honma_masahiko@example.com',	46	},
		{ 'kawahata nana',		'kawahata_nana@example.com',	47	},
	}
	Println(people::ToString()):noMap
	f(a, b, c, d, e, f, g) = a + b + c + d + e + f + g
	Tester(`@(f) {
		{1, 2, 3, 4, 5, 6, 7},
		{3, 1, 4, 1, 5, 9, 2},
		{1, 4, 1, 4, 2, 1, 3},
		{1, 7, [3, 2, 0]*, 5, 0},
		[2, 2, 3, 6, 0, 6, 7]*,
		{[2, 2, 3, 6, 0, 6, 7]*},
	})
	Tester(`@(f) {{1, 2, 3}})
	Tester(`@(f) {{1, 2, 3, 4, 5, 6, 7, 8}})
	g(a) = a * a
	Tester(`@(g) {3, 1, {4}, 1, 5, {9}, 2, 6})
}

TestCase('Element expansion') {
	Tester(`[[0, 1, 2, 3]*])
	Tester(`[[0, 1, 2, 3]*, [4, 5, 6, 7]*, [8, 9, 10, 11]*])
	Tester(`[Range(4)*])
	Tester(`[Range(4)*, Range(4, 8)*, Range(8, 12)*])
	Tester(`[@int([0, 1, 2, 3])*])
	Tester(`[@int([0, 1, 2, 3])*, @int([4, 5, 6, 7])*, @int([8, 9, 10, 11])*])
}

TestCase('IndexGet') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl[])
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('IndexSet') {
	tbl = [0..10]
	Tester(`tbl)
	Tester(`(tbl[0] = 99))
	Tester(`(tbl[10] = 99))
	Tester(`(tbl[-1] = 99))
	Tester(`(tbl[11] = 99))
	Tester(`tbl)
}

TestCase('IndexOpApply') {
	tbl = [0..10]
	Tester(`tbl)
	Tester(`(tbl[0] += 99))
	Tester(`(tbl[10] += 99))
	Tester(`(tbl[-1] += 99))
	Tester(`(tbl[11] += 99))
	Tester(`tbl)
}

TestCase('IndexSet multiple') {
	x = Dim(32)
	x[0] = 3
	Tester(`x)
	x[1..8] = 6
	Tester(`x)
	x[9..20] = 3..
	Tester(`x)
	x[[21..25]] = 7
	Tester(`x)
	x[[26..31]] = 3..
	Tester(`x)
}

TestCase('IndexGet multiple') {
	x = Chr(Ord('A')..Ord('Z')):list
	Tester(`x)
	Tester(`x[0])
	Tester(`x[13])
	Tester(`x[25])
	Tester(`x[0..25])
	Tester(`x[0..])
	Tester(`x[13..])
	Tester(`x[[0, 1, 2, 3]])
	Tester(`x[0, 1, 2, 3, 22, 23, 24, 25])
	Tester(`x[0..3, 22..25])
	Tester(`x[[0, 1, 2, 3], [22, 23, 24, 25]])
}

TestCase('Expansion') {
	Tester(`[1, 2, 3, [4, [5, 6, 7]], 8, 9, 10])
	Tester(`[1, 2, 3, [4, [5, 6, 7]*]*, 8, 9, 10])
	Tester(`[1, 2, 3, [4, [5, 6, 7].Each()], 8, 9, 10])
	Tester(`[1, 2, 3, [4, [5, 6, 7].Each()*]*, 8, 9, 10])
	Tester(`[1 .. 10])
	Tester(`[Range(10), Range(10, 20)])
	Tester(`[Range(10)*, Range(10, 20)*])
}

TestCase('List#len, List#first and List#last') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.len)
	Tester(`tbl.first)
	Tester(`tbl.last)
}

TestCase('List#vtypeOfElem') {
	Tester(`[].vtypeOfElem)
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem)
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
	Tester(`['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
}

TestCase('List#tuple') {
	Tester(`[].tuple)
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].tuple)
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].tuple)
	Tester(`['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].tuple)
}

TestCase('List#Add()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add([1, 2, 3]))
	Tester(`tbl.Add(4..9))
	Tester(`tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Add('a', 'b', 'c', 'd', 'e', 'f'))
}

TestCase('List#Append()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append([1, 2, 3]))
	Tester(`tbl.Append(4..9))
	Tester(`tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Append('a', 'b', 'c', 'd', 'e', 'f'))
	Tester(`tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]))
	Tester(`tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']))
}

TestCase('List#Clear()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.Clear())
}

TestCase('List#Erase()') {
	tbl = [0..20]
	Tester(`tbl)
	Tester(`tbl.Erase(0))
	Tester(`tbl.Erase(0, 1, 2, 3))
	Tester(`tbl.Erase(-1, -2, -3))
	Tester(`tbl.Erase(0, 2, 4, 6, 8))
}

TestCase('List#Get()') {
}

TestCase('List#Insert()') {
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 'hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, [1, 2, 3]))
	Tester(`tbl.Insert(3, 4..9))
	Tester(`tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f'))
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.Insert(-1, 3))
	Tester(`tbl.Insert(20, 3))
	Tester(`tbl.Insert(-20, 3))
	tbl = []
	Tester(`tbl.Insert(0, 3))
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.Insert(5, 3))
}

TestCase('List#IsEmpty()') {
	Tester(`[].IsEmpty())
	Tester(`[1, 2, 3].IsEmpty())
}

TestCase('List#Put()') {
}

TestCase('List#Shift()') {
	x = [0..3]
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift())
	Tester(`x.Shift():raise)
}

TestCase('List#Shuffle()') {
	rnd = Random(0)
	Tester(`(tbl = [0..99].Shuffle(rnd)))
}

TestCase('List#After()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.After(&{$i < 0}):list)
	Tester(`x.After(x < 0):list)
	Tester(`x.After(&{$i < 0}).Offset(1):list)
	Tester(`x.After(x < 0).Offset(1):list)
}

TestCase('List#Align()') {
	Tester(`[0..5].Align(10):list)
	Tester(`[0..5].Align(3):list)
	Tester(`[0..5].Align(10, 0):list)
}

TestCase('List#And()') {
	Tester(`[].And())
	Tester(`[false].And())
	Tester(`[nil].And())
	Tester(`[true].And())
	Tester(`[false, false].And())
	Tester(`[false, true].And())
	Tester(`[true, false].And())
	Tester(`[true, true].And())
	Tester(`[true, true, true, true, true, true, true, true].And())
	Tester(`[true, true, true, true, true, true, false, true].And())
	Tester(`[0].And())
	Tester(`[0, 1, 2, 3].And())
	Tester(`[5].And())
	Tester(`[5, true].And())
	Tester(`[true, 5].And())
	Tester(`[true, true, true, 5].And())
	Tester(`[true, true, true, 5, false].And())
}

TestCase('List#ArgMax()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():lastIndex)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():indices)
}

TestCase('List#ArgMin()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():lastIndex)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():indices)
}

TestCase('List#Before()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Before(&{$i < 0}):list)
	Tester(`x.Before(x < 0):list)
	Tester(`x.Before(&{$i < 0}).Offset(1):list)
	Tester(`x.Before(x < 0).Offset(1):list)
}

TestCase('List#Combination()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(4):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Combination(6):list)
}

TestCase('List#Contains()') {
	Tester(`([1, 2, 3, 4, 5].Contains(1)))
	Tester(`([1, 2, 3, 4, 5].Contains(6)))
	Tester(`([`apple, `grape, `banana].Contains(`apple)))
	Tester(`([`apple, `grape, `banana].Contains(`kiwi)))
	Tester(`([`apple, `grape, `banana].Contains('apple'.ToSymbol())))
	Tester(`([`apple, `grape, `banana].Contains('kiwi'.ToSymbol())))
}

TestCase('List#Count()') {
	Tester(`[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].Count(3))
}

TestCase('List#CountFalse()') {
	Tester(`[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].CountFalse())
}

TestCase('List#CountIf()') {
	Tester(`[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].CountIf(&{$x > 5}))
}

TestCase('List#CountTrue()') {
	Tester(`[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].CountTrue())
}

TestCase('List#Cycle()') {
	Tester(`[].Cycle(20))
	Tester(`['A'].Cycle(20):list)
	Tester(`['A', 'B'].Cycle(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Cycle(20):list)
}

TestCase('List#Each()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
	Tester(`tbl.Each { break })
	Tester(`tbl.Each { continue })
}

TestCase('List#Each():list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():list {|x| x})
	Tester(`tbl.Each():xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each():xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list { break })
	Tester(`tbl.Each():list { break(nil) })
	Tester(`tbl.Each():list { continue })
	Tester(`tbl.Each():list { continue(nil) })
	Tester(`tbl.Each():xlist { break })
	Tester(`tbl.Each():xlist { break(nil) })
	Tester(`tbl.Each():xlist { continue })
	Tester(`tbl.Each():xlist { continue(nil) })
}

TestCase('List#Each():iter') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():iter {|x| x}[])
	Tester(`tbl.Each():xiter {|x|
		if (x.StartsWith('t')) { x }
	}[])
	Tester(`tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break }
		x
	}[])
	Tester(`tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	}[])
	Tester(`tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue }
		x
	}[])
	Tester(`tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	}[])
	Tester(`tbl.Each():xiter {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	}[])
	Tester(`tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each():iter { break }[])
	Tester(`tbl.Each():iter { break(nil) }[])
	Tester(`tbl.Each():iter { continue }[])
	Tester(`tbl.Each():iter { continue(nil) }[])
	Tester(`tbl.Each():xiter { break }[])
	Tester(`tbl.Each():xiter { break(nil) }[])
	Tester(`tbl.Each():xiter { continue }[])
	Tester(`tbl.Each():xiter { continue(nil) }[])
}

TestCase('List#Filter()') {
	x = [52, 23, 62, 75, 46, 10, 86, 80, 19, 34]
	Tester(`x)
	Tester(`x.Filter(&{$i % 2 == 0}):list)
	Tester(`x.Filter(x % 2 == 0):list)
	// http://msdn.microsoft.com/ja-jp/library/bb308959.aspx
	names = [
		'Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David'
	]
	Tester(`names)
	Println(names.Filter(&{$s.len == 5}).Sort():*Upper())
	x = [false, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.Filter():list)
}

TestCase('List#Find()') {
	names = [
		'Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David'
	]
	Tester(`names)
	Println(names.Find(&{$s.len == 6}))
	Println(names.Find(names:*len == 6))
	x = [false, nil, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.Find())
}

TestCase('List#Flatten()') {
	x = [[1, 2, 3, [4, [5, 6], 7], 8], [9, 10, 11], 12]
	Println(x):noMap
	Tester(`x.Flatten().Join(', '))
	Tester(`(x.Flatten():bfs).Join(', '))
	x = [1, 2, 1.., 3, 4]
	Tester(`x.Flatten():list)
}

TestCase('List#Fold()') {
	x = [0..19]
	Tester(`x.Fold(1).Join(', '))
	Tester(`x.Fold(5).Join(', '))
	Tester(`x.Fold(8).Join(', '))
	Tester(`(x.Fold(1):neat).Join(', '))
	Tester(`(x.Fold(5):neat).Join(', '))
	Tester(`(x.Fold(8):neat).Join(', '))
	Tester(`x.Fold(5, 1).Join(', '))
	Tester(`x.Fold(5, 2).Join(', '))
	Tester(`x.Fold(5, 3).Join(', '))
	Tester(`x.Fold(5, 4).Join(', '))
	Tester(`x.Fold(5, 5).Join(', '))
	Tester(`(x.Fold(5, 1):neat).Join(', '))
	Tester(`(x.Fold(5, 2):neat).Join(', '))
	Tester(`(x.Fold(5, 3):neat).Join(', '))
	Tester(`(x.Fold(5, 4):neat).Join(', '))
	Tester(`(x.Fold(5, 5):neat).Join(', '))
}

TestCase('List#Format()') {
}

TestCase('List#Head()') {
	Tester(`[].Head(10):list)
	Tester(`[0].Head(10):list)
	Tester(`[0..8].Head(10):list)
	Tester(`[0..9].Head(10):list)
	Tester(`[0..10].Head(10):list)
	Tester(`[0..100].Head(10):list)
}

TestCase('List#Join()') {
	Tester(`[].Join()):quote
	Tester(`[].Join(',')):quote
	Tester(`['abc'].Join()):quote
	Tester(`['abc'].Join(',')):quote
	Tester(`['abc', 'def'].Join()):quote
	Tester(`['abc', 'def'].Join(',')):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Join()):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Join(',')):quote
	Tester(`['abc', 'def', nil, 'ghi', nil, 'jkl', 'mno'].Join():nilVisible):quote
}

TestCase('List#Joinb()') {
}

TestCase('List#Map()') {
}

TestCase('List#Max()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Max())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Max())
}

TestCase('List#Mean()') {
	Tester(`[].Mean())
	Tester(`[0].Mean())
	Tester(`[0, 1].Mean())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Mean())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Mean())
}

TestCase('List#Min()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Min())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Min())
}

TestCase('List#NilTo()') {
}

TestCase('List#Offset()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Offset(0)[])
	Tester(`tbl.Offset(1)[])
	Tester(`tbl.Offset(2)[])
	Tester(`tbl.Offset(3)[])
	Tester(`tbl.Offset(10)[])
	Tester(`tbl.Offset(11)[])
	Tester(`[tbl.Offset(11):raise*])
	Tester(`tbl.Offset(12)[])
	Tester(`[tbl.Offset(12):raise*])
	Tester(`tbl.Offset(-1)[])
}

TestCase('List#Or()') {
	Tester(`[].Or())
	Tester(`[false].Or())
	Tester(`[nil].Or())
	Tester(`[true].Or())
	Tester(`[false, false].Or())
	Tester(`[false, true].Or())
	Tester(`[true, false].Or())
	Tester(`[true, true].Or())
	Tester(`[true, true, true, true, true, true, true, true].Or())
	Tester(`[true, true, true, true, true, true, false, true].Or())
	Tester(`[0].Or())
	Tester(`[0, 1, 2, 3].Or())
	Tester(`[5].Or())
	Tester(`[5, true].Or())
	Tester(`[true, 5].Or())
	Tester(`[true, true, true, 5].Or())
	Tester(`[true, true, true, 5, false].Or())
}

TestCase('List#Pack()') {
}

TestCase('List#Permutation()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation():list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Permutation(6):list)
}

TestCase('List#PingPong()') {
	Tester(`[].PingPong(20))
	Tester(`['A'].PingPong(20):list)
	Tester(`['A', 'B'].PingPong(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].PingPong(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky:list)
	Tester(`['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky@top:list)
	Tester(`['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky@btm:list)
}

TestCase('List#Print()') {
}

TestCase('List#Printf()') {
}

TestCase('List#Println()') {
}

TestCase('List#Prod()') {
}

TestCase('List#Rank()') {
}

TestCase('List#Reduce()') {
}

TestCase('List#Replace()') {
}

TestCase('List#Reverse()') {
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Reverse():list)
}

TestCase('List#RoundOff()') {
}

TestCase('List#RunLength()') {
}

TestCase('List#Since()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Since(&{$i < 0}):list)
	Tester(`x.Since(x < 0):list)
	Tester(`x.Since(&{$i < 0}).Offset(1):list)
	Tester(`x.Since(x < 0).Offset(1):list)
	x = [1, 2, 3, -1, 3, 1, 2, 3, 4, -1, 2, 1, 2]
	Tester(`x.Since(&{$i < 0}).Offset(1).While(&{$i >= 0}):list)
}

TestCase('List#Skip()') {
}

TestCase('List#SkipNil()') {
	x = [false, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.SkipNil():list)
}

TestCase('List#Sort()') {
	words100 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen',
		'demonic', 'horn', 'motion' 'whip', 'rampant', 'bruise', 'religion', 'ignore',
		'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic'
		'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore'
		'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile'
		'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy'
		'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable'
		'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply'
		'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired'
		'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam'
		'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal'
		'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle'
	]
	words10 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining'
	]
	Tester(`words100.Sort())
	Tester(`words100.Sort(`ascend))
	Tester(`words100.Sort(`descend))
	Tester(`words100.Sort(&{$a < $b}))
	Tester(`words100.Sort(&{$a > $b}))
	Tester(`words100.Sort(&{$a.last < $b.last}):stable)
	Println(words100.Sort(&{$a.len < $b.len}):stable)
	Println(words100.Sort(&{$a.len > $b.len}):stable)
	Tester(`words10.Sort(`ascend, [0..9]))
	Tester(`words10.Sort(`ascend, [9..0]))
	Tester(`words10.Sort(`descend, [0..9]))
	Tester(`words10.Sort(`descend, [9..0]))
	Tester(`words10.Sort(&{$a < $b}, [9..0]))
	Tester(`words10.Sort(&{$a > $b}, [9..0]))
	Tester(`words100.Sort(`ascend, [0..99]))
	Tester(`words100.Sort(`ascend, [99..0]))
}

TestCase('List#Std()') {
}

TestCase('List#Sum()') {
	Tester(`[].Sum())
	Tester(`[0].Sum())
	Tester(`[0, 1].Sum())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Sum())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Sum())
}

TestCase('List#Tail()') {
	Tester(`[0..100].Tail(0):list)
	Tester(`[0..100].Tail(1):list)
	Tester(`[0..100].Tail(10):list)
	Tester(`[0..4].Tail(5):list)
	Tester(`[0..4].Tail(6):list)
}

TestCase('List#Uniq()') {
	Tester(`[].Uniq():list)
	Tester(`[1].Uniq():list)
	Tester(`[1, 2, 3, 4, 5, 6, 7, 8, 9].Uniq():list)
	Tester(`[1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 9].Uniq():list)
	Tester(`['orange'].Uniq():list)
	Tester(`['orange', 'grape', 'apple', 'peach', 'melon', 'kiwi'].Uniq():list)
	Tester(`['orange', 'grape', 'grape', 'apple', 'apple', 'apple', 'peach', 'melon', 'kiwi', 'kiwi', 'kiwi'].Uniq():list)
}

TestCase('List#Until()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Until(&{$i < 0}):list)
	Tester(`x.Until(x < 0):list)
	Tester(`x.Until(&{$i < 0}).Offset(1):list)
	Tester(`x.Until(x < 0).Offset(1):list)
	x = 0..
	Tester(`x.IsInfinite())
	Tester(`x.Until(x == 100).IsInfinite())
	Tester(`x.Until(&{$i == 100}).IsInfinite())
}

TestCase('List#Var()') {
}

TestCase('List#While()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.While(&{$i >= 0}):list)
	Tester(`x.While(x >= 0):list)
	x = 0..
	Tester(`x.IsInfinite())
	Tester(`x.While(x < 100).IsInfinite())
	Tester(`x.While(&{$i < 100}).IsInfinite())
}

TestCase('Any in List') {
	Tester(`(1 in [1, 2, 3, 4, 5]))
	Tester(`(6 in [1, 2, 3, 4, 5]))
	Tester(`(`apple in [`apple, `grape, `banana]))
	Tester(`(`kiwi in [`apple, `grape, `banana]))
	Tester(`('apple'.ToSymbol() in [`apple, `grape, `banana]))
	Tester(`('kiwi'.ToSymbol() in [`apple, `grape, `banana]))
}

TestCase('List |+| List') {
	Tester(`([] |+| []))
	Tester(`([1] |+| []))
	Tester(`([] |+| [2]))
	Tester(`([1] |+| [2]))
	Tester(`([1, 2, 3, 4] |+| [5, 6, 7, 8]))
	Tester(`([[1, 2], [3, 4]] |+| [[5, 6], [7, 8]]))
}

TestCase('Any |+| List, List |+| Any') {
	Tester(`([] |+| 111))
	Tester(`(111 |+| []))
	Tester(`([1, 2, 3, 4] |+| 111))
	Tester(`(111 |+| [1, 2, 3, 4]))
	Tester(`(111 |+| [1, 2, 3, 4] |+| 222))
}

TestCase('List#__clone__()') {
	a = [1, 2, 3, 4]
	Tester(`a)
	b = a.__clone__()
	b.Add(5, 6, 7)
	Tester(`a)
	Tester(`b)
}
