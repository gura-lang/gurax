#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`[]
		`[1]
		`[1, 2, 3]
		`(foo = [])
		`(foo = [1])
		`(foo = [1, 2, 3])
		`foo[]
		`(foo[0])
		`(foo[0, 2])
		`(foo[0, 2, 6])
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('Property') {
	Tester(`List.__PropHandler__(`first))
	Tester(`List.__PropHandler__(`isEmpty))
	Tester(`List.__PropHandler__(`last))
	Tester(`List.__PropHandler__(`len))
	Tester(`List.__PropHandler__(`vtypeOfElem))
}

TestCase('Initializer') {
	Tester(`[3, 1, 4, 1, 5, 9, 2, 6])
}

TestCase('Get') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl[0])
	Tester(`tbl[1])
	Tester(`tbl[2])
	Tester(`tbl[10])
	Tester(`tbl[11])
	Tester(`tbl[0, 1]);
	Tester(`tbl[0, 1, 4, 10]);
}

TestCase('List#len, List#first and List#last') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.len)
	Tester(`tbl.first)
	Tester(`tbl.last)
}

TestCase('List#vtypeOfELem') {
	Tester(`[].vtypeOfElem)
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem)
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
	Tester(`['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem)
}

TestCase('List#isEmpty') {
	Tester(`[].isEmpty)
	Tester(`[1, 2, 3].isEmpty)
}

TestCase('List#Add()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Add([1, 2, 3]))
	Tester(`tbl.Add(4..9))
	Tester(`tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Add('a', 'b', 'c', 'd', 'e', 'f'))
}

TestCase('List#Append()') {
	tbl = []
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append(6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append('hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Append([1, 2, 3]))
	Tester(`tbl.Append(4..9))
	Tester(`tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Append('a', 'b', 'c', 'd', 'e', 'f'))
	Tester(`tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]))
	Tester(`tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']))
}

TestCase('List#Clear()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl)
	Tester(`tbl.Clear())
}

TestCase('List#Combination()') {
}

TestCase('List#Erase()') {
	tbl = [0..20]
	Tester(`tbl)
	Tester(`tbl.Erase(0))
	Tester(`tbl.Erase(0, 1, 2, 3))
	Tester(`tbl.Erase(-1, -2, -3))
	Tester(`tbl.Erase(0, 2, 4, 6, 8))
}

TestCase('List#Get()') {
}

TestCase('List#Insert()') {
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 3))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 6, 7, 8))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, 'hello'))
	Tester(`tbl.vtypeOfElem)
	Tester(`tbl.Insert(3, [1, 2, 3]))
	Tester(`tbl.Insert(3, 4..9))
	Tester(`tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9))
	Tester(`tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f'))
	tbl = [99, 99, 99, 99, 99]
	Tester(`tbl.Insert(-1, 3))
	Tester(`tbl.Insert(20, 3))
	Tester(`tbl.Insert(-20, 3))
}

TestCase('List#Permutation()') {
}

TestCase('List#Put()') {
}

TestCase('List#Shift()') {
}

TestCase('List#Shuffle()') {
}

TestCase('List#After()') {
}

TestCase('List#Align()') {
}

TestCase('List#And()') {
}

TestCase('List#ArgMax()') {
}

TestCase('List#ArgMin()') {
}

TestCase('List#Before()') {
}

TestCase('List#Contains()') {
}

TestCase('List#Count()') {
}

TestCase('List#Cycle()') {
}

TestCase('List#Each()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
}

TestCase('List#Each() with :list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():list {|x| x})
	Tester(`tbl.Each():xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each():xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
}

TestCase('List#Filter()') {
}

TestCase('List#Find()') {
}

TestCase('List#Flatten()') {
}

TestCase('List#Fold()') {
}

TestCase('List#Format()') {
}

TestCase('List#Head()') {
}

TestCase('List#Join()') {
}

TestCase('List#Joinb()') {
}

TestCase('List#Map()') {
}

TestCase('List#Max()') {
}

TestCase('List#Mean()') {
}

TestCase('List#Min()') {
}

TestCase('List#NilTo()') {
}

TestCase('List#Offset()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`[tbl.Offset(0)])
	Tester(`[tbl.Offset(1)])
	Tester(`[tbl.Offset(2)])
	Tester(`[tbl.Offset(3)])
	Tester(`[tbl.Offset(10)])
	Tester(`[tbl.Offset(11)])
	Tester(`[tbl.Offset(-1)])
}

TestCase('List#Or()') {
}

TestCase('List#Pack()') {
}

TestCase('List#PingPong()') {
}

TestCase('List#Print()') {
}

TestCase('List#Printf()') {
}

TestCase('List#Println()') {
}

TestCase('List#Prod()') {
}

TestCase('List#Rank()') {
}

TestCase('List#Reduce()') {
}

TestCase('List#Replace()') {
}

TestCase('List#Reverse()') {
}

TestCase('List#RoundOff()') {
}

TestCase('List#RunLength()') {
}

TestCase('List#Since()') {
}

TestCase('List#Skip()') {
}

TestCase('List#SkipNil()') {
}

TestCase('List#Sort()') {
}

TestCase('List#Std()') {
}

TestCase('List#Sum()') {
}

TestCase('List#Tail()') {
}

TestCase('List#Until()') {
}

TestCase('List#Var()') {
}

TestCase('List#While()') {
}
