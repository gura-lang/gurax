#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Empty') {
	A = class {}
	Tester(`A)
	a = A()
	Tester(`a)
	A {|a|
		Tester(`a)
	}
}

TestCase('Constructor') {
	A0 = class {
		__init__() = {}
	}
	Tester(`A0)
	A1 = class {
		__init__(v) = {}
	}
	Tester(`A1)
	Tester(`A1(3))
	A2 = class {
		__init__(v1, v2) = {}
	}
	Tester(`A2)
	Tester(`A2(3, 4))
	try {
		A3 = class {
			__init__() = 'hello'
		}
	} catch {|e|
		Println('Expected error occured: ', e.text)
	}
}

TestCase('Destructor') {
	A = class {
		name as String
		__init__(name as String):map = { this.name = name }
		__del__() = Printf('%s was destroyed\n', this.name)
	}
	Tester(`A)
	a = A('A')
	a = nil
}

TestCase('Property Declaration') {
	A = class {
		//--------
		a1
		a2 as Number
		a3 as String
		a4 = 3
		a5 = 'hello'
		a6 as Number = 3
		a7 as String = 'hello'
		a8:nil as Number = 3
		a9:nil as String = 'hello'
		//--------
		b1[]
		b2[] as Number
		b3[] as String
		b4[] = [3, 1, 4, 1, 5, 9]
		b5[] = ['apple', 'orange', 'grape']
		b6[] = [3, 1, 4, 'apple', 1, 6, 9]
		b7[] as Any = [3, 1, 4, 1, 6, 9]
		b8[] as Number = [3, 1, 4, 1, 5, 9]
		b9[] as String = ['apple', 'orange', 'grape']
		b10[]:nil as Number = [3, 1, 4, 1, 5, 9]
		b11[]:nil as String = ['apple', 'orange', 'grape']
		//--------
		c1:public
		c2:public as Number
		c3:public as String
		c4:public as Number = 3
		c5:public as String = 'hello'
		c6:nil:public as Number = 3
		c7:nil:public as String = 'hello'
		//--------
		d1[]:public
		d2[]:public as Number
		d3[]:public as String
		d4[]:public = [3, 1, 4, 1, 5, 9]
		d5[]:public = ['apple', 'orange', 'grape']
		d6[]:public = [3, 1, 4, 'apple', 1, 6, 9]
		d7[] as Any = [3, 1, 4, 1, 6, 9]
		d8[]:public as Number = [3, 1, 4, 1, 5, 9]
		d9[]:public as String = ['apple', 'orange', 'grape']
		d10[]:nil:public as Number = [3, 1, 4, 1, 5, 9]
		d11[]:nil:public as String = ['apple', 'orange', 'grape']
		//--------
		public {
			e1
			e2 as Number
			e3 as String
			e4 as Number = 3
			e5 as String = 'hello'
			e6:nil as Number = 3
			e7:nil as String = 'hello'
		}
		//--------
		public {
			f1[]
			f2[] as Number
			f3[] as String
			f4[] = [3, 1, 4, 1, 5, 9]
			f5[] = ['apple', 'orange', 'grape']
			f6[] = [3, 1, 4, 'apple', 1, 6, 9]
			f7[] as Any = [3, 1, 4, 1, 6, 9]
			f8[] as Number = [3, 1, 4, 1, 5, 9]
			f9[] as String = ['apple', 'orange', 'grape']
			f10[]:nil as Number = [3, 1, 4, 1, 5, 9]
			f11[]:nil as String = ['apple', 'orange', 'grape']
		}
	}
	Println('--------')
	Tester(`A.__propSlot__(`a1))
	Tester(`A.__propSlot__(`a2))
	Tester(`A.__propSlot__(`a3))
	Tester(`A.__propSlot__(`a4))
	Tester(`A.__propSlot__(`a5))
	Tester(`A.__propSlot__(`a6))
	Tester(`A.__propSlot__(`a7))
	Tester(`A.__propSlot__(`a8))
	Tester(`A.__propSlot__(`a9))
	Println('--------')
	Tester(`A.__propSlot__(`b1))
	Tester(`A.__propSlot__(`b2))
	Tester(`A.__propSlot__(`b3))
	Tester(`A.__propSlot__(`b4))
	Tester(`A.__propSlot__(`b5))
	Tester(`A.__propSlot__(`b6))
	Tester(`A.__propSlot__(`b7))
	Tester(`A.__propSlot__(`b8))
	Tester(`A.__propSlot__(`b9))
	Tester(`A.__propSlot__(`b10))
	Println('--------')
	Tester(`A.__propSlot__(`c1))
	Tester(`A.__propSlot__(`c2))
	Tester(`A.__propSlot__(`c3))
	Tester(`A.__propSlot__(`c4))
	Tester(`A.__propSlot__(`c5))
	Tester(`A.__propSlot__(`c6))
	Tester(`A.__propSlot__(`c7))
	Println('--------')
	Tester(`A.__propSlot__(`d1))
	Tester(`A.__propSlot__(`d2))
	Tester(`A.__propSlot__(`d3))
	Tester(`A.__propSlot__(`d4))
	Tester(`A.__propSlot__(`d5))
	Tester(`A.__propSlot__(`d6))
	Tester(`A.__propSlot__(`d7))
	Tester(`A.__propSlot__(`d8))
	Tester(`A.__propSlot__(`d9))
	Tester(`A.__propSlot__(`d10))
	Tester(`A.__propSlot__(`d11))
	Println('--------')
	Tester(`A.__propSlot__(`e1))
	Tester(`A.__propSlot__(`e2))
	Tester(`A.__propSlot__(`e3))
	Tester(`A.__propSlot__(`e4))
	Tester(`A.__propSlot__(`e5))
	Tester(`A.__propSlot__(`e6))
	Tester(`A.__propSlot__(`e7))
	Println('--------')
	Tester(`A.__propSlot__(`f1))
	Tester(`A.__propSlot__(`f2))
	Tester(`A.__propSlot__(`f3))
	Tester(`A.__propSlot__(`f4))
	Tester(`A.__propSlot__(`f5))
	Tester(`A.__propSlot__(`f6))
	Tester(`A.__propSlot__(`f7))
	Tester(`A.__propSlot__(`f8))
	Tester(`A.__propSlot__(`f9))
	Tester(`A.__propSlot__(`f10))
	Tester(`A.__propSlot__(`f11))
}

TestCase('Property Access') {
	A = class {
		public {
			a1
			n1 = 3
			n2:nil = 3
			n3 as Number
			n4 as Number = 3
			s1 = 'hello'
			s2:nil = 'hello'
			s3 as String
			s4 as String = 'hello'
		}
	}
	a = A()
	Tester(`a.a1)
	Tester(`a.n1)
	Tester(`a.n2)
	Tester(`a.n3)
	Tester(`a.n4)
	Tester(`a.s1)
	Tester(`a.s2)
	Tester(`a.s3)
	Tester(`a.s4)
	Tester(`a.xxx)
	Tester(`(a.a1 = 3))
	Tester(`(a.a1 = 'world'))
	Tester(`(a.a1 = nil))
	Tester(`(a.n1 = 3))
	Tester(`(a.n1 = 'world'))
	Tester(`(a.n1 = nil))
	Tester(`(a.n2 = 3))
	Tester(`(a.n2 = 'world'))
	Tester(`(a.n2 = nil))
	Tester(`(a.n3 = 3))
	Tester(`(a.n3 = 'world'))
	Tester(`(a.n3 = nil))
	Tester(`(a.n4 = 3))
	Tester(`(a.n4 = 'world'))
	Tester(`(a.n4 = nil))
	Tester(`(a.s1 = 3))
	Tester(`(a.s1 = 'world'))
	Tester(`(a.s1 = nil))
	Tester(`(a.s2 = 3))
	Tester(`(a.s2 = 'world'))
	Tester(`(a.s2 = nil))
	Tester(`(a.s3 = 3))
	Tester(`(a.s3 = 'world'))
	Tester(`(a.s3 = nil))
	Tester(`(a.s4 = 3))
	Tester(`(a.s4 = 'world'))
	Tester(`(a.s4 = nil))
}

TestCase('Constant Property') {
	A = class {
		public {
			a1:const
			n1:const = 3
			n2:nil:const = 3
			n3:const as Number
			n4:const as Number = 3
			s1:const = 'hello'
			s2:nil:const = 'hello'
			s3:const as String
			s4:const as String = 'hello'
		}
	}
	Tester(`A.__propSlot__(`a1))
	Tester(`A.__propSlot__(`n1))
	Tester(`A.__propSlot__(`n2))
	Tester(`A.__propSlot__(`n3))
	Tester(`A.__propSlot__(`n4))
	Tester(`A.__propSlot__(`s1))
	Tester(`A.__propSlot__(`s2))
	Tester(`A.__propSlot__(`s3))
	Tester(`A.__propSlot__(`s4))
	a = A()
	Tester(`a.a1)
	Tester(`a.n1)
	Tester(`a.n2)
	Tester(`a.n3)
	Tester(`a.n4)
	Tester(`a.s1)
	Tester(`a.s2)
	Tester(`a.s3)
	Tester(`a.s4)
	Tester(`(a.a1 = 3))
	Tester(`(a.n1 = 3))
	Tester(`(a.n2 = 3))
	Tester(`(a.n3 = 3))
	Tester(`(a.n4 = 3))
	Tester(`(a.s1 = 'xxxx'))
	Tester(`(a.s2 = 'xxxx'))
	Tester(`(a.s3 = 'xxxx'))
	Tester(`(a.s4 = 'xxxx'))
}

TestCase('Class Property') {
	A = class {
		p:static = 'hello'
	}
	B = class(A) {
	}
	Tester(`A.__propSlot__(`p))
	Tester(`B.__propSlot__(`p))
	a1 = A()
	a2 = A()
	b1 = B()
	b2 = B()
	Tester(`A.p)
	Tester(`a1.p)
	Tester(`a2.p)
	Tester(`b1.p)
	Tester(`b1.p)
	A.p = 'gura'
	Tester(`A.p)
	Tester(`a1.p)
	Tester(`a2.p)
	Tester(`b1.p)
	Tester(`b2.p)
	a1.p = 'world'
	Tester(`A.p)
	Tester(`a1.p)
	Tester(`a2.p)
	Tester(`b1.p)
	Tester(`b2.p)
	b1.p = '!!!!'
	Tester(`A.p)
	Tester(`a1.p)
	Tester(`a2.p)
	Tester(`b1.p)
	Tester(`b2.p)
}

TestCase('Dict as Property') {
	A = class {
		d = %{}
		ds:static = %{}
	}
	Println(A.__propSlot__(`d))
	a = A()
	Tester(`a.d)
	Tester(`A.ds)
	Tester(`a.ds)
	a.d['apple'] = 100
	a.d['grape'] = 200
	a.d['orange'] = 80
	Tester(`a.d)
	A.ds['apple'] = 100
	A.ds['grape'] = 200
	A.ds['orange'] = 80
	Tester(`A.ds)
	Tester(`a.ds)
	a.ds['grape'] = 230
	Tester(`A.ds)
	Tester(`a.ds)
}

TestCase('Error in Property Declaration') {
	Tester(`(A = class { a as Number = 'hello' }))
	Tester(`(A = class { a as Number = nil }))
	Tester(`(A = class { a[] = nil }))
	Tester(`(A = class { a[] = 3 }))
	Tester(`(A = class { a[] = [] }))
	Tester(`(A = class { a[] as Number = [] }))
	Tester(`(A = class { a[] as Number = ['h'] }))
}

TestCase('Example') {
	Person = class {
		name = ''
		age = 0
		__init__(name as String, age as Number) = {
			this.name = name
			this.age = age
		}
		Print() = Printf('%s is %d years old.\n', this.name, this.age)
	}
	Println(Person)
	Person('Taro', 10) {|p| p.Print()}
	Person('Hanako', 12) {|p| p.Print()}
}

TestCase('Inheritance') {
	A = class {
		p1 = 'A#p1'
		p2 = 'A#p2'
		p3 = 'A#p3'
		f1() = 'A#f1'
		f2() = 'A#f2'
		f3() = 'A#f3'
		FormatProp() = Format('%s %s %s', this.p1, this.p2, this.p3)
	}
	B = class(A) {
		p3 = 'B#p3'
		f3() = 'B#f3'
	}
	a = A(), b = B()
	Tester(`A.__propSlot__(`p1))
	Tester(`A.__propSlot__(`p2))
	Tester(`A.__propSlot__(`p3))
	Tester(`B.__propSlot__(`p1))
	Tester(`B.__propSlot__(`p2))
	Tester(`B.__propSlot__(`p3))
	Tester(`a.p1)
	Tester(`a.p2)
	Tester(`a.p3)
	Tester(`b.p1)
	Tester(`b.p2)
	Tester(`b.p3)
	Tester(`a.FormatProp())
	Tester(`b.FormatProp())
	Tester(`a.f1())
	Tester(`a.f2())
	Tester(`a.f3())
	Tester(`b.f1())
	Tester(`b.f2())
	Tester(`b.f3())
	a.p1 = 'A#p1-mod'
	Tester(`a.p1)
	b.p1 = 'B#p1-mod'
	Tester(`b.p1)
	b.p3 = 'B#p3-mod'
	Tester(`b.p3)
}

TestCase('Constructor Inheritance (1)') {
	Base = class {
		a
		__init__() = { this.a = 'A' }
	}
	Derive1 = class(Base) {
		b
		__init__() = { this.b = 'B' }
	}
	Derive2 = class(Derive1) {
		c
		__init__() = { this.c = 'C' }
		ToText() = Format('%s, %s, %s', this.a, this.b, this.c)
	}
	Tester(`Derive2().ToText())
}

TestCase('Constructor Inheritance (2)') {
	ext = 'EXT'
	Base = class {
		a, b, c, ext
		__init__(a, b, c) = {
			this.a = a, this.b = b, this.c = c, this.ext = ext
		}
		ToText() = Format('%s, %s, %s, %s', this.a, this.b, this.c, this.ext)
	}
	Derive1 = class(Base) {
		__init__(a, b, c) = {|a, b, c|}
	}
	Derive2 = class(Base) {
		__init__(b, c) = {|11, b, c|}
	}
	Derive3 = class(Base) {
		__init__(a) = {|a * 1, a * 2, a * 3|}
	}
	Tester(`Base(1, 2, 3).ToText())
	Tester(`Derive1(11, 22, 33).ToText())
	Tester(`Derive2(22, 33).ToText())
	Tester(`Derive3(111).ToText())
}

TestCase('Post-definition of method') {
	String.Test() = Format('%s:%d', this, this.len)
	Tester(`String.Test)
	Tester(`'Hello'.Test())
	A = struct { p1, p2, p3 }
	A.Test() = Format('%s %s %s', this.p1, this.p2, this.p3)
	Tester(`A.Test)
	a = A('first', 'second', 'third')
	Tester(`a.Test())
}

TestCase('Call to class method') {
	A = class {
		g():static = {
			Println('g()')
		}
		h() = {
			Println('h()')
		}
		f() = {
			Println('f()')
			g()
			Tester(`h())
		}
	}
	a = A()
	a.f()
}

TestCase('Constructor call with mapping') {
	A = class {
		x
		__init__(x):map = { this.x = x }
	}
	tbl = A([1, 2, 3]):list
	Println(tbl::x):noMap
}

TestCase('Destructor of inherited class') {
	A = class {
		__del__() = { Println('A destructor') }
	}
	B = class(A) {
		__del__() = { Println('B destructor') }
	}
	C = class(B) {
		__del__() = { Println('C destructor') }
	}
	Println('----')
	a = A()
	a = nil
	Println('----')
	b = B()
	b = nil
	Println('----')
	c = C()
	c = nil
}

TestCase('Inherits from String') {
	StringEx = class(String) {
		foo() = { Println('string=', this) }
	}
	StringEx().foo()
	StringEx {|str| str.foo()}
	StringEx('hoge').foo()
	StringEx('hoge') {|str| str.foo()}
}

TestCase('Default Constructor (1)') {
	A = class {
		v1 = 1, v2 = 2, v3 = 3
		f1() = { Printf('A.f1() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(A)
	B = class(A) {
		f2() = { Printf('B.f2() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(B)
	C = class(B) {
		f3() = { Printf('C.f3() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(C)
	Println('----')
	a = A()
	a.f1()
	A() {|a| a.f1()}
	Println('----')
	b = B()
	b.f1()
	b.f2()
	B() {|b| b.f1(), b.f2()}
	Println('----')
	c = C()
	c.f1()
	c.f2()
	c.f3()
	C() {|c| c.f1(), c.f2(), c.f3()}
}

TestCase('Default Constructor (2)') {
	A = class {
		v1, v2, v3
		__init__(v1, v2, v3) = { this.v1 = v1, this.v2 = v2, this.v3 = v3 }
		f1() = { Printf('A.f1() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(A)
	B = class(A) {
		f2() = { Printf('B.f2() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(B)
	C = class(B) {
		f3() = { Printf('C.f3() this=%s, v1=%d, v2=%d, v3=%d\n', this, this.v1, this.v2, this.v3) }
	}
	Println(C)
	Println('----')
	a = A(1, 2, 3)
	a.f1()
	A(1, 2, 3) {|a| a.f1()}
	Println('----')
	b = B(1, 2, 3)
	b.f1()
	b.f2()
	B(1, 2, 3) {|b| b.f1(), b.f2()}
	Println('----')
	c = C(1, 2, 3)
	c.f1()
	c.f2()
	c.f3()
	C(1, 2, 3) {|c| c.f1(), c.f2(), c.f3()}
}

TestCase('CallableMember') {
	A = class {
		f1() = {}
		f2() = {}
		f3 = Println
	}
	a = A()
	Tester(`a.f1)
	Tester(`a.f2)
	Tester(`a.f3)
}

TestCase('Cast to Tuple') {
	A = class {
		v1 = 'value1'
		v2 = 'value2'
		s1:static = 'static1'
		v3 = 'value3'
	}
	B = class(A) {
		s2:static = 'static2'
		v4 = 'value4'
		v5 = 'value5'
	}
	C = class(B) {
		v6 = 'value6'
		s3:static = 'static3'
		v7 = 'value7'
	}
	c = C()
	Tester(`(c as Tuple))
}