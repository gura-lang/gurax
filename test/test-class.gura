#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Empty') {
	A = class {}
	Tester(`A)
	a = A()
	Tester(`a)
	A {|a|
		Tester(`a)
	}
}

TestCase('Constructor') {
	A0 = class {
		__init__() = {}
	}
	Tester(`A0)
	A1 = class {
		__init__(v) = {}
	}
	Tester(`A1)
	Tester(`A1(3))
	A2 = class {
		__init__(v1, v2) = {}
	}
	Tester(`A2)
	Tester(`A2(3, 4))
}

TestCase('Destructor') {
	A = class {
		__del__() = Println('destructor')
	}
	a = A()
	a = nil
}

TestCase('Property Declaration') {
	A = class {
		//--------
		a1
		a2:Number
		a3:String
		a4 = 3
		a5 = 'hello'
		a6:Number = 3
		a7:String = 'hello'
		a8:Number:nil = 3
		a9:String:nil = 'hello'
		//--------
		b1[]
		b2[]:Number
		b3[]:String
		b4[] = [3, 1, 4, 1, 5, 9]
		b5[] = ['apple', 'orange', 'grape']
		b6[] = [3, 1, 4, 'apple', 1, 6, 9]
		b7[]:Any = [3, 1, 4, 1, 6, 9]
		b8[]:Number = [3, 1, 4, 1, 5, 9]
		b9[]:String = ['apple', 'orange', 'grape']
		b10[]:Number:nil = [3, 1, 4, 1, 5, 9]
		b11[]:String:nil = ['apple', 'orange', 'grape']
		//--------
		c1:public
		c2:Number:public
		c3:String:public
		c4:Number:public = 3
		c5:String:public = 'hello'
		c6:Number:nil:public = 3
		c7:String:nil:public = 'hello'
		//--------
		d1[]:public
		d2[]:Number:public
		d3[]:String:public
		d4[]:public = [3, 1, 4, 1, 5, 9]
		d5[]:public = ['apple', 'orange', 'grape']
		d6[]:public = [3, 1, 4, 'apple', 1, 6, 9]
		d7[]:Any = [3, 1, 4, 1, 6, 9]
		d8[]:Number:public = [3, 1, 4, 1, 5, 9]
		d9[]:String:public = ['apple', 'orange', 'grape']
		d10[]:Number:nil:public = [3, 1, 4, 1, 5, 9]
		d11[]:String:nil:public = ['apple', 'orange', 'grape']
		//--------
		public {
			e1
			e2:Number
			e3:String
			e4:Number = 3
			e5:String = 'hello'
			e6:Number:nil = 3
			e7:String:nil = 'hello'
		}
		//--------
		public {
			f1[]
			f2[]:Number
			f3[]:String
			f4[] = [3, 1, 4, 1, 5, 9]
			f5[] = ['apple', 'orange', 'grape']
			f6[] = [3, 1, 4, 'apple', 1, 6, 9]
			f7[]:Any = [3, 1, 4, 1, 6, 9]
			f8[]:Number = [3, 1, 4, 1, 5, 9]
			f9[]:String = ['apple', 'orange', 'grape']
			f10[]:Number:nil = [3, 1, 4, 1, 5, 9]
			f11[]:String:nil = ['apple', 'orange', 'grape']
		}
	}
	Println('--------')
	Tester(`A.__PropHandler__(`a1))
	Tester(`A.__PropHandler__(`a2))
	Tester(`A.__PropHandler__(`a3))
	Tester(`A.__PropHandler__(`a4))
	Tester(`A.__PropHandler__(`a5))
	Tester(`A.__PropHandler__(`a6))
	Tester(`A.__PropHandler__(`a7))
	Tester(`A.__PropHandler__(`a8))
	Tester(`A.__PropHandler__(`a9))
	Println('--------')
	Tester(`A.__PropHandler__(`b1))
	Tester(`A.__PropHandler__(`b2))
	Tester(`A.__PropHandler__(`b3))
	Tester(`A.__PropHandler__(`b4))
	Tester(`A.__PropHandler__(`b5))
	Tester(`A.__PropHandler__(`b6))
	Tester(`A.__PropHandler__(`b7))
	Tester(`A.__PropHandler__(`b8))
	Tester(`A.__PropHandler__(`b9))
	Tester(`A.__PropHandler__(`b10))
	Println('--------')
	Tester(`A.__PropHandler__(`c1))
	Tester(`A.__PropHandler__(`c2))
	Tester(`A.__PropHandler__(`c3))
	Tester(`A.__PropHandler__(`c4))
	Tester(`A.__PropHandler__(`c5))
	Tester(`A.__PropHandler__(`c6))
	Tester(`A.__PropHandler__(`c7))
	Println('--------')
	Tester(`A.__PropHandler__(`d1))
	Tester(`A.__PropHandler__(`d2))
	Tester(`A.__PropHandler__(`d3))
	Tester(`A.__PropHandler__(`d4))
	Tester(`A.__PropHandler__(`d5))
	Tester(`A.__PropHandler__(`d6))
	Tester(`A.__PropHandler__(`d7))
	Tester(`A.__PropHandler__(`d8))
	Tester(`A.__PropHandler__(`d9))
	Tester(`A.__PropHandler__(`d10))
	Tester(`A.__PropHandler__(`d11))
	Println('--------')
	Tester(`A.__PropHandler__(`e1))
	Tester(`A.__PropHandler__(`e2))
	Tester(`A.__PropHandler__(`e3))
	Tester(`A.__PropHandler__(`e4))
	Tester(`A.__PropHandler__(`e5))
	Tester(`A.__PropHandler__(`e6))
	Tester(`A.__PropHandler__(`e7))
	Println('--------')
	Tester(`A.__PropHandler__(`f1))
	Tester(`A.__PropHandler__(`f2))
	Tester(`A.__PropHandler__(`f3))
	Tester(`A.__PropHandler__(`f4))
	Tester(`A.__PropHandler__(`f5))
	Tester(`A.__PropHandler__(`f6))
	Tester(`A.__PropHandler__(`f7))
	Tester(`A.__PropHandler__(`f8))
	Tester(`A.__PropHandler__(`f9))
	Tester(`A.__PropHandler__(`f10))
	Tester(`A.__PropHandler__(`f11))
}

TestCase('Property Access') {
	A = class {
		public {
			a1
			n1 = 3
			n2:nil = 3
			n3:Number
			n4:Number = 3
			s1 = 'hello'
			s2:nil = 'hello'
			s3:String
			s4:String = 'hello'
		}
	}
	a = A()
	Tester(`a.a1)
	Tester(`a.n1)
	Tester(`a.n2)
	Tester(`a.n3)
	Tester(`a.n4)
	Tester(`a.s1)
	Tester(`a.s2)
	Tester(`a.s3)
	Tester(`a.s4)
	Tester(`a.xxx)
	Tester(`(a.a1 = 3))
	Tester(`(a.a1 = 'world'))
	Tester(`(a.a1 = nil))
	Tester(`(a.n1 = 3))
	Tester(`(a.n1 = 'world'))
	Tester(`(a.n1 = nil))
	Tester(`(a.n2 = 3))
	Tester(`(a.n2 = 'world'))
	Tester(`(a.n2 = nil))
	Tester(`(a.n3 = 3))
	Tester(`(a.n3 = 'world'))
	Tester(`(a.n3 = nil))
	Tester(`(a.n4 = 3))
	Tester(`(a.n4 = 'world'))
	Tester(`(a.n4 = nil))
	Tester(`(a.s1 = 3))
	Tester(`(a.s1 = 'world'))
	Tester(`(a.s1 = nil))
	Tester(`(a.s2 = 3))
	Tester(`(a.s2 = 'world'))
	Tester(`(a.s2 = nil))
	Tester(`(a.s3 = 3))
	Tester(`(a.s3 = 'world'))
	Tester(`(a.s3 = nil))
	Tester(`(a.s4 = 3))
	Tester(`(a.s4 = 'world'))
	Tester(`(a.s4 = nil))
}

TestCase('Constant Property') {
	A = class {
		public {
			a1:const
			n1:const = 3
			n2:nil:const = 3
			n3:Number:const
			n4:Number:const = 3
			s1:const = 'hello'
			s2:nil:const = 'hello'
			s3:String:const
			s4:String:const = 'hello'
		}
	}
	Tester(`A.__PropHandler__(`a1))
	Tester(`A.__PropHandler__(`n1))
	Tester(`A.__PropHandler__(`n2))
	Tester(`A.__PropHandler__(`n3))
	Tester(`A.__PropHandler__(`n4))
	Tester(`A.__PropHandler__(`s1))
	Tester(`A.__PropHandler__(`s2))
	Tester(`A.__PropHandler__(`s3))
	Tester(`A.__PropHandler__(`s4))
	a = A()
	Tester(`a.a1)
	Tester(`a.n1)
	Tester(`a.n2)
	Tester(`a.n3)
	Tester(`a.n4)
	Tester(`a.s1)
	Tester(`a.s2)
	Tester(`a.s3)
	Tester(`a.s4)
	Tester(`(a.a1 = 3))
	Tester(`(a.n1 = 3))
	Tester(`(a.n2 = 3))
	Tester(`(a.n3 = 3))
	Tester(`(a.n4 = 3))
	Tester(`(a.s1 = 'xxxx'))
	Tester(`(a.s2 = 'xxxx'))
	Tester(`(a.s3 = 'xxxx'))
	Tester(`(a.s4 = 'xxxx'))
}

TestCase('Error in Property Declaration') {
	Tester(`(A = class { a:Number = 'hello' }))
	Tester(`(A = class { a:Number = nil }))
	Tester(`(A = class { a[] = nil }))
	Tester(`(A = class { a[] = 3 }))
	Tester(`(A = class { a[] = [] }))
	Tester(`(A = class { a[]:Number = [] }))
	Tester(`(A = class { a[]:Number = ['h'] }))
}

TestCase('Example') {
	Person = class {
		name = ''
		age = 0
		__init__(name:String, age:Number) = {
			this.name = name
			this.age = age
		}
		Print() = Printf('%s is %d years old.\n', this.name, this.age)
	}
	Println(Person)
	Person('Taro', 10) {|p| p.Print()}
	Person('Hanako', 12) {|p| p.Print()}
}

TestCase('Inheritance') {
	A = class {
		p1 = 'A#p1'
		p2 = 'A#p2'
		p3 = 'A#p3'
		f1() = 'A#f1'
		f2() = 'A#f2'
		f3() = 'A#f3'
		FormatProp() = Format('%s %s %s', this.p1, this.p2, this.p3)
	}
	B = class(A) {
		p3 = 'B#p3'
		f3() = 'B#f3'
	}
	a = A(), b = B()
	Tester(`A.__PropHandler__(`p1))
	Tester(`A.__PropHandler__(`p2))
	Tester(`A.__PropHandler__(`p3))
	Tester(`B.__PropHandler__(`p1))
	Tester(`B.__PropHandler__(`p2))
	Tester(`B.__PropHandler__(`p3))
	Tester(`a.p1)
	Tester(`a.p2)
	Tester(`a.p3)
	Tester(`b.p1)
	Tester(`b.p2)
	Tester(`b.p3)
	Tester(`a.FormatProp())
	Tester(`b.FormatProp())
	Tester(`a.f1())
	Tester(`a.f2())
	Tester(`a.f3())
	Tester(`b.f1())
	Tester(`b.f2())
	Tester(`b.f3())
	a.p1 = 'A#p1-mod'
	Tester(`a.p1)
	b.p1 = 'B#p1-mod'
	Tester(`b.p1)
	b.p3 = 'B#p3-mod'
	Tester(`b.p3)
}
