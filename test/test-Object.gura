#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Member assignment') {
	A = struct {
		p1:String, p2:Number, p3:String
		Format() = Format('p1=%s p2=%d p3=%s', this.p1, this.p2, this.p3)
	}
	a = A('v1', 3, 'v3')
	Println(a.Format())
	a.p1 = 'v1-mod'
	Println(a.Format())
	a.p2 = 33
	Println(a.Format())
	a.p2 += 11
	Println(a.Format())
}

TestCase('Member mapping assignment') {
	X = struct {
		a = 0, b = 0, c = 0, d = 0
		Format() = Format('[a=%d,b=%d,c=%d,d=%d]', this.a, this.b, this.c, this.d)
	}
	x = Dim(10) {X()}
	Println(x:*Format().Join(','))
	x::a = 2
	Println(x:*Format().Join(','))
	x:&b = 0..
	Println(x:*Format().Join(','))
	x:&c = 7..9
	Println(x:*Format().Join(','))
	x.Offset(6):&d = 1..
	Println(x:*Format().Join(','))
}

TestCase('Object#__ToString__()') {
	Tester(`math.e.__ToString__())
	Tester(`true.__ToString__())
	Tester(`Printf.__ToString__())
	Tester(`%{}.__ToString__())
	//Tester(`%{`a => 'AAA', `b => 'BBB', `c => 'CCC'}.__ToString__())
	Tester(`[].__ToString__())
	Tester(`[1, 2, 3, 4, `foo, 'bar'].__ToString__())
	Tester(`'say \'hello\''.__ToString__())
	Tester(`'say \'hello\''.__ToString__():quoteString)
	Tester(`'say \"hello\"'.__ToString__():quoteString)
	Tester(`(`hello).__ToString__())
	Tester(`(`hello).__ToString__():quoteSymbol)
	Tester(`nil.__ToString__())
	Tester(`nil.__ToString__():nilVisible)
	Tester(`Color.black.__ToString__())
	Tester(`Color.black.__ToString__():unbracket)
	Tester(`(3.14).__ToString__():bracket)
	Tester(`'hello'.__ToString__():bracket)
	Tester(`[1, 2, 3, 4].__ToString__():bracket)
	Tester(`%{`a => 1, `b => 2, `c => 3}.__ToString__():bracket)
	//Tester(`(`hello).__ToString__():bracket)
	Tester(`(true).__ToString__():bracket)
	Tester(`nil.__ToString__():bracket)
	Tester(`(2/3r).__ToString__():bracket)
	Tester(`(2+3j).__ToString__():bracket)
}

TestCase('Object#IsInstanceOf()') {
	Tester(`math.e.IsInstanceOf(Number))
	Tester(`math.e.IsInstanceOf(Bool))
	Tester(`true.IsInstanceOf(Bool))
	Tester(`true.IsInstanceOf(Number))
	Tester(`Printf.IsInstanceOf(Function))
	Tester(`Printf.IsInstanceOf(Number))
	Tester(`%{}.IsInstanceOf(Dict))
	Tester(`%{}.IsInstanceOf(Number))
	Tester(`'hello'.IsInstanceOf(String))
	Tester(`'hello'.IsInstanceOf(Number))
}
