#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Initializer') {
	Tester(`%{
		'key0', 'value0', 'key1', 'value1', 'key2', 'value2', 'key3', 'value3', 'key4', 'value4',
		'key5', 'value5', 'key6', 'value6', 'key7', 'value7', 'key8', 'value8', 'key9', 'value9'})
	Tester(`%{
		{'key0', 'value0'}, {'key1', 'value1'}, {'key2', 'value2'}, {'key3', 'value3'}, {'key4', 'value4'},
		{'key5', 'value5'}, {'key6', 'value6'}, {'key7', 'value7'}, {'key8', 'value8'}, {'key9', 'value9'}})
	Tester(`%{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'})
}

TestCase('Property') {
	PrintPropSlots(Dict)
}

TestCase('IndexGet') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d['key0'])
	Tester(`d['key4'])
	Tester(`d['key9'])
	Tester(`d['key10'])
}

TestCase('IndexSet') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2'
	}
	Tester(`d)
	Tester(`(d['key3'] = 'value3'))
	Tester(`d)
}

TestCase('IndexOpApply') {
	d = %{
		'key0' => 0, 'key1' => 1, 'key2' => 2
	}
	Tester(`d)
	Tester(`(d['key0'] += 99))
	Tester(`(d['key1'] += 99))
	Tester(`(d['key2'] += 99))
	Tester(`(d['key3'] += 99))
	Tester(`d)
}

TestCase('Dict#Append()') {
	d1 = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	d2 = %{
		'keyA' => 'valueA', 'keyB' => 'valueB', 'keyC' => 'valueC', 'keyD' => 'valueD', 'keyE' => 'valueE',
		'key0' => 'value0-mod', 'key5' => 'value5-mod'
	}
	d = d1.Clone()
	Tester(`d.Append(d2))
	d = d1.Clone()
	Tester(`d.Append(d2):timid)
	d = d1.Clone()
	Tester(`d.Append(d2):strict)
}

TestCase('Dict#Clear()') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d)
	Tester(`d.Clear())
}

TestCase('Dict#Erase()') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d.Erase('key0'))
	Tester(`d.Erase('key3'))
	Tester(`d.Erase('key9'))
}

TestCase('Dict#Get()') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d.Get('key0'))
	Tester(`d.Get('key4'))
	Tester(`d.Get(['key0', 'key1', 'key2', 'key3']))
	Tester(`d.Get('keyA'))
	Tester(`d.Get('keyA'):raise)
	Tester(`d.Get('keyA', 'hoge'))
	Tester(`d.Get('keyA', [1, 2, 3]))
	Tester(`d.Get('keyA', [1, 2, 3]))
	Tester(`d.Get(['key0', 'key1', 'keyA'], 'hoge'))
	Tester(`d.Get(['key0', 'key1', 'keyA'], [1, 2, 3]))
}

TestCase('Dict#HasKey()') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d.HasKey('key0'))
	Tester(`d.HasKey('key4'))
	Tester(`d.HasKey('keyA'))
}

TestCase('Dict#IsEmpty()') {
	Tester(`%{'a' => 'b'}.IsEmpty())
	Tester(`%{}.IsEmpty())
}

TestCase('Dict#Put()') {
	d = %{'a' => 3, 'b' => 2, 'c' => 1}
	Tester(`d)
	Tester(`d.Put('a', 99):timid)
	Tester(`d.Put('e', 99):timid)
	Tester(`d.Put('f', 100).Put('g', 200).Put('h', 300))
	Tester(`d.Put('a', 999):overwrite)
	Tester(`d.Put('a', 888):strict)
	Tester(`d.Put([1, 2, 3], [4, 5, 6]))
}

TestCase('Dict#len and Dict#keys') {
	d = %{
		'key0' => 'value0', 'key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3', 'key4' => 'value4',
		'key5' => 'value5', 'key6' => 'value6', 'key7' => 'value7', 'key8' => 'value8', 'key9' => 'value9'
	}
	Tester(`d)
	Tester(`d.len)
	Tester(`d.keys)
}
