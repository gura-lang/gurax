#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`f()
		`f(1)
		`f(1, 2)
		`f(1, 2, 3, 4, 5)
		`f(1, 2, 3, 4, 5):attr1:attr2
		`f(1, 2) { f1(), f2() }
		`f(a)
		`f(a, b)
		`f(a, b, c, d, e)
		`f(a = 1)
		`f(a = 1, b = 2)
		`f(a = 1, b = 2, c = 3, d = 4, e = 5)
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('Property') {
	Tester(`Function.__PropHandler__(`expr))
	Tester(`Function.__PropHandler__(`name))
	Tester(`Function.__PropHandler__(`type))
}

TestCase('Default Value (1)') {
	f(a = 'A', b = 'B', c = 'C', d = 'D', e = 'E') = {
		Format('a=%s, b=%s, c=%s, d=%s, e=%s', a, b, c, d, e)
	}
	Tester(`f)
	Tester(`f())
	Tester(`f(a = 'A-mod'))
	Tester(`f(b = 'B-mod'))
	Tester(`f(c = 'C-mod'))
	Tester(`f(d = 'D-mod'))
	Tester(`f(e = 'E-mod'))
	Tester(`f('A-mod', 'B-mod', 'C-mod'))
	Tester(`f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod'))
}

TestCase('Default Value (2)') {
	f(a = 'A', b = 'B', c, d = 'D', e = 'E') = {
		Format('a=%s, b=%s, c=%s, d=%s, e=%s', a, b, c, d, e)
	}
	Tester(`f)
	Tester(`f())
	Tester(`f(a = 'A-mod', c = 'C'))
	Tester(`f(b = 'B-mod', c = 'C'))
	Tester(`f(c = 'C'))
	Tester(`f(d = 'D-mod', c = 'C'))
	Tester(`f(e = 'E-mod', c = 'C'))
	Tester(`f('A-mod', 'B-mod', 'C-mod'))
	Tester(`f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod'))
}

TestCase('Optional Argument') {
	f(a?, b?, c?) = Format('a=%s, b=%s, c=%s', a, b, c)
	Tester(`f)
	Tester(`f())
	Tester(`f(1))
	Tester(`f(1, 2))
	Tester(`f(1, 2, 3))
	Tester(`f(a = 1))
	Tester(`f(b = 2))
	Tester(`f(c = 3))
	Tester(`f(a = 1, c = 3))
}

TestCase('Property') {
	func() = {}
	Tester(`func.name)
	Tester(`func.type)
	Tester(`String.Find.type)
}

TestCase('return') {
	f() = return
	g() = return(3)
	Tester(`f())
	Tester(`g())
}

TestCase('Recursion') {
	Fact(n:Number) = if (n <= 1) { 1 } else { n * Fact(n - 1) }
	n = 20
	Printf('%d! = %d\n', n, Fact(n))
}

TestCase('nil attribute') {
	f(a:Number) = a
	g(a:Number:nil) = a
	Tester(`f)
	Tester(`g)
	Tester(`f(nil))
	Tester(`g(nil))
}

TestCase('dynamic_scope') {
	f_static() = Println('[static]  a = ', a)
	f_dynamic():dynamic_scope = Println('[dynamic] a = ', a)
	g_static() {`block} = block.Eval()
	g_dynamic():dynamic_scope {`block} = block.Eval()
	a = 'external'
	f_static()
	f_dynamic()
	g_static { Println('[static, block]  a = ', a) }
	g_dynamic { Println('[dynamic, block] a = ', a) }
	scope {
		a = 'local'
		f_static()
		f_dynamic()
		g_static { Println('[static, block]  a = ', a) }
		g_dynamic { Println('[dynamic, block] a = ', a) }
	}
}

TestCase('Named argument') {
	f1(dict%, arg%%) = {
		Println(dict)
		Println(arg)
	}
	f2(a, b, c, dict%, arg%%) = {
		Println(dict)
		Println(arg)
	}
	f1(d1 = 1, d2 = 2, d3 = 3)
	f2(10, 20, 30, d1 = 1, d2 = 2, d3 = 3)
	f2(a = 10, b = 20, c = 30, d1 = 1, d2 = 2, d3 = 3)
	f2(b = 10, c = 20, a = 30, d1 = 1, d2 = 2, d3 = 3)
}

TestCase('Cast of List Value') {
	f(a[]:Number) = Println(a):nomap
	g(a[]:String) = Println(a):nomap
	f([1, 2, 3])
	g([1, 2, 3])
}

TestCase('Quoted Value') {
	f(`x) = {
		Println(x)
		PrintPUnit(x)
	}
	f(3)
	f('str')
	f(v)
	f({v = 2})
	f(g(a, b, c))
}

TestCase('block') {
	f() {block} = block
	g() {`block} = block
	Tester(`f)
	Tester(`g)
	Tester(`f {|v1, v2| func(a, b, c) })
	Tester(`g {|v1, v2| func(a, b, c) })
}

TestCase('Property') {
	Fact(n:Number) = if (n <= 1) { 1 } else { n * Fact(n - 1) }
	Tester(`Fact.expr)
	Tester(`Fact.name)
	Tester(`Fact.type)
}

TestCase('Function()') {
	g(v*) = {'[' + v.Join(',') + ']'}
	Tester(`{f = Function {}, f})
	Tester(`{f = Function {}, f()})
	Tester(`{f = Function {g()}, f()})
	Tester(`{f = Function(v) {}, f})
	Tester(`{f = Function(v) {}, f(3)})
	Tester(`{f = Function(v) {g(v)}, f(3)})
	Tester(`{f = Function(v) {}, f()})
	Tester(`{f = Function(v[]) {}, f})
	Tester(`{f = Function(v[]) {}, f([1, 2, 3])})
	Tester(`{f = Function(v[]) {}, f()})
	Tester(`{f = Function(v1, v2, v3, v4, v5, v6) {}, f})
	Tester(`{f = Function(v1, v2, v3, v4, v5, v6) {}, f(1, 2, 3, 4, 5, 6)})
	Tester(`{f = Function(v1, v2, v3, v4, v5, v6) {g(v1, v2, v3, v4, v5, v6)}, f(1, 2, 3, 4, 5, 6)})
	Tester(`{f = Function(v1, v2, v3, v4, v5, v6) {}, f(3)})
}

TestCase('Function Creation by &{}') {
	g(b, c, d) = b + c + d
	Tester(`{f = &{}, f})
	Tester(`{f = &{}, f()})
	Tester(`{f = &{}, f(3)})
	Tester(`{f = &{$a}, f})
	Tester(`{f = &{$a}, f()})
	Tester(`{f = &{$a}, f(3)})
	Tester(`{f = &{$a}, f(3, 4)})
	Tester(`{f = &{$a + $b}, f})
	Tester(`{f = &{$a + $b}, f(3, 4)})
	Tester(`{f = &{$a + $b + $c + $d + $e}, f})
	Tester(`{f = &{$a + $b + $c + $d + $e}, f(3, 4, 5, 6, 7)})
	Tester(`{f = &{$a + $b * $c}, f})
	Tester(`{f = &{$a + $b * $c}, f(3, 4, 5)})
	Tester(`{f = &{$a * $b + $c}, f})
	Tester(`{f = &{$a * $b + $c}, f(3, 4, 5)})
	Tester(`{f = &{g($a, $b, $c) + $d}, f})
	Tester(`{f = &{g($a, $b, $c) + $d}, f(3, 4, 5, 6)})
	Tester(`{f = &{$a + g($b, $c, $d)}, f})
	Tester(`{f = &{$a + g($b, $c, $d)}, f(3, 4, 5, 6)})
	Tester(`{f = &{$a + $a}, f})
	Tester(`{f = &{$a + $a}, f(3)})
}
