#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Unary Operator') {
	Tester(`(-[]))
	Tester(`(-[1, 2, 3, 4, 5]))
	Tester(`[(-(1, 2, 3, 4, 5))*])
}

TestCase('Binary Operator') {
	Tester(`([] + []))
	Tester(`([1, 2, 3, 4, 5] + 3))
	Tester(`(3 + [1, 2, 3, 4, 5]))
	Tester(`([1, 2, 3, 4, 5] + []))
	Tester(`([] + [3, 4, 5, 6, 7]))
	Tester(`([1, 2, 3, 4, 5] + [3, 4, 5, 6, 7]))
	Tester(`([1, 2, 3, 4, 5] + [3, 4, 5]))
	Tester(`([1, 2, 3] + [3, 4, 5, 6, 7]))
	Tester(`[([1, 2, 3, 4, 5] + (3, 4, 5, 6, 7))*])
	Tester(`[((1, 2, 3, 4, 5) + [3, 4, 5, 6, 7])*])
	Tester(`[((1, 2, 3, 4, 5) + (3, 4, 5, 6, 7))*])
}

TestCase('Function') {
	f(x):map = x
	x = [1, 2, 3, nil, 5, 6, nil, 8, 9]
	Tester(`x)
	Tester(`f(x))
	Tester(`f(x):list)
	Tester(`f(x):xlist)
	Tester(`[f(x):iter*])
	Tester(`[f(x):xiter*])
}

TestCase(':flat attribute') {
	f(x):map = cond(x % 2 == 0, [x, x * 2, x * 3])
	x = [0, 1, 2, 3, 4, 5]
	Tester(`x)
	Tester(`f(x))
	Tester(`f(x):flat)
	Tester(`f(x):xlist:flat)
}

TestCase(':void attribute') {
	f(n:Number):void:map = Println(n)
	Println(f)
	f(1..10)
}
