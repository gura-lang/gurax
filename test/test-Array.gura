
#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	Array.PrintPropSlots()
}

TestCase('Array constructor (1)') {
	Tester(`Array(`bool, [true, false, false, true]).ToList())
	Tester(`Array(`int, [0]).ToList())
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5]]).ToList())
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5], [6, 7, 8]]).ToList())
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5], [5]]).ToList())
	Tester(`Array(`int, [3j]).ToList())
	Tester(`Array(`int, ['hello']).ToList())
	Tester(`Array(`complex, [[0, 1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j, 5 + 5j]]).ToList())
}

TestCase('Array constructor (2)') {
	Tester(`@int8())
	Tester(`@uint8())
	Tester(`@int16())
	Tester(`@uint16())
	Tester(`@int32())
	Tester(`@uint32())
	Tester(`@int64())
	Tester(`@uint64())
	Tester(`@half())
	Tester(`@float())
	Tester(`@double())
	Tester(`@complex())
	Tester(`@char())
	Tester(`@uchar())
	Tester(`@short())
	Tester(`@ushort())
	Tester(`@int())
	Tester(`@uint())
	Tester(`@long())
	Tester(`@ulong())
	Tester(`@int8(3, 4, 2))
	Tester(`@uint8(3, 4, 2))
	Tester(`@int16(3, 4, 2))
	Tester(`@uint16(3, 4, 2))
	Tester(`@int32(3, 4, 2))
	Tester(`@uint32(3, 4, 2))
	Tester(`@int64(3, 4, 2))
	Tester(`@uint64(3, 4, 2))
	Tester(`@half(3, 4, 2))
	Tester(`@float(3, 4, 2))
	Tester(`@double(3, 4, 2))
	Tester(`@complex(3, 4, 2))
	Tester(`@char(3, 4, 2))
	Tester(`@uchar(3, 4, 2))
	Tester(`@short(3, 4, 2))
	Tester(`@ushort(3, 4, 2))
	Tester(`@int(3, 4, 2))
	Tester(`@uint(3, 4, 2))
	Tester(`@long(3, 4, 2))
	Tester(`@ulong(3, 4, 2))
	Tester(`@int8([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint8([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int16([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint16([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int32([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint32([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int64([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint64([[1, 2, 3], [4, 5, 6]]))
	Tester(`@half([[1, 2, 3], [4, 5, 6]]))
	Tester(`@float([[1, 2, 3], [4, 5, 6]]))
	Tester(`@double([[1, 2, 3], [4, 5, 6]]))
	Tester(`@complex([[1, 2, 3], [4, 5, 6]]))
	Tester(`@char([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uchar([[1, 2, 3], [4, 5, 6]]))
	Tester(`@short([[1, 2, 3], [4, 5, 6]]))
	Tester(`@ushort([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint([[1, 2, 3], [4, 5, 6]]))
	Tester(`@long([[1, 2, 3], [4, 5, 6]]))
	Tester(`@ulong([[1, 2, 3], [4, 5, 6]]))
}

TestCase('Array#bytes/bytesPerElem/elemType/len') {
	elemTypes = [
		`bool, `int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64,
		`half, `float, `double, `complex, `char, `uchar, `short, `ushort, `int, `uint, `long, `ulong,
	]
	elemTypes.Each {|elemType|
		arr = Array(elemType, 10000)
		Printf('%-8s .. elemType=%-8s bytesPerElem=%d len=%d bytes=%d\n',
					elemType, arr.elemType, arr.bytesPerElem, arr.len, arr.bytes)
	}
}

TestCase('Array#p') {
	scope {
		Println('[int8]')
		arr = Array(`int8, 0x100)
		p = arr.p
		repeat (0x100) {|i| p.int8 = i - 0x80}
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint8]')
		arr = Array(`uint8, 0x100)
		p = arr.p
		repeat (0x100) {|i| p.uint8 = i }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int16]')
		arr = Array(`int16, 512)
		p = arr.p
		repeat (0x80) {|i| p.int16 = i - 0x8000 }
		repeat (0x80) {|i| p.int16 = i - 0x80 }
		repeat (0x80) {|i| p.int16 = i }
		repeat (0x80) {|i| p.int16 = i + 0x8000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint16]')
		arr = Array(`uint16, 512)
		p = arr.p
		repeat (0x100) {|i| p.uint16 = i }
		repeat (0x100) {|i| p.uint16 = i + 0x10000 - 0x100 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int32]')
		arr = Array(`int32, 512)
		p = arr.p
		repeat (0x80) {|i| p.int32 = i - 0x80000000 }
		repeat (0x80) {|i| p.int32 = i - 0x80 }
		repeat (0x80) {|i| p.int32 = i }
		repeat (0x80) {|i| p.int32 = i + 0x80000000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint32]')
		arr = Array(`uint32, 512)
		p = arr.p
		repeat (0x100) {|i| p.uint32 = i }
		repeat (0x100) {|i| p.uint32 = i + 0x100000000 - 256 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int64]')
		arr = Array(`int64, 512)
		p = arr.p
		repeat (0x80) {|i| p.int64 = i - 0x0010_0000_0000_0000 }
		repeat (0x80) {|i| p.int64 = i - 0x80 }
		repeat (0x80) {|i| p.int64 = i }
		repeat (0x80) {|i| p.int64 = i + 0x0010_0000_0000_0000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint64]')
		arr = Array(`uint64, 512)
		p = arr.p
		repeat (0x100) {|i| p.uint64 = i }
		repeat (0x100) {|i| p.uint64 = i + 0x0010_0000_0000_0000 - 256 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
}

TestCase('Array#Cast()') {
	arr = Array(`uint8, 0x100)
	arr.Inject(0..)
	arr.p.Dump()
	[`int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64, `float, `double].Each {|elemType|
		arr.Cast(elemType) {|arr|
			Printf('Casted:%s\n', arr.elemType)
			arr.p.Dump()
			Println(arr.Each().Join(','))
		}
	}
}

TestCase('Array#Each()') {
}

TestCase('Array#Inject()') {
}

TestCase('Array#ToList()') {
}

TestCase('Index access') {
	Array(`int16, 32) {|arr|
		repeat (32) {|i| arr[i] = i}
		Println((repeat (32):iter {|i| arr[i]}).Join(', '))
		Tester(`arr[0])
		Tester(`arr[1])
		Tester(`arr[2])
		Tester(`arr[31])
		Tester(`arr[-1])
		Tester(`arr[32])
	}
	Array(`int16, 3, 4) {|arr|
		arr.Inject(0..)
		Tester(`arr[0, 0])
		Tester(`arr[0, 1])
		Tester(`arr[0, 2])
		Tester(`arr[0, 3])
		Tester(`arr[1, 0])
		Tester(`arr[1, 1])
		Tester(`arr[1, 2])
		Tester(`arr[1, 3])
		Tester(`arr[2, 0])
		Tester(`arr[2, 1])
		Tester(`arr[2, 2])
		Tester(`arr[2, 3])
		Tester(`arr[0, 4])
		Tester(`arr[3, 0])
	}
}

TestCase('Set boolean') {
	Println('int8')
	@int8([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('uint8')
	@uint8([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('int16')
	@int16([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('uint16')
	@uint16([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('int32')
	@int32([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('uint32')
	@uint32([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('int64')
	@int64([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('uint64')
	@uint64([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('half')
	@half([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('float')
	@float([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('double')
	@double([false, true, false, true]) {|arr| arr.p.Dump()}
	Println('complex')
	@complex([false, true, false, true]) {|arr| arr.p.Dump()}
}
