#!/usr/bin/env gurax
import(util.tester) {*}

Number.format@float = '%.3f'
Complex.formatImag = '%.3f'
Complex.formatReal = '%.3f'

elemTypes = [
	`int8,  `uint8,  `int16,  `uint16,  `int32,  `uint32,  `int64,  `uint64,  `half,  `float,  `double,  `complex
]

TesterArray(expr as Expr):void = {
	try {
		rtn = expr.Eval()
		Printf('%s .. %s:%s\n', expr, rtn.elemType, rtn)
	} catch {|e|
		Printf('%s .. %s\n', expr, e.text)
	}
}

TestCase('Property') {
	Array.PrintPropSlots()
}

TestCase('Array constructor (1)') {
	Tester(`Array(`bool, [true, false, false, true]))
	Tester(`Array(`int, [0]))
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5]]))
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5], [6, 7, 8]]))
	Tester(`Array(`int, [[0, 1, 2], [3, 4, 5], [5]]))
	Tester(`Array(`int, [3j]))
	Tester(`Array(`int, ['hello']))
	Tester(`Array(`complex, [[0, 1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j, 5 + 5j]]))
}

TestCase('Array constructor (2)') {
	Tester(`@int8())
	Tester(`@uint8())
	Tester(`@int16())
	Tester(`@uint16())
	Tester(`@int32())
	Tester(`@uint32())
	Tester(`@int64())
	Tester(`@uint64())
	Tester(`@half())
	Tester(`@float())
	Tester(`@double())
	Tester(`@complex())
	Tester(`@char())
	Tester(`@uchar())
	Tester(`@short())
	Tester(`@ushort())
	Tester(`@int())
	Tester(`@uint())
	Tester(`@long())
	Tester(`@ulong())
	Tester(`@int8(3, 4, 2))
	Tester(`@uint8(3, 4, 2))
	Tester(`@int16(3, 4, 2))
	Tester(`@uint16(3, 4, 2))
	Tester(`@int32(3, 4, 2))
	Tester(`@uint32(3, 4, 2))
	Tester(`@int64(3, 4, 2))
	Tester(`@uint64(3, 4, 2))
	Tester(`@half(3, 4, 2))
	Tester(`@float(3, 4, 2))
	Tester(`@double(3, 4, 2))
	Tester(`@complex(3, 4, 2))
	Tester(`@char(3, 4, 2))
	Tester(`@uchar(3, 4, 2))
	Tester(`@short(3, 4, 2))
	Tester(`@ushort(3, 4, 2))
	Tester(`@int(3, 4, 2))
	Tester(`@uint(3, 4, 2))
	Tester(`@long(3, 4, 2))
	Tester(`@ulong(3, 4, 2))
	Tester(`@int8([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint8([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int16([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint16([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int32([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint32([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int64([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint64([[1, 2, 3], [4, 5, 6]]))
	Tester(`@half([[1, 2, 3], [4, 5, 6]]))
	Tester(`@float([[1, 2, 3], [4, 5, 6]]))
	Tester(`@double([[1, 2, 3], [4, 5, 6]]))
	Tester(`@complex([[1, 2, 3], [4, 5, 6]]))
	Tester(`@char([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uchar([[1, 2, 3], [4, 5, 6]]))
	Tester(`@short([[1, 2, 3], [4, 5, 6]]))
	Tester(`@ushort([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int([[1, 2, 3], [4, 5, 6]]))
	Tester(`@uint([[1, 2, 3], [4, 5, 6]]))
	Tester(`@long([[1, 2, 3], [4, 5, 6]]))
	Tester(`@ulong([[1, 2, 3], [4, 5, 6]]))
	Tester(`@int8(((1, 2, 3), (4, 5, 6))))
	Tester(`@uint8(((1, 2, 3), (4, 5, 6))))
	Tester(`@int16(((1, 2, 3), (4, 5, 6))))
	Tester(`@uint16(((1, 2, 3), (4, 5, 6))))
	Tester(`@int32(((1, 2, 3), (4, 5, 6))))
	Tester(`@uint32(((1, 2, 3), (4, 5, 6))))
	Tester(`@int64(((1, 2, 3), (4, 5, 6))))
	Tester(`@uint64(((1, 2, 3), (4, 5, 6))))
	Tester(`@half(((1, 2, 3), (4, 5, 6))))
	Tester(`@float(((1, 2, 3), (4, 5, 6))))
	Tester(`@double(((1, 2, 3), (4, 5, 6))))
	Tester(`@complex(((1, 2, 3), (4, 5, 6))))
	Tester(`@char(((1, 2, 3), (4, 5, 6))))
	Tester(`@uchar(((1, 2, 3), (4, 5, 6))))
	Tester(`@short(((1, 2, 3), (4, 5, 6))))
	Tester(`@ushort(((1, 2, 3), (4, 5, 6))))
	Tester(`@int(((1, 2, 3), (4, 5, 6))))
	Tester(`@uint(((1, 2, 3), (4, 5, 6))))
	Tester(`@long(((1, 2, 3), (4, 5, 6))))
	Tester(`@ulong(((1, 2, 3), (4, 5, 6))))
}

TestCase('Range Test') {
	Tester(`@int8([-0x80, 0x7f]))
	Tester(`@uint8([0x00, 0xff]))
	Tester(`@int16([-0x8000, 0x7fff]))
	Tester(`@uint16([0x0000, 0xffff]))
	Tester(`@int32([-0x80000000, 0x7fffffff]))
	Tester(`@uint32([0x00000000, 0xffffffff])[])
	//Tester(`@int64([])[])
	//Tester(`@uint64([]))
}

TestCase('Array#bytes/bytesPerElem/elemType/len') {
	elemTypes = [
		`bool, `int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64,
		`half, `float, `double, `complex, `char, `uchar, `short, `ushort, `int, `uint, `long, `ulong,
	]
	elemTypes.Each {|elemType|
		arr = Array(elemType, 10000)
		Printf('%-8s .. elemType=%-8s bytesPerElem=%d len=%d bytes=%d\n',
					elemType, arr.elemType, arr.bytesPerElem, arr.len, arr.bytes)
	}
}

TestCase('Array#nRows, Array#nCols') {
	Tester(`@float(3, 4, 5).nRows)
	Tester(`@float(3, 4, 5).nCols)
	Tester(`@float(4, 5).nRows)
	Tester(`@float(4, 5).nCols)
	Tester(`@float(5).nRows)
	Tester(`@float(5).nCols)
	Tester(`Array.Scalar(`float, 5).nRows)
	Tester(`Array.Scalar(`float, 5).nCols)
}

TestCase('Array#p') {
	scope {
		Println('[int8]')
		arr = Array(`int8, 0x100)
		p = arr.p
		repeat(0x100) {|i| p.int8 = i - 0x80}
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint8]')
		arr = Array(`uint8, 0x100)
		p = arr.p
		repeat(0x100) {|i| p.uint8 = i }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int16]')
		arr = Array(`int16, 512)
		p = arr.p
		repeat(0x80) {|i| p.int16 = i - 0x8000 }
		repeat(0x80) {|i| p.int16 = i - 0x80 }
		repeat(0x80) {|i| p.int16 = i }
		repeat(0x80) {|i| p.int16 = i + 0x8000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint16]')
		arr = Array(`uint16, 512)
		p = arr.p
		repeat(0x100) {|i| p.uint16 = i }
		repeat(0x100) {|i| p.uint16 = i + 0x10000 - 0x100 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int32]')
		arr = Array(`int32, 512)
		p = arr.p
		repeat(0x80) {|i| p.int32 = i - 0x80000000 }
		repeat(0x80) {|i| p.int32 = i - 0x80 }
		repeat(0x80) {|i| p.int32 = i }
		repeat(0x80) {|i| p.int32 = i + 0x80000000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint32]')
		arr = Array(`uint32, 512)
		p = arr.p
		repeat(0x100) {|i| p.uint32 = i }
		repeat(0x100) {|i| p.uint32 = i + 0x100000000 - 256 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[int64]')
		arr = Array(`int64, 512)
		p = arr.p
		repeat(0x80) {|i| p.int64 = i - 0x0010_0000_0000_0000 }
		repeat(0x80) {|i| p.int64 = i - 0x80 }
		repeat(0x80) {|i| p.int64 = i }
		repeat(0x80) {|i| p.int64 = i + 0x0010_0000_0000_0000 - 0x80 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
	scope {
		Println('[uint64]')
		arr = Array(`uint64, 512)
		p = arr.p
		repeat(0x100) {|i| p.uint64 = i }
		repeat(0x100) {|i| p.uint64 = i + 0x0010_0000_0000_0000 - 256 }
		arr.p.Dump()
		Println(arr.Each().Join(', '))
	}
}

TestCase('Array#shape') {
	Tester(`@float(1).shape)
	Tester(`@float(3).shape)
	Tester(`@float(3, 4).shape)
	Tester(`@float(3, 4, 5).shape)
	Tester(`@float(3, 4, 5, 6).shape)
	Tester(`Array.Scalar(`float, 3).shape)
}

TestCase('Array#Cast()') {
	arr = Array(`uint8, 0x100)
	arr.Inject(0..)
	arr.p.Dump()
	[`int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64, `float, `double].Each {|elemType|
		arr.Cast(elemType) {|arr|
			Printf('Casted:%s\n', arr.elemType)
			arr.p.Dump()
			Println(arr.Each().Join(','))
		}
	}
}

TestCase('Array#Each()') {
}

TestCase('Array#Inject()') {
	[`int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64, `float, `double].Each {|elemType|
		arr = Array(elemType, 3, 4, 5)
		arr.Inject(0..)
		Println(elemType)
		Println(arr)
	}
}

TestCase('Array#Reshape()') {
	arr = @float(3, 4, 2)
	arr.Inject(0..)
	Tester(`arr)
	Tester(`arr.Reshape(3, 8))
	Tester(`arr.Reshape(3, nil))
	Tester(`arr.Reshape(4, nil))
	Tester(`arr.Reshape(nil, 8))
	Tester(`arr.Reshape(nil))
	Tester(`arr.Reshape(5, nil))
	Tester(`arr.Reshape(nil, nil, 1))
	Tester(`arr.Reshape(3, 4, 1))
	Tester(`arr.Reshape(3, 4, 3))
}

TestCase('Array#ToList()') {
	Tester(`@int8([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uint8([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@int16([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uint16([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@int32([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uint32([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@int64([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uint64([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@half([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@float([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@double([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@complex([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@char([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uchar([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@short([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@ushort([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@int([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@uint([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@long([[1, 2, 3], [4, 5, 6]]).ToList())
	Tester(`@ulong([[1, 2, 3], [4, 5, 6]]).ToList())
}

TestCase('Index access') {
	Array(`int16, 32) {|arr|
		repeat(32) {|i| arr[i] = i}
		Println((repeat(32):iter {|i| arr[i]}).Join(', '))
		Tester(`arr[0])
		Tester(`arr[1])
		Tester(`arr[2])
		Tester(`arr[31])
		Tester(`arr[-1])
		Tester(`arr[32])
	}
	Array(`int16, 3, 4) {|arr|
		arr.Inject(0..)
		Tester(`arr[0, 0])
		Tester(`arr[0, 1])
		Tester(`arr[0, 2])
		Tester(`arr[0, 3])
		Tester(`arr[1, 0])
		Tester(`arr[1, 1])
		Tester(`arr[1, 2])
		Tester(`arr[1, 3])
		Tester(`arr[2, 0])
		Tester(`arr[2, 1])
		Tester(`arr[2, 2])
		Tester(`arr[2, 3])
		Tester(`arr[0, 4])
		Tester(`arr[3, 0])
	}
}

TestCase('Set boolean') {
	Println('int8')
	@int8([false, true, false, true]).p.Dump()
	Println('uint8')
	@uint8([false, true, false, true]).p.Dump()
	Println('int16')
	@int16([false, true, false, true]).p.Dump()
	Println('uint16')
	@uint16([false, true, false, true]).p.Dump()
	Println('int32')
	@int32([false, true, false, true]).p.Dump()
	Println('uint32')
	@uint32([false, true, false, true]).p.Dump()
	Println('int64')
	@int64([false, true, false, true]).p.Dump()
	Println('uint64')
	@uint64([false, true, false, true]).p.Dump()
	Println('half')
	@half([false, true, false, true]).p.Dump()
	Println('float')
	@float([false, true, false, true]).p.Dump()
	Println('double')
	@double([false, true, false, true]).p.Dump()
	Println('complex')
	@complex([false, true, false, true]).p.Dump()
}

TestCase('Rotation/translation matrix') {
	angle = math.pi / 6
	matRot = @float([[math.Cos(angle), -math.Sin(angle), 0], [math.Sin(angle), math.Cos(angle), 0], [0, 0, 1]])
	matTrans1 = @float([[1, 0, -5], [0, 1, -4], [0, 0, 1]])
	matTrans2 = @float([[1, 0, 5], [0, 1, 4], [0, 0, 1]])
	pt1 = @float([[math.Sqrt(3)], [1], [1]])
	pt2 = @float([[math.Sqrt(3) + 5], [1 + 4], [1]])
	Tester(`matRot)
	Tester(`matTrans1)
	Tester(`pt1)
	Tester(`pt2)
	Tester(`(matRot |.| pt1))
	Tester(`(matTrans1 |.| pt2))
	Tester(`(matRot |.| matTrans1 |.| pt2))
	Tester(`(matTrans2 |.| matRot |.| matTrans1 |.| pt2))
}

TestCase('Array#Trasnpose()') {
	Tester(`@float([[1, 2]]).Transpose())
	Tester(`@float([[1], [2]]).Transpose())
	Tester(`@float([[1, 2], [3, 4]]).Transpose())
	Tester(`@float([[1, 2, 3], [4, 5, 6]]).Transpose())
	Tester(`@float([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]).Transpose())
	Tester(`@float([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]).Transpose())
	x = @float([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
	Tester(`x)
	Tester(`x.Transpose())
	Tester(`x.Transpose(0, 1))
	Tester(`x.Transpose(1, 0))
	Tester(`x.Transpose(0))
	Tester(`x.Transpose(0, 1, 1))
	Tester(`x.Transpose(0, 2))
	x = @float([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[11, 22, 33], [44, 55, 66], [77, 88, 99]]])
	Tester(`x)
	Tester(`x.Transpose(0, 1, 2))
	Tester(`x.Transpose(2, 0, 1))
	Tester(`x.Transpose(1, 2, 0))
	Tester(`x.Transpose(0))
	Tester(`x.Transpose(0, 1))
	Tester(`x.Transpose(0, 1, 2, 0))
	Tester(`x.Transpose(0, 1, 3))
}

TestCase('Array#VerifyShape()') {
	Tester(`@float(3, 4, 5).VerifyShape(3))
	Tester(`@float(3, 4, 5).VerifyShape(3, 4))
	Tester(`@float(3, 4, 5).VerifyShape(3, 4, 5))
	Tester(`@float(3, 4, 5).VerifyShape(3, 4, 5, 6))
	Tester(`@float(3, 4, 5).VerifyShape(3, 3, 5))
}

TestCase('Operators') {
	opTbl = Operator.Binary([`+, `-, `*, `/])
	opTbl.Each {|op|
		elemTypes.Each {|elemTypeL|
			elemTypes.Each {|elemTypeR|
				arrayL = Array(elemTypeL, [[4, 8, 8], [7, 5, 1], [3, 4, 5]])
				arrayR = Array(elemTypeR, [[4, 1, 6], [6, 3, 2], [1, 5, 3]])
				arrayRtn = op(arrayL, arrayR)
				Printf('%-8s %s %-8s = %-8s %s\n', arrayL.elemType, op.symbol, arrayR.elemType, arrayRtn.elemType, arrayRtn[]):noMap
			}
		}
	}
}

TestCase('+Array') {
	//Tester(`(+@float(3, 4, 5)))
}

TestCase('-Array') {
	Tester(`(-@int8([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@int16([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@int32([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@int64([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@half([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@float([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@double([[1, -2, 3], [-4, 5, -6]])))
	Tester(`(-@complex([[1, -2, 3], [-4, 5, -6]])))
}

TestCase('Array + Array') {
	Tester(`(@int8([[4, 2, 1], [6, 3, 9]]) + @int8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint8([[4, 2, 1], [6, 3, 9]]) + @uint8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int16([[4, 2, 1], [6, 3, 9]]) + @int16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint16([[4, 2, 1], [6, 3, 9]]) + @uint16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int32([[4, 2, 1], [6, 3, 9]]) + @int32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint32([[4, 2, 1], [6, 3, 9]]) + @uint32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int64([[4, 2, 1], [6, 3, 9]]) + @int64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint64([[4, 2, 1], [6, 3, 9]]) + @uint64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@half([[4, 2, 1], [6, 3, 9]]) + @half([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@float([[4, 2, 1], [6, 3, 9]]) + @float([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@double([[4, 2, 1], [6, 3, 9]]) + @double([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@complex([[4, 2, 1], [6, 3, 9]]) + @complex([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int8([[4, 2, 1], [6, 3, 9]]) + @int8([[6, 1], [4, 3]])))
}

TestCase('Array - Array') {
	Tester(`(@int8([[4, 2, 1], [6, 3, 9]]) - @int8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int16([[4, 2, 1], [6, 3, 9]]) - @int16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int32([[4, 2, 1], [6, 3, 9]]) - @int32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int64([[4, 2, 1], [6, 3, 9]]) - @int64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@half([[4, 2, 1], [6, 3, 9]]) - @half([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@float([[4, 2, 1], [6, 3, 9]]) - @float([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@double([[4, 2, 1], [6, 3, 9]]) - @double([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@complex([[4, 2, 1], [6, 3, 9]]) - @complex([[6, 1, 4], [4, 3, 7]])))
}

TestCase('Array * Array') {
	Tester(`(@int8([[4, 2, 1], [6, 3, 9]]) * @int8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint8([[4, 2, 1], [6, 3, 9]]) * @uint8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int16([[4, 2, 1], [6, 3, 9]]) * @int16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint16([[4, 2, 1], [6, 3, 9]]) * @uint16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int32([[4, 2, 1], [6, 3, 9]]) * @int32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint32([[4, 2, 1], [6, 3, 9]]) * @uint32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int64([[4, 2, 1], [6, 3, 9]]) * @int64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint64([[4, 2, 1], [6, 3, 9]]) * @uint64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@half([[4, 2, 1], [6, 3, 9]]) * @half([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@float([[4, 2, 1], [6, 3, 9]]) * @float([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@double([[4, 2, 1], [6, 3, 9]]) * @double([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@complex([[4, 2, 1], [6, 3, 9]]) * @complex([[6, 1, 4], [4, 3, 7]])))
}

TestCase('Array / Array') {
	Tester(`(@int8([[4, 2, 1], [6, 3, 9]]) / @int8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint8([[4, 2, 1], [6, 3, 9]]) / @uint8([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int16([[4, 2, 1], [6, 3, 9]]) / @int16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint16([[4, 2, 1], [6, 3, 9]]) / @uint16([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int32([[4, 2, 1], [6, 3, 9]]) / @int32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint32([[4, 2, 1], [6, 3, 9]]) / @uint32([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@int64([[4, 2, 1], [6, 3, 9]]) / @int64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@uint64([[4, 2, 1], [6, 3, 9]]) / @uint64([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@half([[4, 2, 1], [6, 3, 9]]) / @half([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@float([[4, 2, 1], [6, 3, 9]]) / @float([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@double([[4, 2, 1], [6, 3, 9]]) / @double([[6, 1, 4], [4, 3, 7]])))
	Tester(`(@complex([[4, 2, 1], [6, 3, 9]]) / @complex([[6, 1, 4], [4, 3, 7]])))
}

TestCase('Array + Number') {
	Tester(`(@float([[1, 2, 3], [4, 5, 6]]) + 4)[])
}

TestCase('Number + Array') {
}

TestCase('Array + Complex') {
}

TestCase('Complex + Array') {
}

TestCase('Array - Array') {
}

TestCase('Array - Number') {
}

TestCase('Number - Array') {
}

TestCase('Array - Complex') {
}

TestCase('Complex - Array') {
}

TestCase('Array * Array') {
}

TestCase('Array * Number') {
}

TestCase('Number * Array') {
}

TestCase('Array * Complex') {
}

TestCase('Complex * Array') {
}

TestCase('Array / Array') {
}

TestCase('Array / Number') {
}

TestCase('Number / Array') {
}

TestCase('Array / Complex') {
}

TestCase('Complex / Array') {
}

TestCase('Array |.| Array') {
	Tester(`(@float([[1], [2], [3]]) |.| @float([[1, 2, 3]])))
	Tester(`(@float([[1, 3, -2], [4, 0, -1]]) |.| @float([[1, 0, 4], [-1, 4, 0], [5, 3, 2]])))
	Tester(`(@float([[1, 4], [2, 5], [3, 6]]) |.| @float([[1, 2, 3], [4, 5, 6]])))
	Tester(`(@float([[1, 4], [2, 5], [3, 6]]) |.| @float([[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[-1, 0, -1], [-1, 1, -1]]])))
	Tester(`(@float([[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[-1, 0, -1], [-1, 1, -1]]]) |.| @float([[1, 4], [2, 5], [3, 6]])))
	Tester(`(@float([[1, 2], [2, 3]]) |.| @float([[1, 2, 3]])))
}

TestCase('Array |^| Array') {
	Tester(`(@float([1, -4, -2]) |^| @float([2, 5, 1])))
	Tester(`(@float([2, 5, 1]) |^| @float([1, -4, -2])))
	Tester(`(@float([2, 4, -3]) |^| @float([3, 8, -5])))
	Tester(`(@float([3, 8, -5]) |^| @float([2, 4, -3])))
	Tester(`(@float([3, 8, -5]) |^| @float([2, 4])))
}

TestCase('Format') {
	format@int = Number.format@int
	format@int64 = Number.format@int64
	format@float = Number.format@float
	Number.format@int = '%04d'
	Number.format@int64 = '%04lld'
	Number.format@float = '%.4f'
	Tester(`@int([[0, 1, 2], [3, 4, 5]]))
	Tester(`@float([[0, 1, 2], [3, 4, 5]]))
	Tester(`(@float([[0, 1, 2], [3, 4, 5]]) / 3))
	Number.format@float = '%.6f'
	Tester(`(@float([[0, 1, 2], [3, 4, 5]]) / 3))
	Number.format@int = format@int
	Number.format@int64 = format@int64
	Number.format@float = format@float
}

TestCase('Scalar Constructor') {
	TesterArray(`Array.Scalar(`int8, 3))
	TesterArray(`Array.Scalar(`uint8, 3))
	TesterArray(`Array.Scalar(`int16, 3))
	TesterArray(`Array.Scalar(`uint16, 3))
	TesterArray(`Array.Scalar(`int32, 3))
	TesterArray(`Array.Scalar(`uint32, 3))
	TesterArray(`Array.Scalar(`int64, 3))
	TesterArray(`Array.Scalar(`uint64, 3))
	TesterArray(`Array.Scalar(`half, 3))
	TesterArray(`Array.Scalar(`float, 3))
	TesterArray(`Array.Scalar(`double, 3))
	TesterArray(`Array.Scalar(`complex, 3))
}

TestCase('Scalar Operation: Add') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) + Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) + Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) + Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) + Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) + Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) + Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) + Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) + Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) + Array.Scalar(`complex, 7)))
}

TestCase('Scalar Operation: Sub') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) - Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) - Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) - Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) - Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) - Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) - Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) - Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) - Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) - Array.Scalar(`complex, 7)))
}

TestCase('Scalar Operation: Mul') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) * Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) * Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) * Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) * Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) * Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) * Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) * Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) * Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) * Array.Scalar(`complex, 7)))
}

TestCase('Scalar Operation: Div') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) / Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) / Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) / Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) / Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) / Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) / Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) / Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) / Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) / Array.Scalar(`complex, 7)))
}

TestCase('Scalar Operation: Div (divided by zero)') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) / Array.Scalar(`double, 0)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) / Array.Scalar(`complex, 0)))
	TesterArray(`(Array.Scalar(`double, 4) / Array.Scalar(`double, 0)))
	TesterArray(`(Array.Scalar(`double, 4) / Array.Scalar(`complex, 0)))
	TesterArray(`(Array.Scalar(`complex, 4) / Array.Scalar(`double, 0)))
	TesterArray(`(Array.Scalar(`complex, 4) / Array.Scalar(`complex, 0)))
}

TestCase('Scalar Operation: Eq') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) == Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) == Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) == Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) == Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) == Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) == Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) == Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) == Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) == Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) == Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) == Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) == Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) == Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) == Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) == Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) == Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) == Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Neq') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) != Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) != Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) != Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) != Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) != Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) != Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) != Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) != Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) != Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) != Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) != Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) != Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) != Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) != Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) != Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) != Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) != Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Lt') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) < Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) < Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) < Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) < Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) < Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) < Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) < Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) < Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) < Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) < Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) < Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) < Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) < Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) < Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) < Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) < Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) < Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Le') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <= Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <= Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <= Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) <= Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) <= Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) <= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) <= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) <= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) <= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) <= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) <= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <= Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) <= Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) <= Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) <= Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Gt') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) > Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) > Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) > Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) > Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) > Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) > Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) > Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) > Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) > Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) > Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) > Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) > Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) > Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) > Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) > Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) > Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) > Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Ge') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) >= Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) >= Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) >= Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) >= Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) >= Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) >= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) >= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) >= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) >= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) >= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) >= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) >= Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) >= Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) >= Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) >= Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) >= Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) >= Array.Scalar(`complex, 4)))
}

TestCase('Scalar Operation: Cmp') {
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <=> Array(`double, [[3, 2, 1], [0, 2, 3]])))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <=> Array.Scalar(`double, 4)))
	TesterArray(`(Array(`double, [[1, 2, 3], [4, 5, 6]]) <=> Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`double, 4) <=> Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`complex, 4) <=> Array(`double, [[1, 2, 3], [4, 5, 6]])))
	TesterArray(`(Array.Scalar(`double, 4) <=> Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 4) <=> Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) <=> Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 4) <=> Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <=> Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <=> Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) <=> Array.Scalar(`double, 7)))
	TesterArray(`(Array.Scalar(`complex, 7) <=> Array.Scalar(`complex, 7)))
	TesterArray(`(Array.Scalar(`double, 7) <=> Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`double, 7) <=> Array.Scalar(`complex, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) <=> Array.Scalar(`double, 4)))
	TesterArray(`(Array.Scalar(`complex, 7) <=> Array.Scalar(`complex, 4)))
}

TestCase('Indexer') {
	arr = @float(3, 4, 2)
	arr.Inject(0..)
	Tester(`arr)
	Tester(`arr[0])
	Tester(`arr[1])
	Tester(`arr[2])
	Tester(`arr[3])
	Tester(`arr[0, 0])
	Tester(`arr[0, 1])
	Tester(`arr[0, 2])
	Tester(`arr[0, 3])
	Tester(`arr[0, 4])
	Tester(`arr[1, 0])
	Tester(`arr[1, 1])
	Tester(`arr[1, 2])
	Tester(`arr[1, 3])
	Tester(`arr[1, 4])
	Tester(`arr[2, 0])
	Tester(`arr[2, 1])
	Tester(`arr[2, 2])
	Tester(`arr[2, 3])
	Tester(`arr[2, 4])
	Tester(`arr[0, 0, 0])
	Tester(`arr[0, 0, 1])
	Tester(`arr[0, 0, 2])
	Tester(`arr[0, 1, 0])
	Tester(`arr[0, 1, 1])
	Tester(`arr[0, 1, 2])
	Tester(`arr[0, 2, 0])
	Tester(`arr[0, 2, 1])
	Tester(`arr[0, 2, 2])
	Tester(`arr[0, 3, 0])
	Tester(`arr[0, 3, 1])
	Tester(`arr[0, 3, 2])
	Tester(`arr[1, 0, 0])
	Tester(`arr[1, 0, 1])
	Tester(`arr[1, 0, 2])
	Tester(`arr[1, 1, 0])
	Tester(`arr[1, 1, 1])
	Tester(`arr[1, 1, 2])
	Tester(`arr[1, 2, 0])
	Tester(`arr[1, 2, 1])
	Tester(`arr[1, 2, 2])
	Tester(`arr[1, 3, 0])
	Tester(`arr[1, 3, 1])
	Tester(`arr[1, 3, 2])
	Tester(`arr[2, 0, 0])
	Tester(`arr[2, 0, 1])
	Tester(`arr[2, 0, 2])
	Tester(`arr[2, 1, 0])
	Tester(`arr[2, 1, 1])
	Tester(`arr[2, 1, 2])
	Tester(`arr[2, 2, 0])
	Tester(`arr[2, 2, 1])
	Tester(`arr[2, 2, 2])
	Tester(`arr[2, 3, 0])
	Tester(`arr[2, 3, 1])
	Tester(`arr[2, 3, 2])
	Tester(`arr[0][0])
	Tester(`arr[0][1])
	Tester(`arr[0][2])
	Tester(`arr[0][3])
	Tester(`arr[0][4])
	Tester(`arr[1][0])
	Tester(`arr[1][1])
	Tester(`arr[1][2])
	Tester(`arr[1][3])
	Tester(`arr[1][4])
	Tester(`arr[2][0])
	Tester(`arr[2][1])
	Tester(`arr[2][2])
	Tester(`arr[2][3])
	Tester(`arr[2][4])
	Tester(`arr[0][0][0])
	Tester(`arr[0][0][1])
	Tester(`arr[0][0][2])
	Tester(`arr[0][1][0])
	Tester(`arr[0][1][1])
	Tester(`arr[0][1][2])
	Tester(`arr[0][2][0])
	Tester(`arr[0][2][1])
	Tester(`arr[0][2][2])
	Tester(`arr[0][3][0])
	Tester(`arr[0][3][1])
	Tester(`arr[0][3][2])
	Tester(`arr[1][0][0])
	Tester(`arr[1][0][1])
	Tester(`arr[1][0][2])
	Tester(`arr[1][1][0])
	Tester(`arr[1][1][1])
	Tester(`arr[1][1][2])
	Tester(`arr[1][2][0])
	Tester(`arr[1][2][1])
	Tester(`arr[1][2][2])
	Tester(`arr[1][3][0])
	Tester(`arr[1][3][1])
	Tester(`arr[1][3][2])
	Tester(`arr[2][0][0])
	Tester(`arr[2][0][1])
	Tester(`arr[2][0][2])
	Tester(`arr[2][1][0])
	Tester(`arr[2][1][1])
	Tester(`arr[2][1][2])
	Tester(`arr[2][2][0])
	Tester(`arr[2][2][1])
	Tester(`arr[2][2][2])
	Tester(`arr[2][3][0])
	Tester(`arr[2][3][1])
	Tester(`arr[2][3][2])
}

TestCase('Array#FindMax()') {
	arr = @float(8)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMax())
	Tester(`arr.FindMax(0))
	Tester(`arr.FindMax(1))
	Tester(`arr.FindMax(0, 0))
	arr = @float(3, 4)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMax(0, 0))
	Tester(`arr.FindMax(0, 1))
	Tester(`arr.FindMax(0, 2))
	Tester(`arr.FindMax(0, 3))
	Tester(`arr.FindMax(0, -1))
	Tester(`arr.FindMax(0, 4))
	Tester(`arr.FindMax(1, 0))
	Tester(`arr.FindMax(1, 1))
	Tester(`arr.FindMax(1, 2))
	Tester(`arr.FindMax(1, -1))
	Tester(`arr.FindMax(1, 3))
	Tester(`arr.FindMax(2, 0))
	Tester(`arr.FindMax(0))
	Tester(`arr.FindMax(0, 0, 0))
	// |100 101| |108 109| |116 117|
	// |102 103| |110 111| |118 119|
	// |104 105| |112 113| |120 121|
	// |106 107| |114 115| |122 123|
	arr = @float(3, 4, 2)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMax(0, 0, 0))
	Tester(`arr.FindMax(0, 1, 0))
	Tester(`arr.FindMax(0, 2, 0))
	Tester(`arr.FindMax(0, 3, 0))
	Tester(`arr.FindMax(0, 0, 1))
	Tester(`arr.FindMax(0, 1, 1))
	Tester(`arr.FindMax(0, 2, 1))
	Tester(`arr.FindMax(0, 3, 1))
	Tester(`arr.FindMax(1, 0, 0))
	Tester(`arr.FindMax(1, 1, 0))
	Tester(`arr.FindMax(1, 2, 0))
	Tester(`arr.FindMax(1, 0, 1))
	Tester(`arr.FindMax(1, 1, 1))
	Tester(`arr.FindMax(1, 2, 1))
	Tester(`arr.FindMax(2, 0, 0))
	Tester(`arr.FindMax(2, 1, 0))
	Tester(`arr.FindMax(2, 2, 0))
	Tester(`arr.FindMax(2, 0, 1))
	Tester(`arr.FindMax(2, 1, 1))
	Tester(`arr.FindMax(2, 2, 1))
	Tester(`arr.FindMax(2, 0, 2))
	Tester(`arr.FindMax(2, 1, 2))
	Tester(`arr.FindMax(2, 2, 2))
	Tester(`arr.FindMax(2, 0, 3))
	Tester(`arr.FindMax(2, 1, 3))
	Tester(`arr.FindMax(2, 2, 3))
}
TestCase('Array#FindMin()') {
	arr = @float(8)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMin())
	Tester(`arr.FindMin(0))
	Tester(`arr.FindMin(1))
	Tester(`arr.FindMin(0, 0))
	arr = @float(3, 4)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMin(0, 0))
	Tester(`arr.FindMin(0, 1))
	Tester(`arr.FindMin(0, 2))
	Tester(`arr.FindMin(0, 3))
	Tester(`arr.FindMin(0, -1))
	Tester(`arr.FindMin(0, 4))
	Tester(`arr.FindMin(1, 0))
	Tester(`arr.FindMin(1, 1))
	Tester(`arr.FindMin(1, 2))
	Tester(`arr.FindMin(1, -1))
	Tester(`arr.FindMin(1, 3))
	Tester(`arr.FindMin(2, 0))
	Tester(`arr.FindMin(0))
	Tester(`arr.FindMin(0, 0, 0))
	// |100 101| |108 109| |116 117|
	// |102 103| |110 111| |118 119|
	// |104 105| |112 113| |120 121|
	// |106 107| |114 115| |122 123|
	arr = @float(3, 4, 2)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.FindMin(0, 0, 0))
	Tester(`arr.FindMin(0, 1, 0))
	Tester(`arr.FindMin(0, 2, 0))
	Tester(`arr.FindMin(0, 3, 0))
	Tester(`arr.FindMin(0, 0, 1))
	Tester(`arr.FindMin(0, 1, 1))
	Tester(`arr.FindMin(0, 2, 1))
	Tester(`arr.FindMin(0, 3, 1))
	Tester(`arr.FindMin(1, 0, 0))
	Tester(`arr.FindMin(1, 1, 0))
	Tester(`arr.FindMin(1, 2, 0))
	Tester(`arr.FindMin(1, 0, 1))
	Tester(`arr.FindMin(1, 1, 1))
	Tester(`arr.FindMin(1, 2, 1))
	Tester(`arr.FindMin(2, 0, 0))
	Tester(`arr.FindMin(2, 1, 0))
	Tester(`arr.FindMin(2, 2, 0))
	Tester(`arr.FindMin(2, 0, 1))
	Tester(`arr.FindMin(2, 1, 1))
	Tester(`arr.FindMin(2, 2, 1))
	Tester(`arr.FindMin(2, 0, 2))
	Tester(`arr.FindMin(2, 1, 2))
	Tester(`arr.FindMin(2, 2, 2))
	Tester(`arr.FindMin(2, 0, 3))
	Tester(`arr.FindMin(2, 1, 3))
	Tester(`arr.FindMin(2, 2, 3))
}

TestCase('Array#ArgMax()') {
	arr = @float(8)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMax())
	Tester(`arr.ArgMax(0))
	Tester(`arr.ArgMax(1))
	Tester(`arr.ArgMax(0, 0))
	arr = @float(3, 4)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMax(0, 0))
	Tester(`arr.ArgMax(0, 1))
	Tester(`arr.ArgMax(0, 2))
	Tester(`arr.ArgMax(0, 3))
	Tester(`arr.ArgMax(0, -1))
	Tester(`arr.ArgMax(0, 4))
	Tester(`arr.ArgMax(1, 0))
	Tester(`arr.ArgMax(1, 1))
	Tester(`arr.ArgMax(1, 2))
	Tester(`arr.ArgMax(1, -1))
	Tester(`arr.ArgMax(1, 3))
	Tester(`arr.ArgMax(2, 0))
	Tester(`arr.ArgMax(0))
	Tester(`arr.ArgMax(0, 0, 0))
	// |100 101| |108 109| |116 117|
	// |102 103| |110 111| |118 119|
	// |104 105| |112 113| |120 121|
	// |106 107| |114 115| |122 123|
	arr = @float(3, 4, 2)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMax(0, 0, 0))
	Tester(`arr.ArgMax(0, 1, 0))
	Tester(`arr.ArgMax(0, 2, 0))
	Tester(`arr.ArgMax(0, 3, 0))
	Tester(`arr.ArgMax(0, 0, 1))
	Tester(`arr.ArgMax(0, 1, 1))
	Tester(`arr.ArgMax(0, 2, 1))
	Tester(`arr.ArgMax(0, 3, 1))
	Tester(`arr.ArgMax(1, 0, 0))
	Tester(`arr.ArgMax(1, 1, 0))
	Tester(`arr.ArgMax(1, 2, 0))
	Tester(`arr.ArgMax(1, 0, 1))
	Tester(`arr.ArgMax(1, 1, 1))
	Tester(`arr.ArgMax(1, 2, 1))
	Tester(`arr.ArgMax(2, 0, 0))
	Tester(`arr.ArgMax(2, 1, 0))
	Tester(`arr.ArgMax(2, 2, 0))
	Tester(`arr.ArgMax(2, 0, 1))
	Tester(`arr.ArgMax(2, 1, 1))
	Tester(`arr.ArgMax(2, 2, 1))
	Tester(`arr.ArgMax(2, 0, 2))
	Tester(`arr.ArgMax(2, 1, 2))
	Tester(`arr.ArgMax(2, 2, 2))
	Tester(`arr.ArgMax(2, 0, 3))
	Tester(`arr.ArgMax(2, 1, 3))
	Tester(`arr.ArgMax(2, 2, 3))
}

TestCase('Array#ArgMin()') {
	arr = @float(8)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMin())
	Tester(`arr.ArgMin(0))
	Tester(`arr.ArgMin(1))
	Tester(`arr.ArgMin(0, 0))
	arr = @float(3, 4)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMin(0, 0))
	Tester(`arr.ArgMin(0, 1))
	Tester(`arr.ArgMin(0, 2))
	Tester(`arr.ArgMin(0, 3))
	Tester(`arr.ArgMin(0, -1))
	Tester(`arr.ArgMin(0, 4))
	Tester(`arr.ArgMin(1, 0))
	Tester(`arr.ArgMin(1, 1))
	Tester(`arr.ArgMin(1, 2))
	Tester(`arr.ArgMin(1, -1))
	Tester(`arr.ArgMin(1, 3))
	Tester(`arr.ArgMin(2, 0))
	Tester(`arr.ArgMin(0))
	Tester(`arr.ArgMin(0, 0, 0))
	// |100 101| |108 109| |116 117|
	// |102 103| |110 111| |118 119|
	// |104 105| |112 113| |120 121|
	// |106 107| |114 115| |122 123|
	arr = @float(3, 4, 2)
	arr.Inject(100..)
	Tester(`arr)
	Tester(`arr.ArgMin(0, 0, 0))
	Tester(`arr.ArgMin(0, 1, 0))
	Tester(`arr.ArgMin(0, 2, 0))
	Tester(`arr.ArgMin(0, 3, 0))
	Tester(`arr.ArgMin(0, 0, 1))
	Tester(`arr.ArgMin(0, 1, 1))
	Tester(`arr.ArgMin(0, 2, 1))
	Tester(`arr.ArgMin(0, 3, 1))
	Tester(`arr.ArgMin(1, 0, 0))
	Tester(`arr.ArgMin(1, 1, 0))
	Tester(`arr.ArgMin(1, 2, 0))
	Tester(`arr.ArgMin(1, 0, 1))
	Tester(`arr.ArgMin(1, 1, 1))
	Tester(`arr.ArgMin(1, 2, 1))
	Tester(`arr.ArgMin(2, 0, 0))
	Tester(`arr.ArgMin(2, 1, 0))
	Tester(`arr.ArgMin(2, 2, 0))
	Tester(`arr.ArgMin(2, 0, 1))
	Tester(`arr.ArgMin(2, 1, 1))
	Tester(`arr.ArgMin(2, 2, 1))
	Tester(`arr.ArgMin(2, 0, 2))
	Tester(`arr.ArgMin(2, 1, 2))
	Tester(`arr.ArgMin(2, 2, 2))
	Tester(`arr.ArgMin(2, 0, 3))
	Tester(`arr.ArgMin(2, 1, 3))
	Tester(`arr.ArgMin(2, 2, 3))
}

TestCase('Serialization') {
	[
		@int8([[1, 2, 3], [4, 5, 6]])
		@uint8([[1, 2, 3], [4, 5, 6]])
		@int16([[1, 2, 3], [4, 5, 6]])
		@uint16([[1, 2, 3], [4, 5, 6]])
		@int32([[1, 2, 3], [4, 5, 6]])
		@uint32([[1, 2, 3], [4, 5, 6]])
		@int64([[1, 2, 3], [4, 5, 6]])
		@uint64([[1, 2, 3], [4, 5, 6]])
		@half([[1, 2, 3], [4, 5, 6]])
		@float([[1, 2, 3], [4, 5, 6]])
		@double([[1, 2, 3], [4, 5, 6]])
		@complex([[1, 2, 3], [4, 5, 6]])
		Array.Scalar(`int8, 87)
		Array.Scalar(`uint8, 87)
		Array.Scalar(`int16, 87)
		Array.Scalar(`uint16, 87)
		Array.Scalar(`int32, 87)
		Array.Scalar(`uint32, 87)
		Array.Scalar(`int64, 87)
		Array.Scalar(`uint64, 87)
		Array.Scalar(`half, 87)
		Array.Scalar(`float, 87)
		Array.Scalar(`double, 87)
		Array.Scalar(`complex, 87)
	].Each {|array|
		buff = Binary()
		buff.Writer().Serialize(array)
		buff.Dump()
		arrayDec = buff.Reader().Deserialize()
		Printf('@%s %s\n', arrayDec.elemType, arrayDec)
	}
}
