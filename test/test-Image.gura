#!/usr/bin/env gurax
import(util.tester) {*}
import(png)
import(jpeg)

img_Midori = Image(bR'''
iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAJQSURBVDhPlZPBa9NQHMd/f0V510ERCioWFJqD
xQV6sFiEMC9VD5pdSk5SdhjFgy54KkO64qGGjQ1aaCGjCC1MSJkM0oGSepAgDJLDDu9QaA475OAh
/pKXZIndRL/09F4+732/3/crLCJ5juP88v5LMUy1TQIPFStcR+kyXC2hR9kXEXy2L0JenrpslclF
L39q1FiGj9/cJrWRg8BJg7spjeZsd1m+nUuYfm6UHldKUOnaiBpyAbhtg+3RnhAaTStxs33UuAvw
qIVpjW0uFfsK38u2v3fWMkBWeY5U/fv/prTtIPKCjut5INWBZbTK3Gvdvb7qWPI0gmcf1/i3yHje
fCQRrjlzzImmxb9BgwcQPyRWJpo59+CnNuzvrN+DTG6Vz5HwVNY8nRph/vMuVsd3ojYudHXsO4ej
jcyN+8Xig2f1WhlPb080Y9IuQ1mZ6X7zzE4Aw5NukNXVNggUZP0iso3yphhT1v1tqo8Nf1RtZIj0
yQlhPPHMs3pVEvXqw6d79a29U5fB56qYFdVoSKyOIB5YbgDn7+TztbqY5eNBRNjuv4Ti+1l0s6O+
uHwMX7ZFA1jeVcogKIm3RPh46xZIhzS2bR0IEBTmeY65K67gzA8UH566xjuOpWWCxbdWEdb7diLz
V3ml0DaoJlewfU7qmcw2Piz2jC2S54oZnA2znRI83bdThbnWocRhQQVJZSZjGGWPpAJAVmieUKA/
hsMvNN22h+UJr1QLC3csPRqSEEY5Znezed1TJaXL/uSQXKVppP7svhLw3NQmLMu/yfN+A8LBMXwK
9jLTAAAAAElFTkSuQmCC
'''base64)

PutImageWithAscii(img:Image, scanDir = `LeftTopHorz) = {
	charTbl = ['@', '*', '.', ' ']
	img.Scan(scanDir = scanDir).Fold(img.width) {|colorsRow|
		Println((charTbl.Get(colorsRow:*grayScale / 64)).Join())
	}
}

TestCase('Property') {
	Image.PrintPropSlots()
}

TestCase('Property Test') {
	Tester(`Image.Blank(48, 32)) {|img|
		Tester(`img.format)
		Tester(`img.width)
		Tester(`img.height)
		Tester(`img.bytes)
		Tester(`img.bytesPerLine)
		Tester(`img.bytesPerPixel)
		Tester(`img.palette)
		Tester(`img.p)
	}
	Tester(`Image.Blank(48, 32):rgb) {|img|
		Tester(`img.format)
		Tester(`img.width)
		Tester(`img.height)
		Tester(`img.bytes)
		Tester(`img.bytesPerLine)
		Tester(`img.bytesPerPixel)
		Tester(`img.palette)
		Tester(`img.p)
	}
}

TestCase('Image#Fill()') {
}

TestCase('Image#FillRect()') {
}

TestCase('Image#Flip()') {
	PutImageWithAscii(img_Midori.Flip(`horz))
	PutImageWithAscii(img_Midori.Flip(`vert))
	PutImageWithAscii(img_Midori.Flip(`both))
}

TestCase('Image#GetPixel()') {
}

TestCase('Image#MapAlphaLevel()') {
	img = Image.Blank(16, 16)
	p = img.p
	repeat (16 * 16) {|i| p.Put(`uint8, [i % 16, (i % 16) + 0x10, (i % 16) + 0x20, i])}
	mapLinear = Binary(), mapLinear.p.Put(`uint8, 0..255)
	mapReverse = Binary(), mapReverse.p.Put(`uint8, 255..0)
	mapShort = Binary(), mapLinear.p.Put(`uint8, 0..254)
	Println('original')
	img.p.Dump()
	Println('linear')
	img.MapAlphaLevel(mapLinear).p.Dump()
	Println('reverse')
	img.MapAlphaLevel(mapReverse).p.Dump()
	Tester(`img.MapAlphaLevel(mapShort))
	Tester(`(Image.Blank(16, 16):rgb).MapAlphaLevel(mapLinear))
}

TestCase('Image#MapColorLevel()') {
	img = Image.Blank(16, 16)
	p = img.p
	repeat (16 * 16) {|i| p.Put(`uint8, [i, i, i, 0xff])}
	mapLinear = Binary(), mapLinear.p.Put(`uint8, 0..255)
	mapReverse = Binary(), mapReverse.p.Put(`uint8, 255..0)
	mapShort = Binary(), mapLinear.p.Put(`uint8, 0..254)
	Println('original')
	img.p.Dump()
	Println('linear, linear, linear')
	img.MapColorLevel(mapLinear, mapLinear, mapLinear).p.Dump()
	Println('reverse, linear, linear')
	img.MapColorLevel(mapReverse, mapLinear, mapLinear).p.Dump()
	Println('linear, reverse, linear')
	img.MapColorLevel(mapLinear, mapReverse, mapLinear).p.Dump()
	Println('linear, linear, reverse')
	img.MapColorLevel(mapLinear, mapLinear, mapReverse).p.Dump()
	Tester(`img.MapColorLevel(mapShort, mapLinear, mapLinear))
	Tester(`img.MapColorLevel(mapLinear, mapShort, mapLinear))
	Tester(`img.MapColorLevel(mapLinear, mapLinear, mapShort))
}

TestCase('Image#PutPixel()') {
}

TestCase('Image#Paste()') {
}

TestCase('Image#Read()') {
}

TestCase('Image#Resize()') {
}

TestCase('Image#ResizePaste()') {
}

TestCase('Image#Rotate()') {
	PutImageWithAscii(img_Midori.Rotate(30, `white))
	PutImageWithAscii(img_Midori.Rotate(-30, `white))
	PutImageWithAscii(img_Midori.Rotate(120, `white))
	PutImageWithAscii(img_Midori.Rotate(-120, `white))
	PutImageWithAscii(img_Midori.Rotate(180, `white))
}

TestCase('Image#Scan()') {
	img = Image.Blank(5, 3)
	f(pixel:Pixel):map = Format('%d-%d', pixel.x, pixel.y)
	Tester(`f(img.Scan():pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `LeftTopHorz):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `LeftTopVert):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `LeftBottomHorz):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `LeftBottomVert):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `RightTopHorz):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `RightTopVert):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `RightBottomHorz):pixel).Join(' '))
	Tester(`f(img.Scan(scanDir = `RightBottomVert):pixel).Join(' '))
	[`LeftTopHorz, `LeftTopVert, `RightTopHorz, `RightTopVert,
	 `LeftBottomHorz, `LeftBottomVert, `RightBottomHorz, `RightBottomVert].Each {|scanDir|
		Println(scanDir.symbolName)
		PutImageWithAscii(img_Midori, scanDir)
	}
}

TestCase('Image#Write()') {
}

TestCase('Image#alphaDefault') {
	Tester(`Image.Blank(32, 24).alphaDefault)
}

TestCase('Image#bytes') {
	Tester(`Image.Blank(32, 24).bytes)
	Tester(`(Image.Blank(32, 24):rgb).bytes)
}

TestCase('Image#bytesPerLine') {
	Tester(`Image.Blank(32, 24).bytesPerLine)
	Tester(`(Image.Blank(32, 24):rgb).bytesPerLine)
}

TestCase('Image#bytesPerPixel') {
	Tester(`Image.Blank(32, 24).bytesPerPixel)
	Tester(`(Image.Blank(32, 24):rgb).bytesPerPixel)
}

TestCase('Image#format') {
	Tester(`Image.Blank(32, 24).format)
	Tester(`(Image.Blank(32, 24):rgb).format)
}

TestCase('Image#height') {
	Tester(`Image.Blank(32, 24).height)
	Tester(`(Image.Blank(32, 24):rgb).height)
}

TestCase('Image#p') {
	Tester(`Image.Blank(32, 24).p)
	Tester(`(Image.Blank(32, 24):rgb).p)
	Tester(`Image().p)
}

TestCase('Image#palette') {
	Tester(`Image.Blank(32, 24).palette)
	Tester(`(Image.Blank(32, 24):rgb).palette)
}

TestCase('Image#width') {
	Tester(`Image.Blank(32, 24).width)
	Tester(`(Image.Blank(32, 24):rgb).width)
}
