#!/usr/bin/env gurax
import(util.tester) {*}

pathNames = [
	''
	'hoge'
	'hoge.txt'
	'hoge/'
	'hoge.txt/'
	'hoge/boke'
	'hoge/boke.txt'
	'hoge/boke/'
	'hoge/boke.txt/'
	'hoge/aaaa/bbbb/ccc/boke.txt'
	'hoge/aaaa/bbbb/ccc.tt/boke.txt'
	'hoge/aaaa/bbbb/ccc/.boke'
	'/'
	'/hoge'
	'/hoge.txt'
	'/hoge/'
	'/hoge.txt/'
	'/hoge/boke'
	'/hoge/boke.txt'
	'/hoge/boke/'
	'/hoge/boke.txt/'
	'/hoge/aaaa/bbbb/ccc/boke.txt'
	'/hoge/aaaa/bbbb/ccc.tt/boke.txt'
	'/hoge/aaaa/bbbb/ccc/.boke'
	'C:/'
	'C:/hoge'
	'C:/hoge.txt'
	'C:/hoge/'
	'C:/hoge.txt/'
	'C:/hoge/boke'
	'C:/hoge/boke.txt'
	'C:/hoge/boke/'
	'C:/hoge/boke.txt/'
	'C:/hoge/aaaa/bbbb/ccc/boke.txt'
	'C:/hoge/aaaa/bbbb/ccc.tt/boke.txt'
	'C:/hoge/aaaa/bbbb/ccc/.boke'
]

TestCase('path.AbsName()') {
}

TestCase('path.BaseName(), path.ExtName() and path.SplitExt()') {
	Printf('path.BaseName(\'%s\') .. \'%s\'\n', pathNames, path.BaseName(pathNames))
	Printf('path.ExtName(\'%s\') .. \'%s\'\n', pathNames, path.ExtName(pathNames))
	Printf('path.SplitExt(\'%s\') .. %s\n', pathNames, path.SplitExt(pathNames):*ToString())
}

TestCase('path.Dir()') {
}

TestCase('path.DirName(), path.FileName() and path.Split()') {
	Printf('path.DirName(\'%s\') .. \'%s\'\n', pathNames, path.DirName(pathNames))
	Printf('path.FileName(\'%s\') .. \'%s\'\n', pathNames, path.FileName(pathNames))
	Printf('path.Split(\'%s\') .. %s\n', pathNames, path.Split(pathNames):*ToString())
}

TestCase('path.Exists()') {
}

TestCase('path.Glob()') {
}

TestCase('path.HeadName() and path.BottomName() and path.SplitBottom()') {
	Printf('path.HeadName(\'%s\') .. \'%s\'\n', pathNames, path.HeadName(pathNames))
	Printf('path.BottomName(\'%s\') .. \'%s\'\n', pathNames, path.BottomName(pathNames))
	Printf('path.SplitBottom(\'%s\') .. %s\n', pathNames, path.SplitBottom(pathNames):*ToString())
}

TestCase('path.Join()') {
}

TestCase('path.MatchPattern()') {
	Tester(`path.MatchPattern('a*', 'abcdefg'))
	Tester(`path.MatchPattern('a*efg', 'abcdefg'))
	Tester(`path.MatchPattern('a*ef', 'abcdefg'))
	Tester(`path.MatchPattern('a?cdefg', 'abcdefg'))
	Tester(`path.MatchPattern('a????fg', 'abcdefg'))
	Tester(`path.MatchPattern('a????f?', 'abcdefg'))
	Tester(`path.MatchPattern('a???f?', 'abcdefg'))
	Tester(`path.MatchPattern('A*', 'abcdefg'):case)
	Tester(`path.MatchPattern('A*', 'abcdefg'):icase)
}

TestCase('path.Regulate()') {
	pathNames = [
		''
		'a'
		'a/b'
		'a/b/c'
		'a/b/c/d'
		'a/..'
		'a/../..'
		'a/../../..'
		'a/b/c'
		'a/b/c/..'
		'a/b/c/../..'
		'a/b/c/../../..'
		'a/b/c/../../../..'
		'a/'
		'/a'
		'/a/'
		'/a/..'
		'/a/../..'
		'a/b/c/'
		'/a/b/c'
		'/a/b/c/'
		'c:'
		'c:a/b/c'
		'c:a/b/c/..'
		'c:a/b/c/../..'
		'c:a/b/c/../../..'
		'c:a/b/c/../../../..'
		'c:/'
		'c:/a/b/c'
		'c:/a/b/c/..'
		'c:/a/b/c/../..'
		'c:/a/b/c/../../..'
		'c:/a/b/c/../../../..'
		'a/b/c/./d/e/./f/g'
		'dir1/dir2///dir3//dir4/'
		'///dir1/dir2///dir3//dir4/'
		'dir1/dir2/../dir3/../dir4/../'
	]
	pathNamesQuoted = "'" + pathNames + "'"
	Printf('%-*s -> \'%s\'\n', pathNamesQuoted:*len.Max(), pathNamesQuoted, path.Regulate(pathNames):uri)
}

TestCase('path.Stat()') {
}

TestCase('path.Walk()') {
}
