#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('path.AbsName()') {
}

TestCase('path.BaseName()') {
}

TestCase('path.BottomName()') {
}

TestCase('path.Dir()') {
}

TestCase('path.DirName()') {
}

TestCase('path.Exists()') {
}

TestCase('path.ExtName()') {
}

TestCase('path.FileName()') {
}

TestCase('path.Glob()') {
}

TestCase('path.HeadName()') {
}

TestCase('path.Join()') {
}

TestCase('path.Match()') {
	Tester(`path.Match('a*', 'abcdefg'))
	Tester(`path.Match('a*efg', 'abcdefg'))
	Tester(`path.Match('a*ef', 'abcdefg'))
	Tester(`path.Match('a?cdefg', 'abcdefg'))
	Tester(`path.Match('a????fg', 'abcdefg'))
	Tester(`path.Match('a????f?', 'abcdefg'))
	Tester(`path.Match('a???f?', 'abcdefg'))
	Tester(`path.Match('A*', 'abcdefg'):case)
	Tester(`path.Match('A*', 'abcdefg'):icase)
}

TestCase('path.Regulate()') {
	patterns = [
		''
		'a'
		'a/b'
		'a/b/c'
		'a/b/c/d'
		'a/..'
		'a/../..'
		'a/../../..'
		'a/b/c'
		'a/b/c/..'
		'a/b/c/../..'
		'a/b/c/../../..'
		'a/b/c/../../../..'
		'a/'
		'/a'
		'/a/'
		'/a/..'
		'/a/../..'
		'a/b/c/'
		'/a/b/c'
		'/a/b/c/'
		'c:'
		'c:a/b/c'
		'c:a/b/c/..'
		'c:a/b/c/../..'
		'c:a/b/c/../../..'
		'c:a/b/c/../../../..'
		'c:/'
		'c:/a/b/c'
		'c:/a/b/c/..'
		'c:/a/b/c/../..'
		'c:/a/b/c/../../..'
		'c:/a/b/c/../../../..'
		'a/b/c/./d/e/./f/g'
		'dir1/dir2///dir3//dir4/'
		'///dir1/dir2///dir3//dir4/'
		'dir1/dir2/../dir3/../dir4/../'
	]
	patternsQuoted = "'" + patterns + "'"
	Printf('%-*s -> \'%s\'\n', patternsQuoted:*len.Max(), patternsQuoted, path.Regulate(patterns):uri)
}

TestCase('path.Split()') {
}

TestCase('path.SplitBottom()') {
}

TestCase('path.SplitExt()') {
}

TestCase('path.Stat()') {
}

TestCase('path.Walk()') {
}
