#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	Iterator.PrintPropSlots()
}

TesterPerm(expr as Expr) = {
	try {
		tbl = expr.Eval()
		Println('----')
		Printf('%s .. %d : %s\n', expr, tbl.len, tbl):noMap
	} catch {|e|
		Printf('%s .. %s\n', expr, e.text)
	}
}

TestCase('PUnit') {
	exprs = [
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Concatenation') {
	Tester(`(Range(6) |+| Range(4)).Join(', '))
	Tester(`(Range(6) |+| Range(4) |+| Range(7)).Join(', '))
	x = Range(6) |+| Range(4)
	Tester(`x)
	Tester(`x.IsFinite())
	Tester(`x.len)
	x = Range(6) |+| (0..)
	Tester(`x)
	Tester(`x.IsFinite())
	Tester(`x.len)
}

TestCase('Iterator#tuple') {
	Tester(`Range(10).tuple)
}

TestCase('Iterator#IsFinite() and Iterator#IsInfinite()') {
	Tester(`(1..10).IsFinite())
	Tester(`(1..10).IsInfinite())
	Tester(`(1..).IsFinite())
	Tester(`(1..).IsInfinite())
}

TestCase('Iterator#NextValue()') {
	x = 1..10
	while (a = x.NextValue()) {
		Println(a)
	}
}

TestCase('Iterator#Skip()') {
	x = 1..
	Tester(`x.NextValue())
	Tester(`x.NextValue())
	Tester(`x.NextValue())
	Tester(`x.NextValue())
	Tester(`x.Skip(1))
	Tester(`x.NextValue())
	Tester(`x.Skip(2))
	Tester(`x.NextValue())
	Tester(`x.Skip(0))
	Tester(`x.NextValue())
}

TestCase('Iterator#After()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Each().After(&{$i < 0}):list)
	Tester(`x.Each().After(x < 0):list)
	Tester(`x.Each().After(&{$i < 0}).Offset(1):list)
	Tester(`x.Each().After(x < 0).Offset(1):list)
}

TestCase('Iterator#Align()') {
	Tester(`(0..5).Align(10):list)
	Tester(`(0..5).Align(3):list)
	Tester(`(0..5).Align(10, 0):list)
}

TestCase('Iterator#And()') {
	Tester(`[].Each().And())
	Tester(`[false].Each().And())
	Tester(`[nil].Each().And())
	Tester(`[true].Each().And())
	Tester(`[false, false].Each().And())
	Tester(`[false, true].Each().And())
	Tester(`[true, false].Each().And())
	Tester(`[true, true].Each().And())
	Tester(`[true, true, true, true, true, true, true, true].Each().And())
	Tester(`[true, true, true, true, true, true, false, true].Each().And())
	Tester(`[0].Each().And())
	Tester(`[0, 1, 2, 3].Each().And())
	Tester(`[5].Each().And())
	Tester(`[5, true].Each().And())
	Tester(`[true, 5].Each().And())
	Tester(`[true, true, true, 5].Each().And())
	Tester(`[true, true, true, 5, false].Each().And())
}

TestCase('Iterator#ArgMax()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMax())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMax():lastIndex)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMax():indices)
}

TestCase('Iterator#ArgMin()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMin())
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMin():lastIndex)
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().ArgMin():indices)
}

TestCase('Iterator#Before()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Each().Before(&{$i < 0}):list)
	Tester(`x.Each().Before(x < 0):list)
	Tester(`x.Each().Before(&{$i < 0}).Offset(1):list)
	Tester(`x.Each().Before(x < 0).Offset(1):list)
}

TestCase('Iterator#Combination()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Combination(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Combination(4):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Combination(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Combination(6):list)
}

TestCase('Iterator#Contains()') {
	Tester(`([1, 2, 3, 4, 5].Each().Contains(1)))
	Tester(`([1, 2, 3, 4, 5].Each().Contains(6)))
	Tester(`([`apple, `grape, `banana].Each().Contains(`apple)))
	Tester(`([`apple, `grape, `banana].Each().Contains(`kiwi)))
	Tester(`([`apple, `grape, `banana].Each().Contains('apple'.ToSymbol())))
	Tester(`([`apple, `grape, `banana].Each().Contains('kiwi'.ToSymbol())))
	Tester(`(1..).Contains(0))
}

TestCase('Iterator#Count()') {
	Tester(`[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].Each().Count(3))
}

TestCase('Iterator#CountFalse()') {
	Tester(`[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].Each().CountFalse())
}

TestCase('Iterator#CountIf()') {
	Tester(`[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].Each().CountIf(&{$x > 5}))
}

TestCase('Iterator#CountTrue()') {
	Tester(`[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].Each().CountTrue())
}

TestCase('Iterator#Cycle()') {
	Tester(`[].Each().Cycle(20))
	Tester(`['A'].Each().Cycle(20):list)
	Tester(`['A', 'B'].Each().Cycle(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Each().Cycle(20):list)
}

TestCase('Iterator#Each()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each().Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each().Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each().Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each().Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each().Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each().Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each().Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each().Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each().Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each().Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each().Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each().Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
	Tester(`tbl.Each().Each { break })
	Tester(`tbl.Each().Each { continue })
}

TestCase('Iterator#Each():list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each().Each:list {|x| x})
	Tester(`tbl.Each().Each:xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each().Each:list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each().Each:list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each().Each:list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each().Each:list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each().Each:xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each().Each:list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each().Each:list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each().Each:list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each().Each:list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each().Each:list { break })
	Tester(`tbl.Each().Each:list { break(nil) })
	Tester(`tbl.Each().Each:list { continue })
	Tester(`tbl.Each().Each:list { continue(nil) })
	Tester(`tbl.Each().Each:xlist { break })
	Tester(`tbl.Each().Each:xlist { break(nil) })
	Tester(`tbl.Each().Each:xlist { continue })
	Tester(`tbl.Each().Each:xlist { continue(nil) })
}

TestCase('Iterator#Each():iter') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each().Each:iter {|x| x}[])
	Tester(`tbl.Each().Each:xiter {|x|
		if (x.StartsWith('t')) { x }
	}[])
	Tester(`tbl.Each().Each:iter {|x|
		if (x.StartsWith('t')) { break }
		x
	}[])
	Tester(`tbl.Each().Each:iter {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	}[])
	Tester(`tbl.Each().Each:iter {|x|
		if (x.StartsWith('t')) { continue }
		x
	}[])
	Tester(`tbl.Each().Each:iter {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	}[])
	Tester(`tbl.Each().Each:xiter {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	}[])
	Tester(`tbl.Each().Each:iter {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each().Each:iter {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each().Each:iter {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each().Each:iter {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	}[])
	Tester(`tbl.Each().Each:iter { break }[])
	Tester(`tbl.Each().Each:iter { break(nil) }[])
	Tester(`tbl.Each().Each:iter { continue }[])
	Tester(`tbl.Each().Each:iter { continue(nil) }[])
	Tester(`tbl.Each().Each:xiter { break }[])
	Tester(`tbl.Each().Each:xiter { break(nil) }[])
	Tester(`tbl.Each().Each:xiter { continue }[])
	Tester(`tbl.Each().Each:xiter { continue(nil) }[])
}

TestCase('Iterator#Filter()') {
	x = [52, 23, 62, 75, 46, 10, 86, 80, 19, 34]
	Tester(`x)
	Tester(`x.Each().Filter(&{$i % 2 == 0}):list)
	Tester(`x.Each().Filter(x % 2 == 0):list)
	// http://msdn.microsoft.com/ja-jp/library/bb308959.aspx
	names = [
		'Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David'
	]
	Tester(`names)
	Println(names.Each().Filter(&{$s.len == 5}).Sort():*Upper())
	x = [false, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.Each().Filter():list)
}

TestCase('Iterator#Find()') {
	names = [
		'Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David'
	]
	Tester(`names)
	Println(names.Each().Find(&{$s.len == 6}))
	Println(names.Each().Find(names:*len == 6))
	x = [false, nil, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.Each().Find())
}

TestCase('Iterator#Flatten()') {
	x = [[1, 2, 3, [4, [5, 6], 7], 8], [9, 10, 11], 12].Each()
	Println(x):noMap
	Tester(`x.Flatten().Join(', '))
	Tester(`(x.Flatten():bfs).Join(', '))
	x = [1, 2, 1.., 3, 4]
	Tester(`x.Flatten():list)
}

TestCase('Iterator#Fold()') {
	x = [0..19]
	Tester(`x.Each().Fold(1).Join(', '))
	Tester(`x.Each().Fold(5).Join(', '))
	Tester(`x.Each().Fold(8).Join(', '))
	Tester(`(x.Each().Fold(1):neat).Join(', '))
	Tester(`(x.Each().Fold(5):neat).Join(', '))
	Tester(`(x.Each().Fold(8):neat).Join(', '))
	Tester(`x.Each().Fold(5, 1).Join(', '))
	Tester(`x.Each().Fold(5, 2).Join(', '))
	Tester(`x.Each().Fold(5, 3).Join(', '))
	Tester(`x.Each().Fold(5, 4).Join(', '))
	Tester(`x.Each().Fold(5, 5).Join(', '))
	Tester(`(x.Each().Fold(5, 1):neat).Join(', '))
	Tester(`(x.Each().Fold(5, 2):neat).Join(', '))
	Tester(`(x.Each().Fold(5, 3):neat).Join(', '))
	Tester(`(x.Each().Fold(5, 4):neat).Join(', '))
	Tester(`(x.Each().Fold(5, 5):neat).Join(', '))
}

TestCase('Iterator#Format()') {
}

TestCase('Iterator#Head()') {
	Tester(`[].Each().Head(10):list)
	Tester(`[0].Each().Head(10):list)
	Tester(`[0..8].Each().Head(10):list)
	Tester(`[0..9].Each().Head(10):list)
	Tester(`[0..10].Each().Head(10):list)
	Tester(`[0..100].Each().Head(10):list)
	Tester(`(0..).Head(10):list)
}

TestCase('Iterator#Join()') {
	Tester(`[].Each().Join()):quote
	Tester(`[].Each().Join(',')):quote
	Tester(`['abc'].Each().Join()):quote
	Tester(`['abc'].Each().Join(',')):quote
	Tester(`['abc', 'def'].Each().Join()):quote
	Tester(`['abc', 'def'].Each().Join(',')):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join()):quote
	Tester(`['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join(',')):quote
	Tester(`['abc', 'def', nil, 'ghi', nil, 'jkl', 'mno'].Each().Join():nilVisible):quote
}

TestCase('Iterator#Joinb()') {
	Tester(`[].Each().Joinb()):quote
	Tester(`[b'abc'].Each().Joinb()):quote
	Tester(`[b'abc', b'def'].Each().Joinb()):quote
	Tester(`[b'abc', b'def', b'ghi', b'jkl', b'mno'].Each().Joinb()):quote
	Tester(`[b'abc', b'def', 1, b'ghi', nil, b'jkl', b'mno'].Each().Joinb()):quote
}

TestCase('Iterator#Map()') {
}

TestCase('Iterator#Max()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Max())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Max())
}

TestCase('Iterator#Mean()') {
	Tester(`[].Each().Mean())
	Tester(`[0].Each().Mean())
	Tester(`[0, 1].Each().Mean())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Each().Mean())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Each().Mean())
}

TestCase('Iterator#Min()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Min())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Min())
}

TestCase('Iterator#NilTo()') {
}

TestCase('Iterator#Offset()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each().Offset(0)[])
	Tester(`tbl.Each().Offset(1)[])
	Tester(`tbl.Each().Offset(2)[])
	Tester(`tbl.Each().Offset(3)[])
	Tester(`tbl.Each().Offset(10)[])
	Tester(`tbl.Each().Offset(11)[])
	Tester(`[tbl.Each().Offset(11):raise*])
	Tester(`tbl.Each().Offset(12)[])
	Tester(`[tbl.Each().Offset(12):raise*])
	Tester(`tbl.Each().Offset(-1)[])
}

TestCase('Iterator#Or()') {
	Tester(`[].Each().Or())
	Tester(`[false].Each().Or())
	Tester(`[nil].Each().Or())
	Tester(`[true].Each().Or())
	Tester(`[false, false].Each().Or())
	Tester(`[false, true].Each().Or())
	Tester(`[true, false].Each().Or())
	Tester(`[true, true].Each().Or())
	Tester(`[true, true, true, true, true, true, true, true].Each().Or())
	Tester(`[true, true, true, true, true, true, false, true].Each().Or())
	Tester(`[0].Each().Or())
	Tester(`[0, 1, 2, 3].Each().Or())
	Tester(`[5].Each().Or())
	Tester(`[5, true].Each().Or())
	Tester(`[true, 5].Each().Or())
	Tester(`[true, true, true, 5].Each().Or())
	Tester(`[true, true, true, 5, false].Each().Or())
}

TestCase('Iterator#Pack()') {
}

TestCase('Iterator#Permutation()') {
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Permutation():list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Permutation(5):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Permutation(3):list)
	TesterPerm(`['A', 'B', 'C', 'D', 'E'].Each().Permutation(6):list)
}

TestCase('Iterator#PingPong()') {
	Tester(`[].Each().PingPong(20))
	Tester(`['A'].Each().PingPong(20):list)
	Tester(`['A', 'B'].Each().PingPong(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Each().PingPong(20):list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Each().PingPong(20):sticky:list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Each().PingPong(20):sticky@top:list)
	Tester(`['A', 'B', 'C', 'D', 'E'].Each().PingPong(20):sticky@btm:list)
}

TestCase('Iterator#Print()') {
}

TestCase('Iterator#Printf()') {
}

TestCase('Iterator#Println()') {
}

TestCase('Iterator#Prod()') {
}

TestCase('Iterator#Rank()') {
}

TestCase('Iterator#Reduce()') {
}

TestCase('Iterator#Replace()') {
}

TestCase('Iterator#Reverse()') {
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Reverse():list)
}

TestCase('Iterator#RoundOff()') {
}

TestCase('Iterator#RunLength()') {
	Tester(`[].Each().RunLength():list)
	Tester(`['A'].Each().RunLength():list)
	Tester(`['A', 'A'].Each().RunLength():list)
	Tester(`['A', 'A', 'A'].Each().RunLength():list)
	Tester(`['A', 'A', 'A', 'A'].Each().RunLength():list)
	Tester(`['A', 'B'].Each().RunLength():list)
	Tester(`['A', 'B', 'C'].Each().RunLength():list)
	Tester(`['A', 'B', 'C', 'D'].Each().RunLength():list)
	Tester(`['A', 'A', 'A', 'B', 'B', 'C', 'D', 'D', 'D', 'D', 'D'].Each().RunLength():list)
}

TestCase('Iterator#Since()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Each().Since(&{$i < 0}):list)
	Tester(`x.Each().Since(x < 0):list)
	Tester(`x.Each().Since(&{$i < 0}).Offset(1):list)
	Tester(`x.Each().Since(x < 0).Offset(1):list)
	x = [1, 2, 3, -1, 3, 1, 2, 3, 4, -1, 2, 1, 2]
	Tester(`x.Each().Since(&{$i < 0}).Offset(1).While(&{$i >= 0}):list)
}

TestCase('Iterator#SkipNil()') {
	x = [false, 52, 23, 62, nil, 75, 46, false, 10, nil, 86, 80, 19, 34, false]
	Tester(`x)
	Tester(`x.Each().SkipNil():list)
}

TestCase('Iterator#Sort()') {
	words100 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen',
		'demonic', 'horn', 'motion' 'whip', 'rampant', 'bruise', 'religion', 'ignore',
		'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic'
		'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore'
		'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile'
		'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy'
		'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable'
		'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply'
		'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired'
		'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam'
		'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal'
		'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle'
	]
	words10 = [
		'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining'
	]
	Tester(`words100.Each().Sort())
	Tester(`words100.Each().Sort(`ascend))
	Tester(`words100.Each().Sort(`descend))
	Tester(`words100.Each().Sort(&{$a < $b}))
	Tester(`words100.Each().Sort(&{$a > $b}))
	Tester(`words100.Each().Sort(&{$a.last < $b.last}):stable)
	Println(words100.Each().Sort(&{$a.len < $b.len}):stable)
	Println(words100.Each().Sort(&{$a.len > $b.len}):stable)
	Tester(`words10.Each().Sort(`ascend, [0..9]))
	Tester(`words10.Each().Sort(`ascend, [9..0]))
	Tester(`words10.Each().Sort(`descend, [0..9]))
	Tester(`words10.Each().Sort(`descend, [9..0]))
	Tester(`words10.Each().Sort(&{$a < $b}, [9..0]))
	Tester(`words10.Each().Sort(&{$a > $b}, [9..0]))
	Tester(`words100.Each().Sort(`ascend, [0..99]))
	Tester(`words100.Each().Sort(`ascend, [99..0]))
}

TestCase('Iterator#Std()') {
}

TestCase('Iterator#Sum()') {
	Tester(`[].Each().Sum())
	Tester(`[0].Each().Sum())
	Tester(`[0, 1].Each().Sum())
	Tester(`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Each().Sum())
	Tester(`[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Each().Sum())
}

TestCase('Iterator#Tail()') {
	Tester(`(0..100).Tail(0):list)
	Tester(`(0..100).Tail(1):list)
	Tester(`(0..100).Tail(10):list)
	Tester(`(0..4).Tail(5):list)
	Tester(`(0..4).Tail(6):list)
}

TestCase('Iterator#Uniq()') {
	Tester(`[].Each().Uniq():list)
	Tester(`[1].Each().Uniq():list)
	Tester(`[1, 2, 3, 4, 5, 6, 7, 8, 9].Each().Uniq():list)
	Tester(`[1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 9].Each().Uniq():list)
	Tester(`['orange'].Each().Uniq():list)
	Tester(`['orange', 'grape', 'apple', 'peach', 'melon', 'kiwi'].Each().Uniq():list)
	Tester(`['orange', 'grape', 'grape', 'apple', 'apple', 'apple', 'peach', 'melon', 'kiwi', 'kiwi', 'kiwi'].Each().Uniq():list)
}

TestCase('Iterator#Until()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Each().Until(&{$i < 0}):list)
	Tester(`x.Each().Until(x < 0):list)
	Tester(`x.Each().Until(&{$i < 0}).Offset(1):list)
	Tester(`x.Each().Until(x < 0).Offset(1):list)
	x = 0..
	Tester(`x.IsInfinite())
	Tester(`x.Until(x == 100).IsInfinite())
	Tester(`x.Until(&{$i == 100}).IsInfinite())
}

TestCase('Iterator#Var()') {
}

TestCase('Iterator#While()') {
	x = [4, 3, 6, 1, 2, 3, -1, 4, 4, 4, 0]
	Tester(`x.Each().While(&{$i >= 0}):list)
	Tester(`x.Each().While(x >= 0):list)
	x = 0..
	Tester(`x.IsInfinite())
	Tester(`x.While(x < 100).IsInfinite())
	Tester(`x.While(&{$i < 100}).IsInfinite())
}
