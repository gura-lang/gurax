#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`()
		`(1,)
		`(1, 2, 3)
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('Iterator#IsFinite() and Iterator#IsInfinite()') {
	Tester(`(1..10).IsFinite())
	Tester(`(1..10).IsInfinite())
	Tester(`(1..).IsFinite())
	Tester(`(1..).IsInfinite())
}

TestCase('Iterator#NextValue()') {
	x = 1..10
	while (a = x.NextValue()) {
		Println(a)
	}
}

TestCase('Iterator#After()') {
}

TestCase('Iterator#Align()') {
}

TestCase('Iterator#And()') {
}

TestCase('Iterator#ArgMax()') {
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax())
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():last_index)
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():indices)
}

TestCase('Iterator#ArgMin()') {
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin())
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():last_index)
	Tester(`(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():indices)
}

sys.Exit()
TestCase('Iterator#Before()') {
}

TestCase('Iterator#Contains()') {
}

TestCase('Iterator#Count()') {
}

TestCase('Iterator#Cycle()') {
}

TestCase('Iterator#Each()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Println('Each { .. }')
	tbl.Each {
		Println('----')
	}
	Println('Each {|x| .. }')
	tbl.Each {|x|
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x| .. }, break at "t"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x| .. }, break at "s"')
	tbl.Each {|x|
		Printf('%s\n', x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x| .. }, skip "t"')
	tbl.Each {|x|
		if (x.StartsWith('t')) { continue }
		Printf('%s\n', x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('t')) { break }
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		if (x.StartsWith('s')) { break }
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		if (x.StartsWith('t')) { continue }
		Printf('%d %s\n', i, x)
	}
	Println('Each {|x, i| .. }, break at "t"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('t') && break
	}
	Println('Each {|x, i| .. }, break at "s"')
	tbl.Each {|x, i|
		Printf('%d %s\n', i, x)
		x.StartsWith('s') && break
	}
	Println('Each {|x, i| .. }, skip "t"')
	tbl.Each {|x, i|
		x.StartsWith('t') && continue
		Printf('%d %s\n', i, x)
	}
	Tester(`tbl.Each { break })
	Tester(`tbl.Each { continue })
}

TestCase('Iterator#Each():list') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`tbl.Each():list {|x| x})
	Tester(`tbl.Each():xlist {|x|
		if (x.StartsWith('t')) { x }
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue }
		x
	})
	Tester(`tbl.Each():list {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	})
	Tester(`tbl.Each():xlist {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	})
	Tester(`tbl.Each():list { break })
	Tester(`tbl.Each():list { break(nil) })
	Tester(`tbl.Each():list { continue })
	Tester(`tbl.Each():list { continue(nil) })
	Tester(`tbl.Each():xlist { break })
	Tester(`tbl.Each():xlist { break(nil) })
	Tester(`tbl.Each():xlist { continue })
	Tester(`tbl.Each():xlist { continue(nil) })
}

TestCase('Iterator#Each():iter') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`[tbl.Each():iter {|x| x}])
	Tester(`[tbl.Each():xiter {|x|
		if (x.StartsWith('t')) { x }
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { break('end') }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue }
		x
	}])
	Tester(`[tbl.Each():iter {|x|
		if (x.StartsWith('t')) { continue('x') }
		x
	}])
	Tester(`[tbl.Each():xiter {|x, i|
		if (x.StartsWith('t')) { Format('%d-%s', i, x) }
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { break('end') }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter {|x, i|
		if (x.StartsWith('t')) { continue('x') }
		Format('%d-%s', i, x)
	}])
	Tester(`[tbl.Each():iter { break }])
	Tester(`[tbl.Each():iter { break(nil) }])
	Tester(`[tbl.Each():iter { continue }])
	Tester(`[tbl.Each():iter { continue(nil) }])
	Tester(`[tbl.Each():xiter { break }])
	Tester(`[tbl.Each():xiter { break(nil) }])
	Tester(`[tbl.Each():xiter { continue }])
	Tester(`[tbl.Each():xiter { continue(nil) }])
}

TestCase('Iterator#Filter()') {
}

TestCase('Iterator#Find()') {
}

TestCase('Iterator#Flatten()') {
}

TestCase('Iterator#Fold()') {
}

TestCase('Iterator#Format()') {
}

TestCase('Iterator#Head()') {
}

TestCase('Iterator#Join()') {
}

TestCase('Iterator#Joinb()') {
}

TestCase('Iterator#Map()') {
}

TestCase('Iterator#Max()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Max())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Max())
}

TestCase('Iterator#Mean()') {
}

TestCase('Iterator#Min()') {
	Tester(`[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Min())
	Tester(`['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Min())
}

TestCase('Iterator#NilTo()') {
}

TestCase('Iterator#Offset()') {
	tbl = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
	Tester(`[tbl.Offset(0)])
	Tester(`[tbl.Offset(1)])
	Tester(`[tbl.Offset(2)])
	Tester(`[tbl.Offset(3)])
	Tester(`[tbl.Offset(10)])
	Tester(`[tbl.Offset(11)])
	Tester(`[tbl.Offset(11):raise])
	Tester(`[tbl.Offset(-1)])
}

TestCase('Iterator#Or()') {
}

TestCase('Iterator#Pack()') {
}

TestCase('Iterator#PingPong()') {
}

TestCase('Iterator#Print()') {
}

TestCase('Iterator#Printf()') {
}

TestCase('Iterator#Println()') {
}

TestCase('Iterator#Prod()') {
}

TestCase('Iterator#Rank()') {
}

TestCase('Iterator#Reduce()') {
}

TestCase('Iterator#Replace()') {
}

TestCase('Iterator#Reverse()') {
}

TestCase('Iterator#RoundOff()') {
}

TestCase('Iterator#RunLength()') {
}

TestCase('Iterator#Since()') {
}

TestCase('Iterator#Skip()') {
}

TestCase('Iterator#SkipNil()') {
}

TestCase('Iterator#Sort()') {
}

TestCase('Iterator#Std()') {
}

TestCase('Iterator#Sum()') {
}

TestCase('Iterator#Tail()') {
}

TestCase('Iterator#Until()') {
}

TestCase('Iterator#Var()') {
}

TestCase('Iterator#While()') {
}
