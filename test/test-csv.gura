#!/usr/bin/env gurax
//==============================================================================
// test-csv.gura
//==============================================================================
import(util.tester) {*}
import(csv)

TestCase('Property') {
	csv.Writer.PrintPropSlots()
	csv.Writer.PrintMethods()
	csv.Reader.PrintPropSlots()
	csv.Reader.PrintMethods()
}

TestCase('csv.Writer#WriteLine(), csv.Writer#WriteLines()') {
	w = csv.Writer(sys.cout)
	w.WriteLine('field1')
	w.WriteLine('field1', 'field2')
	w.WriteLine('field1', 'field2', 'field3')
	w.WriteLine('field1', 'field2', 'field3', 'field4')
	w.WriteLine('field1', 'field2', 'field3', 'field4', 'field5')
	w.WriteLine()
	w.WriteLine * ('field1',)
	w.WriteLine * ('field1', 'field2')
	w.WriteLine * ('field1', 'field2', 'field3')
	w.WriteLine * ('field1', 'field2', 'field3', 'field4')
	w.WriteLine * ('field1', 'field2', 'field3', 'field4', 'field5')
	w.WriteLine()
	w.WriteLines([
		('field1',),
		('field1', 'field2')
		('field1', 'field2', 'field3')
		('field1', 'field2', 'field3', 'field4')
		('field1', 'field2', 'field3', 'field4', 'field5')
	])
	w.WriteLine()
	w.WriteLines([
		['field1']
		['field1', 'field2']
		['field1', 'field2', 'field3']
		['field1', 'field2', 'field3', 'field4']
		['field1', 'field2', 'field3', 'field4', 'field5']
	])
	w.WriteLine()
	w.WriteLines([
		['field1']
		['field1', 'field2']
		['field1', 'field2', 'field3']
		['field1', 'field2', 'field3', 'field4']
		['field1', 'field2', 'field3', 'field4', 'field5']
	].Each())
	w.WriteLine()
	w.WriteLine * [
		('field1',),
		('field1', 'field2')
		('field1', 'field2', 'field3')
		('field1', 'field2', 'field3', 'field4')
		('field1', 'field2', 'field3', 'field4', 'field5')
	]
	w.WriteLine()
	w.WriteLine(0).WriteLine(0, 1).WriteLine(0, 1, 2)
	w.WriteLine(0, 1, 2, 3.1415)
	w.formatForNumber = '%08d'
	w.WriteLine(0, 1, 2, 3.1415)
	w.formatForNumber = '%08xh'
	w.WriteLine(0x12345678, 0xffffffff, 0xa8a8a8a8)
	w.ResetFormatForNumber().WriteLine(0, 1, 2, 3.1415)
	csv.Writer(sys.cout) {|w|
		Tester(`w.formatForNumber)
	}
}

TestCase('csv.Reader#ReadLine()') {
	testText = R'''
	field1
	field1,field2
	field1,field2,field3
	field1,field2,field3,field4
	field1, field2,field3 , field4 ,field5
	"field1"
	 "field1"
	 "field1" 
	"field1","field2"
	"field1" ,"field2"
	 "field1", field2
	 "field1", ""field2
	 "field1" "trail",field2,field3,field4
	 "field1" ,field2
	"field1" trail,field2,field3,field4
	"field1" "trail"
	"field1" "trail,field2,field3
	
	A
	,
	,,
	,,,,,,,,
	,,field3,,,,field7,,
	"Hello ""world"", aaa",field2,field3
	"multiline
	test
	third line here",field2,field3
	"multiline again
	test
	third line here",field2,field3
	'''
	csv.Reader(testText.ToReader()) {|reader|
		while (row = reader.ReadLine(Tuple)) {
			Println('----')
			if (row.IsEmpty()) {
				Println('(empty)')
			} else {
				Println(row)
			}
		}
	}
	csv.Reader(testText.ToReader()) {|reader|
		while (row = reader.ReadLine(List)) {
			Println('----')
			if (row.IsEmpty()) {
				Println('(empty)')
			} else {
				Println(row):noMap
			}
		}
	}
	Record = struct { field1 = nil, field2 = nil, field3 = nil, field4 = nil, field5 = nil, field6 = nil, field7 = nil, field8 = nil, field9 = nil }
	csv.Reader(testText.ToReader()) {|reader|
		while (row = reader.ReadLine(Record)) {
			Println('----')
			Printf('%s, %s, %s, %s, %s, %s, %s, %s, %s\n', row.field1, row.field2, row.field3, row.field4, row.field5, row.field6, row.field7, row.field8, row.field9)
		}
	}
}

TestCase('csv.Reader#ReadLines()') {
	testText = R'''
	field1
	field1,field2
	field1,field2,field3
	field1,field2,field3,field4
	field1, field2,field3 , field4 ,field5
	"field1"
	 "field1"
	 "field1" 
	"field1","field2"
	"field1" ,"field2"
	 "field1", field2
	 "field1", ""field2
	 "field1" "trail",field2,field3,field4
	 "field1" ,field2
	"field1" trail,field2,field3,field4
	"field1" "trail"
	"field1" "trail,field2,field3
	
	A
	,
	,,
	,,,,,,,,
	,,field3,,,,field7,,
	"Hello ""world"", aaa",field2,field3
	"multiline
	test
	third line here",field2,field3
	"multiline again
	test
	third line here",field2,field3
	'''
	csv.Reader(testText.ToReader()).ReadLines(Tuple) {|row|
		Println('----')
		if (row.IsEmpty()) {
			Println('(empty)')
		} else {
			Println(row)
		}
	}
	csv.Reader(testText.ToReader()).ReadLines(List) {|row|
		Println('----')
		if (row.IsEmpty()) {
			Println('(empty)')
		} else {
			Println(row):noMap
		}
	}
	Record = struct { field1 = nil, field2 = nil, field3 = nil, field4 = nil, field5 = nil, field6 = nil, field7 = nil, field8 = nil, field9 = nil }
	csv.Reader(testText.ToReader()).ReadLines(Record) {|row|
		Println('----')
		Printf('%s, %s, %s, %s, %s, %s, %s, %s, %s\n', row.field1, row.field2, row.field3, row.field4, row.field5, row.field6, row.field7, row.field8, row.field9)
	}
}

TestCase('CSV and struct (1)') {
	Person = struct {
		name as String
		email as String
		gender as String
		age:stringCast as Number
		birthDay as String
		mobile as String
	}
	Println(Person)
	text = R'''
	"Hayasaka Hiroko","hayasaka_hiroko@example.com","female",33,"1976/8/27","090-9134-30BF"
	"Hannda Yumiko","hannda_yumiko@example.com","female",75,"1934/10/20","080-6713-87BI"
	"Honma Chise","honma_chise@example.com","female",46,"1964/3/9","090-5237-82FJ"
	"Kawahata Nana","kawahata_nana@example.com","female",47,"1962/4/23","090-4760-51JA"
	"Kikuchi Takao","kikuchi_takao@example.com","male",35,"1975/1/1","080-1904-58CH"
	"Iwai Michiko","iwai_michiko@example.com","female",36,"1974/2/2","090-4520-77GH"
	"Kasai Satoshi","kasai_satoshi@example.com","male",24,"1985/12/23","090-8055-78CB"
	"Shima Masashi","shima_masashi@example.com","male",61,"1948/12/20","090-4180-99GH"
	"Suenaga Rena","suenaga_rena@example.com","female",80,"1929/5/22","080-1042-32EG"
	"Yokokawa Fumiyo","yokokawa_fumiyo@example.com","female",24,"1985/11/9","090-2679-49BI"
	"Yamanaka Mayuko","yamanaka_mayuko@example.com","female",62,"1947/9/9","090-1826-25EC"
	"Aoi Tatsuya","aoi_tatsuya@example.com","male",21,"1988/8/30","080-5257-80CB"
	"Tachikawa Hiroaki","tachikawa_hiroaki@example.com","male",40,"1970/1/25","090-3998-69FA"
	"Tsutsumi Manami","tsutsumi_manami@example.com","female",75,"1934/11/1","090-8224-26EH"
	"Sugimura Shunsuke","sugimura_shunsuke@example.com","male",70,"1939/8/10","090-6873-43DC"
	"Wakabayashi Mitsuru","wakabayashi_mitsuru@example.com","male",59,"1950/5/13","080-2151-64CI"
	"Maehara Tatsuhito","maehara_tatsuhito@example.com","male",49,"1960/6/21","080-5857- 9EA"
	"Chiba Hiroyuki","chiba_hiroyuki@example.com","male",59,"1950/5/8","080-2637-74JH"
	"Yoshioka Stmaria","yoshioka_stmaria@example.com","male",43,"1966/6/21","080-7737-22EA"
	"Kameyama Mitsunori","kameyama_mitsunori@example.com","male",65,"1944/7/22","090-4515-66EE"
	"Tamura Meisa","tamura_meisa@example.com","female",60,"1949/6/12","080- 698-23AC"
	"Taue Takashi","taue_takashi@example.com","male",34,"1975/5/15","090- 393- 7BD"
	"Yanagiya Yuujirou","yanagiya_yuujirou@example.com","male",32,"1977/12/18","080-1094-23CE"
	"Inagaki Ouga","inagaki_ouga@example.com","male",29,"1981/3/20","080-1535-79FF"
	"Kasahara Shidou","kasahara_shidou@example.com","male",58,"1951/8/3","090-2261-24IF"
	"Nakayama Yoshiki","nakayama_yoshiki@example.com","male",39,"1970/11/2","090-7101-88BF"
	"Takaya Masahiko","takaya_masahiko@example.com","male",29,"1980/4/12","090-6963-52GJ"
	"Nagao Erika","nagao_erika@example.com","female",29,"1980/11/23","080-2472-74DI"
	"Fujisawa Haruomi","fujisawa_haruomi@example.com","male",22,"1987/4/15","080-7776-16JF"
	"Kasai Ayaka","kasai_ayaka@example.com","female",67,"1942/12/2","090-4956-49FD"
	'''
	table = csv.Reader(text.ToReader()).ReadLines():list
	//people = Person * table
	people = csv.Reader(text.ToReader()).ReadLines(Person):list
	Printf('name:%s email:%s gender:%s age:%s birthDay:%s mobile:%s\n', people:*name, people:*email, people:*gender, people:*age, people:*birthDay, people:*mobile)
	tableCast = people as Tuple
	Println(table)
	Println(tableCast)
	Println(cond(table == tableCast, 'Success', '**failed**'))
	csv.Writer(sys.cout).WriteLine * tableCast
}

TestCase('CSV and struct (2)') {
	Person = struct {
		name as String
		email as String
		gender as String
		age:stringCast as Number
		birthDay as DateTime
		mobile as String
		Print():void = Printf('name:%s email:%s gender:%s age:%d birthDay:%04d-%02d-%02d mobile:%s\n',
			this.name, this.email, this.gender, this.age,
			this.birthDay.year, this.birthDay.month, this.birthDay.day, this.mobile)
	}
	text = R'''
	"Hayasaka Hiroko","hayasaka_hiroko@example.com","female",33,"1976/8/27","090-9134-30BF"
	"Hannda Yumiko","hannda_yumiko@example.com","female",75,"1934/10/20","080-6713-87BI"
	"Honma Chise","honma_chise@example.com","female",46,"1964/3/9","090-5237-82FJ"
	"Kawahata Nana","kawahata_nana@example.com","female",47,"1962/4/23","090-4760-51JA"
	"Kikuchi Takao","kikuchi_takao@example.com","male",35,"1975/1/1","080-1904-58CH"
	"Iwai Michiko","iwai_michiko@example.com","female",36,"1974/2/2","090-4520-77GH"
	"Kasai Satoshi","kasai_satoshi@example.com","male",24,"1985/12/23","090-8055-78CB"
	"Shima Masashi","shima_masashi@example.com","male",61,"1948/12/20","090-4180-99GH"
	"Suenaga Rena","suenaga_rena@example.com","female",80,"1929/5/22","080-1042-32EG"
	"Yokokawa Fumiyo","yokokawa_fumiyo@example.com","female",24,"1985/11/9","090-2679-49BI"
	"Yamanaka Mayuko","yamanaka_mayuko@example.com","female",62,"1947/9/9","090-1826-25EC"
	"Aoi Tatsuya","aoi_tatsuya@example.com","male",21,"1988/8/30","080-5257-80CB"
	"Tachikawa Hiroaki","tachikawa_hiroaki@example.com","male",40,"1970/1/25","090-3998-69FA"
	"Tsutsumi Manami","tsutsumi_manami@example.com","female",75,"1934/11/1","090-8224-26EH"
	"Sugimura Shunsuke","sugimura_shunsuke@example.com","male",70,"1939/8/10","090-6873-43DC"
	"Wakabayashi Mitsuru","wakabayashi_mitsuru@example.com","male",59,"1950/5/13","080-2151-64CI"
	"Maehara Tatsuhito","maehara_tatsuhito@example.com","male",49,"1960/6/21","080-5857- 9EA"
	"Chiba Hiroyuki","chiba_hiroyuki@example.com","male",59,"1950/5/8","080-2637-74JH"
	"Yoshioka Stmaria","yoshioka_stmaria@example.com","male",43,"1966/6/21","080-7737-22EA"
	"Kameyama Mitsunori","kameyama_mitsunori@example.com","male",65,"1944/7/22","090-4515-66EE"
	"Tamura Meisa","tamura_meisa@example.com","female",60,"1949/6/12","080- 698-23AC"
	"Taue Takashi","taue_takashi@example.com","male",34,"1975/5/15","090- 393- 7BD"
	"Yanagiya Yuujirou","yanagiya_yuujirou@example.com","male",32,"1977/12/18","080-1094-23CE"
	"Inagaki Ouga","inagaki_ouga@example.com","male",29,"1981/3/20","080-1535-79FF"
	"Kasahara Shidou","kasahara_shidou@example.com","male",58,"1951/8/3","090-2261-24IF"
	"Nakayama Yoshiki","nakayama_yoshiki@example.com","male",39,"1970/11/2","090-7101-88BF"
	"Takaya Masahiko","takaya_masahiko@example.com","male",29,"1980/4/12","090-6963-52GJ"
	"Nagao Erika","nagao_erika@example.com","female",29,"1980/11/23","080-2472-74DI"
	"Fujisawa Haruomi","fujisawa_haruomi@example.com","male",22,"1987/4/15","080-7776-16JF"
	"Kasai Ayaka","kasai_ayaka@example.com","female",67,"1942/12/2","090-4956-49FD"
	'''
	csv.Reader(text.ToReader()).ReadLines(Person)::Print()
}
