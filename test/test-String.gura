#!/usr/bin/env gurax
import(util.tester) {*}

words10 = [
	'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining'
]
words100 = [
	'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen',
	'demonic', 'horn', 'motion' 'whip', 'rampant', 'bruise', 'religion', 'ignore',
	'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic'
	'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore'
	'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile'
	'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy'
	'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable'
	'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply'
	'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired'
	'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam'
	'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal'
	'move', 'miniature', 'reading', 'possess', 'nebulous'
]

TestCase('String#first') {
	Tester(`''.first, true)
	
}
sys.Exit()
	
TestCase('Property') {
	Tester(`String.__PropHandler__(`len))
	Tester(`String.__PropHandler__(`width))
}

TestCase('String#Capitalize()') {
	Printf('%s -> %s\n', words10, words10::Capitalize())
	words = ['aaaaaa', 'zzzzzz', 'AAAAAA', 'ZZZZZZ']
	Printf('%s -> %s\n', words, words::Capitalize())
}

TestCase('String#Center()') {
	Printf('%s\n', words10::Center(10))
	Printf('%s\n', words10::Center(10, '.'))
}

TestCase('String#Chop()') {
}

TestCase('String#DecodeURI()') {
}

TestCase('String#Each()') {
	Tester(`[''.Each()])
	Tester(`['a'.Each()])
	Tester(`['abcdefg'.Each()])
	Tester(`[''.Each():utf8])
	Tester(`['a'.Each():utf8])
	Tester(`['abcdefg'.Each():utf8])
	Tester(`[''.Each():utf32])
	Tester(`['a'.Each():utf32])
	Tester(`['abcdefg'.Each():utf32])
	str = '\xe3\x81\x82\xe3\x81\x84\xe3\x81\x86\xe3\x81\x88\xe3\x81\x8a'
	Tester(`[Format('0x%06x', str.Each():utf8)])
	Tester(`[Format('0x%02x', str.Each():utf32)])
}

TestCase('String#EachLine()') {
	Tester(`[''.EachLine()])
	Tester(`['a'.EachLine()])
	Tester(`['line1'.EachLine()])
	Tester(`['line1\n'.EachLine()])
	Tester(`['line1\nline2'.EachLine()])
	Tester(`['line1\nline2\n'.EachLine()])
	Tester(`['line1\nline2\nline3'.EachLine()])
	Tester(`['line1\nline2\nline3\n'.EachLine()])
	Tester(`['line1'.EachLine():chop])
	Tester(`['line1\n'.EachLine():chop])
	Tester(`['line1\nline2'.EachLine():chop])
	Tester(`['line1\nline2\n'.EachLine():chop])
	Tester(`['line1\nline2\nline3'.EachLine():chop])
	Tester(`['line1\nline2\nline3\n'.EachLine():chop])
	Tester(`'line1\nline2\nline3\n'.EachLine():list)
	Tester(`'line1\nline2\nline3\n'.EachLine():list {|str| str.Upper()})
}

TestCase('String#Embed()') {
}

TestCase('String#Encode()') {
}

TestCase('String#EncodeURI()') {
}

TestCase('String#StartsWith(), String#EndsWith()') {
	str = 'abcdefghijklmn'
	exprs = [
		`str
		`str.StartsWith('abcd')
		`str.StartsWith('abdd')
		`str.StartsWith('ABCD')
		`str.StartsWith('ABCD'):icase
		`str.EndsWith('klmn')
		`str.EndsWith('klmm')
		`str.EndsWith('KLMN')
		`str.EndsWith('KLMN'):icase
		`str.StartsWith('defg', 3)
		`str.EndsWith('ghij', 10)
		`str.StartsWith('abcd'):rest
		`str.StartsWith('abdd'):rest
		`str.StartsWith('ABCD'):rest
		`str.StartsWith('ABCD'):rest:icase
		`str.EndsWith('klmn'):rest
		`str.EndsWith('klmm'):rest
		`str.EndsWith('KLMN'):rest
		`str.EndsWith('KLMN'):rest:icase
		`str.StartsWith('defg', 3):rest
		`str.EndsWith('ghij', 10):rest
	]
	Tester(exprs)
}

TestCase('String#Escape()') {
}

TestCase('String#EscapeHTML()') {
}

TestCase('String#Find()') {
	str = 'abcdefghijklmn'
	exprs = [
		`str
		`str.Find('a')
		`str.Find('d')
		`str.Find('n')
		`str.Find('z')
		`str.Find('a', 1)
		`str.Find('d', 1)
		`str.Find('n', 1)
		`str.Find('a', 6)
		`str.Find('d', 6)
		`str.Find('n', 6)
		`str.Find('abcd')
		`str.Find('defg')
		`str.Find('deff')
		`str.Find('ABCD')
		`str.Find('DEFG')
		`str.Find('ABCD'):icase
		`str.Find('DEFG'):icase
	]
	Tester(exprs)
	str = 'あいうえおかきくけこ'
	exprs = [
		`str
		`str.Find('あ')
		`str.Find('お')
		`str.Find('こ')
		`str.Find('ん')
		`str.Find('あいうえ')
		`str.Find('おかきく')
		`str.Find('おかきき')
	]
	Tester(exprs)
}

TestCase('String#Fold()') {
}

TestCase('String#Foldw()') {
}

TestCase('String#Format()') {
}

TestCase('String#IsAlnum()') {
	Tester(`''.IsAlnum())
	Tester(`'a'.IsAlnum())
	Tester(`'0'.IsAlnum())
	Tester(`' '.IsAlnum())
	Tester(`'*'.IsAlnum())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.IsAlnum())
	Tester(`'0123456789'.IsAlnum())
	Tester(`' \t\n'.IsAlnum())
	Tester(`'a*'.IsAlnum())
	Tester(`'0*'.IsAlnum())
	Tester(`' *'.IsAlnum())
}

TestCase('String#IsAlpha()') {
	Tester(`''.IsAlpha())
	Tester(`'a'.IsAlpha())
	Tester(`'0'.IsAlpha())
	Tester(`' '.IsAlpha())
	Tester(`'*'.IsAlpha())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.IsAlpha())
	Tester(`'0123456789'.IsAlpha())
	Tester(`' \t\n'.IsAlpha())
	Tester(`'a*'.IsAlpha())
	Tester(`'0*'.IsAlpha())
	Tester(`' *'.IsAlpha())
}

TestCase('String#IsDigit()') {
	Tester(`''.IsDigit())
	Tester(`'a'.IsDigit())
	Tester(`'0'.IsDigit())
	Tester(`' '.IsDigit())
	Tester(`'*'.IsDigit())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.IsDigit())
	Tester(`'0123456789'.IsDigit())
	Tester(`' \t\n'.IsDigit())
	Tester(`'a*'.IsDigit())
	Tester(`'0*'.IsDigit())
	Tester(`' *'.IsDigit())
}

TestCase('String#IsEmpty()') {
	Tester(`''.IsEmpty())
	Tester(`'0'.IsEmpty())
}

TestCase('String#IsSpace()') {
	Tester(`''.IsSpace())
	Tester(`'a'.IsSpace())
	Tester(`'0'.IsSpace())
	Tester(`' '.IsSpace())
	Tester(`'*'.IsSpace())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.IsSpace())
	Tester(`'0123456789'.IsSpace())
	Tester(`' \t\n'.IsSpace())
	Tester(`'a*'.IsSpace())
	Tester(`'0*'.IsSpace())
	Tester(`' *'.IsSpace())
}

TestCase('String#Left()') {
	Printf('%-13s .. "%s"\n', words10, words10::Left(0))
	Printf('%-13s .. "%s"\n', words10, words10::Left(6))
}

TestCase('String#LJust()') {
	Printf('%s\n', words10::LJust(10))
	Printf('%s\n', words10::LJust(10, '.'))
}

TestCase('String#Uppper(), String#Lower()') {
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.Upper())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.Lower())
}

TestCase('String#Mid()') {
	Tester(`'Hello World'.Mid(0))
	Tester(`'Hello World'.Mid(6))
	Tester(`'Hello World'.Mid(9))
	Tester(`'Hello World'.Mid(10))
	Tester(`'Hello World'.Mid(-1))
	Tester(`'Hello World'.Mid(-2))
	Tester(`'Hello World'.Mid(11))
	Tester(`'Hello World'.Mid(12))
	Tester(`'Hello World'.Mid(-11))
	Tester(`'Hello World'.Mid(-12))
	Tester(`words10)
	Tester(`words10::Mid(0))
	Tester(`words10::Mid(1))
	Tester(`words10::Mid(6))
	Tester(`words10::Mid(0, 0))
	Tester(`words10::Mid(1, 4))
	Tester(`words10::Mid(6, 4))
}

TestCase('String#Print()') {
}

TestCase('String#Println()') {
}

TestCase('String#Replace()') {
	str = 'A brown fox jumps over the lazy dog.'
	Tester(`str)
	Tester(`str.Replace('', '#'))
	Tester(`str.Replace('brown', 'red'))
	Tester(`str.Replace('.', '!!!'))
	Tester(`str.Replace('fox', 'FOX'))
	Tester(`str.Replace('fox', 'dog'))
	Tester(`str.Replace('fox', 'f-o-x'))
	Tester(`str.Replace('FOX', 'f-o-x'))
	Tester(`str.Replace('FOX', 'f-o-x'):icase)
	Tester(`str.Replace('fox', 'FOX'))
	Tester(`str.Replace('fox', 'FOX'))
	Tester(`str.Replace('fox', 'FOX'))
	str = 'abcdef abcdef abcdef abcdef abcdef'
	Tester(`str)
	Tester(`str.Replace('abcdef', 'ABCDEF'))
	Tester(`str.Replace('abcdef', 'ABCDEF', 0))
	Tester(`str.Replace('abcdef', 'ABCDEF', 1))
	Tester(`str.Replace('abcdef', 'ABCDEF', 3))
	Tester(`str.Replace('abcdef', 'ABCDEF', 10))
}

TestCase('String#ReplaceM()') {
	str = 'A brown fox jumps over the lazy dog.'
	Tester(`str)
	Tester(`str.ReplaceM(['fox', 'dog', 'dog', 'fox']))
	Tester(`str.ReplaceM(['FOX', 'dog', 'DOG', 'fox']))
	Tester(`str.ReplaceM(['FOX', 'dog', 'DOG', 'fox']):icase)
	str = 'abcdef abcdef abcdef abcdef abcdef'
	Tester(`str)
	Tester(`str.ReplaceM(['abc', 'ABC', 'def', 'DEF']))
	Tester(`str.ReplaceM(['abc', 'ABC', 'def', 'DEF'], 0))
	Tester(`str.ReplaceM(['abc', 'ABC', 'def', 'DEF'], 1))
	Tester(`str.ReplaceM(['abc', 'ABC', 'def', 'DEF'], 3))
	Tester(`str.ReplaceM(['abc', 'ABC', 'def', 'DEF'], 10))
}

TestCase('String#Right()') {
	Printf('%-13s .. "%s"\n', words10, words10::Right(0))
	Printf('%-13s .. "%s"\n', words10, words10::Right(6))
}

TestCase('String#RJust()') {
	Printf('%s\n', words10::RJust(10))
	Printf('%s\n', words10::RJust(10, '.'))
}

TestCase('String#Split()') {
	str = 'abc:def:ghi:jkl:mno'
	Tester(`str)
	Tester(`str.Split(':'):list)
	Tester(`str.Split(':', 0):list)
	Tester(`str.Split(':', 1):list)
	Tester(`str.Split(':', 2):list)
	Tester(`str.Split(':', 3):list)
	Tester(`str.Split(':', 10):list)
}

TestCase('String#Strip()') {
	Tester(`''.Strip(), true)
	Tester(`'abcdefg'.Strip(), true)
	Tester(`' abcdefg'.Strip(), true)
	Tester(`'abcdefg '.Strip(), true)
	Tester(`' abcdefg '.Strip(), true)
	Tester(`'   abcdefg'.Strip(), true)
	Tester(`'abcdefg   '.Strip(), true)
	Tester(`'   abcdefg   '.Strip(), true)
	Tester(`'\nabcdefg\n'.Strip(), true)
	Tester(`'\tabcdefg\t'.Strip(), true)
	Tester(`'\n \t\n \tabcdefg\n \t\n \t'.Strip(), true)
}

TestCase('String#StripLeft()') {
	Tester(`''.StripLeft(), true)
	Tester(`'abcdefg'.StripLeft(), true)
	Tester(`' abcdefg'.StripLeft(), true)
	Tester(`'abcdefg '.StripLeft(), true)
	Tester(`' abcdefg '.StripLeft(), true)
	Tester(`'   abcdefg'.StripLeft(), true)
	Tester(`'abcdefg   '.StripLeft(), true)
	Tester(`'   abcdefg   '.StripLeft(), true)
	Tester(`'\nabcdefg\n'.StripLeft(), true)
	Tester(`'\tabcdefg\t'.StripLeft(), true)
	Tester(`'\n \t\n \tabcdefg\n \t\n \t'.StripLeft(), true)
}

TestCase('String#StripRight()') {
	Tester(`''.StripRight(), true)
	Tester(`'abcdefg'.StripRight(), true)
	Tester(`' abcdefg'.StripRight(), true)
	Tester(`'abcdefg '.StripRight(), true)
	Tester(`' abcdefg '.StripRight(), true)
	Tester(`'   abcdefg'.StripRight(), true)
	Tester(`'abcdefg   '.StripRight(), true)
	Tester(`'   abcdefg   '.StripRight(), true)
	Tester(`'\nabcdefg\n'.StripRight(), true)
	Tester(`'\tabcdefg\t'.StripRight(), true)
	Tester(`'\n \t\n \tabcdefg\n \t\n \t'.StripRight(), true)
}

TestCase('String#ToBinary()') {
}

TestCase('String#ToReader()') {
}

TestCase('String#ToSymbol()') {
}

TestCase('String#ToTemplate()') {
}

TestCase('String#Translator()') {
}

TestCase('String#UnescapeHTML()') {
}

TestCase('String#ZenToHan()') {
}

TestCase('String#len, String#width') {
	exprs = [
		`str
		`str.len
		`str.width
	]
	str = 'abcdefghijklmn'
	Tester(exprs)
	str = 'あいうえおかきくけこ'
	Tester(exprs)
}
