#!/usr/bin/env gurax
import(util.tester) {*}

words10 = [
	'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'horn'
]
words100 = [
	'bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen',
	'demonic', 'horn', 'motion' 'whip', 'rampant', 'bruise', 'religion', 'ignore',
	'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic'
	'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore'
	'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile'
	'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy'
	'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable'
	'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply'
	'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired'
	'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam'
	'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal'
	'move', 'miniature', 'reading', 'possess', 'nebulous'
]

TestCase('Property') {
	Tester(`String.__PropHandler__(`len))
	Tester(`String.__PropHandler__(`width))
}

TestCase('String#Align()') {
}

TestCase('String#Capitalize()') {
}

TestCase('String#Chop()') {
}

TestCase('String#DecodeURI()') {
}

TestCase('String#Each()') {
}

TestCase('String#EachLine()') {
}

TestCase('String#Embed()') {
}

TestCase('String#Encode()') {
}

TestCase('String#EncodeURI()') {
}

TestCase('String#StartsWith(), String#EndsWith()') {
	str = 'abcdefghijklmn'
	exprs = [
		`str
		`str.StartsWith('abcd')
		`str.StartsWith('abdd')
		`str.StartsWith('ABCD')
		`str.StartsWith('ABCD'):icase
		`str.EndsWith('klmn')
		`str.EndsWith('klmm')
		`str.EndsWith('KLMN')
		`str.EndsWith('KLMN'):icase
		`str.StartsWith('defg', 3)
		`str.EndsWith('ghij', 10)
		`str.StartsWith('abcd'):rest
		`str.StartsWith('abdd'):rest
		`str.StartsWith('ABCD'):rest
		`str.StartsWith('ABCD'):rest:icase
		`str.EndsWith('klmn'):rest
		`str.EndsWith('klmm'):rest
		`str.EndsWith('KLMN'):rest
		`str.EndsWith('KLMN'):rest:icase
		`str.StartsWith('defg', 3):rest
		`str.EndsWith('ghij', 10):rest
	]
	Tester(exprs)
}

TestCase('String#Escape()') {
}

TestCase('String#EscapeHTML()') {
}

TestCase('String#Find()') {
	str = 'abcdefghijklmn'
	exprs = [
		`str
		`str.Find('a')
		`str.Find('d')
		`str.Find('n')
		`str.Find('z')
		`str.Find('a', 1)
		`str.Find('d', 1)
		`str.Find('n', 1)
		`str.Find('a', 6)
		`str.Find('d', 6)
		`str.Find('n', 6)
		`str.Find('abcd')
		`str.Find('defg')
		`str.Find('deff')
		`str.Find('ABCD')
		`str.Find('DEFG')
		`str.Find('ABCD'):icase
		`str.Find('DEFG'):icase
	]
	Tester(exprs)
	str = 'あいうえおかきくけこ'
	exprs = [
		`str
		`str.Find('あ')
		`str.Find('お')
		`str.Find('こ')
		`str.Find('ん')
		`str.Find('あいうえ')
		`str.Find('おかきく')
		`str.Find('おかきき')
	]
	Tester(exprs)
}

TestCase('String#Fold()') {
}

TestCase('String#Foldw()') {
}

TestCase('String#Format()') {
}

TestCase('String#Left()') {
}

TestCase('String#Uppper(), String#Lower()') {
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.Upper())
	Tester(`'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.Lower())
}

TestCase('String#Mid()') {
}

TestCase('String#Print()') {
}

TestCase('String#Println()') {
}

TestCase('String#Replace()') {
}

TestCase('String#Replaces()') {
}

TestCase('String#Right()') {
}

TestCase('String#Split()') {
}

TestCase('String#Strip()') {
}

TestCase('String#ToBinary()') {
}

TestCase('String#ToReader()') {
}

TestCase('String#ToSymbol()') {
}

TestCase('String#ToTemplate()') {
}

TestCase('String#Translator()') {
}

TestCase('String#UnescapeHTML()') {
}

TestCase('String#ZenToHan()') {
}

TestCase('String#len, String#width') {
	exprs = [
		`str
		`str.len
		`str.width
	]
	str = 'abcdefghijklmn'
	Tester(exprs)
	str = 'あいうえおかきくけこ'
	Tester(exprs)
}
