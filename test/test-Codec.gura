#!/usr/bin/env gurax
import(util.tester) {*}
import(hash)

TestCase('Property') {
	Codec.PrintPropSlots()
}

TestCase('Japanese') {
	buffSrc = Stream('test-Codec/chars-cp932.txt', 'r', 'cp932').ReadText().ToBinary()
	Stream('test-Codec/chars-cp932.txt', 'r', 'cp932') {|src|
		text = src.ReadLines(4).Join()
		src.SkipLines(2)
		text += src.ReadText()
		buffSrcP = text.ToBinary()
	}
	codecNames = ['sjis', 'jis', 'eucjp', 'utf8', 'utf16le', 'utf16be', 'utf32le', 'utf32be']
	codecNames.Each {|codecName|
		buffCoded = Binary()
		buffCoded.Writer(codecName).PipeFrom(buffSrc.Reader()):cooked
		buffRev = buffCoded.Reader(codecName).ReadText().ToBinary()
		buffCodedP = Binary()
		buffCodedP.Writer(codecName).PipeFrom(buffSrcP.Reader()):cooked
		buffRevP = buffCodedP.Reader(codecName).ReadText().ToBinary()
		Printf('%-20s %s All:%s Partial:%s\n', codecName, hash.MD5().PipeFrom(buffCoded).digestHex,
			cond(buffSrc == buffRev, 'OK', '*NG*'),
			cond(buffSrcP == buffRevP, 'OK', '*NG*'))
	}
}

TestCase('') {
	b'ABCDEF\x00\x00\x00\x00'.Reader('sjis').ReadText().ToBinary().Dump()
	b'ABCDEF\x00\x00\x00\x00'.p.Unpack('10s')[0].ToBinary().Dump()
}
