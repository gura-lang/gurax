#!/usr/bin/env gurax
import(util.tester) {*}
import(hash)

TestCase('Property') {
	Codec.PrintPropSlots()
}

TestCase('Japanese') {
	buffSrc = Stream('test-Codec/chars-cp932.txt', 'r', 'cp932').ReadText().ToBinary()
	Stream('test-Codec/chars-cp932.txt', 'r', 'cp932') {|src|
		text = src.ReadLines(4).Join()
		src.SkipLines(2)
		text += src.ReadText()
		buffSrcP = text.ToBinary()
	}
	codecNames = ['sjis', 'jis', 'eucjp', 'utf8', 'utf16le', 'utf16be', 'utf32le', 'utf32be']
	codecNames.Each {|codecName|
		buffCoded = Binary()
		buffCoded.Writer(codecName).PipeFrom(buffSrc.Reader()):cooked
		buffRev = buffCoded.Reader(codecName).ReadText().ToBinary()
		buffCodedP = Binary()
		buffCodedP.Writer(codecName).PipeFrom(buffSrcP.Reader()):cooked
		buffRevP = buffCodedP.Reader(codecName).ReadText().ToBinary()
		Printf('%-20s %s All:%s Partial:%s\n', codecName, hash.MD5().PipeFrom(buffCoded).digestHex,
			cond(buffSrc == buffRev, 'OK', '*NG*'),
			cond(buffSrcP == buffRevP, 'OK', '*NG*'))
	}
}

TestCase('codecs.japanese.Conv*') {
	buff = Stream('test-Codec/chars-cp932.txt', 'r', 'cp932').Read()
	p = buff.p
	repeat {
		chHigh = p.uint8:fwd
		!chHigh && break
		if (0xa1 <= chHigh && chHigh <= 0xdf) {
			codeSJIS = chHigh
		} elsif ((0x81 <= chHigh && chHigh <= 0x9f) || (0xe0 <= chHigh && chHigh <= 0xef)) {
			chLow = p.uint8:fwd
			codeSJIS = (chHigh << 8) + chLow
		} else {
			continue
		}
		codeUTF32 = codecs.japanese.ConvSJISToUTF32(codeSJIS)
		codeSJISRev = codecs.japanese.ConvUTF32ToSJIS(codeUTF32)
		if (codeSJIS == codeSJISRev) {
			Printf('%04x %04x OK\n', codeSJIS, codeUTF32)
		} else {
			Printf('%04x %04x *NG* %04x\n', codeSJIS, codeUTF32, codeSJISRev)
		}
	}
}

TestCase('Handling of Zero in the input data') {
	b'ABCDEF\x00\x00\x00\x00'.Reader('sjis').ReadText().ToBinary().Dump()
	b'ABCDEF\x00\x00\x00\x00'.p.Unpack('10s')[0].ToBinary().Dump()
}

TestCase('UTF-16 Surrogate Pair') {
	str = '\xf0\xa9\xb9\x89'	// tobiuo
	str += '\xf0\xa0\xae\xb7'	// tsuchi-yoshi
	str.Encode('utf16be').Dump()
	str.Encode('utf16le').Dump()
	b'\xd8\x67\xde\x49\xd8\x42\xdf\xb7'.Decode('utf16be').p.Dump()
	b'\x67\xd8\x49\xde\x42\xd8\xb7\xdf'.Decode('utf16le').p.Dump()
}
