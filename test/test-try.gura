#!/usr/bin/env gurax
import(diff)
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`try { f() }
		`try { f() } finally { h() }
		`try { f() } catch { g() }
		`try { f() } catch { g() } finally { h() }
		`try { f() } catch { g(), return } finally { h() }
		`try { f() } catch { g1(), return } else { g2(), return} finally { h() }
		`try { f() } catch {|e| g() }
		`try { f() } catch (Error.SyntaxError) {|e| g() }
		`try { f() } catch (Error.SyntaxError) { g() } catch (Error.KeyError) { h() }
		`try { f() } catch (Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } catch { f3() } 
		`try { f() } catch { f3() } catch(Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } 
		`try { f() } catch (Error.SyntaxError, Error.KeyError) { f1() } catch { f3() } 
		`try { f() } catch (Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } catch { f3() } else { f4() }
		`try { f() } catch (Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } catch { f3() } else { f4() } finally { h() }
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Simple') {
	try {
		Error.Raise(Error.SyntaxError, 'MESSAGE')
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from nested try') {
	try {
		try {
			Error.Raise(Error.SyntaxError, 'MESSAGE')
		} catch(Error.ValueError) {|e|
			Println(e.errorType.name, ' ', e.text)
		}
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from double-nested try') {
	try {
		try {
			try {
				Error.Raise(Error.SyntaxError, 'MESSAGE')
			} catch(Error.ValueError) {|e|
				Println(e.errorType.name, ' ', e.text)
			}
			Println('*skipped*')
		} catch(Error.TypeError) {|e|
			Println(e.errorType.name, ' ', e.text)
		}
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from scope') {
	try {
		scope {
			Error.Raise(Error.SyntaxError, 'MESSAGE')
		}
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from triple-nested scope') {
	try {
		scope {
			scope {
				scope {
					Error.Raise(Error.SyntaxError, 'MESSAGE')
				}
			}
		}
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from function') {
	f1() = Error.Raise(Error.SyntaxError, 'MESSAGE')
	f2() = f1()
	f3() = f2()
	f4() = f3()
	try {
		f1()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f2()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f3()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f4()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Catch-any may be placed anywhere') {
	expr1 = `try {
		nil
	} catch (a) {|e|
		nil
	} catch (b) {|e|
		nil
	} catch (c) {|e|
		nil
	} catch {
		nil
	}
	expr2 = `try {
		nil
	} catch {
		nil
	} catch (a) {|e|
		nil
	} catch (b) {|e|
		nil
	} catch (c) {|e|
		nil
	}	
	buff1 = B''
	expr1.PrintPUnit(buff1)
	buff2 = B''
	expr2.PrintPUnit(buff2)
	sys.cout.Write(buff1)
	Printf('%s\n', cond(diff.Diff(buff1, buff2).distance == 0, 'OK', '*NG*'))
}

TestCase('Multiple Errors') {
	f() {block} = try {
		block()
	} catch (Error.SyntaxError) {|e|
		'1st handler caught ' + e.errorType.name
	} catch (Error.KeyError, Error.MemoryError, Error.PropertyError) {|e|
		'2nd handler caught ' + e.errorType.name
	} catch (Error.StreamError, Error.SymbolError) {|e|
		'3rd handler caught ' + e.errorType.name
	} else {
		'else handler'
	}
	Tester(`f {})
	Tester(`f {Error.Raise(Error.SyntaxError, '')})
	Tester(`f {Error.Raise(Error.KeyError, '')})
	Tester(`f {Error.Raise(Error.MemoryError, '')})
	Tester(`f {Error.Raise(Error.PropertyError, '')})
	Tester(`f {Error.Raise(Error.StreamError, '')})
	Tester(`f {Error.Raise(Error.SymbolError, '')})
}

TestCase('finally statement') {
	f1() {block} = {
		try {
			block()
		} else {
			'else-result'
		} catch {|e|
			'catch-any-result:' + e.errorType.name
		}
		'end-of-function'
	}
	f2() {block} = {
		try {
			block()
		} else {
			'else-result'
		} catch {|e|
			'catch-any-result:' + e.errorType.name
		}
	}
	f3() {block} = {
		str = ''
		try {
			block()
		} catch (Error.SyntaxError) {
			Println('catch-SyntaxError')
			return('catch-SyntaxError-result')
		} catch (Error.KeyError) {
			Println('catch-KeyError')
			return('catch-KeyError-result')
		} catch {|e|
			Println('catch-any')
			return('catch-any-result:' + e.errorType.name)
		} else {
			Println('else')
			return('else-result')
		} finally {
			Println('finally')
		}
	}
	f4() {block} = {
		str = ''
		try {
			block()
		} catch (Error.SyntaxError) {
			Println('catch-SyntaxError')
			str = 'catch-SyntaxError-result'
		} catch (Error.KeyError) {
			Println('catch-KeyError')
			str = 'catch-KeyError-result'
		} catch {|e|
			Println('catch-any')
			str = 'catch-any-result:' + e.errorType.name
		} else {
			Println('else')
			str = 'else-result'
		} finally {
			Println('finally')
			//str = 'finally-result'
		}
		str
	}
	TesterSub(f as Function) = {
		Println(f)
		Println('----')
		Printf('raise nothing .. result=%s\n', f() {})
		Println('----')
		Printf('raise SyntaxError .. result=%s\n', f() {Error.Raise(Error.SyntaxError, 'hoge')})
		Println('----')
		Printf('raise KeyError .. result=%s\n', f() {Error.Raise(Error.KeyError, 'hoge')})
		Println('----')
		Printf('raise IOError .. result=%s\n', f() {Error.Raise(Error.IOError, 'hoge')})
	}
	TesterSub(f1)
	TesterSub(f2)
	TesterSub(f3)
	TesterSub(f4)
}
