#!/usr/bin/env gurax
import(diff)
import(util.tester) {*}

TestCase('PUnit') {
	exprs = [
		`try { f() }
		`try { f() } catch { g() }
		`try { f() } catch {|e| g() }
		`try { f() } catch (Error.SyntaxError) {|e| g() }
		`try { f() } catch (Error.SyntaxError) { g() } catch (Error.KeyError) { h() }
		`try { f() } catch (Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } catch { f3() } 
		`try { f() } catch { f3() } catch(Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } 
		`try { f() } catch (Error.SyntaxError, Error.KeyError) { f1() } catch { f3() } 
		`try { f() } catch (Error.SyntaxError) { f1() } catch (Error.KeyError) { f2() } catch { f3() } else { f4() }
	]
	exprs::PrintPUnitWithLabel()
}

TestCase('Catch-any may be placed anywhere') {
	expr1 = `try {
		nil
	} catch (a) {|e|
		nil
	} catch (b) {|e|
		nil
	} catch (c) {|e|
		nil
	} catch {
		nil
	}
	expr2 = `try {
		nil
	} catch {
		nil
	} catch (a) {|e|
		nil
	} catch (b) {|e|
		nil
	} catch (c) {|e|
		nil
	}	
	buff1 = B''
	expr1.PrintPUnit(buff1)
	buff2 = B''
	expr2.PrintPUnit(buff2)
	sys.cout.Write(buff1)
	Printf('%s\n', cond(diff.Diff(buff1, buff2).distance == 0, 'OK', '*NG*'))
}

TestCase('Simple') {
	try {
		Error.Raise(Error.SyntaxError, 'MESSAGE')
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from nested try') {
	try {
		try {
			Error.Raise(Error.SyntaxError, 'MESSAGE')
		} catch(Error.ValueError) {|e|
			Println(e.errorType.name, ' ', e.text)
		}
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from double-nested try') {
	try {
		try {
			try {
				Error.Raise(Error.SyntaxError, 'MESSAGE')
			} catch(Error.ValueError) {|e|
				Println(e.errorType.name, ' ', e.text)
			}
			Println('*skipped*')
		} catch(Error.TypeError) {|e|
			Println(e.errorType.name, ' ', e.text)
		}
		Println('*skipped*')
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from scope') {
	try {
		scope {
			Error.Raise(Error.SyntaxError, 'MESSAGE')
		}
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from triple-nested scope') {
	try {
		scope {
			scope {
				scope {
					Error.Raise(Error.SyntaxError, 'MESSAGE')
				}
			}
		}
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}

TestCase('Error from function') {
	f1() = Error.Raise(Error.SyntaxError, 'MESSAGE')
	f2() = f1()
	f3() = f2()
	f4() = f3()
	try {
		f1()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f2()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f3()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
	try {
		f4()
	} catch {|e|
		Println(e.errorType.name, ' ', e.text)
	}
}
