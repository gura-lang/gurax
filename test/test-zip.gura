#!/usr/bin/env gurax
import(util.tester) {*}
import(zip)

PrintStat(st as Stat):map = Printf('%-32s %8d %8d %s\n', st.name@zip, st.size, st.compressedSize, st.compressionMethod)

TestCase('Property') {
	zip.Stat.PrintPropSlots()
	zip.Reader.PrintPropSlots()
	zip.Writer.PrintPropSlots()
	zip.bzip2.PrintPropSlots()
	zip.gzip.PrintPropSlots()
}

TestCase('zip.Reader()') {
	zip.Reader('test-zip/small.zip') {|reader|
		Println('Reader#EachEntry()')
		PrintStat(reader.EachEntry():*stat)
		Println('Reader#EachEntry():all')
		PrintStat((reader.EachEntry():all):*stat)
		Tester(`reader.Entry('foo/dir1/file1-1'))
		Tester(`reader.Entry('foo/dir1'))
		Tester(`reader.Entry('foo/dir1/'))
	}
}

TestCase('zip.Writer()') {
	r = Random(0)
	buffZip = Binary()
	zip.Writer(buffZip) {|writer|
		r.IntSeq(3000, 30) {|n, i|
			bytes = 1000 + n
			(buff = Binary()).p.Put(`uint8, r.IntSeq(256, bytes))
			writer.Add(buff, Format('entry%02d.bin', i))
		}
		//writer.Close()
	}
	zip.Reader(buffZip) {|reader|
		PrintStat(reader.EachEntry()::stat)
	}
}

TestCase('zip.Directory()') {
	path.Walk(zip.Directory('test-zip/small.zip')):stat {|st|
		Println(st.name@zip)
	}
}

TestCase('Path manager extension') {
	path.Walk('test-zip/small.zip/'):stat {|st|
		Println(st.name@zip)
	}
}

TestCase('zip.Writer#Add() issues error when a Stream without identifier is passed') {
	buffZip = Binary()
	zip.Writer(buffZip) {|writer|
		(buff = Binary()).p.Put(`uint8, Range(256))
		Tester(`writer.Add(buff))
	}
}

TestCase('Codec') {
	[nil, 'sjis', 'utf8', 'utf16le', 'utf16be', 'utf32le', 'utf32be'].Each {|codec|
		Printf('Codec:%s\n', codec || 'nil')
		zip.codec = codec
		Binary {|buff|
			w = zip.Writer(buff)
			w.Add(b'', [
				'\xe4\xbb\x95\xe6\xa7\x98\xe6\x9b\xb8\x2e\x64\x6f\x63'
				'\xe5\x8f\x96\xe3\x82\x8a\xe6\x89\xb1\xe3\x81\x84\xe8\xaa\xac\xe6\x98\x8e\xe6\x9b\xb8\x2e\x64\x6f\x63'
				'\x32\x30\x32\x30\xe4\xb8\x8a\xe5\x8d\x8a\xe6\x9c\x9f\xe5\x96\xb6\xe6\xa5\xad\xe5\xa0\xb1\xe5\x91\x8a\xe6\x9b\xb8\x2e\x78\x6c\x73'
				'\x32\x30\x32\x30\xe4\xb8\x8b\xe5\x8d\x8a\xe6\x9c\x9f\xe5\x96\xb6\xe6\xa5\xad\xe5\xa0\xb1\xe5\x91\x8a\xe6\x9b\xb8\x2e\x78\x6c\x73'
				'\xe3\x82\xa4\xe3\x83\xa9\xe3\x82\xb9\xe3\x83\x88\xe6\xa1\x88\xef\xbc\x91\x2e\x70\x6e\x67'
				'\xe3\x82\xa4\xe3\x83\xa9\xe3\x82\xb9\xe3\x83\x88\xe6\xa1\x88\xef\xbc\x92\x2e\x70\x6e\x67'
				'\xe3\x82\xa4\xe3\x83\xa9\xe3\x82\xb9\xe3\x83\x88\xe6\xa1\x88\xef\xbc\x93\x2e\x70\x6e\x67'])
			w.Close()
			r = zip.Reader(buff)
			Println('  ', r.EachEntry():*stat:*name@zip)
			Println('  ', path.Walk(zip.Directory(buff)))
		}
	}
	zip.codec = nil
}

TestCase('path.Walk() in zip file') {
	Println(path.Walk('test-zip/zerofiles.zip/'):*Replace('\\', '/'))
}

TestCase('path.Walk() with zip.Directory') {
	Println(path.Walk(zip.Directory('test-zip/zerofiles.zip')))
}

TestCase('zip.Reader#EachEntry()') {
	Println(zip.Reader('test-zip/zerofiles.zip').EachEntry():*stat:*name@zip)
}
