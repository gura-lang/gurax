#!/usr/bin/env gurax
import(util.tester) {*}
import(re)

TestCase('Property') {
	Tester(`re.Match.__PropHandler__(`begin))
	Tester(`re.Match.__PropHandler__(`end))
	Tester(`re.Match.__PropHandler__(`source))
	Tester(`re.Match.__PropHandler__(`string))
	Tester(`re.Group.__PropHandler__(`begin))
	Tester(`re.Group.__PropHandler__(`end))
	Tester(`re.Group.__PropHandler__(`string))
}

TestCase('String#Sub(), Pattern#Sub()') {
	x = ['hoge 123 foo', 'no number here', '456 aaaaaa 111']
	x::Sub(r'\d+', 'NUM') {|str| Println(str)}
	Println('---')
	x::Sub(r'\d+', 'NUM') {|str, nReplaced| (nReplaced > 0) && Println(str)}
	Println('---')
	re.Pattern(r'\d+').Sub(x, 'NUM') {|str| Println(str)}
	Println('---')
	re.Pattern(r'\d+').Sub(x, 'NUM') {|str, nReplaced| (nReplaced > 0) && Println(str)}
}

TestCase('re.Match()') {
	Tester(`re.Match(r'(\d+)\.(\d*)', '3.14')) {|m|
		Tester(`m.source)
		Tester(`m[0])
		Tester(`m[1])
		Tester(`m[2])
	}
	Tester(`re.Match('q[\\c\\\\]', 'q\034')) {|m|
		Tester(`m.source)
		Tester(`m[0])
	}
	Tester(`re.Match(r'(\b[a-z]+) \1', 'cat in the the hat')) {|m|
		Tester(`m.source)
		Tester(`m[0])
		Tester(`m[1])
	}
	Tester(`re.Match(r'A(a*)A', 'AaaaaA')) {|m|
		Tester(`m.source)
		Tester(`m[0])
		Tester(`m[1])
	}
	Tester(`re.Match(r'(?<first>\d+)\.(?<second>\d*)', '3.14')) {|m|
		Tester(`m.source)
		Tester(`m['first'])
		Tester(`m['second'])
	}
	Tester(`re.Match(r'(?<first>\d+)\.(\d*)', '3.14')) {|m|
		Tester(`m.source)
		Tester(`m['first'])
		Tester(`m[2])
	}
	Tester(`re.Match(r'(\d+)\.(?<second>\d*)', '3.14')) {|m|
		Tester(`m.source)
		Tester(`m[1])
		Tester(`m['second'])
	}
	Tester(`cond(re.Match(r'hello', 'HELLO WORLD'), 'match', 'not match'))
	Tester(`cond(re.Match(re.Pattern(r'hello'):icase, 'HELLO WORLD'), 'match', 'not match'))
	//Tester(`(0..):*ToString():*Match('3').skipnil().head(30):*source.Join(','))
}

TestCase('List#Grep()') {
	x = ['apple', 'orange', 'pencil', '1234', 'grape', '5678']
	Tester(`x.Grep(r'\w+'):*source.Join(','))
	Tester(`x.Grep(r'r'):*source.Join(','))
	Tester(`x.Grep(r'^a'):*source.Join(','))
	Tester(`x.Grep(r'^o'):*source.Join(','))
	Tester(`x.Grep(r'pe$'):*source.Join(','))
	Tester(`x.Grep(r'\d+'):*source.Join(','))
	Tester(`['1-1', '11-a', '1', '00-', '1-0'].Grep(r'\d+-\d+'):*source.Join(','))
}

/*
TestCase('') {
	str = 'hoge(ABCD, EFGH, IJKL), foo(MNOP, QRST), bar(UVWX, 1234)'
	Tester(`str.sub(r'(\w+\()(\w+)', &{$m[1] + $m[2].lower()}))
}

TestCase('') {
	str = 'abcdefg hijklmn opqrstu vwxyz'
	Tester(`str.match(r'(\w+) (\w+) (\w+) (\w+)')[1..4].Join())
}

TestCase('') {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	Tester(`str)
	Tester(`re.scan(r'\w+', str)::string)
	Tester(`re.scan(r'\w+', str, 10)::string)
	Tester(`re.scan(r'\w+', str, 0, 10)::string)
	Tester(`re.scan(r'\w+', str):*group(0)::string)
	Tester(`re.scan(r'\w+', str, 10):*group(0)::string)
	Tester(`re.scan(r'\w+', str, 0, 10):*group(0)::string)
}

TestCase('') {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	Tester(`str)
	Tester(`str.scan(r'\w+')::string)
	Tester(`str.scan(r'\w+', 10)::string)
	Tester(`str.scan(r'\w+', 0, 10)::string)
	Tester(`str.scan(r'\w+'):*group(0)::string)
	Tester(`str.scan(r'\w+', 10):*group(0)::string)
	Tester(`str.scan(r'\w+', 0, 10):*group(0)::string)
}

TestCase('') {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	Tester(`str)
	Tester(`str.match(r'\w+', 0)[0])
	Tester(`str.match(r'\w+', 6)[0])
	Tester(`str.match(r'\w+', 12)[0])
	Tester(`str.match(r'\w+', 12, 13)[0])
}

TestCase('') {
	m = '3.14'.match(r'(\d+)\.(\d*)')
	Tester(`m.source)
	Tester(`m[1])
	Tester(`m[2])
}

TestCase('') {
	Tester(`re.scan('(ba)(.)', 'foobarbazfoobarbaz'):list {|m| [m[0], m[1, 2]] })
}

TestCase('') {
	pattern = re.pattern(r'^http://([^/]+)')
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	Println(pattern.match(lines).skipnil():*group(1):*string)
}

TestCase('') {
	ms = re.scan(r'\[([^]]+)\]', 'jkfdjf[hoge]kdsaa[foo]kfjdkjfkd[bar]saajkjkjfdsfdaaa');
	Println(ms:*group(1)::string):nomap
	ms = re.pattern(r'\[([^]]+)\]').scan('jkfdjf[hoge]kdsaa[foo]kfjdkjfkd[bar]saajkjkjfdsfdaaa');
	Println(ms:*group(1)::string):nomap
	text = 'fjdkjf[0]jfkdjk[100]fdfdsfjdsfjdkshe[300]llofkdjsk[999]fjdsfjdshello[9999]'
	Println(re.scan(r'\[(\d+)\]', text):*group(1):*string)
}

TestCase('') {
	fields = [re.split('a+', 'aaaaaaabbbbbbaaacccccDDa')];
	Println(fields):nomap
	fields = [re.pattern('a+').split('aaaaaaabbbbbbaaacccccDDa')];
	Println(fields):nomap
}

// match with pattern object

TestCase('') {
	m = re.pattern(r'(\d+)\.(\d*)').match('3.14')
	Tester(`m.source)
	Tester(`m[1])
	Tester(`m[2])
}

TestCase('') {
	m = re.pattern(r'(?<first>\d+)\.(?<second>\d*)').match('3.14')
	Tester(`m.source)
	Tester(`m['first'])
	Tester(`m['second'])
}

TestCase('') {
	m = re.pattern(r'(?<first>\d+)\.(\d*)').match('3.14')
	Tester(`m.source)
	Tester(`m['first'])
	Tester(`m[2])
}

TestCase('') {
	m = re.pattern(r'(\d+)\.(?<second>\d*)').match('3.14')
	Tester(`m.source)
	Tester(`m[1])
	Tester(`m['second'])
}

TestCase('') {
	Tester(`cond(re.pattern(r'hello').match('HELLO WORLD'), 'match', 'not match'))
	Tester(`cond((re.pattern(r'hello'):icase).match('HELLO WORLD'), 'match', 'not match'))
}

TestCase('') {
	lines = format('%08d', rands(100000000, 10))
	Println(lines, ' ', lines:*sub(r'(\d)(\d)(\d)(\d)',
				&{chr(ord('A') + int($m[1..4])).Join()}))
}

TestCase('') {
	Tester(`re.sub(r',\s*', ':', '1234, 567,    890,   123'))
	Tester(`re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
		r'static PyObject*\npy_\1(void)\n{',
		'def myfunc():'))
	dashrepl(matchobj) = {
		if (matchobj[0] == '-') { return(' ') } else { return('-') }
	}
	print_func(dashrepl)
	Tester(`re.sub('-{1,2}', dashrepl, 'pro----gram-files'))
}

TestCase('') {
	Tester(`re.pattern(r',\s*').sub(':', '1234, 567,    890,   123'))
	Tester(`re.pattern(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):').sub(
		r'static PyObject*\npy_\1(void)\n{',
		'def myfunc():'))
	dashrepl(matchobj) = {
		if (matchobj[0] == '-') { return(' ') } else { return('-') }
	}
	print_func(dashrepl)
	Tester(`re.pattern('-{1,2}').sub(dashrepl, 'pro----gram-files'))
}


TestCase('') {
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	for (line in lines) {
		(m = re.match(r'^http://([^/]+)', line)) && print(' ', m[1])
	}
	Println()
}

TestCase('') {
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	print(' ', (re.match(r'^http://([^/]+)', lines):xlist):*group(1):*string)
	Println()
}

TestCase('group test') {
	str = '12 345 6789 01 234 567 890'
	m = str.match(r'(\d+) (\d+) (\d+) (\d+) (\d+) (\d+) (\d+)')
	Println('using re.match#group()')
	repeat(7) {|i|
		group = m.group(i + 1)
		printf('%-10s %d-%d\n', group.string, group.begin, group.end)
	}
	Println('using re.match#groups()')
	groups = m.groups()
	printf('%-10s %d-%d\n', groups:*string, groups:*begin, groups:*end)
}

TestCase('named capturing group') {
	str = '12:34:56'
	m = str.match(r'(?<hour>\d\d):(?<min>\d\d):(?<sec>\d\d)')
	Println(m.group('hour').string)
	Println(m.group('min').string)
	Println(m.group('sec').string)
	Println(m['hour'])
	Println(m['min'])
	Println(m['sec'])
}

TestCase('')('test of :multiline') {
	Tester(`re.pattern('foo.bar').match('foo\nbar'))
	Tester(`(re.pattern('foo.bar'):multiline).match('foo\nbar'))
}

TestCase('longest/shortest matching') {
	str = '<p>hoge</p>'
	Tester(`str)
	Tester(`str.match('<.+>')[0])
	Tester(`str.match('<.+?>')[0])
	Tester(`str.sub('<.+>', '**'))
	Tester(`str.sub('<.+?>', '**'))
}
*/
