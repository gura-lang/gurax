======== PUnit ========
repeat {}
  ##0 GenIterator_Counter()
  ##1 Value(<Nil>)
  ##2 EvalIterator(offsetToIterator=1,branchDest=##6), DiscardValue()
  ##3 DiscardValue()
  ##4 Value(<Nil>)
  ##5 Jump(cont=##2)
  ##6 RemoveValue(offset=1)
repeat {|n| nil}
  ##0 PushFrame<Block>()
  ##1 GenIterator_Counter()
  ##2 Value(<Nil>)
  ##3 EvalIterator(offsetToIterator=1,branchDest=##8)
  ##4 AssignToDeclArg(`n), DiscardValue()
  ##5 DiscardValue()
  ##6 Lookup(`nil)
  ##7 Jump(cont=##3)
  ##8 RemoveValue(offset=1)
  ##9 PopFrame()
repeat (3) {}
  ##0 Value(3)
  ##1 Cast(Number)
  ##2 GenIterator_Range()
  ##3 Value(<Nil>)
  ##4 EvalIterator(offsetToIterator=1,branchDest=##8), DiscardValue()
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Jump(cont=##4)
  ##8 RemoveValue(offset=1)
repeat (3) {|n| nil}
  ##0  PushFrame<Block>()
  ##1  Value(3)
  ##2  Cast(Number)
  ##3  GenIterator_Range()
  ##4  Value(<Nil>)
  ##5  EvalIterator(offsetToIterator=1,branchDest=##10)
  ##6  AssignToDeclArg(`n), DiscardValue()
  ##7  DiscardValue()
  ##8  Lookup(`nil)
  ##9  Jump(cont=##5)
  ##10 RemoveValue(offset=1)
  ##11 PopFrame()
repeat ():list {}
  ##0 GenIterator_Counter()
  ##1 CreateList()
  ##2 Jump(cont=##6)
  ##3 ListElem(offsetToList=0)
  ##4 Jump(cont=##9)
  ##5 ListElem(offsetToList=0)
  ##6 EvalIterator(offsetToIterator=1,branchDest=##9), DiscardValue()
  ##7 Value(<Nil>)
  ##8 Jump(cont=##5)
  ##9 RemoveValue(offset=1)
repeat ():list {|n| nil}
  ##0  PushFrame<Block>()
  ##1  GenIterator_Counter()
  ##2  CreateList()
  ##3  Jump(cont=##7)
  ##4  ListElem(offsetToList=0)
  ##5  Jump(cont=##11)
  ##6  ListElem(offsetToList=0)
  ##7  EvalIterator(offsetToIterator=1,branchDest=##11)
  ##8  AssignToDeclArg(`n), DiscardValue()
  ##9  Lookup(`nil)
  ##10 Jump(cont=##6)
  ##11 RemoveValue(offset=1)
  ##12 PopFrame()
repeat (3):list {}
  ##0  Value(3)
  ##1  Cast(Number)
  ##2  GenIterator_Range()
  ##3  CreateList()
  ##4  Jump(cont=##8)
  ##5  ListElem(offsetToList=0)
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0)
  ##8  EvalIterator(offsetToIterator=1,branchDest=##11), DiscardValue()
  ##9  Value(<Nil>)
  ##10 Jump(cont=##7)
  ##11 RemoveValue(offset=1)
repeat (3):list {|n| nil}
  ##0  PushFrame<Block>()
  ##1  Value(3)
  ##2  Cast(Number)
  ##3  GenIterator_Range()
  ##4  CreateList()
  ##5  Jump(cont=##9)
  ##6  ListElem(offsetToList=0)
  ##7  Jump(cont=##13)
  ##8  ListElem(offsetToList=0)
  ##9  EvalIterator(offsetToIterator=1,branchDest=##13)
  ##10 AssignToDeclArg(`n), DiscardValue()
  ##11 Lookup(`nil)
  ##12 Jump(cont=##8)
  ##13 RemoveValue(offset=1)
  ##14 PopFrame()
repeat ():xlist {}
  ##0 GenIterator_Counter()
  ##1 CreateList()
  ##2 Jump(cont=##6)
  ##3 ListElem(offsetToList=0):xlist
  ##4 Jump(cont=##9)
  ##5 ListElem(offsetToList=0):xlist
  ##6 EvalIterator(offsetToIterator=1,branchDest=##9), DiscardValue()
  ##7 Value(<Nil>)
  ##8 Jump(cont=##5)
  ##9 RemoveValue(offset=1)
repeat ():xlist {|n| nil}
  ##0  PushFrame<Block>()
  ##1  GenIterator_Counter()
  ##2  CreateList()
  ##3  Jump(cont=##7)
  ##4  ListElem(offsetToList=0):xlist
  ##5  Jump(cont=##11)
  ##6  ListElem(offsetToList=0):xlist
  ##7  EvalIterator(offsetToIterator=1,branchDest=##11)
  ##8  AssignToDeclArg(`n), DiscardValue()
  ##9  Lookup(`nil)
  ##10 Jump(cont=##6)
  ##11 RemoveValue(offset=1)
  ##12 PopFrame()
repeat (3):xlist {}
  ##0  Value(3)
  ##1  Cast(Number)
  ##2  GenIterator_Range()
  ##3  CreateList()
  ##4  Jump(cont=##8)
  ##5  ListElem(offsetToList=0):xlist
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0):xlist
  ##8  EvalIterator(offsetToIterator=1,branchDest=##11), DiscardValue()
  ##9  Value(<Nil>)
  ##10 Jump(cont=##7)
  ##11 RemoveValue(offset=1)
repeat (3):xlist {|n| nil}
  ##0  PushFrame<Block>()
  ##1  Value(3)
  ##2  Cast(Number)
  ##3  GenIterator_Range()
  ##4  CreateList()
  ##5  Jump(cont=##9)
  ##6  ListElem(offsetToList=0):xlist
  ##7  Jump(cont=##13)
  ##8  ListElem(offsetToList=0):xlist
  ##9  EvalIterator(offsetToIterator=1,branchDest=##13)
  ##10 AssignToDeclArg(`n), DiscardValue()
  ##11 Lookup(`nil)
  ##12 Jump(cont=##8)
  ##13 RemoveValue(offset=1)
  ##14 PopFrame()
repeat ():iter {}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Value(<Nil>)
  ##3 SequenceEnd()
  ##4 GenIterator_repeat()
repeat ():iter {|n| nil}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Lookup(`nil)
  ##3 SequenceEnd()
  ##4 GenIterator_repeat()
repeat (3):iter {}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Value(<Nil>)
  ##3 SequenceEnd()
  ##4 Value(3)
  ##5 Cast(Number)
  ##6 GenIterator_repeat()
repeat (3):iter {|n| nil}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Lookup(`nil)
  ##3 SequenceEnd()
  ##4 Value(3)
  ##5 Cast(Number)
  ##6 GenIterator_repeat()
repeat ():xiter {}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Value(<Nil>)
  ##3 SequenceEnd()
  ##4 GenIterator_repeat()
repeat ():xiter {|n| nil}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Lookup(`nil)
  ##3 SequenceEnd()
  ##4 GenIterator_repeat()
repeat (3):xiter {}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Value(<Nil>)
  ##3 SequenceEnd()
  ##4 Value(3)
  ##5 Cast(Number)
  ##6 GenIterator_repeat()
repeat (3):xiter {|n| nil}
  ##0 Jump(cont=##4)
  ##1 SequenceBegin(sentinel=##3)
  ##2 Lookup(`nil)
  ##3 SequenceEnd()
  ##4 Value(3)
  ##5 Cast(Number)
  ##6 GenIterator_repeat()
repeat (3) {|i| f(i)}
  ##0  PushFrame<Block>()
  ##1  Value(3)
  ##2  Cast(Number)
  ##3  GenIterator_Range()
  ##4  Value(<Nil>)
  ##5  EvalIterator(offsetToIterator=1,branchDest=##14)
  ##6  AssignToDeclArg(`i), DiscardValue()
  ##7  DiscardValue()
  ##8  Lookup(`f)
  ##9  Argument()
  ##10 ArgSlot_Lookup(`i:##10,i,cont=##12)
  ##11 Lookup(`i)
  ##12 Call(cont=##13)
  ##13 Jump(cont=##5)
  ##14 RemoveValue(offset=1)
  ##15 PopFrame()
======== Simple ========
repeat (10) {7} .. 7
repeat (10) {break} .. <Nil>
repeat (10) {break(7)} .. 7
repeat (10) {continue} .. <Nil>
repeat (10) {continue(7)} .. 7
======== repeat():list, repeat():xlist ========
repeat (10):list {|i| i} .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
repeat (10):xlist {|i| i} .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
repeat (10):list {|i| ((i % 2) == 0) && continue, i} .. [<Nil>, 1, <Nil>, 3, <Nil>, 5, <Nil>, 7, <Nil>, 9]
repeat (10):xlist {|i| ((i % 2) == 0) && continue, i} .. [1, 3, 5, 7, 9]
repeat (10):list {|i| ((i % 2) == 0) && continue(99), i} .. [99, 1, 99, 3, 99, 5, 99, 7, 99, 9]
repeat (10):xlist {|i| ((i % 2) == 0) && continue(99), i} .. [99, 1, 99, 3, 99, 5, 99, 7, 99, 9]
repeat (10):list {|i| (i == 5) && break, i} .. [0, 1, 2, 3, 4]
repeat (10):xlist {|i| (i == 5) && break, i} .. [0, 1, 2, 3, 4]
repeat (10):list {|i| (i == 5) && break(99), i} .. [0, 1, 2, 3, 4, 99]
repeat (10):xlist {|i| (i == 5) && break(99), i} .. [0, 1, 2, 3, 4, 99]
repeat (10):list {|i| (i == 5) && break(nil), i} .. [0, 1, 2, 3, 4, <Nil>]
repeat (10):xlist {|i| (i == 5) && break(nil), i} .. [0, 1, 2, 3, 4]
======== repeat():iter, repeat():xiter ========
[repeat (10):iter {|i| i}*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[repeat (10):xiter {|i| i}*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[repeat (10):iter {|i| ((i % 2) == 0) && continue, i}*] .. [<Nil>, 1, <Nil>, 3, <Nil>, 5, <Nil>, 7, <Nil>, 9]
[repeat (10):xiter {|i| ((i % 2) == 0) && continue, i}*] .. [1, 3, 5, 7, 9]
[repeat (10):iter {|i| ((i % 2) == 0) && continue(99), i}*] .. [99, 1, 99, 3, 99, 5, 99, 7, 99, 9]
[repeat (10):xiter {|i| ((i % 2) == 0) && continue(99), i}*] .. [99, 1, 99, 3, 99, 5, 99, 7, 99, 9]
[repeat (10):iter {|i| (i == 5) && break, i}*] .. [0, 1, 2, 3, 4]
[repeat (10):xiter {|i| (i == 5) && break, i}*] .. [0, 1, 2, 3, 4]
[repeat (10):iter {|i| (i == 5) && break(99), i}*] .. [0, 1, 2, 3, 4, 99]
[repeat (10):xiter {|i| (i == 5) && break(99), i}*] .. [0, 1, 2, 3, 4, 99]
[repeat (10):iter {|i| (i == 5) && break(nil), i}*] .. [0, 1, 2, 3, 4, <Nil>]
[repeat (10):xiter {|i| (i == 5) && break(nil), i}*] .. [0, 1, 2, 3, 4]
