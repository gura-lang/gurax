======== PUnit ========
[]
  ##0 CreateList()
[1]
  ##0 CreateList()
  ##1 Value(1)
  ##2 ListElem(offsetToList=0)
[1, 2, 3]
  ##0 CreateList()
  ##1 Value(1)
  ##2 ListElem(offsetToList=0)
  ##3 Value(2)
  ##4 ListElem(offsetToList=0)
  ##5 Value(3)
  ##6 ListElem(offsetToList=0)
foo = []
  ##0 CreateList()
  ##1 AssignToSymbol(`foo)
foo = [1]
  ##0 CreateList()
  ##1 Value(1)
  ##2 ListElem(offsetToList=0)
  ##3 AssignToSymbol(`foo)
foo = [1, 2, 3]
  ##0 CreateList()
  ##1 Value(1)
  ##2 ListElem(offsetToList=0)
  ##3 Value(2)
  ##4 ListElem(offsetToList=0)
  ##5 Value(3)
  ##6 ListElem(offsetToList=0)
  ##7 AssignToSymbol(`foo)
foo[]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 IndexGet()
foo[0]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(0)
  ##3 FeedIndex()
  ##4 IndexGet()
foo[0, 2]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(0)
  ##3 FeedIndex()
  ##4 Value(2)
  ##5 FeedIndex()
  ##6 IndexGet()
foo[0, 2, 6]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(0)
  ##3 FeedIndex()
  ##4 Value(2)
  ##5 FeedIndex()
  ##6 Value(6)
  ##7 FeedIndex()
  ##8 IndexGet()
======== Property ========
List
  #first            Any          R
  #last             Any          R
  #len              Number       R
  #tuple            Tuple        R
  #vtypeOfElem      VType        R
======== Initializer ========
[3, 1, 4, 1, 5, 9, 2, 6] .. [3, 1, 4, 1, 5, 9, 2, 6]
[{1, 2}, {3, 4, {5, 6}}, {7, 8}] .. [[1, 2], [3, 4, [5, 6]], [7, 8]]
@ {{1, 2}, {3, 4, {5, 6}}, {7, 8}} .. [[1, 2], [3, 4, [5, 6]], [7, 8]]
['hayasaka hiroko, hayasaka_hiroko@example.com, 33', 'hannda takashi, hannda_takashi@example.com, 75', 'honma masahiko, honma_masahiko@example.com, 46', 'kawahata nana, kawahata_nana@example.com, 47']
@(f) {{1, 2, 3, 4, 5, 6, 7}, {3, 1, 4, 1, 5, 9, 2}, {1, 4, 1, 4, 2, 1, 3}, {1, 7, [3, 2, 0]*, 5, 0}, [2, 2, 3, 6, 0, 6, 7]*, {[2, 2, 3, 6, 0, 6, 7]*}} .. [28, 25, 16, 18, 26, 26]
@(f) {{1, 2, 3}} .. lacking value for argument 'd'
@(f) {{1, 2, 3, 4, 5, 6, 7, 8}} .. too many arguments
@(g) {3, 1, {4}, 1, 5, {9}, 2, 6} .. [9, 1, 16, 1, 25, 81, 4, 36]
======== Element expansion ========
[[0, 1, 2, 3]*] .. [0, 1, 2, 3]
[[0, 1, 2, 3]*, [4, 5, 6, 7]*, [8, 9, 10, 11]*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
[Range(4)*] .. [0, 1, 2, 3]
[Range(4)*, Range(4, 8)*, Range(8, 12)*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
[@int([0, 1, 2, 3])*] .. [0, 1, 2, 3]
[@int([0, 1, 2, 3])*, @int([4, 5, 6, 7])*, @int([8, 9, 10, 11])*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
======== IndexGet ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl[] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl[0] .. zero
tbl[1] .. one
tbl[2] .. two
tbl[10] .. ten
tbl[11] .. specified position 11 exceeds the size of 11
tbl[0, 1] .. ['zero', 'one']
tbl[0, 1, 4, 10] .. ['zero', 'one', 'four', 'ten']
======== IndexSet ========
tbl .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
tbl[0] = 99 .. 99
tbl[10] = 99 .. 99
tbl[-1] = 99 .. 99
tbl[11] = 99 .. specified position 11 exceeds the size of 11
tbl .. [99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99]
======== IndexOpApply ========
tbl .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
tbl[0] += 99 .. 99
tbl[10] += 99 .. 109
tbl[-1] += 99 .. 208
tbl[11] += 99 .. specified position 11 exceeds the size of 11
tbl .. [99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 208]
======== IndexSet multiple ========
x .. [3, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
x .. [3, 6, 6, 6, 6, 6, 6, 6, 6, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
x .. [3, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
x .. [3, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 7, 7, 7, 7, 7, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
x .. [3, 6, 6, 6, 6, 6, 6, 6, 6, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 7, 7, 7, 7, 7, 3, 4, 5, 6, 7, 8]
======== IndexGet multiple ========
x .. ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[0] .. A
x[13] .. N
x[25] .. Z
x[0 .. 25] .. ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[0..] .. specified position 26 exceeds the size of 26
x[13..] .. specified position 26 exceeds the size of 26
x[[0, 1, 2, 3]] .. ['A', 'B', 'C', 'D']
x[0, 1, 2, 3, 22, 23, 24, 25] .. ['A', 'B', 'C', 'D', 'W', 'X', 'Y', 'Z']
x[0 .. 3, 22 .. 25] .. [['A', 'B', 'C', 'D'], ['W', 'X', 'Y', 'Z']]
x[[0, 1, 2, 3], [22, 23, 24, 25]] .. [['A', 'B', 'C', 'D'], ['W', 'X', 'Y', 'Z']]
======== Expansion ========
[1, 2, 3, [4, [5, 6, 7]], 8, 9, 10] .. [1, 2, 3, [4, [5, 6, 7]], 8, 9, 10]
[1, 2, 3, [4, [5, 6, 7]*]*, 8, 9, 10] .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, [4, [5, 6, 7].Each()], 8, 9, 10] .. [1, 2, 3, [4, <Iterator:Each:begin=0:end=3>], 8, 9, 10]
[1, 2, 3, [4, [5, 6, 7].Each()*]*, 8, 9, 10] .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1 .. 10] .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[Range(10), Range(10, 20)] .. [<Iterator:Range:begin=0:end=10:step=1>, <Iterator:Range:begin=10:end=20:step=1>]
[Range(10)*, Range(10, 20)*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
======== List#len, List#first and List#last ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.len .. 11
tbl.first .. zero
tbl.last .. ten
======== List#vtypeOfElem ========
[].vtypeOfElem .. <Undefined>
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem .. <VType:String(src? as Any):map{block?}>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. <VType:Number(str? as String){block?}>
['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. <Any>
======== List#tuple ========
[].tuple .. ()
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].tuple .. ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten')
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].tuple .. (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].tuple .. ('a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
======== List#Add() ========
tbl.vtypeOfElem .. <Undefined>
tbl.Add(3) .. [3]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Add(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Add('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. <Any>
tbl.Add([1, 2, 3]) .. [3, 6, 7, 8, 'hello', [1, 2, 3]]
tbl.Add(4 .. 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>]
tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Add('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Append() ========
tbl.vtypeOfElem .. <Undefined>
tbl.Append(3) .. [3]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Append(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Append('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. <Any>
tbl.Append([1, 2, 3]) .. [3, 6, 7, 8, 'hello', 1, 2, 3]
tbl.Append(4 .. 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Clear() ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Clear() .. []
======== List#Erase() ========
tbl .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0) .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0, 1, 2, 3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(-1, -2, -3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
tbl.Erase(0, 2, 4, 6, 8) .. [6, 8, 10, 12, 14, 15, 16, 17]
======== List#Get() ========
tbl.Get(0) .. 0
tbl.Get(5) .. 5
tbl.Get(19) .. 19
tbl.Get(20) .. <Nil>
tbl.Get(21) .. <Nil>
tbl.Get(20):raise .. specified position 20 exceeds the list's size of 20
tbl.Get(-1) .. 19
tbl.Get(-20) .. 0
tbl.Get(-21) .. <Nil>
tbl.Get(-22) .. <Nil>
tbl.Get(-21):raise .. specified position -21 exceeds the list's size of 20
======== List#Insert() ========
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Insert(3, 3) .. [99, 99, 99, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Insert(3, 6, 7, 8) .. [99, 99, 99, 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number(str? as String){block?}>
tbl.Insert(3, 'hello') .. [99, 99, 99, 'hello', 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. <Any>
tbl.Insert(3, [1, 2, 3]) .. [99, 99, 99, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 4 .. 9) .. [99, 99, 99, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9) .. [99, 99, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f') .. [99, 99, 99, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(-1, 3) .. [99, 99, 99, 99, 3, 99]
tbl.Insert(20, 3) .. specified position 20 exceeds the list's size of 6
tbl.Insert(-20, 3) .. specified position -20 exceeds the list's size of 6
tbl.Insert(0, 3) .. [3]
tbl.Insert(5, 3) .. [99, 99, 99, 99, 99, 3]
======== List#IsEmpty() ========
[].IsEmpty() .. true
[1, 2, 3].IsEmpty() .. false
======== List#Put() ========
======== List#Shift() ========
x.Shift() .. 0
x.Shift() .. 1
x.Shift() .. 2
x.Shift() .. 3
x.Shift() .. <Nil>
x.Shift():raise .. the list is empty
======== List#Shuffle() ========
tbl = [0 .. 99].Shuffle(rnd) .. [75, 87, 58, 33, 81, 61, 73, 16, 13, 77, 50, 63, 3, 60, 26, 32, 51, 46, 12, 68, 43, 54, 25, 23, 37, 6, 19, 8, 2, 90, 21, 55, 49, 78, 44, 0, 93, 92, 69, 29, 14, 79, 24, 65, 11, 85, 45, 35, 18, 41, 5, 52, 9, 80, 70, 74, 59, 56, 84, 48, 72, 98, 67, 57, 64, 38, 88, 36, 83, 40, 22, 86, 10, 15, 39, 17, 47, 99, 94, 89, 71, 42, 27, 76, 62, 4, 96, 91, 1, 53, 20, 95, 28, 30, 97, 82, 66, 7, 34, 31]
======== List#After() ========
x.After(& {$i < 0}):list .. [4, 4, 4, 0]
x.After(x < 0):list .. [4, 4, 4, 0]
x.After(& {$i < 0}).Offset(1):list .. [4, 4, 0]
x.After(x < 0).Offset(1):list .. [4, 4, 0]
======== List#Align() ========
[0 .. 5].Align(10):list .. [0, 1, 2, 3, 4, 5, <Nil>, <Nil>, <Nil>, <Nil>]
[0 .. 5].Align(3):list .. [0, 1, 2]
[0 .. 5].Align(10, 0):list .. [0, 1, 2, 3, 4, 5, 0, 0, 0, 0]
======== List#And() ========
[].And() .. <Nil>
[false].And() .. false
[nil].And() .. <Nil>
[true].And() .. true
[false, false].And() .. false
[false, true].And() .. false
[true, false].And() .. false
[true, true].And() .. true
[true, true, true, true, true, true, true, true].And() .. true
[true, true, true, true, true, true, false, true].And() .. false
[0].And() .. 0
[0, 1, 2, 3].And() .. 3
[5].And() .. 5
[5, true].And() .. true
[true, 5].And() .. 5
[true, true, true, 5].And() .. 5
[true, true, true, 5, false].And() .. false
======== List#ArgMax() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax() .. 6
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():lastIndex .. 26
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():indices .. [6, 13, 14, 26]
======== List#ArgMin() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin() .. 7
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():lastIndex .. 28
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():indices .. [7, 10, 28]
======== List#Before() ========
x.Before(& {$i < 0}):list .. [4, 3, 6, 1, 2, 3]
x.Before(x < 0):list .. [4, 3, 6, 1, 2, 3]
x.Before(& {$i < 0}).Offset(1):list .. [3, 6, 1, 2, 3]
x.Before(x < 0).Offset(1):list .. [3, 6, 1, 2, 3]
======== List#Combination() ========
----
['A', 'B', 'C', 'D', 'E'].Combination(3):list .. 10 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'E'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'E'], ['C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Combination(4):list .. 5 : [['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'C', 'D', 'E'], ['B', 'C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Combination(5):list .. 1 : [['A', 'B', 'C', 'D', 'E']]
['A', 'B', 'C', 'D', 'E'].Combination(6):list .. range over
======== List#Contains() ========
[1, 2, 3, 4, 5].Contains(1) .. true
[1, 2, 3, 4, 5].Contains(6) .. false
[`apple, `grape, `banana].Contains(`apple) .. true
[`apple, `grape, `banana].Contains(`kiwi) .. false
[`apple, `grape, `banana].Contains('apple'.ToSymbol()) .. true
[`apple, `grape, `banana].Contains('kiwi'.ToSymbol()) .. false
======== List#Count() ========
[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].Count(3) .. 4
======== List#CountFalse() ========
[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].CountFalse() .. 5
======== List#CountIf() ========
[6, 2, 6, 3, 5, 2, 0, 2, 9, 3, 3, 0, 7, 3, 7, 0, 4, 0, 5, 6].CountIf(& {$x > 5}) .. 6
======== List#CountTrue() ========
[6, 2, false, 3, 5, 2, false, 2, 9, 0, 3, false, 7, 0, 7, false, 4, false, 5, 6].CountTrue() .. 15
======== List#Cycle() ========
[].Cycle(20) .. empty list can not be specified
['A'].Cycle(20):list .. ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
['A', 'B'].Cycle(20):list .. ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']
['A', 'B', 'C', 'D', 'E'].Cycle(20):list .. ['A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E']
======== List#Each() ========
Each { .. }
----
----
----
----
----
----
----
----
----
----
----
Each {|x| .. }
zero
one
two
three
four
five
six
seven
eight
nine
ten
Each {|x, i| .. }
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
7 seven
8 eight
9 nine
10 ten
Each {|x| .. }, break at "t"
zero
one
two
Each {|x| .. }, break at "s"
zero
one
two
three
four
five
six
Each {|x| .. }, skip "t"
zero
one
four
five
six
seven
eight
nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
tbl.Each {break} .. <Nil>
tbl.Each {continue} .. <Nil>
======== List#Each():list ========
tbl.Each():list {|x| x} .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each():xlist {|x| if (x.StartsWith('t')) {x}} .. ['two', 'three', 'ten']
tbl.Each():list {|x| if (x.StartsWith('t')) {break}, x} .. ['zero', 'one']
tbl.Each():list {|x| if (x.StartsWith('t')) {break('end')}, x} .. ['zero', 'one', 'end']
tbl.Each():list {|x| if (x.StartsWith('t')) {continue}, x} .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
tbl.Each():list {|x| if (x.StartsWith('t')) {continue('x')}, x} .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each():xlist {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}} .. ['2-two', '3-three', '10-ten']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)} .. ['0-zero', '1-one']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'end']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
tbl.Each():list {break} .. []
tbl.Each():list {break(nil)} .. [<Nil>]
tbl.Each():list {continue} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():list {continue(nil)} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():xlist {break} .. []
tbl.Each():xlist {break(nil)} .. []
tbl.Each():xlist {continue} .. []
tbl.Each():xlist {continue(nil)} .. []
======== List#Each():iter ========
tbl.Each():iter {|x| x}[] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each():xiter {|x| if (x.StartsWith('t')) {x}}[] .. ['two', 'three', 'ten']
tbl.Each():iter {|x| if (x.StartsWith('t')) {break}, x}[] .. ['zero', 'one']
tbl.Each():iter {|x| if (x.StartsWith('t')) {break('end')}, x}[] .. ['zero', 'one', 'end']
tbl.Each():iter {|x| if (x.StartsWith('t')) {continue}, x}[] .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
tbl.Each():iter {|x| if (x.StartsWith('t')) {continue('x')}, x}[] .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each():xiter {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}}[] .. ['2-two', '3-three', '10-ten']
tbl.Each():iter {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)}[] .. ['0-zero', '1-one']
tbl.Each():iter {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)}[] .. ['0-zero', '1-one', 'end']
tbl.Each():iter {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)}[] .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
tbl.Each():iter {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)}[] .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
tbl.Each():iter {break}[] .. []
tbl.Each():iter {break(nil)}[] .. [<Nil>]
tbl.Each():iter {continue}[] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():iter {continue(nil)}[] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():xiter {break}[] .. []
tbl.Each():xiter {break(nil)}[] .. []
tbl.Each():xiter {continue}[] .. []
tbl.Each():xiter {continue(nil)}[] .. []
======== List#Filter() ========
x .. [52, 23, 62, 75, 46, 10, 86, 80, 19, 34]
x.Filter(& {$i % 2 == 0}):list .. [52, 62, 46, 10, 86, 80, 34]
x.Filter(x % 2 == 0):list .. [52, 62, 46, 10, 86, 80, 34]
names .. ['Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David']
BURKE
DAVID
FRANK
x .. [false, 52, 23, 62, <Nil>, 75, 46, false, 10, <Nil>, 86, 80, 19, 34, false]
x.Filter():list .. [52, 23, 62, 75, 46, 10, 86, 80, 19, 34]
======== List#Find() ========
names .. ['Burke', 'Connor', 'Frank', 'Everett', 'Albert', 'George', 'Harris', 'David']
Connor
Connor
x .. [false, <Nil>, 52, 23, 62, <Nil>, 75, 46, false, 10, <Nil>, 86, 80, 19, 34, false]
x.Find() .. 52
======== List#Flatten() ========
[[1, 2, 3, [4, [5, 6], 7], 8], [9, 10, 11], 12]
x.Flatten().Join(', ') .. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
x.Flatten():bfs.Join(', ') .. 12, 1, 2, 3, 8, 9, 10, 11, 4, 7, 5, 6
x.Flatten():list .. infinite iterator is unacceptable
======== List#Fold() ========
x.Fold(1).Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Fold(5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(8).Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19]
x.Fold(1):neat.Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Fold(5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(8):neat.Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]
x.Fold(5, 1).Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [16, 17, 18, 19]
x.Fold(5, 2).Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18], [16, 17, 18, 19]
x.Fold(5, 3).Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19], [18, 19]
x.Fold(5, 4).Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16], [16, 17, 18, 19]
x.Fold(5, 5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(5, 1):neat.Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19]
x.Fold(5, 2):neat.Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18]
x.Fold(5, 3):neat.Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19]
x.Fold(5, 4):neat.Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16]
x.Fold(5, 5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
======== List#Format() ========
======== List#Head() ========
[].Head(10):list .. []
[0].Head(10):list .. [0]
[0 .. 8].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8]
[0 .. 9].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 10].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 100].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 10].Head(nil):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
======== List#Join() ========
[].Join() .. ''
[].Join(',') .. ''
['abc'].Join() .. 'abc'
['abc'].Join(',') .. 'abc'
['abc', 'def'].Join() .. 'abcdef'
['abc', 'def'].Join(',') .. 'abc,def'
['abc', 'def', 'ghi', 'jkl', 'mno'].Join() .. 'abcdefghijklmno'
['abc', 'def', 'ghi', 'jkl', 'mno'].Join(',') .. 'abc,def,ghi,jkl,mno'
['abc', 'def', nil, 'ghi', nil, 'jkl', 'mno'].Join():nilVisible .. 'abcdef<Nil>ghi<Nil>jklmno'
======== List#Joinb() ========
[].Joinb() .. B''
[b'abc'].Joinb() .. B'abc'
[b'abc', b'def'].Joinb() .. B'abcdef'
[b'abc', b'def', b'ghi', b'jkl', b'mno'].Joinb() .. B'abcdefghijklmno'
[b'abc', b'def', 1, b'ghi', nil, b'jkl', b'mno'].Joinb() .. element must be of `Binary`
======== List#Map() ========
======== List#Max() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Max() .. 9
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Max() .. zero
======== List#Mean() ========
[].Mean() .. <Nil>
[0].Mean() .. 0
[0, 1].Mean() .. 0.5
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Mean() .. 5
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Mean() .. unsuppported binary operation: Number + Expr
======== List#Min() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Min() .. 0
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Min() .. eight
======== List#NilTo() ========
======== List#Offset() ========
tbl.Offset(0)[] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Offset(1)[] .. ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Offset(2)[] .. ['two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Offset(3)[] .. ['three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Offset(10)[] .. ['ten']
tbl.Offset(11)[] .. []
[tbl.Offset(11):raise*] .. []
tbl.Offset(12)[] .. []
[tbl.Offset(12):raise*] .. offset value exceeds the length of elements
tbl.Offset(-1)[] .. negative value is not acceptable
======== List#Or() ========
[].Or() .. <Nil>
[false].Or() .. false
[nil].Or() .. <Nil>
[true].Or() .. true
[false, false].Or() .. false
[false, true].Or() .. true
[true, false].Or() .. true
[true, true].Or() .. true
[true, true, true, true, true, true, true, true].Or() .. true
[true, true, true, true, true, true, false, true].Or() .. true
[0].Or() .. 0
[0, 1, 2, 3].Or() .. 0
[5].Or() .. 5
[5, true].Or() .. 5
[true, 5].Or() .. true
[true, true, true, 5].Or() .. true
[true, true, true, 5, false].Or() .. true
======== List#Pack() ========
======== List#Permutation() ========
----
['A', 'B', 'C', 'D', 'E'].Permutation():list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Permutation(5):list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Permutation(3):list .. 60 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'B'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'B'], ['A', 'D', 'C'], ['A', 'D', 'E'], ['A', 'E', 'B'], ['A', 'E', 'C'], ['A', 'E', 'D'], ['B', 'A', 'C'], ['B', 'A', 'D'], ['B', 'A', 'E'], ['B', 'C', 'A'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'A'], ['B', 'D', 'C'], ['B', 'D', 'E'], ['B', 'E', 'A'], ['B', 'E', 'C'], ['B', 'E', 'D'], ['C', 'A', 'B'], ['C', 'A', 'D'], ['C', 'A', 'E'], ['C', 'B', 'A'], ['C', 'B', 'D'], ['C', 'B', 'E'], ['C', 'D', 'A'], ['C', 'D', 'B'], ['C', 'D', 'E'], ['C', 'E', 'A'], ['C', 'E', 'B'], ['C', 'E', 'D'], ['D', 'A', 'B'], ['D', 'A', 'C'], ['D', 'A', 'E'], ['D', 'B', 'A'], ['D', 'B', 'C'], ['D', 'B', 'E'], ['D', 'C', 'A'], ['D', 'C', 'B'], ['D', 'C', 'E'], ['D', 'E', 'A'], ['D', 'E', 'B'], ['D', 'E', 'C'], ['E', 'A', 'B'], ['E', 'A', 'C'], ['E', 'A', 'D'], ['E', 'B', 'A'], ['E', 'B', 'C'], ['E', 'B', 'D'], ['E', 'C', 'A'], ['E', 'C', 'B'], ['E', 'C', 'D'], ['E', 'D', 'A'], ['E', 'D', 'B'], ['E', 'D', 'C']]
['A', 'B', 'C', 'D', 'E'].Permutation(6):list .. range over
======== List#PingPong() ========
[].PingPong(20) .. empty list can not be specified
['A'].PingPong(20):list .. ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
['A', 'B'].PingPong(20):list .. ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']
['A', 'B', 'C', 'D', 'E'].PingPong(20):list .. ['A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A', 'B', 'C', 'D']
['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky:list .. ['A', 'B', 'C', 'D', 'E', 'E', 'D', 'C', 'B', 'A', 'A', 'B', 'C', 'D', 'E', 'E', 'D', 'C', 'B', 'A']
['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky@top:list .. ['A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A', 'A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A', 'A', 'B']
['A', 'B', 'C', 'D', 'E'].PingPong(20):sticky@btm:list .. ['A', 'B', 'C', 'D', 'E', 'E', 'D', 'C', 'B', 'A', 'B', 'C', 'D', 'E', 'E', 'D', 'C', 'B', 'A', 'B']
======== List#Print() ========
======== List#Printf() ========
======== List#Println() ========
======== List#Prod() ========
======== List#Rank() ========
======== List#Reduce() ========
======== List#Replace() ========
======== List#Reverse() ========
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Reverse():list .. ['ten', 'nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero']
======== List#RoundOff() ========
======== List#RunLength() ========
[].RunLength():list .. []
['A'].RunLength():list .. [(1, 'A')]
['A', 'A'].RunLength():list .. [(2, 'A')]
['A', 'A', 'A'].RunLength():list .. [(3, 'A')]
['A', 'A', 'A', 'A'].RunLength():list .. [(4, 'A')]
['A', 'B'].RunLength():list .. [(1, 'A'), (1, 'B')]
['A', 'B', 'C'].RunLength():list .. [(1, 'A'), (1, 'B'), (1, 'C')]
['A', 'B', 'C', 'D'].RunLength():list .. [(1, 'A'), (1, 'B'), (1, 'C'), (1, 'D')]
['A', 'A', 'A', 'B', 'B', 'C', 'D', 'D', 'D', 'D', 'D'].RunLength():list .. [(3, 'A'), (2, 'B'), (1, 'C'), (5, 'D')]
======== List#Since() ========
x.Since(& {$i < 0}):list .. [-1, 4, 4, 4, 0]
x.Since(x < 0):list .. [-1, 4, 4, 4, 0]
x.Since(& {$i < 0}).Offset(1):list .. [4, 4, 4, 0]
x.Since(x < 0).Offset(1):list .. [4, 4, 4, 0]
x.Since(& {$i < 0}).Offset(1).While(& {$i >= 0}):list .. [3, 1, 2, 3, 4]
======== List#Skip() ========
======== List#SkipNil() ========
x .. [false, 52, 23, 62, <Nil>, 75, 46, false, 10, <Nil>, 86, 80, 19, 34, false]
x.SkipNil():list .. [false, 52, 23, 62, 75, 46, false, 10, 86, 80, 19, 34, false]
======== List#Sort() ========
words100.Sort() .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(`ascend) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(`descend) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Sort(& {$a < $b}) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(& {$a > $b}) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Sort(& {$a.last < $b.last}):stable .. ['rob', 'demonic', 'exotic', 'oceanic', 'unarmed', 'tired', 'roasted', 'bubble', 'private', 'bruise', 'ignore', 'equable', 'inexpensive', 'force', 'childlike', 'bore', 'agreeable', 'smile', 'mate', 'unaccountable', 'flame', 'volatile', 'encourage', 'experience', 'cause', 'curve', 'change', 'pine', 'hate', 'move', 'miniature', 'cattle', 'foregoing', 'gaping', 'disgusting', 'entertaining', 'purring', 'living', 'reading', 'loutish', 'sigh', 'preach', 'milk', 'tasteful', 'yell', 'roll', 'beautiful', 'impartial', 'merciful', 'rural', 'natural', 'unusual', 'null', 'boil', 'heal', 'steam', 'happen', 'horn', 'religion', 'iron', 'digestion', 'complain', 'sudden', 'person', 'cannon', 'motionwhip', 'soap', 'jump', 'clap', 'poor', 'dapper', 'cover', 'bushes', 'possess', 'nebulous', 'vest', 'rampant', 'hydrant', 'prevent', 'rat', 'burst', 'cheat', 'flat', 'part', 'detect', 'blow', 'thaw', 'mix', 'cowardly', 'boy', 'flowery', 'toy', 'country', 'property', 'dry', 'sulky', 'greasy', 'try', 'deeply', 'ray']
boy
toy
dry
rob
rat
try
mix
ray
yell
vest
horn
roll
soap
iron
bore
blow
sigh
thaw
mate
poor
jump
null
clap
flat
boil
part
milk
pine
hate
heal
move
force
smile
sulky
burst
rural
flame
cheat
cover
tired
cause
curve
steam
bubble
happen
bruise
ignore
exotic
bushes
preach
gaping
greasy
dapper
deeply
change
living
detect
sudden
person
cannon
cattle
unarmed
private
demonic
rampant
equable
hydrant
flowery
loutish
country
oceanic
prevent
natural
unusual
purring
roasted
reading
possess
tasteful
cowardly
religion
property
merciful
volatile
complain
nebulous
foregoing
beautiful
childlike
agreeable
impartial
digestion
encourage
miniature
motionwhip
experience
disgusting
inexpensive
entertaining
unaccountable
unaccountable
entertaining
inexpensive
motionwhip
experience
disgusting
foregoing
beautiful
childlike
agreeable
impartial
digestion
encourage
miniature
tasteful
cowardly
religion
property
merciful
volatile
complain
nebulous
unarmed
private
demonic
rampant
equable
hydrant
flowery
loutish
country
oceanic
prevent
natural
unusual
purring
roasted
reading
possess
bubble
happen
bruise
ignore
exotic
bushes
preach
gaping
greasy
dapper
deeply
change
living
detect
sudden
person
cannon
cattle
force
smile
sulky
burst
rural
flame
cheat
cover
tired
cause
curve
steam
yell
vest
horn
roll
soap
iron
bore
blow
sigh
thaw
mate
poor
jump
null
clap
flat
boil
part
milk
pine
hate
heal
move
boy
toy
dry
rob
rat
try
mix
ray
words10.Sort(`ascend, [0 .. 9]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Sort(`ascend, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(`descend, [0 .. 9]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(`descend, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Sort(& {$a < $b}, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(& {$a > $b}, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words100.Sort(`ascend, [0 .. 99]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'horn', 'motionwhip', 'rampant', 'bruise', 'religion', 'ignore', 'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic', 'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore', 'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile', 'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy', 'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable', 'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply', 'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired', 'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam', 'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal', 'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle']
words100.Sort(`ascend, [99 .. 0]) .. ['cattle', 'nebulous', 'possess', 'reading', 'miniature', 'move', 'heal', 'hate', 'cannon', 'roasted', 'person', 'sudden', 'ray', 'pine', 'milk', 'detect', 'steam', 'living', 'part', 'boil', 'change', 'curve', 'flat', 'complain', 'cause', 'clap', 'tired', 'purring', 'entertaining', 'disgusting', 'experience', 'encourage', 'cover', 'deeply', 'mix', 'null', 'cheat', 'jump', 'volatile', 'unusual', 'natural', 'flame', 'unaccountable', 'dapper', 'rural', 'digestion', 'try', 'burst', 'merciful', 'rat', 'rob', 'greasy', 'poor', 'sulky', 'gaping', 'mate', 'preach', 'thaw', 'prevent', 'dry', 'smile', 'sigh', 'impartial', 'agreeable', 'oceanic', 'blow', 'property', 'country', 'bore', 'childlike', 'loutish', 'beautiful', 'force', 'iron', 'soap', 'toy', 'bushes', 'exotic', 'flowery', 'boy', 'inexpensive', 'hydrant', 'equable', 'foregoing', 'roll', 'ignore', 'religion', 'bruise', 'rampant', 'motionwhip', 'horn', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
======== List#Std() ========
======== List#Sum() ========
[].Sum() .. <Nil>
[0].Sum() .. 0
[0, 1].Sum() .. 1
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Sum() .. 55
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Sum() .. unsuppported binary operation: Number + Expr
======== List#Tail() ========
[0 .. 100].Tail(0):list .. must be positive value
[0 .. 100].Tail(1):list .. [100]
[0 .. 100].Tail(10):list .. [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
[0 .. 4].Tail(5):list .. [0, 1, 2, 3, 4]
[0 .. 4].Tail(6):list .. [0, 1, 2, 3, 4]
======== List#Uniq() ========
[].Uniq():list .. []
[1].Uniq():list .. [1]
[1, 2, 3, 4, 5, 6, 7, 8, 9].Uniq():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 9].Uniq():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
['orange'].Uniq():list .. ['orange']
['orange', 'grape', 'apple', 'peach', 'melon', 'kiwi'].Uniq():list .. ['orange', 'grape', 'apple', 'peach', 'melon', 'kiwi']
['orange', 'grape', 'grape', 'apple', 'apple', 'apple', 'peach', 'melon', 'kiwi', 'kiwi', 'kiwi'].Uniq():list .. ['orange', 'grape', 'apple', 'peach', 'melon', 'kiwi']
======== List#Until() ========
x.Until(& {$i < 0}):list .. [4, 3, 6, 1, 2, 3, -1]
x.Until(x < 0):list .. [4, 3, 6, 1, 2, 3, -1]
x.Until(& {$i < 0}).Offset(1):list .. [3, 6, 1, 2, 3, -1]
x.Until(x < 0).Offset(1):list .. [3, 6, 1, 2, 3, -1]
x.IsInfinite() .. true
x.Until(x == 100).IsInfinite() .. false
x.Until(& {$i == 100}).IsInfinite() .. false
======== List#Var() ========
======== List#While() ========
x.While(& {$i >= 0}):list .. [4, 3, 6, 1, 2, 3]
x.While(x >= 0):list .. [4, 3, 6, 1, 2, 3]
x.IsInfinite() .. true
x.While(x < 100).IsInfinite() .. false
x.While(& {$i < 100}).IsInfinite() .. false
======== Any in List ========
1 in [1, 2, 3, 4, 5] .. true
6 in [1, 2, 3, 4, 5] .. false
(`apple) in [`apple, `grape, `banana] .. true
(`kiwi) in [`apple, `grape, `banana] .. false
'apple'.ToSymbol() in [`apple, `grape, `banana] .. true
'kiwi'.ToSymbol() in [`apple, `grape, `banana] .. false
======== List |+| List ========
[] |+| [] .. []
[1] |+| [] .. [1]
[] |+| [2] .. [2]
[1] |+| [2] .. [1, 2]
[1, 2, 3, 4] |+| [5, 6, 7, 8] .. [1, 2, 3, 4, 5, 6, 7, 8]
[[1, 2], [3, 4]] |+| [[5, 6], [7, 8]] .. [[1, 2], [3, 4], [5, 6], [7, 8]]
======== List |+| Iterator ========
[] |+| Range(8) .. [0, 1, 2, 3, 4, 5, 6, 7]
[1] |+| Range(8) .. [1, 0, 1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4] |+| Range(8) .. [1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4] |+| (1..) .. infinite iterator is unacceptable
======== Any |+| List, List |+| Any ========
[] |+| 111 .. [111]
111 |+| [] .. [111]
[1, 2, 3, 4] |+| 111 .. [1, 2, 3, 4, 111]
111 |+| [1, 2, 3, 4] .. [111, 1, 2, 3, 4]
111 |+| [1, 2, 3, 4] |+| 222 .. [111, 1, 2, 3, 4, 222]
======== List#__clone__() ========
a .. [1, 2, 3, 4]
a .. [1, 2, 3, 4]
b .. [1, 2, 3, 4, 5, 6, 7]
======== Expansion ========
[['The', 'quick', 'brown'], 'fox', ['jumps', 'over'], ['the', 'lazy', 'dog']] .. [['The', 'quick', 'brown'], 'fox', ['jumps', 'over'], ['the', 'lazy', 'dog']]
[['The', 'quick', 'brown']*, 'fox', ['jumps', 'over']*, ['the', 'lazy', 'dog']*] .. ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']
[('The', 'quick', 'brown'), 'fox', ('jumps', 'over'), ('the', 'lazy', 'dog')] .. [('The', 'quick', 'brown'), 'fox', ('jumps', 'over'), ('the', 'lazy', 'dog')]
[('The', 'quick', 'brown')*, 'fox', ('jumps', 'over')*, ('the', 'lazy', 'dog')*] .. ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']
[Range(6), 6, 7, Range(8, 11)] .. [<Iterator:Range:begin=0:end=6:step=1>, 6, 7, <Iterator:Range:begin=8:end=11:step=1>]
[Range(6)*, 6, 7, Range(8, 11)*] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
