======== PUnit ========
[]
  ##0 CreateList()
[1]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
[1, 2, 3]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
foo = []
  ##0 CreateList()
  ##1 AssignToSymbol(`foo)
foo = [1]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 AssignToSymbol(`foo)
foo = [1, 2, 3]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
  ##7 AssignToSymbol(`foo)
foo[]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 IndexGet()
foo[0]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 IndexGet()
foo[0, 2]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 Value(<Number:2>)
  ##5 FeedIndex()
  ##6 IndexGet()
foo[0, 2, 6]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 Value(<Number:2>)
  ##5 FeedIndex()
  ##6 Value(<Number:6>)
  ##7 FeedIndex()
  ##8 IndexGet()
======== Property ========
List.__PropHandler__(`first) .. <PropHandler:first:Any:R>
List.__PropHandler__(`last) .. <PropHandler:last:Any:R>
List.__PropHandler__(`len) .. <PropHandler:len:Number:R>
List.__PropHandler__(`vtypeOfElem) .. <PropHandler:vtypeOfElem:VType:R>
======== Initializer ========
[3, 1, 4, 1, 5, 9, 2, 6] .. [3, 1, 4, 1, 5, 9, 2, 6]
[{1, 2}, {3, 4, {5, 6}}, {7, 8}] .. [[1, 2], [3, 4, [5, 6]], [7, 8]]
@ {{1, 2}, {3, 4, {5, 6}}, {7, 8}} .. [[1, 2], [3, 4, [5, 6]], [7, 8]]
['hayasaka hiroko, hayasaka_hiroko@example.com, 33', 'hannda takashi, hannda_takashi@example.com, 75', 'honma masahiko, honma_masahiko@example.com, 46', 'kawahata nana, kawahata_nana@example.com, 47']
@(f) {{1, 2, 3, 4, 5, 6, 7}, {3, 1, 4, 1, 5, 9, 2}, {1, 4, 1, 4, 2, 1, 3}, {1, 7, [3, 2, 0]*, 5, 0}, [2, 2, 3, 6, 0, 6, 7]*, {[2, 2, 3, 6, 0, 6, 7]*}} .. [28, 25, 16, 18, 26, 26]
@(f) {{1, 2, 3}} .. lacking value for argument 'd'
@(f) {{1, 2, 3, 4, 5, 6, 7, 8}} .. too many arguments
@(g) {3, 1, {4}, 1, 5, {9}, 2, 6} .. [9, 1, 16, 1, 25, 81, 4, 36]
======== Get ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl[0] .. zero
tbl[1] .. one
tbl[2] .. two
tbl[10] .. ten
tbl[11] .. specified position 11 exceeds the list's size of 11
tbl[0, 1] .. ['zero', 'one']
tbl[0, 1, 4, 10] .. ['zero', 'one', 'four', 'ten']
======== List#len, List#first and List#last ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.len .. 11
tbl.first .. zero
tbl.last .. ten
======== List#vtypeOfELem ========
[].vtypeOfElem .. Undefined
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem .. <VType:String>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. <VType:Number>
['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. Any
======== List#Add() ========
tbl.vtypeOfElem .. Undefined
tbl.Add(3) .. [3]
tbl.vtypeOfElem .. <VType:Number>
tbl.Add(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number>
tbl.Add('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. Any
tbl.Add([1, 2, 3]) .. [3, 6, 7, 8, 'hello', [1, 2, 3]]
tbl.Add(4 .. 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>]
tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Add('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Append() ========
tbl.vtypeOfElem .. Undefined
tbl.Append(3) .. [3]
tbl.vtypeOfElem .. <VType:Number>
tbl.Append(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number>
tbl.Append('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. Any
tbl.Append([1, 2, 3]) .. [3, 6, 7, 8, 'hello', 1, 2, 3]
tbl.Append(4 .. 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Clear() ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Clear() .. []
======== List#Erase() ========
tbl .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0) .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0, 1, 2, 3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(-1, -2, -3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
tbl.Erase(0, 2, 4, 6, 8) .. [6, 8, 10, 12, 14, 15, 16, 17]
======== List#Get() ========
======== List#Insert() ========
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 3) .. [99, 99, 99, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 6, 7, 8) .. [99, 99, 99, 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 'hello') .. [99, 99, 99, 'hello', 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. Any
tbl.Insert(3, [1, 2, 3]) .. [99, 99, 99, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 4 .. 9) .. [99, 99, 99, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9) .. [99, 99, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f') .. [99, 99, 99, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(-1, 3) .. [99, 99, 99, 99, 3, 99]
tbl.Insert(20, 3) .. specified position 20 exceeds the list's size of 6
tbl.Insert(-20, 3) .. specified position -20 exceeds the list's size of 6
======== List#IsEmpty() ========
[].IsEmpty() .. true
[1, 2, 3].IsEmpty() .. false
======== List#Put() ========
======== List#Shift() ========
x.Shift() .. 0
x.Shift() .. 1
x.Shift() .. 2
x.Shift() .. 3
x.Shift() .. <Nil>
x.Shift():raise .. the list is empty
======== List#Shuffle() ========
tbl = [0 .. 99].Shuffle(rnd) .. [44, 48, 66, 70, 71, 14, 89, 28, 0, 96, 80, 99, 24, 4, 79, 54, 62, 98, 55, 8, 97, 93, 31, 43, 21, 72, 90, 76, 57, 1, 49, 45, 13, 65, 11, 19, 12, 69, 37, 30, 92, 64, 77, 15, 94, 73, 10, 47, 29, 85, 18, 6, 40, 3, 38, 59, 20, 34, 51, 60, 61, 9, 22, 81, 91, 33, 46, 5, 36, 67, 26, 82, 27, 23, 78, 53, 50, 2, 75, 83, 88, 95, 56, 86, 35, 52, 7, 39, 68, 58, 41, 25, 42, 74, 84, 63, 32, 16, 17, 87]
======== List#After() ========
======== List#Align() ========
======== List#And() ========
[].And() .. <Nil>
[false].And() .. false
[nil].And() .. <Nil>
[true].And() .. true
[false, false].And() .. false
[false, true].And() .. false
[true, false].And() .. false
[true, true].And() .. true
[true, true, true, true, true, true, true, true].And() .. true
[true, true, true, true, true, true, false, true].And() .. false
[0].And() .. 0
[0, 1, 2, 3].And() .. 3
[5].And() .. 5
[5, true].And() .. true
[true, 5].And() .. 5
[true, true, true, 5].And() .. 5
[true, true, true, 5, false].And() .. false
======== List#ArgMax() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax() .. 6
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():last_index .. 26
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMax():indices .. [6, 13, 14, 26]
======== List#ArgMin() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin() .. 7
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():last_index .. 28
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].ArgMin():indices .. [7, 10, 28]
======== List#Before() ========
======== List#Combination() ========
----
['A', 'B', 'C', 'D', 'E'].Combination(3):list .. 10 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'E'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'E'], ['C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Combination(4):list .. 5 : [['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'C', 'D', 'E'], ['B', 'C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Combination(5):list .. 1 : [['A', 'B', 'C', 'D', 'E']]
['A', 'B', 'C', 'D', 'E'].Combination(6):list .. range over
======== List#Contains() ========
======== List#Count() ========
======== List#Cycle() ========
[].Cycle(10) .. empty list can not be specified
['A'].Cycle(10):list .. ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
['A', 'B'].Cycle(10):list .. ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']
['A', 'B', 'C', 'D', 'E'].Cycle(10):list .. ['A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E']
======== List#Each() ========
Each { .. }
----
----
----
----
----
----
----
----
----
----
----
Each {|x| .. }
zero
one
two
three
four
five
six
seven
eight
nine
ten
Each {|x, i| .. }
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
7 seven
8 eight
9 nine
10 ten
Each {|x| .. }, break at "t"
zero
one
two
Each {|x| .. }, break at "s"
zero
one
two
three
four
five
six
Each {|x| .. }, skip "t"
zero
one
four
five
six
seven
eight
nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
tbl.Each {break} .. <Nil>
tbl.Each {continue} .. <Nil>
======== List#Each():list ========
tbl.Each():list {|x| x} .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each():xlist {|x| if (x.StartsWith('t')) {x}} .. ['two', 'three', 'ten']
tbl.Each():list {|x| if (x.StartsWith('t')) {break}, x} .. ['zero', 'one']
tbl.Each():list {|x| if (x.StartsWith('t')) {break('end')}, x} .. ['zero', 'one', 'end']
tbl.Each():list {|x| if (x.StartsWith('t')) {continue}, x} .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
tbl.Each():list {|x| if (x.StartsWith('t')) {continue('x')}, x} .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each():xlist {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}} .. ['2-two', '3-three', '10-ten']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)} .. ['0-zero', '1-one']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'end']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
tbl.Each():list {break} .. []
tbl.Each():list {break(nil)} .. [<Nil>]
tbl.Each():list {continue} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():list {continue(nil)} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each():xlist {break} .. []
tbl.Each():xlist {break(nil)} .. []
tbl.Each():xlist {continue} .. []
tbl.Each():xlist {continue(nil)} .. []
======== List#Each():iter ========
[tbl.Each():iter {|x| x}] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Each():xiter {|x| if (x.StartsWith('t')) {x}}] .. ['two', 'three', 'ten']
[tbl.Each():iter {|x| if (x.StartsWith('t')) {break}, x}] .. ['zero', 'one']
[tbl.Each():iter {|x| if (x.StartsWith('t')) {break('end')}, x}] .. ['zero', 'one', 'end']
[tbl.Each():iter {|x| if (x.StartsWith('t')) {continue}, x}] .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
[tbl.Each():iter {|x| if (x.StartsWith('t')) {continue('x')}, x}] .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
[tbl.Each():xiter {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}}] .. ['2-two', '3-three', '10-ten']
[tbl.Each():iter {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one']
[tbl.Each():iter {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'end']
[tbl.Each():iter {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
[tbl.Each():iter {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
[tbl.Each():iter {break}] .. []
[tbl.Each():iter {break(nil)}] .. [<Nil>]
[tbl.Each():iter {continue}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each():iter {continue(nil)}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each():xiter {break}] .. []
[tbl.Each():xiter {break(nil)}] .. []
[tbl.Each():xiter {continue}] .. []
[tbl.Each():xiter {continue(nil)}] .. []
======== List#Filter() ========
======== List#Find() ========
======== List#Flatten() ========
======== List#Fold() ========
x.Fold(1).Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Fold(5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(8).Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19]
x.Fold(1):neat.Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Fold(5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(8):neat.Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]
x.Fold(5, 1).Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [16, 17, 18, 19]
x.Fold(5, 2).Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18], [16, 17, 18, 19]
x.Fold(5, 3).Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19], [18, 19]
x.Fold(5, 4).Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16], [16, 17, 18, 19]
x.Fold(5, 5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Fold(5, 1):neat.Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19]
x.Fold(5, 2):neat.Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18]
x.Fold(5, 3):neat.Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19]
x.Fold(5, 4):neat.Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16]
x.Fold(5, 5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
======== List#Format() ========
======== List#Head() ========
[].Head(10):list .. []
[0].Head(10):list .. [0]
[0 .. 8].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8]
[0 .. 9].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 10].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 100].Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
======== List#Join() ========
[].Join() .. ''
[].Join(',') .. ''
['abc'].Join() .. 'abc'
['abc'].Join(',') .. 'abc'
['abc', 'def'].Join() .. 'abcdef'
['abc', 'def'].Join(',') .. 'abc,def'
['abc', 'def', 'ghi', 'jkl', 'mno'].Join() .. 'abcdefghijklmno'
['abc', 'def', 'ghi', 'jkl', 'mno'].Join(',') .. 'abc,def,ghi,jkl,mno'
======== List#Joinb() ========
======== List#Map() ========
======== List#Max() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Max() .. 9
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Max() .. zero
======== List#Mean() ========
[].Mean() .. <Nil>
[0].Mean() .. 0
[0, 1].Mean() .. 0.5
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Mean() .. 5
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Mean() .. unsuppported binary operation: Number + Expr
======== List#Min() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Min() .. 0
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Min() .. eight
======== List#NilTo() ========
======== List#Offset() ========
[tbl.Offset(0)] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(1)] .. ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(2)] .. ['two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(3)] .. ['three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(10)] .. ['ten']
[tbl.Offset(11)] .. []
[tbl.Offset(11):raise] .. []
[tbl.Offset(12)] .. []
[tbl.Offset(12):raise] .. offset value exceeds the length of elements
[tbl.Offset(-1)] .. negative value is not acceptable
======== List#Or() ========
[].Or() .. <Nil>
[false].Or() .. false
[nil].Or() .. <Nil>
[true].Or() .. true
[false, false].Or() .. false
[false, true].Or() .. true
[true, false].Or() .. true
[true, true].Or() .. true
[true, true, true, true, true, true, true, true].Or() .. true
[true, true, true, true, true, true, false, true].Or() .. true
[0].Or() .. 0
[0, 1, 2, 3].Or() .. 0
[5].Or() .. 5
[5, true].Or() .. 5
[true, 5].Or() .. true
[true, true, true, 5].Or() .. true
[true, true, true, 5, false].Or() .. true
======== List#Pack() ========
======== List#Permutation() ========
----
['A', 'B', 'C', 'D', 'E'].Permutation():list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Permutation(5):list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Permutation(3):list .. 60 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'B'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'B'], ['A', 'D', 'C'], ['A', 'D', 'E'], ['A', 'E', 'B'], ['A', 'E', 'C'], ['A', 'E', 'D'], ['B', 'A', 'C'], ['B', 'A', 'D'], ['B', 'A', 'E'], ['B', 'C', 'A'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'A'], ['B', 'D', 'C'], ['B', 'D', 'E'], ['B', 'E', 'A'], ['B', 'E', 'C'], ['B', 'E', 'D'], ['C', 'A', 'B'], ['C', 'A', 'D'], ['C', 'A', 'E'], ['C', 'B', 'A'], ['C', 'B', 'D'], ['C', 'B', 'E'], ['C', 'D', 'A'], ['C', 'D', 'B'], ['C', 'D', 'E'], ['C', 'E', 'A'], ['C', 'E', 'B'], ['C', 'E', 'D'], ['D', 'A', 'B'], ['D', 'A', 'C'], ['D', 'A', 'E'], ['D', 'B', 'A'], ['D', 'B', 'C'], ['D', 'B', 'E'], ['D', 'C', 'A'], ['D', 'C', 'B'], ['D', 'C', 'E'], ['D', 'E', 'A'], ['D', 'E', 'B'], ['D', 'E', 'C'], ['E', 'A', 'B'], ['E', 'A', 'C'], ['E', 'A', 'D'], ['E', 'B', 'A'], ['E', 'B', 'C'], ['E', 'B', 'D'], ['E', 'C', 'A'], ['E', 'C', 'B'], ['E', 'C', 'D'], ['E', 'D', 'A'], ['E', 'D', 'B'], ['E', 'D', 'C']]
['A', 'B', 'C', 'D', 'E'].Permutation(6):list .. range over
======== List#PingPong() ========
======== List#Print() ========
======== List#Printf() ========
======== List#Println() ========
======== List#Prod() ========
======== List#Rank() ========
======== List#Reduce() ========
======== List#Replace() ========
======== List#Reverse() ========
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Reverse():list .. ['ten', 'nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero']
======== List#RoundOff() ========
======== List#RunLength() ========
======== List#Since() ========
======== List#Skip() ========
======== List#SkipNil() ========
======== List#Sort() ========
words100.Sort() .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(`ascend) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(`descend) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Sort(& {$a < $b}) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Sort(& {$a > $b}) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Sort(& {$a.last < $b.last}) .. ['rob', 'oceanic', 'exotic', 'demonic', 'roasted', 'tired', 'unarmed', 'cattle', 'change', 'pine', 'mate', 'smile', 'bruise', 'experience', 'ignore', 'agreeable', 'bubble', 'equable', 'encourage', 'inexpensive', 'volatile', 'miniature', 'private', 'cause', 'move', 'unaccountable', 'curve', 'force', 'flame', 'hate', 'childlike', 'bore', 'reading', 'foregoing', 'living', 'gaping', 'disgusting', 'entertaining', 'purring', 'loutish', 'sigh', 'preach', 'milk', 'natural', 'unusual', 'impartial', 'heal', 'beautiful', 'yell', 'null', 'merciful', 'roll', 'boil', 'tasteful', 'rural', 'steam', 'sudden', 'happen', 'person', 'cannon', 'iron', 'complain', 'religion', 'horn', 'digestion', 'jump', 'soap', 'motionwhip', 'clap', 'poor', 'dapper', 'cover', 'bushes', 'possess', 'nebulous', 'rat', 'flat', 'cheat', 'part', 'burst', 'detect', 'prevent', 'vest', 'hydrant', 'rampant', 'thaw', 'blow', 'mix', 'deeply', 'try', 'greasy', 'sulky', 'ray', 'dry', 'property', 'country', 'toy', 'flowery', 'boy', 'cowardly']
rat
dry
rob
try
toy
mix
ray
boy
milk
horn
thaw
part
boil
mate
flat
roll
move
clap
sigh
poor
pine
hate
null
yell
vest
soap
iron
blow
jump
heal
bore
rural
flame
burst
force
cheat
cover
sulky
tired
smile
cause
curve
steam
preach
cattle
gaping
cannon
person
greasy
sudden
bubble
happen
detect
living
bruise
change
dapper
ignore
deeply
exotic
bushes
prevent
rampant
unusual
natural
flowery
loutish
possess
reading
unarmed
private
roasted
oceanic
hydrant
equable
demonic
country
purring
religion
complain
property
merciful
cowardly
volatile
tasteful
nebulous
childlike
digestion
foregoing
agreeable
impartial
miniature
encourage
beautiful
motionwhip
disgusting
experience
inexpensive
entertaining
unaccountable
unaccountable
entertaining
inexpensive
experience
motionwhip
disgusting
impartial
agreeable
digestion
childlike
beautiful
miniature
encourage
foregoing
nebulous
religion
complain
volatile
cowardly
property
merciful
tasteful
equable
hydrant
purring
rampant
flowery
roasted
demonic
unusual
natural
private
loutish
reading
unarmed
country
oceanic
possess
prevent
cattle
bubble
cannon
person
preach
sudden
gaping
detect
living
greasy
change
bruise
ignore
exotic
bushes
deeply
happen
dapper
force
flame
sulky
steam
rural
curve
cheat
smile
cause
tired
cover
burst
vest
heal
roll
blow
bore
clap
move
null
flat
jump
yell
boil
part
poor
soap
iron
milk
pine
hate
mate
thaw
horn
sigh
ray
boy
mix
toy
try
rob
dry
rat
words10.Sort(`ascend, [0 .. 9]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Sort(`ascend, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(`descend, [0 .. 9]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(`descend, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Sort(& {$a < $b}, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Sort(& {$a > $b}, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words100.Sort(`ascend, [0 .. 99]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'horn', 'motionwhip', 'rampant', 'bruise', 'religion', 'ignore', 'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic', 'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore', 'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile', 'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy', 'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable', 'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply', 'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired', 'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam', 'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal', 'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle']
words100.Sort(`ascend, [99 .. 0]) .. ['cattle', 'nebulous', 'possess', 'reading', 'miniature', 'move', 'heal', 'hate', 'cannon', 'roasted', 'person', 'sudden', 'ray', 'pine', 'milk', 'detect', 'steam', 'living', 'part', 'boil', 'change', 'curve', 'flat', 'complain', 'cause', 'clap', 'tired', 'purring', 'entertaining', 'disgusting', 'experience', 'encourage', 'cover', 'deeply', 'mix', 'null', 'cheat', 'jump', 'volatile', 'unusual', 'natural', 'flame', 'unaccountable', 'dapper', 'rural', 'digestion', 'try', 'burst', 'merciful', 'rat', 'rob', 'greasy', 'poor', 'sulky', 'gaping', 'mate', 'preach', 'thaw', 'prevent', 'dry', 'smile', 'sigh', 'impartial', 'agreeable', 'oceanic', 'blow', 'property', 'country', 'bore', 'childlike', 'loutish', 'beautiful', 'force', 'iron', 'soap', 'toy', 'bushes', 'exotic', 'flowery', 'boy', 'inexpensive', 'hydrant', 'equable', 'foregoing', 'roll', 'ignore', 'religion', 'bruise', 'rampant', 'motionwhip', 'horn', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
======== List#Std() ========
======== List#Sum() ========
[].Sum() .. <Nil>
[0].Sum() .. 0
[0, 1].Sum() .. 1
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Sum() .. 55
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Sum() .. unsuppported binary operation: Number + Expr
======== List#Tail() ========
[0 .. 100].Tail(0):list .. must be positive value
[0 .. 100].Tail(1):list .. [100]
[0 .. 100].Tail(10):list .. [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
[0 .. 4].Tail(5):list .. [0, 1, 2, 3, 4]
[0 .. 4].Tail(6):list .. [0, 1, 2, 3, 4]
======== List#Until() ========
======== List#Var() ========
======== List#While() ========
======== List |+| List ========
[] |+| [] .. []
[1] |+| [] .. [1]
[] |+| [2] .. [2]
[1] |+| [2] .. [1, 2]
[1, 2, 3, 4] |+| [5, 6, 7, 8] .. [1, 2, 3, 4, 5, 6, 7, 8]
[[1, 2], [3, 4]] |+| [[5, 6], [7, 8]] .. [[1, 2], [3, 4], [5, 6], [7, 8]]
======== List#Clone() ========
a .. [1, 2, 3, 4]
a .. [1, 2, 3, 4]
b .. [1, 2, 3, 4, 5, 6, 7]
