======== PUnit ========
[]
  ##0 CreateList()
[1]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
[1, 2, 3]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
foo = []
  ##0 CreateList()
  ##1 AssignToSymbol(`foo)
foo = [1]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 AssignToSymbol(`foo)
foo = [1, 2, 3]
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
  ##7 AssignToSymbol(`foo)
foo[]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 IndexGet()
foo[0]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 IndexGet()
foo[0, 2]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 Value(<Number:2>)
  ##5 FeedIndex()
  ##6 IndexGet()
foo[0, 2, 6]
  ##0 Lookup(`foo)
  ##1 Index()
  ##2 Value(<Number:0>)
  ##3 FeedIndex()
  ##4 Value(<Number:2>)
  ##5 FeedIndex()
  ##6 Value(<Number:6>)
  ##7 FeedIndex()
  ##8 IndexGet()
======== Property ========
List.__PropHandler__(`first) .. <PropHandler:first:Any:R>
List.__PropHandler__(`isEmpty) .. <PropHandler:isEmpty:Bool:R>
List.__PropHandler__(`last) .. <PropHandler:last:Any:R>
List.__PropHandler__(`len) .. <PropHandler:len:Number:R>
List.__PropHandler__(`vtypeOfElem) .. <PropHandler:vtypeOfElem:VType:R>
======== Initializer ========
[3, 1, 4, 1, 5, 9, 2, 6] .. [3, 1, 4, 1, 5, 9, 2, 6]
======== Get ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl[0] .. zero
tbl[1] .. one
tbl[2] .. two
tbl[10] .. ten
tbl[11] .. position 11 exceeds the list's size of 11
tbl[0, 1] .. ['zero', 'one']
tbl[0, 1, 4, 10] .. ['zero', 'one', 'four', 'ten']
======== List#len, List#first and List#last ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.len .. 11
tbl.first .. zero
tbl.last .. ten
======== List#vtypeOfELem ========
[].vtypeOfElem .. Undefined
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].vtypeOfElem .. <VType:String>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. <VType:Number>
['a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].vtypeOfElem .. Any
======== List#isEmpty ========
[].isEmpty .. true
[1, 2, 3].isEmpty .. false
======== List#Add() ========
tbl.vtypeOfElem .. Undefined
tbl.Add(3) .. [3]
tbl.vtypeOfElem .. <VType:Number>
tbl.Add(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number>
tbl.Add('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. Any
tbl.Add([1, 2, 3]) .. [3, 6, 7, 8, 'hello', [1, 2, 3]]
tbl.Add(4 .. 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>]
tbl.Add(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Add('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', [1, 2, 3], <Iterator:Range:begin=4:end=10:step=1>, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Append() ========
tbl.vtypeOfElem .. Undefined
tbl.Append(3) .. [3]
tbl.vtypeOfElem .. <VType:Number>
tbl.Append(6, 7, 8) .. [3, 6, 7, 8]
tbl.vtypeOfElem .. <VType:Number>
tbl.Append('hello') .. [3, 6, 7, 8, 'hello']
tbl.vtypeOfElem .. Any
tbl.Append([1, 2, 3]) .. [3, 6, 7, 8, 'hello', 1, 2, 3]
tbl.Append(4 .. 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(1, 2, 3, 4, 5, 6, 7, 8, 9) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append('a', 'b', 'c', 'd', 'e', 'f') .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
tbl.Append([1, 2, 3], [4, 5, 6], [7, 8, 9]) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9]
tbl.Append(['a', 'b'], ['c', 'd'], ['e', 'f']) .. [3, 6, 7, 8, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']
======== List#Clear() ========
tbl .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Clear() .. []
======== List#Combination() ========
======== List#Erase() ========
tbl .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0) .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(0, 1, 2, 3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
tbl.Erase(-1, -2, -3) .. [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
tbl.Erase(0, 2, 4, 6, 8) .. [6, 8, 10, 12, 14, 15, 16, 17]
======== List#Get() ========
======== List#Insert() ========
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 3) .. [99, 99, 99, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 6, 7, 8) .. [99, 99, 99, 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. <VType:Number>
tbl.Insert(3, 'hello') .. [99, 99, 99, 'hello', 6, 7, 8, 3, 99, 99]
tbl.vtypeOfElem .. Any
tbl.Insert(3, [1, 2, 3]) .. [99, 99, 99, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 4 .. 9) .. [99, 99, 99, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 1, 2, 3, 4, 5, 6, 7, 8, 9) .. [99, 99, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(3, 'a', 'b', 'c', 'd', 'e', 'f') .. [99, 99, 99, 'a', 'b', 'c', 'd', 'e', 'f', 1, 2, 3, 4, 5, 6, 7, 8, 9, <Iterator:Range:begin=4:end=10:step=1>, [1, 2, 3], 'hello', 6, 7, 8, 3, 99, 99]
tbl.Insert(-1, 3) .. [99, 99, 99, 99, 3, 99]
tbl.Insert(20, 3) .. position 20 exceeds the list's size of 6
tbl.Insert(-20, 3) .. position -14 exceeds the list's size of 6
======== List#Permutation() ========
======== List#Put() ========
======== List#Shift() ========
======== List#Shuffle() ========
======== List#After() ========
======== List#Align() ========
======== List#And() ========
======== List#ArgMax() ========
======== List#ArgMin() ========
======== List#Before() ========
======== List#Contains() ========
======== List#Count() ========
======== List#Cycle() ========
======== List#Each() ========
Each { .. }
----
----
----
----
----
----
----
----
----
----
----
Each {|x| .. }
zero
one
two
three
four
five
six
seven
eight
nine
ten
Each {|x, i| .. }
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
7 seven
8 eight
9 nine
10 ten
Each {|x| .. }, break at "t"
zero
one
two
Each {|x| .. }, break at "s"
zero
one
two
three
four
five
six
Each {|x| .. }, skip "t"
zero
one
four
five
six
seven
eight
nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
======== List#Each() with :list ========
tbl.Each():list {|x| x} .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each():xlist {|x| if (x.StartsWith('t')) {x}} .. ['two', 'three', 'ten']
tbl.Each():list {|x| if (x.StartsWith('t')) {break}, x} .. ['zero', 'one']
tbl.Each():list {|x| if (x.StartsWith('t')) {break('end')}, x} .. ['zero', 'one', 'end']
tbl.Each():list {|x| if (x.StartsWith('t')) {continue}, x} .. ['zero', 'one', 'four', 'five', 'six', 'seven', 'eight', 'nine']
tbl.Each():list {|x| if (x.StartsWith('t')) {continue('x')}, x} .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each():xlist {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}} .. ['2-two', '3-three', '10-ten']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)} .. ['0-zero', '1-one']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'end']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine']
tbl.Each():list {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
======== List#Filter() ========
======== List#Find() ========
======== List#Flatten() ========
======== List#Fold() ========
======== List#Format() ========
======== List#Head() ========
======== List#Join() ========
======== List#Joinb() ========
======== List#Map() ========
======== List#Max() ========
======== List#Mean() ========
======== List#Min() ========
======== List#NilTo() ========
======== List#Offset() ========
[tbl.Offset(0)] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(1)] .. ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(2)] .. ['two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(3)] .. ['three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Offset(10)] .. ['ten']
[tbl.Offset(11)] .. []
[tbl.Offset(11):raise] .. position 11 exceeds the list's size of 11
[tbl.Offset(-1)] .. negative value is not acceptable
======== List#Or() ========
======== List#Pack() ========
======== List#PingPong() ========
======== List#Print() ========
======== List#Printf() ========
======== List#Println() ========
======== List#Prod() ========
======== List#Rank() ========
======== List#Reduce() ========
======== List#Replace() ========
======== List#Reverse() ========
======== List#RoundOff() ========
======== List#RunLength() ========
======== List#Since() ========
======== List#Skip() ========
======== List#SkipNil() ========
======== List#Sort() ========
======== List#Std() ========
======== List#Sum() ========
======== List#Tail() ========
======== List#Until() ========
======== List#Var() ========
======== List#While() ========
