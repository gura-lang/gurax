======== Empty ========
A .. <VType:A(){block?}>
a .. <A>
a .. <A>
======== Constructor ========
<VType:A(p1? as Any,p2? as Number,p3? as String,p4? as DateTime,p5? as Any,p6? as Number,p7? as String,p8? as DateTime){block?}>
A().Format() .. <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, 3, P7, 1970-01-01 00:00:00.000
======== Default Value for Property ========
<VType:A(p1? as String,p2? as String,p3? as String,p4? as String){block?}>
A
  #p1               String       R/W
  #p2               String       R/W,nil
  #p3               String       R/W
  #p4               String       R/W,nil
A().Format() .. P1, <Nil>, P3, <Nil>
A('P1-mod').Format() .. P1-mod, <Nil>, P3, <Nil>
A('P1-mod', 'P2-mod').Format() .. P1-mod, P2-mod, P3, <Nil>
A('P1-mod', 'P2-mod', 'P3-mod').Format() .. P1-mod, P2-mod, P3-mod, <Nil>
A('P1-mod', 'P2-mod', 'P3-mod', 'p4-mod').Format() .. P1-mod, P2-mod, P3-mod, p4-mod
A(p1 = 'P1-mod').Format() .. P1-mod, <Nil>, P3, <Nil>
A(p2 = 'P2-mod').Format() .. P1, P2-mod, P3, <Nil>
A(p3 = 'P3-mod').Format() .. P1, <Nil>, P3-mod, <Nil>
A(p4 = 'P4-mod').Format() .. P1, <Nil>, P3, P4-mod
A(nil, nil, nil, nil).Format() .. P1, <Nil>, P3, <Nil>
======== Class property ========
A .. <VType:A(a? as Any,b? as Any,d? as Any){block?}>
a1.c .. set by a1
a2.c .. set by a1
a3.c .. set by a1
a1.c .. set by a2
a2.c .. set by a2
a3.c .. set by a2
a1.c .. set by A
a2.c .. set by A
a3.c .. set by A
======== Cast to Tuple ========
A() as Tuple .. ('value1', 'value2', <Nil>, 'value4', <Nil>)
A('Value1') as Tuple .. ('Value1', 'value2', <Nil>, 'value4', <Nil>)
A('VALUE1', 'VALUE2') as Tuple .. ('VALUE1', 'VALUE2', <Nil>, 'value4', <Nil>)
A('VALUE1', 'VALUE2', 'VALUE3', 'VALUE4', 'VALUE5') as Tuple .. ('VALUE1', 'VALUE2', 'VALUE3', 'VALUE4', 'VALUE5')
A() as Tuple .. ()
