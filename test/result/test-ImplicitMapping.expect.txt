======== Unary Operator ========
-[] .. []
-[1, 2, 3, 4, 5] .. [-1, -2, -3, -4, -5]
[(-(1, 2, 3, 4, 5))*] .. [-1, -2, -3, -4, -5]
======== Binary Operator ========
[] + [] .. []
[1, 2, 3, 4, 5] + 3 .. [4, 5, 6, 7, 8]
3 + [1, 2, 3, 4, 5] .. [4, 5, 6, 7, 8]
[1, 2, 3, 4, 5] + [] .. []
[] + [3, 4, 5, 6, 7] .. []
[1, 2, 3, 4, 5] + [3, 4, 5, 6, 7] .. [4, 6, 8, 10, 12]
[1, 2, 3, 4, 5] + [3, 4, 5] .. [4, 6, 8]
[1, 2, 3] + [3, 4, 5, 6, 7] .. [4, 6, 8]
[([1, 2, 3, 4, 5] + (3, 4, 5, 6, 7))*] .. [4, 6, 8, 10, 12]
[((1, 2, 3, 4, 5) + [3, 4, 5, 6, 7])*] .. [4, 6, 8, 10, 12]
[((1, 2, 3, 4, 5) + (3, 4, 5, 6, 7))*] .. [4, 6, 8, 10, 12]
======== Function ========
x .. [1, 2, 3, <Nil>, 5, 6, <Nil>, 8, 9]
f(x) .. [1, 2, 3, <Nil>, 5, 6, <Nil>, 8, 9]
f(x):list .. [1, 2, 3, <Nil>, 5, 6, <Nil>, 8, 9]
f(x):xlist .. [1, 2, 3, 5, 6, 8, 9]
[f(x):iter*] .. [1, 2, 3, <Nil>, 5, 6, <Nil>, 8, 9]
[f(x):xiter*] .. [1, 2, 3, 5, 6, 8, 9]
======== :flat attribute ========
x .. [0, 1, 2, 3, 4, 5]
f(x) .. [[0, 0, 0], <Nil>, [2, 4, 6], <Nil>, [4, 8, 12], <Nil>]
f(x):flat .. [0, 0, 0, <Nil>, 2, 4, 6, <Nil>, 4, 8, 12, <Nil>]
f(x):xlist:flat .. [0, 0, 0, 2, 4, 6, 4, 8, 12]
======== :void attribute ========
f(n:Number):map:void
1
2
3
4
5
6
7
8
9
10
