======== PUnit ========
f()
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 Call(cont=##3)
f(1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 Call(cont=##6)
f(1, 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 Call(cont=##9)
f(1, 2, 3, 4, 5)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`3:##8,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`4:##11,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`5:##14,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(1, 2, 3, 4, 5):attr1:attr2
  ##0 Lookup(`f)
  ##1 Argument():attr1:attr2
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`3:##8,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`4:##11,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`5:##14,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(1, 2) {f1(), f2()}
  ##0 Lookup(`f)
  ##1 Argument(block=##9)
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 Jump(cont=##17)
  ##9 BeginSequence(sentinel=##16)
  ##10 Lookup(`f1)
  ##11 Argument()
  ##12 Call(cont=##13), DiscardValue()
  ##13 Lookup(`f2)
  ##14 Argument()
  ##15 Call(cont=##16)
  ##16 EndSequence()
  ##17 Call(cont=##18)
f(a)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 Call(cont=##6)
f(a, b)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 Call(cont=##9)
f(a, b, c, d, e)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`c:##8,sentinel=##10,branchdest=##11)
  ##9 Lookup(`c)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`d:##11,sentinel=##13,branchdest=##14)
  ##12 Lookup(`d)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`e:##14,sentinel=##16,branchdest=##17)
  ##15 Lookup(`e)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(a => 1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=>1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 Call(cont=##6)
f(a => 1, b => 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=>1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 BeginArgSlotNamed(`b=>2,symbol=b,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlotNamed()
  ##8 Call(cont=##9)
f(a => 1, b => 2, c => 3, d => 4, e => 5)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=>1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 BeginArgSlotNamed(`b=>2,symbol=b,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlotNamed()
  ##8 BeginArgSlotNamed(`c=>3,symbol=c,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlotNamed()
  ##11 BeginArgSlotNamed(`d=>4,symbol=d,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlotNamed()
  ##14 BeginArgSlotNamed(`e=>5,symbol=e,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlotNamed()
  ##17 Call(cont=##18)
======== Default Value ========
f .. f(a => 'def-A', b => 'def-B', c => 'def-C')
f() .. a=def-A, b=def-B, c=def-C
f(1) .. a=1, b=def-B, c=def-C
f(1, 2) .. a=1, b=2, c=def-C
f(1, 2, 3) .. a=1, b=2, c=3
f(a => 1) .. a=1, b=def-B, c=def-C
f(b => 2) .. a=def-A, b=2, c=def-C
f(c => 3) .. a=def-A, b=def-B, c=3
f(a => 1, c => 3) .. a=1, b=def-B, c=3
======== Optional Argument ========
f .. f(a?, b?, c?)
f() .. a=<Undefined>, b=<Undefined>, c=<Undefined>
f(1) .. a=1, b=<Undefined>, c=<Undefined>
f(1, 2) .. a=1, b=2, c=<Undefined>
f(1, 2, 3) .. a=1, b=2, c=3
f(a => 1) .. a=1, b=<Undefined>, c=<Undefined>
f(b => 2) .. a=<Undefined>, b=2, c=<Undefined>
f(c => 3) .. a=<Undefined>, b=<Undefined>, c=3
f(a => 1, c => 3) .. a=1, b=<Undefined>, c=3
======== Property ========
func.name .. func
func.type .. `function
String.Find.type .. `method
======== return ========
f() .. <Nil>
g() .. 3
======== Recursion ========
20! = 2432902008176640000
======== nil attribute ========
f .. f(a:Number)
g .. g(a:Number:nil)
f(nil) .. failed to cast from Nil to Number
g(nil) .. <Nil>
======== dynamic_scope ========
[static]  a = external
[dynamic] a = external
[static, block]  a = external
[dynamic, block] a = external
[static]  a = external
[dynamic] a = local
[static, block]  a = external
[dynamic, block] a = local
======== Named argument ========
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f1>((<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a => <Number:10>, b => <Number:20>, c => <Number:30>, (<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a => <Number:10>, b => <Number:20>, c => <Number:30>, (<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a => <Number:30>, b => <Number:10>, c => <Number:20>, (<Dict:3items>)%)
======== Cast of List Value ========
[1, 2, 3]
['1', '2', '3']
======== Quoted Value ========
3
  ##0 Value(<Number:3>)
'str'
  ##0 Value(<String:'str'>)
v
  ##0 Lookup(`v)
v = 2
  ##0 Value(<Number:2>)
  ##1 AssignToSymbol(`v)
g(a, b, c)
  ##0 Lookup(`g)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`c:##8,sentinel=##10,branchdest=##11)
  ##9 Lookup(`c)
  ##10 EndArgSlot()
  ##11 Call(cont=##12)
