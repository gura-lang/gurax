======== PUnit ========
f()
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 Call(cont=##3)
f(1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 Call(cont=##6)
f(1, 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 Call(cont=##9)
f(1, 2, 3, 4, 5)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`3:##8,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`4:##11,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`5:##14,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(1, 2, 3, 4, 5):attr1:attr2
  ##0 Lookup(`f)
  ##1 Argument():attr1:attr2
  ##2 BeginArgSlot(`1:##2,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`2:##5,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`3:##8,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`4:##11,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`5:##14,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(1, 2) {f1(), f2()}
  ##0 Lookup(`f)
  ##1 Jump(cont=##10)
  ##2 BeginSequence(sentinel=##9)
  ##3 Lookup(`f1)
  ##4 Argument()
  ##5 Call(cont=##6), DiscardValue()
  ##6 Lookup(`f2)
  ##7 Argument()
  ##8 Call(cont=##9)
  ##9 Return()
  ##10 Argument(block=##2)
  ##11 BeginArgSlot(`1:##11,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:1>)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`2:##14,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:2>)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(a)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 Call(cont=##6)
f(a, b)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 Call(cont=##9)
f(a, b, c, d, e)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`c:##8,sentinel=##10,branchdest=##11)
  ##9 Lookup(`c)
  ##10 EndArgSlot()
  ##11 BeginArgSlot(`d:##11,sentinel=##13,branchdest=##14)
  ##12 Lookup(`d)
  ##13 EndArgSlot()
  ##14 BeginArgSlot(`e:##14,sentinel=##16,branchdest=##17)
  ##15 Lookup(`e)
  ##16 EndArgSlot()
  ##17 Call(cont=##18)
f(a = 1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 Call(cont=##6)
f(a = 1, b = 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 BeginArgSlotNamed(`b=2,symbol=b,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlotNamed()
  ##8 Call(cont=##9)
f(a = 1, b = 2, c = 3, d = 4, e = 5)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 BeginArgSlotNamed(`a=1,symbol=a,sentinel=##4,branchdest=##5)
  ##3 Value(<Number:1>)
  ##4 EndArgSlotNamed()
  ##5 BeginArgSlotNamed(`b=2,symbol=b,sentinel=##7,branchdest=##8)
  ##6 Value(<Number:2>)
  ##7 EndArgSlotNamed()
  ##8 BeginArgSlotNamed(`c=3,symbol=c,sentinel=##10,branchdest=##11)
  ##9 Value(<Number:3>)
  ##10 EndArgSlotNamed()
  ##11 BeginArgSlotNamed(`d=4,symbol=d,sentinel=##13,branchdest=##14)
  ##12 Value(<Number:4>)
  ##13 EndArgSlotNamed()
  ##14 BeginArgSlotNamed(`e=5,symbol=e,sentinel=##16,branchdest=##17)
  ##15 Value(<Number:5>)
  ##16 EndArgSlotNamed()
  ##17 Call(cont=##18)
======== Property ========
Function.__PropHandler__(`expr) .. <PropHandler:expr:Expr:R>
Function.__PropHandler__(`name) .. <PropHandler:name:String:R>
Function.__PropHandler__(`type) .. <PropHandler:type:Symbol:R>
======== Default Value (1) ========
f .. f(a = 'A', b = 'B', c = 'C', d = 'D', e = 'E')
f() .. a=A, b=B, c=C, d=D, e=E
f(a = 'A-mod') .. a=A-mod, b=B, c=C, d=D, e=E
f(b = 'B-mod') .. a=A, b=B-mod, c=C, d=D, e=E
f(c = 'C-mod') .. a=A, b=B, c=C-mod, d=D, e=E
f(d = 'D-mod') .. a=A, b=B, c=C, d=D-mod, e=E
f(e = 'E-mod') .. a=A, b=B, c=C, d=D, e=E-mod
f('A-mod', 'B-mod', 'C-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D, e=E
f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D-mod, e=E-mod
======== Default Value (2) ========
f .. f(a = 'A', b = 'B', c, d = 'D', e = 'E')
f() .. lacking value for argument 'c'
f(a = 'A-mod', c = 'C') .. a=A-mod, b=B, c=C, d=D, e=E
f(b = 'B-mod', c = 'C') .. a=A, b=B-mod, c=C, d=D, e=E
f(c = 'C') .. a=A, b=B, c=C, d=D, e=E
f(d = 'D-mod', c = 'C') .. a=A, b=B, c=C, d=D-mod, e=E
f(e = 'E-mod', c = 'C') .. a=A, b=B, c=C, d=D, e=E-mod
f('A-mod', 'B-mod', 'C-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D, e=E
f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D-mod, e=E-mod
======== Optional Argument ========
f .. f(a?, b?, c?)
f() .. a=<Nil>, b=<Nil>, c=<Nil>
f(1) .. a=1, b=<Nil>, c=<Nil>
f(1, 2) .. a=1, b=2, c=<Nil>
f(1, 2, 3) .. a=1, b=2, c=3
f(a = 1) .. a=1, b=<Nil>, c=<Nil>
f(b = 2) .. a=<Nil>, b=2, c=<Nil>
f(c = 3) .. a=<Nil>, b=<Nil>, c=3
f(a = 1, c = 3) .. a=1, b=<Nil>, c=3
======== Property ========
func.name .. func
func.type .. `function
String.Find.type .. `method
A.f.type .. `classMethod
======== return ========
f() .. return(value?:Any)
g() .. 3
======== Recursion ========
20! = 2432902008176640000
======== nil attribute ========
f .. f(a:Number)
g .. g(a:Number:nil)
f(nil) .. can't accept nil value
g(nil) .. <Nil>
======== dynamic_scope ========
[static]  a = external
[dynamic] a = external
[static, block]  a = external
[dynamic, block] a = external
[static]  a = external
[dynamic] a = local
[static, block]  a = external
[dynamic, block] a = local
======== Named argument ========
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f1>((<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a = <Number:10>, b = <Number:20>, c = <Number:30>, (<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a = <Number:10>, b = <Number:20>, c = <Number:30>, (<Dict:3items>)%)
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Function:f2>(a = <Number:30>, b = <Number:10>, c = <Number:20>, (<Dict:3items>)%)
======== Cast of List Value ========
[1, 2, 3]
['1', '2', '3']
======== Quoted Value ========
3
  ##0 Value(<Number:3>)
'str'
  ##0 Value(<String:'str'>)
v
  ##0 Lookup(`v)
{v = 2}
  ##0 Value(<Number:2>)
  ##1 AssignToSymbol(`v)
g(a, b, c)
  ##0 Lookup(`g)
  ##1 Argument()
  ##2 BeginArgSlot(`a:##2,sentinel=##4,branchdest=##5)
  ##3 Lookup(`a)
  ##4 EndArgSlot()
  ##5 BeginArgSlot(`b:##5,sentinel=##7,branchdest=##8)
  ##6 Lookup(`b)
  ##7 EndArgSlot()
  ##8 BeginArgSlot(`c:##8,sentinel=##10,branchdest=##11)
  ##9 Lookup(`c)
  ##10 EndArgSlot()
  ##11 Call(cont=##12)
======== block ========
f .. f() {block}
g .. g() {`block}
f {}.type .. `function
g {}.type .. `Block
f {|v1, v2| func(a, b, c)} .. block(v1, v2):cut_extra_args
g {|v1, v2| func(a, b, c)} .. {|v1, v2| func(a, b, c)}
======== Property ========
Fact.expr .. if (n <= 1) {1} else {n * Fact(n - 1)}
Fact.name .. Fact
Fact.type .. `function
======== Function() ========
{f = Function {}, f} .. f()
{f = Function {}, f()} .. <Nil>
{f = Function {g()}, f()} .. []
{f = Function(v) {}, f} .. f(v)
{f = Function(v) {}, f(3)} .. <Nil>
{f = Function(v) {g(v)}, f(3)} .. [3]
{f = Function(v) {}, f()} .. lacking value for argument 'v'
{f = Function(v[]) {}, f} .. f(v[])
{f = Function(v[]) {}, f([1, 2, 3])} .. <Nil>
{f = Function(v[]) {}, f()} .. lacking value for argument 'v'
{f = Function(v1, v2, v3, v4, v5, v6) {}, f} .. f(v1, v2, v3, v4, v5, v6)
{f = Function(v1, v2, v3, v4, v5, v6) {}, f(1, 2, 3, 4, 5, 6)} .. <Nil>
{f = Function(v1, v2, v3, v4, v5, v6) {g(v1, v2, v3, v4, v5, v6)}, f(1, 2, 3, 4, 5, 6)} .. [1,2,3,4,5,6]
{f = Function(v1, v2, v3, v4, v5, v6) {}, f(3)} .. lacking value for argument 'v2'
======== Function Creation by &{} ========
{f = & {}, f} .. f()
{f = & {}, f()} .. <Nil>
{f = & {}, f(3)} .. too many arguments
{f = & {$a}, f} .. f($a:Any)
{f = & {$a}, f()} .. lacking value for argument '$a'
{f = & {$a}, f(3)} .. 3
{f = & {$a}, f(3, 4)} .. too many arguments
{f = & {$a + $b}, f} .. f($a:Any, $b:Any)
{f = & {$a + $b}, f(3, 4)} .. 7
{f = & {((($a + $b) + $c) + $d) + $e}, f} .. f($a:Any, $b:Any, $c:Any, $d:Any, $e:Any)
{f = & {((($a + $b) + $c) + $d) + $e}, f(3, 4, 5, 6, 7)} .. 25
{f = & {$a + ($b * $c)}, f} .. f($a:Any, $b:Any, $c:Any)
{f = & {$a + ($b * $c)}, f(3, 4, 5)} .. 23
{f = & {($a * $b) + $c}, f} .. f($a:Any, $b:Any, $c:Any)
{f = & {($a * $b) + $c}, f(3, 4, 5)} .. 17
{f = & {g($a, $b, $c) + $d}, f} .. f($a:Any, $b:Any, $c:Any, $d:Any)
{f = & {g($a, $b, $c) + $d}, f(3, 4, 5, 6)} .. 18
{f = & {$a + g($b, $c, $d)}, f} .. f($a:Any, $b:Any, $c:Any, $d:Any)
{f = & {$a + g($b, $c, $d)}, f(3, 4, 5, 6)} .. 18
{f = & {$a + $a}, f} .. f($a:Any)
{f = & {$a + $a}, f(3)} .. 6
======== Variable Expansion by Asterisk Operator ========
f1 .. f1(a, b*)
f2 .. f2(a, b, c, d, e*)
f3 .. f3(a, b, c, d, e)
f4 .. f4(a*)
f1(x*) .. lacking value for argument 'a'
f2(x*) .. lacking value for argument 'a'
f3(x*) .. lacking value for argument 'a'
f4(x*) .. a=[]
f1(x*) .. a=1 b=[2,3,4]
f2(x*) .. a=1 b=2 c=3 d=4 e=[]
f3(x*) .. lacking value for argument 'e'
f4(x*) .. a=[1,2,3,4]
f1(x*) .. a=1 b=[2,3,4,5]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5]
f3(x*) .. a=1 b=2 c=3 d=4 e=5
f4(x*) .. a=[1,2,3,4,5]
f1(x*) .. a=1 b=[2,3,4,5,6]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6]
f1(x*) .. a=1 b=[2,3,4,5,6,7,8,9,10]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6,7,8,9,10]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6,7,8,9,10]
f5([1, 2]*, 3) .. a=1 b=2 c=3
f5([1, 2, 3]*) .. invalid argument assignment
f1(x.Each()*) .. a=1 b=[2,3,4,5,6,7,8,9,10]
f2(x.Each()*) .. a=1 b=2 c=3 d=4 e=[5,6,7,8,9,10]
f3(x.Each()*) .. too many arguments
f4(x.Each()*) .. a=[1,2,3,4,5,6,7,8,9,10]
======== Block delegation ========
g1 {|str| Format('type = %s', str)} .. type = `function
g1() .. (no block)
g2 {|str| Format('type = %s', str)} .. failed to cast from Function to Expr
g3() .. block expression must be specified for delegation
======== Attribute :void ========
<Nil>
