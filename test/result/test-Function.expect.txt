======== PUnit ========
f()
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 Call(cont=##3)
f(1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot_Value(`1:##2,1,cont=##4)
  ##3 Value(1)
  ##4 Call(cont=##5)
f(1, 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot_Value(`1:##2,1,cont=##4)
  ##3 Value(1)
  ##4 ArgSlot_Value(`2:##4,2,cont=##6)
  ##5 Value(2)
  ##6 Call(cont=##7)
f(1, 2, 3, 4, 5)
  ##0  Lookup(`f)
  ##1  Argument()
  ##2  ArgSlot_Value(`1:##2,1,cont=##4)
  ##3  Value(1)
  ##4  ArgSlot_Value(`2:##4,2,cont=##6)
  ##5  Value(2)
  ##6  ArgSlot_Value(`3:##6,3,cont=##8)
  ##7  Value(3)
  ##8  ArgSlot_Value(`4:##8,4,cont=##10)
  ##9  Value(4)
  ##10 ArgSlot_Value(`5:##10,5,cont=##12)
  ##11 Value(5)
  ##12 Call(cont=##13)
f(1, 2, 'hoge', 4, 'foo')
  ##0  Lookup(`f)
  ##1  Argument()
  ##2  ArgSlot_Value(`1:##2,1,cont=##4)
  ##3  Value(1)
  ##4  ArgSlot_Value(`2:##4,2,cont=##6)
  ##5  Value(2)
  ##6  ArgSlot_Value(`'hoge':##6,'hoge',cont=##8)
  ##7  Value('hoge')
  ##8  ArgSlot_Value(`4:##8,4,cont=##10)
  ##9  Value(4)
  ##10 ArgSlot_Value(`'foo':##10,'foo',cont=##12)
  ##11 Value('foo')
  ##12 Call(cont=##13)
f(1, 2, 3, 4, 5):attr1:attr2
  ##0  Lookup(`f)
  ##1  Argument():attr1:attr2
  ##2  ArgSlot_Value(`1:##2,1,cont=##4)
  ##3  Value(1)
  ##4  ArgSlot_Value(`2:##4,2,cont=##6)
  ##5  Value(2)
  ##6  ArgSlot_Value(`3:##6,3,cont=##8)
  ##7  Value(3)
  ##8  ArgSlot_Value(`4:##8,4,cont=##10)
  ##9  Value(4)
  ##10 ArgSlot_Value(`5:##10,5,cont=##12)
  ##11 Value(5)
  ##12 Call(cont=##13)
f(1, 2) {f1(), f2()}
  ##0  Lookup(`f)
  ##1  Jump(cont=##10)
  ##2  SequenceBegin(sentinel=##9)
  ##3  Lookup(`f1)
  ##4  Argument()
  ##5  Call(cont=##6), DiscardValue()
  ##6  Lookup(`f2)
  ##7  Argument()
  ##8  Call(cont=##9)
  ##9  Return()
  ##10 Argument(block=##2)
  ##11 ArgSlot_Value(`1:##11,1,cont=##13)
  ##12 Value(1)
  ##13 ArgSlot_Value(`2:##13,2,cont=##15)
  ##14 Value(2)
  ##15 Call(cont=##16)
f(a)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot_Lookup(`a:##2,a,cont=##4)
  ##3 Lookup(`a)
  ##4 Call(cont=##5)
f(a, b)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot_Lookup(`a:##2,a,cont=##4)
  ##3 Lookup(`a)
  ##4 ArgSlot_Lookup(`b:##4,b,cont=##6)
  ##5 Lookup(`b)
  ##6 Call(cont=##7)
f(a, b, c, d, e)
  ##0  Lookup(`f)
  ##1  Argument()
  ##2  ArgSlot_Lookup(`a:##2,a,cont=##4)
  ##3  Lookup(`a)
  ##4  ArgSlot_Lookup(`b:##4,b,cont=##6)
  ##5  Lookup(`b)
  ##6  ArgSlot_Lookup(`c:##6,c,cont=##8)
  ##7  Lookup(`c)
  ##8  ArgSlot_Lookup(`d:##8,d,cont=##10)
  ##9  Lookup(`d)
  ##10 ArgSlot_Lookup(`e:##10,e,cont=##12)
  ##11 Lookup(`e)
  ##12 Call(cont=##13)
f(a = 1)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 NamedArgSlotBegin(`a=1,symbol=a,sentinel=##4,branchDest=##5)
  ##3 Value(1)
  ##4 NamedArgSlotEnd()
  ##5 Call(cont=##6)
f(a = 1, b = 2)
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 NamedArgSlotBegin(`a=1,symbol=a,sentinel=##4,branchDest=##5)
  ##3 Value(1)
  ##4 NamedArgSlotEnd()
  ##5 NamedArgSlotBegin(`b=2,symbol=b,sentinel=##7,branchDest=##8)
  ##6 Value(2)
  ##7 NamedArgSlotEnd()
  ##8 Call(cont=##9)
f(a = 1, b = 2, c = 3, d = 4, e = 5)
  ##0  Lookup(`f)
  ##1  Argument()
  ##2  NamedArgSlotBegin(`a=1,symbol=a,sentinel=##4,branchDest=##5)
  ##3  Value(1)
  ##4  NamedArgSlotEnd()
  ##5  NamedArgSlotBegin(`b=2,symbol=b,sentinel=##7,branchDest=##8)
  ##6  Value(2)
  ##7  NamedArgSlotEnd()
  ##8  NamedArgSlotBegin(`c=3,symbol=c,sentinel=##10,branchDest=##11)
  ##9  Value(3)
  ##10 NamedArgSlotEnd()
  ##11 NamedArgSlotBegin(`d=4,symbol=d,sentinel=##13,branchDest=##14)
  ##12 Value(4)
  ##13 NamedArgSlotEnd()
  ##14 NamedArgSlotBegin(`e=5,symbol=e,sentinel=##16,branchDest=##17)
  ##15 Value(5)
  ##16 NamedArgSlotEnd()
  ##17 Call(cont=##18)
======== Property ========
Function
  #expr             Expr         R
  #name             String       R
  #type             Symbol       R
======== Default Value (1) ========
f .. <Function:f(a='A',b='B',c='C',d='D',e='E')>
f() .. a=A, b=B, c=C, d=D, e=E
f(a = 'A-mod') .. a=A-mod, b=B, c=C, d=D, e=E
f(b = 'B-mod') .. a=A, b=B-mod, c=C, d=D, e=E
f(c = 'C-mod') .. a=A, b=B, c=C-mod, d=D, e=E
f(d = 'D-mod') .. a=A, b=B, c=C, d=D-mod, e=E
f(e = 'E-mod') .. a=A, b=B, c=C, d=D, e=E-mod
f('A-mod', 'B-mod', 'C-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D, e=E
f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D-mod, e=E-mod
======== Default Value (2) ========
f .. <Function:f(a='A',b='B',c,d='D',e='E')>
f() .. lacking value for argument 'c'
f(a = 'A-mod', c = 'C') .. a=A-mod, b=B, c=C, d=D, e=E
f(b = 'B-mod', c = 'C') .. a=A, b=B-mod, c=C, d=D, e=E
f(c = 'C') .. a=A, b=B, c=C, d=D, e=E
f(d = 'D-mod', c = 'C') .. a=A, b=B, c=C, d=D-mod, e=E
f(e = 'E-mod', c = 'C') .. a=A, b=B, c=C, d=D, e=E-mod
f('A-mod', 'B-mod', 'C-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D, e=E
f(e = 'E-mod', d = 'D-mod', c = 'C-mod', b = 'B-mod', a = 'A-mod') .. a=A-mod, b=B-mod, c=C-mod, d=D-mod, e=E-mod
======== Optional Argument ========
f .. <Function:f(a?,b?,c?)>
f() .. a=<Nil>, b=<Nil>, c=<Nil>
f(1) .. a=1, b=<Nil>, c=<Nil>
f(1, 2) .. a=1, b=2, c=<Nil>
f(1, 2, 3) .. a=1, b=2, c=3
f(a = 1) .. a=1, b=<Nil>, c=<Nil>
f(b = 2) .. a=<Nil>, b=2, c=<Nil>
f(c = 3) .. a=<Nil>, b=<Nil>, c=3
f(a = 1, c = 3) .. a=1, b=<Nil>, c=3
======== Property ========
func.name .. func
func.type .. `function
String.Find.type .. `method
A.f.type .. `method
======== return ========
f() .. <Function:return(value?:Any)>
g() .. 3
======== Recursion ========
20! = 2432902008176640000
======== nil attribute ========
f .. <Function:f(a:Number)>
g .. <Function:g(a:Number:nil)>
f(nil) .. a can't accept nil value
g(nil) .. <Nil>
======== dynamicScope ========
[static]  a = external
[dynamic] a = external
[static, block]  a = external
[dynamic, block] a = external
[static]  a = external
[dynamic] a = local
[static, block]  a = external
[dynamic, block] a = local
======== Named argument ========
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Argument:<Function:f1(dict%,arg%%)>:((%{`d1=>1,`d2=>2,`d3=>3})%)>
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Argument:<Function:f2(a,b,c,dict%,arg%%)>:(a=10,b=20,c=30,(%{`d1=>1,`d2=>2,`d3=>3})%)>
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Argument:<Function:f2(a,b,c,dict%,arg%%)>:(a=10,b=20,c=30,(%{`d1=>1,`d2=>2,`d3=>3})%)>
%{`d1 => 1, `d2 => 2, `d3 => 3}
<Argument:<Function:f2(a,b,c,dict%,arg%%)>:(a=30,b=10,c=20,(%{`d1=>1,`d2=>2,`d3=>3})%)>
======== Cast of List Value ========
[1, 2, 3]
['1', '2', '3']
======== Quoted Value ========
3
  ##0 Value(3)
'str'
  ##0 Value('str')
v
  ##0 Lookup(`v)
{v = 2}
  ##0 Value(2)
  ##1 AssignToSymbol(`v)
g(a, b, c)
  ##0 Lookup(`g)
  ##1 Argument()
  ##2 ArgSlot_Lookup(`a:##2,a,cont=##4)
  ##3 Lookup(`a)
  ##4 ArgSlot_Lookup(`b:##4,b,cont=##6)
  ##5 Lookup(`b)
  ##6 ArgSlot_Lookup(`c:##6,c,cont=##8)
  ##7 Lookup(`c)
  ##8 Call(cont=##9)
======== block ========
f .. <Function:f(){block}>
g .. <Function:g(){`block}>
f {}.type .. `function
g {}.type .. `Block
f {|v1, v2| func(a, b, c)} .. <Function:block(v1,v2):cutExtraArgs>
g {|v1, v2| func(a, b, c)} .. `{|v1, v2| func(a, b, c)}
======== Property ========
Fact.expr .. `if (n <= 1) {1} else {n * Fact(n - 1)}
Fact.name .. Fact
Fact.type .. `function
======== Function() ========
{f = Function {}, f} .. <Function:f()>
{f = Function {}, f()} .. <Nil>
{f = Function {g()}, f()} .. []
{f = Function(v) {}, f} .. <Function:f(v)>
{f = Function(v) {}, f(3)} .. <Nil>
{f = Function(v) {g(v)}, f(3)} .. [3]
{f = Function(v) {}, f()} .. lacking value for argument 'v'
{f = Function(v[]) {}, f} .. <Function:f(v[])>
{f = Function(v[]) {}, f([1, 2, 3])} .. <Nil>
{f = Function(v[]) {}, f()} .. lacking value for argument 'v'
{f = Function(v1, v2, v3, v4, v5, v6) {}, f} .. <Function:f(v1,v2,v3,v4,v5,v6)>
{f = Function(v1, v2, v3, v4, v5, v6) {}, f(1, 2, 3, 4, 5, 6)} .. <Nil>
{f = Function(v1, v2, v3, v4, v5, v6) {g(v1, v2, v3, v4, v5, v6)}, f(1, 2, 3, 4, 5, 6)} .. [1,2,3,4,5,6]
{f = Function(v1, v2, v3, v4, v5, v6) {}, f(3)} .. lacking value for argument 'v2'
======== Function Creation by &{} ========
{f = & {}, f} .. <Function:f()>
{f = & {}, f()} .. <Nil>
{f = & {}, f(3)} .. too many arguments
{f = & {$a}, f} .. <Function:f($a:Any)>
{f = & {$a}, f()} .. lacking value for argument '$a'
{f = & {$a}, f(3)} .. 3
{f = & {$a}, f(3, 4)} .. too many arguments
{f = & {$a + $b}, f} .. <Function:f($a:Any,$b:Any)>
{f = & {$a + $b}, f(3, 4)} .. 7
{f = & {((($a + $b) + $c) + $d) + $e}, f} .. <Function:f($a:Any,$b:Any,$c:Any,$d:Any,$e:Any)>
{f = & {((($a + $b) + $c) + $d) + $e}, f(3, 4, 5, 6, 7)} .. 25
{f = & {$a + ($b * $c)}, f} .. <Function:f($a:Any,$b:Any,$c:Any)>
{f = & {$a + ($b * $c)}, f(3, 4, 5)} .. 23
{f = & {($a * $b) + $c}, f} .. <Function:f($a:Any,$b:Any,$c:Any)>
{f = & {($a * $b) + $c}, f(3, 4, 5)} .. 17
{f = & {g($a, $b, $c) + $d}, f} .. <Function:f($a:Any,$b:Any,$c:Any,$d:Any)>
{f = & {g($a, $b, $c) + $d}, f(3, 4, 5, 6)} .. 18
{f = & {$a + g($b, $c, $d)}, f} .. <Function:f($a:Any,$b:Any,$c:Any,$d:Any)>
{f = & {$a + g($b, $c, $d)}, f(3, 4, 5, 6)} .. 18
{f = & {$a + $a}, f} .. <Function:f($a:Any)>
{f = & {$a + $a}, f(3)} .. 6
{f = & {|a|}, f} .. <Function:f(a)>
{f = & {|a| $x}, f} .. block parameters and dollar-style arguments can not be used together.
{f = & {|a|}, f()} .. lacking value for argument 'a'
{f = & {|a|}, f(3)} .. <Nil>
{f = & {|a|}, f(3, 4)} .. too many arguments
{f = & {|a, b| a + b}, f} .. <Function:f(a,b)>
{f = & {|a, b| a + b}, f(3, 4)} .. 7
{f = & {|a:String, b:Number| a * b}, f('hello', 4)} .. hellohellohellohello
======== Variable Expansion by Asterisk Operator ========
f1 .. <Function:f1(a,b*)>
f2 .. <Function:f2(a,b,c,d,e*)>
f3 .. <Function:f3(a,b,c,d,e)>
f4 .. <Function:f4(a*)>
f1(x*) .. lacking value for argument 'a'
f2(x*) .. lacking value for argument 'a'
f3(x*) .. lacking value for argument 'a'
f4(x*) .. a=[]
f1(x*) .. a=1 b=[2,3,4]
f2(x*) .. a=1 b=2 c=3 d=4 e=[]
f3(x*) .. lacking value for argument 'e'
f4(x*) .. a=[1,2,3,4]
f1(x*) .. a=1 b=[2,3,4,5]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5]
f3(x*) .. a=1 b=2 c=3 d=4 e=5
f4(x*) .. a=[1,2,3,4,5]
f1(x*) .. a=1 b=[2,3,4,5,6]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6]
f1(x*) .. a=1 b=[2,3,4,5,6,7,8,9,10]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6,7,8,9,10]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6,7,8,9,10]
f5([1, 2]*, 3) .. a=1 b=2 c=3
f5([1, 2, 3]*) .. invalid argument assignment
f1(x.Each()*) .. a=1 b=[2,3,4,5,6,7,8,9,10]
f2(x.Each()*) .. a=1 b=2 c=3 d=4 e=[5,6,7,8,9,10]
f3(x.Each()*) .. too many arguments
f4(x.Each()*) .. a=[1,2,3,4,5,6,7,8,9,10]
f1(x*) .. lacking value for argument 'a'
f2(x*) .. lacking value for argument 'a'
f3(x*) .. lacking value for argument 'a'
f4(x*) .. a=[]
f1(x*) .. a=1 b=[2,3,4]
f2(x*) .. a=1 b=2 c=3 d=4 e=[]
f3(x*) .. lacking value for argument 'e'
f4(x*) .. a=[1,2,3,4]
f1(x*) .. a=1 b=[2,3,4,5]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5]
f3(x*) .. a=1 b=2 c=3 d=4 e=5
f4(x*) .. a=[1,2,3,4,5]
f1(x*) .. a=1 b=[2,3,4,5,6]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6]
f1(x*) .. a=1 b=[2,3,4,5,6,7,8,9,10]
f2(x*) .. a=1 b=2 c=3 d=4 e=[5,6,7,8,9,10]
f3(x*) .. too many arguments
f4(x*) .. a=[1,2,3,4,5,6,7,8,9,10]
======== Block delegation ========
g1 {|str| Format('type = %s', str)} .. type = function
g1() .. (no block)
g2 {|str| Format('type = %s', str)} .. can't cast from Function to Expr
g3() .. block expression must be specified for delegation
======== Attribute :void ========
<Nil>
======== Scope for block ========
OK
