======== PUnit ========
--------
f(`(a))
  ##0 Lookup(`a)
--------
f(`({a = 3}))
  ##0 Value(<Number:3>)
  ##1 AssignToSymbol(`a)
--------
f(`(a + b))
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(+)
--------
`{foo}
  ##0 Lookup(`foo)
--------
`{foo, bar}
  ##0 Lookup(`foo), DiscardValue()
  ##1 Lookup(`bar)
--------
`{foo = 2, bar = 'hello'}
  ##0 Value(<Number:2>)
  ##1 AssignToSymbol(`foo), DiscardValue()
  ##2 Value(<String:'hello'>)
  ##3 AssignToSymbol(`bar)
--------
`{foo.bar}
  ##0 Lookup(`foo)
  ##1 Member_Normal(`bar)
--------
`{foo.bar = 3}
  ##0 Lookup(`foo)
  ##1 Value(<Number:3>)
  ##2 MemberSet_Normal(`bar)
======== Property ========
Expr
  #block            Expr         R
  #car              Expr         R
  #cdrs             Iterator     R
  #child            Expr         R
  #children         Iterator     R
  #isAssign         Bool         R
  #isBinaryOp       Bool         R
  #isBlock          Bool         R
  #isCaller         Bool         R
  #isIdentifier     Bool         R
  #isIndexer        Bool         R
  #isIterer         Bool         R
  #isLister         Bool         R
  #isMember         Bool         R
  #isRoot           Bool         R
  #isSuffixed       Bool         R
  #isUnaryOp        Bool         R
  #isValue          Bool         R
  #left             Expr         R
  #params           Iterator     R
  #right            Expr         R
  #target           Expr         R
  #trailer          Expr         R
  #type             Symbol       R
======== Assignment ========
{[x] = [], [x]} .. insufficient number of values
{[x] = [1], [x]} .. [1]
{[a, b, c] = 1, [a, b, c]} .. [1, 1, 1]
{[a, b, c] = [1], [a, b, c]} .. insufficient number of values
{[a, b, c] = [1, 2], [a, b, c]} .. insufficient number of values
{[a, b, c] = [1, 2, 3], [a, b, c]} .. [1, 2, 3]
{[a, b, c] = [1, 2, 3, 4], [a, b, c]} .. [1, 2, 3]
{[x.p1, x.p2, x.p3] = 1, [x.p1, x.p2, x.p3]} .. [1, 1, 1]
{[x.p1, x.p2, x.p3] = [1], [x.p1, x.p2, x.p3]} .. insufficient number of values
{[x.p1, x.p2, x.p3] = [1, 2], [x.p1, x.p2, x.p3]} .. insufficient number of values
{[x.p1, x.p2, x.p3] = [1, 2, 3], [x.p1, x.p2, x.p3]} .. [1, 2, 3]
{[x.p1, x.p2, x.p3] = [1, 2, 3, 4], [x.p1, x.p2, x.p3]} .. [1, 2, 3]
{[x[0], x[1], x[2]] = 1, x} .. [1, 1, 1]
{[x[0], x[1], x[2]] = [1], x} .. insufficient number of values
{[x[0], x[1], x[2]] = [1, 2], x} .. insufficient number of values
{[x[0], x[1], x[2]] = [1, 2, 3], x} .. [1, 2, 3]
{[x[0], x[1], x[2]] = [1, 2, 3, 4], x} .. [1, 2, 3]
