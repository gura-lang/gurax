======== PUnit ========
try {f()}
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 Call(cont=##3)
try {f()} catch {g()}
  ##0 TryBlockBegin(branchDest=##5)
  ##1 Lookup(`f)
  ##2 Argument()
  ##3 Call(cont=##4)
  ##4 TryBlockEnd(cont=##9)
  ##5 JumpIfNoCatchAny(branchDest=##9,nil), DiscardValue()
  ##6 Lookup(`g)
  ##7 Argument()
  ##8 Call(cont=##9)
  ##9 NoOperation()
try {f()} catch {|e| g()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##12)
  ##5  JumpIfNoCatchAny(branchDest=##12,nil)
  ##6  PushFrame<Block>()
  ##7  AssignToDeclArg(`e), DiscardValue()
  ##8  Lookup(`g)
  ##9  Argument()
  ##10 Call(cont=##11)
  ##11 PopFrame()
  ##12 NoOperation()
try {f()} catch(Error.SyntaxError) {|e| g()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##18)
  ##5  Value(<Nil>)
  ##6  Lookup(`Error)
  ##7  MemberGet_Normal(`SyntaxError)
  ##8  Cast(ErrorType)
  ##9  JumpIfNoCatch(branchDest=##17)
  ##10 PushFrame<Block>()
  ##11 AssignToDeclArg(`e), DiscardValue()
  ##12 Lookup(`g)
  ##13 Argument()
  ##14 Call(cont=##15)
  ##15 PopFrame()
  ##16 Jump(cont=##18)
  ##17 FailCatch(<Nil>)
  ##18 NoOperation()
try {f()} catch(Error.SyntaxError) {g()} catch(Error.KeyError) {h()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##24)
  ##5  Value(<Nil>)
  ##6  Lookup(`Error)
  ##7  MemberGet_Normal(`SyntaxError)
  ##8  Cast(ErrorType)
  ##9  JumpIfNoCatch(branchDest=##14), DiscardValue()
  ##10 Lookup(`g)
  ##11 Argument()
  ##12 Call(cont=##13)
  ##13 Jump(cont=##24)
  ##14 Value(<Nil>)
  ##15 Lookup(`Error)
  ##16 MemberGet_Normal(`KeyError)
  ##17 Cast(ErrorType)
  ##18 JumpIfNoCatch(branchDest=##23), DiscardValue()
  ##19 Lookup(`h)
  ##20 Argument()
  ##21 Call(cont=##22)
  ##22 Jump(cont=##24)
  ##23 FailCatch(<Nil>)
  ##24 NoOperation()
try {f()} catch(Error.SyntaxError) {f1()} catch(Error.KeyError) {f2()} catch {f3()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##27)
  ##5  Value(<Nil>)
  ##6  Lookup(`Error)
  ##7  MemberGet_Normal(`SyntaxError)
  ##8  Cast(ErrorType)
  ##9  JumpIfNoCatch(branchDest=##14), DiscardValue()
  ##10 Lookup(`f1)
  ##11 Argument()
  ##12 Call(cont=##13)
  ##13 Jump(cont=##27)
  ##14 Value(<Nil>)
  ##15 Lookup(`Error)
  ##16 MemberGet_Normal(`KeyError)
  ##17 Cast(ErrorType)
  ##18 JumpIfNoCatch(branchDest=##23), DiscardValue()
  ##19 Lookup(`f2)
  ##20 Argument()
  ##21 Call(cont=##22)
  ##22 Jump(cont=##27)
  ##23 JumpIfNoCatchAny(branchDest=##27,nil), DiscardValue()
  ##24 Lookup(`f3)
  ##25 Argument()
  ##26 Call(cont=##27)
  ##27 NoOperation()
try {f()} catch {f3()} catch(Error.SyntaxError) {f1()} catch(Error.KeyError) {f2()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##27)
  ##5  Value(<Nil>)
  ##6  Lookup(`Error)
  ##7  MemberGet_Normal(`SyntaxError)
  ##8  Cast(ErrorType)
  ##9  JumpIfNoCatch(branchDest=##14), DiscardValue()
  ##10 Lookup(`f1)
  ##11 Argument()
  ##12 Call(cont=##13)
  ##13 Jump(cont=##27)
  ##14 Value(<Nil>)
  ##15 Lookup(`Error)
  ##16 MemberGet_Normal(`KeyError)
  ##17 Cast(ErrorType)
  ##18 JumpIfNoCatch(branchDest=##23), DiscardValue()
  ##19 Lookup(`f2)
  ##20 Argument()
  ##21 Call(cont=##22)
  ##22 Jump(cont=##27)
  ##23 JumpIfNoCatchAny(branchDest=##27,nil), DiscardValue()
  ##24 Lookup(`f3)
  ##25 Argument()
  ##26 Call(cont=##27)
  ##27 NoOperation()
try {f()} catch(Error.SyntaxError, Error.KeyError) {f1()} catch {f3()}
  ##0  TryBlockBegin(branchDest=##5)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##21)
  ##5  Value(<Nil>)
  ##6  Lookup(`Error)
  ##7  MemberGet_Normal(`SyntaxError)
  ##8  Cast(ErrorType)
  ##9  Lookup(`Error)
  ##10 MemberGet_Normal(`KeyError)
  ##11 Cast(ErrorType)
  ##12 JumpIfNoCatch(branchDest=##17), DiscardValue()
  ##13 Lookup(`f1)
  ##14 Argument()
  ##15 Call(cont=##16)
  ##16 Jump(cont=##21)
  ##17 JumpIfNoCatchAny(branchDest=##21,nil), DiscardValue()
  ##18 Lookup(`f3)
  ##19 Argument()
  ##20 Call(cont=##21)
  ##21 NoOperation()
try {f()} catch(Error.SyntaxError) {f1()} catch(Error.KeyError) {f2()} catch {f3()} else {f4()}
  ##0  TryBlockBegin(branchDest=##9)
  ##1  Lookup(`f)
  ##2  Argument()
  ##3  Call(cont=##4)
  ##4  TryBlockEnd(cont=##5), DiscardValue()
  ##5  Lookup(`f4)
  ##6  Argument()
  ##7  Call(cont=##8)
  ##8  Jump(cont=##31)
  ##9  Value(<Nil>)
  ##10 Lookup(`Error)
  ##11 MemberGet_Normal(`SyntaxError)
  ##12 Cast(ErrorType)
  ##13 JumpIfNoCatch(branchDest=##18), DiscardValue()
  ##14 Lookup(`f1)
  ##15 Argument()
  ##16 Call(cont=##17)
  ##17 Jump(cont=##31)
  ##18 Value(<Nil>)
  ##19 Lookup(`Error)
  ##20 MemberGet_Normal(`KeyError)
  ##21 Cast(ErrorType)
  ##22 JumpIfNoCatch(branchDest=##27), DiscardValue()
  ##23 Lookup(`f2)
  ##24 Argument()
  ##25 Call(cont=##26)
  ##26 Jump(cont=##31)
  ##27 JumpIfNoCatchAny(branchDest=##31,nil), DiscardValue()
  ##28 Lookup(`f3)
  ##29 Argument()
  ##30 Call(cont=##31)
  ##31 NoOperation()
======== Simple ========
SyntaxError MESSAGE
======== Error from nested try ========
SyntaxError MESSAGE
======== Error from double-nested try ========
SyntaxError MESSAGE
======== Error from scope ========
SyntaxError MESSAGE
======== Error from triple-nested scope ========
SyntaxError MESSAGE
======== Error from function ========
SyntaxError MESSAGE
SyntaxError MESSAGE
SyntaxError MESSAGE
SyntaxError MESSAGE
======== Catch-any may be placed anywhere ========
##0  TryBlockBegin(branchDest=##3)
##1  Lookup(`nil)
##2  TryBlockEnd(cont=##32)
##3  Value(<Nil>)
##4  Lookup(`a)
##5  Cast(ErrorType)
##6  JumpIfNoCatch(branchDest=##12)
##7  PushFrame<Block>()
##8  AssignToDeclArg(`e), DiscardValue()
##9  Lookup(`nil)
##10 PopFrame()
##11 Jump(cont=##32)
##12 Value(<Nil>)
##13 Lookup(`b)
##14 Cast(ErrorType)
##15 JumpIfNoCatch(branchDest=##21)
##16 PushFrame<Block>()
##17 AssignToDeclArg(`e), DiscardValue()
##18 Lookup(`nil)
##19 PopFrame()
##20 Jump(cont=##32)
##21 Value(<Nil>)
##22 Lookup(`c)
##23 Cast(ErrorType)
##24 JumpIfNoCatch(branchDest=##30)
##25 PushFrame<Block>()
##26 AssignToDeclArg(`e), DiscardValue()
##27 Lookup(`nil)
##28 PopFrame()
##29 Jump(cont=##32)
##30 JumpIfNoCatchAny(branchDest=##32,nil), DiscardValue()
##31 Lookup(`nil)
##32 NoOperation()
OK
======== Multiple Errors ========
f {} .. else handler
f {Error.Raise(Error.SyntaxError, '')} .. 1st handler caught SyntaxError
f {Error.Raise(Error.KeyError, '')} .. 2nd handler caught KeyError
f {Error.Raise(Error.MemoryError, '')} .. 2nd handler caught MemoryError
f {Error.Raise(Error.PropertyError, '')} .. 2nd handler caught PropertyError
f {Error.Raise(Error.StreamError, '')} .. 3rd handler caught StreamError
f {Error.Raise(Error.SymbolError, '')} .. 3rd handler caught SymbolError
