======== PUnit ========
cross (v in tbl) {}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  Value(<Nil>)
  ##5  ForEach(offsetToIterator=1,branchDest=##11, decls=[v])
  ##6  Jump(cont=##8)
  ##7  CrossEach(offsetToIterator=1,branchDest=##11, decls=[v])
  ##8  DiscardValue()
  ##9  Value(<Nil>)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
cross (v in tbl):list {}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  CreateList()
  ##5  ForEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0)
  ##8  Jump(cont=##13)
  ##9  ListElem(offsetToList=0)
  ##10 CrossEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##11 Value(<Nil>)
  ##12 Jump(cont=##9)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
cross (v in tbl):xlist {}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  CreateList()
  ##5  ForEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0):xlist
  ##8  Jump(cont=##13)
  ##9  ListElem(offsetToList=0):xlist
  ##10 CrossEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##11 Value(<Nil>)
  ##12 Jump(cont=##9)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
cross (v1 in tbl1, v2 in tbl2, v3 in tbl3) {}
  ##0  Lookup(`tbl1)
  ##1  GenIterator()
  ##2  Lookup(`tbl2)
  ##3  GenIterator()
  ##4  Lookup(`tbl3)
  ##5  GenIterator()
  ##6  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##7  PushFrame<Block>()
  ##8  Value(<Nil>)
  ##9  ForEach(offsetToIterator=1,branchDest=##15, decls=[v1,v2,v3])
  ##10 Jump(cont=##12)
  ##11 CrossEach(offsetToIterator=1,branchDest=##15, decls=[v1,v2,v3])
  ##12 DiscardValue()
  ##13 Value(<Nil>)
  ##14 Jump(cont=##11)
  ##15 RemoveValues(offset=1,count=3)
  ##16 PopFrame()
cross (v in tbl) {|n|}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  Value(<Nil>)
  ##6  ForEach(offsetToIterator=2,branchDest=##14, decls=[v])
  ##7  Jump(cont=##9)
  ##8  CrossEach(offsetToIterator=2,branchDest=##14, decls=[v])
  ##9  DiscardValue()
  ##10 EvalIterator(offsetToIterator=0,branchDest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(<Nil>)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
cross (v in tbl):list {|n|}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  CreateList()
  ##6  ForEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##7  Jump(cont=##12)
  ##8  ListElem(offsetToList=0)
  ##9  Jump(cont=##16)
  ##10 ListElem(offsetToList=0)
  ##11 CrossEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##12 EvalIterator(offsetToIterator=1,branchDest=##13)
  ##13 AssignToDeclArg(`n), DiscardValue()
  ##14 Value(<Nil>)
  ##15 Jump(cont=##10)
  ##16 RemoveValues(offset=1,count=2)
  ##17 PopFrame()
cross (v in tbl):xlist {|n|}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  CreateList()
  ##6  ForEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##7  Jump(cont=##12)
  ##8  ListElem(offsetToList=0):xlist
  ##9  Jump(cont=##16)
  ##10 ListElem(offsetToList=0):xlist
  ##11 CrossEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##12 EvalIterator(offsetToIterator=1,branchDest=##13)
  ##13 AssignToDeclArg(`n), DiscardValue()
  ##14 Value(<Nil>)
  ##15 Jump(cont=##10)
  ##16 RemoveValues(offset=1,count=2)
  ##17 PopFrame()
cross (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n|}
  ##0  Lookup(`tbl1)
  ##1  GenIterator()
  ##2  Lookup(`tbl2)
  ##3  GenIterator()
  ##4  Lookup(`tbl3)
  ##5  GenIterator()
  ##6  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##7  PushFrame<Block>()
  ##8  GenIterator_Counter()
  ##9  Value(<Nil>)
  ##10 ForEach(offsetToIterator=2,branchDest=##18, decls=[v1,v2,v3])
  ##11 Jump(cont=##13)
  ##12 CrossEach(offsetToIterator=2,branchDest=##18, decls=[v1,v2,v3])
  ##13 DiscardValue()
  ##14 EvalIterator(offsetToIterator=0,branchDest=##15)
  ##15 AssignToDeclArg(`n), DiscardValue()
  ##16 Value(<Nil>)
  ##17 Jump(cont=##12)
  ##18 RemoveValues(offset=1,count=4)
  ##19 PopFrame()
cross (v in tbl) {1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  Value(<Nil>)
  ##5  ForEach(offsetToIterator=1,branchDest=##11, decls=[v])
  ##6  Jump(cont=##8)
  ##7  CrossEach(offsetToIterator=1,branchDest=##11, decls=[v])
  ##8  DiscardValue()
  ##9  Value(1)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
cross (v in tbl):list {1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  CreateList()
  ##5  ForEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0)
  ##8  Jump(cont=##13)
  ##9  ListElem(offsetToList=0)
  ##10 CrossEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##11 Value(1)
  ##12 Jump(cont=##9)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
cross (v in tbl):xlist {1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  CreateList()
  ##5  ForEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0):xlist
  ##8  Jump(cont=##13)
  ##9  ListElem(offsetToList=0):xlist
  ##10 CrossEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##11 Value(1)
  ##12 Jump(cont=##9)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
cross (v1 in tbl1, v2 in tbl2, v3 in tbl3) {1}
  ##0  Lookup(`tbl1)
  ##1  GenIterator()
  ##2  Lookup(`tbl2)
  ##3  GenIterator()
  ##4  Lookup(`tbl3)
  ##5  GenIterator()
  ##6  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##7  PushFrame<Block>()
  ##8  Value(<Nil>)
  ##9  ForEach(offsetToIterator=1,branchDest=##15, decls=[v1,v2,v3])
  ##10 Jump(cont=##12)
  ##11 CrossEach(offsetToIterator=1,branchDest=##15, decls=[v1,v2,v3])
  ##12 DiscardValue()
  ##13 Value(1)
  ##14 Jump(cont=##11)
  ##15 RemoveValues(offset=1,count=3)
  ##16 PopFrame()
cross (v in tbl) {|n| 1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  Value(<Nil>)
  ##6  ForEach(offsetToIterator=2,branchDest=##14, decls=[v])
  ##7  Jump(cont=##9)
  ##8  CrossEach(offsetToIterator=2,branchDest=##14, decls=[v])
  ##9  DiscardValue()
  ##10 EvalIterator(offsetToIterator=0,branchDest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(1)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
cross (v in tbl):list {|n| 1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  CreateList()
  ##6  ForEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##7  Jump(cont=##12)
  ##8  ListElem(offsetToList=0)
  ##9  Jump(cont=##16)
  ##10 ListElem(offsetToList=0)
  ##11 CrossEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##12 EvalIterator(offsetToIterator=1,branchDest=##13)
  ##13 AssignToDeclArg(`n), DiscardValue()
  ##14 Value(1)
  ##15 Jump(cont=##10)
  ##16 RemoveValues(offset=1,count=2)
  ##17 PopFrame()
cross (v in tbl):xlist {|n| 1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  GenIterator_Counter()
  ##5  CreateList()
  ##6  ForEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##7  Jump(cont=##12)
  ##8  ListElem(offsetToList=0):xlist
  ##9  Jump(cont=##16)
  ##10 ListElem(offsetToList=0):xlist
  ##11 CrossEach(offsetToIterator=2,branchDest=##16, decls=[v])
  ##12 EvalIterator(offsetToIterator=1,branchDest=##13)
  ##13 AssignToDeclArg(`n), DiscardValue()
  ##14 Value(1)
  ##15 Jump(cont=##10)
  ##16 RemoveValues(offset=1,count=2)
  ##17 PopFrame()
cross (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n| 1}
  ##0  Lookup(`tbl1)
  ##1  GenIterator()
  ##2  Lookup(`tbl2)
  ##3  GenIterator()
  ##4  Lookup(`tbl3)
  ##5  GenIterator()
  ##6  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##7  PushFrame<Block>()
  ##8  GenIterator_Counter()
  ##9  Value(<Nil>)
  ##10 ForEach(offsetToIterator=2,branchDest=##18, decls=[v1,v2,v3])
  ##11 Jump(cont=##13)
  ##12 CrossEach(offsetToIterator=2,branchDest=##18, decls=[v1,v2,v3])
  ##13 DiscardValue()
  ##14 EvalIterator(offsetToIterator=0,branchDest=##15)
  ##15 AssignToDeclArg(`n), DiscardValue()
  ##16 Value(1)
  ##17 Jump(cont=##12)
  ##18 RemoveValues(offset=1,count=4)
  ##19 PopFrame()
cross (v in tbl) {break, 1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  Value(<Nil>)
  ##5  ForEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##6  Jump(cont=##8)
  ##7  CrossEach(offsetToIterator=1,branchDest=##13, decls=[v])
  ##8  DiscardValue()
  ##9  Value(<Nil>)
  ##10 Break(marked=##7):branchDest, DiscardValue()
  ##11 Value(1)
  ##12 Jump(cont=##7)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
cross (v in tbl):list {break, 1}
  ##0  Lookup(`tbl)
  ##1  GenIterator()
  ##2  PrepareForCross(offsetToIterator=0,nIterators=1)
  ##3  PushFrame<Block>()
  ##4  CreateList()
  ##5  ForEach(offsetToIterator=1,branchDest=##15, decls=[v])
  ##6  Jump(cont=##11)
  ##7  ListElem(offsetToList=0)
  ##8  Jump(cont=##15)
  ##9  ListElem(offsetToList=0)
  ##10 CrossEach(offsetToIterator=1,branchDest=##15, decls=[v])
  ##11 Value()
  ##12 Break(marked=##7), DiscardValue()
  ##13 Value(1)
  ##14 Jump(cont=##9)
  ##15 RemoveValues(offset=1,count=1)
  ##16 PopFrame()
======== Statement ========
tbl .. [11, 22, 33, 44, 55, 66, 77, 88, 99]
{x = [], cross (n in []) {x.Add(n)}, x} .. []
{x = [], cross (n in tbl) {x.Add(n)}, x} .. [11, 22, 33, 44, 55, 66, 77, 88, 99]
{x = [], cross (n in tbl) {|i| x.Add(n + i)}, x} .. [11, 23, 35, 47, 59, 71, 83, 95, 107]
{x = [], cross (n in tbl) {if (n % 2 == 0) {continue}, x.Add(n)}, x} .. [11, 33, 55, 77, 99]
{x = [], cross (n in tbl) {(n % 2 == 0) && continue, x.Add(n)}, x} .. [11, 33, 55, 77, 99]
{x = [], rtn = cross (n in tbl) {if (n > 8) {break}, x.Add(n)}, (rtn, x)} .. (<Nil>, [])
{x = [], rtn = cross (n in tbl) {(n > 8) && break, x.Add(n)}, (rtn, x)} .. (<Nil>, [])
{x = [], rtn = cross (n in tbl) {if (n > 8) {break('end')}, x.Add(n)}, (rtn, x)} .. ('end', [])
{x = [], rtn = cross (n in tbl) {(n > 8) && break('end'), x.Add(n)}, (rtn, x)} .. ('end', [])
{x = [], rtn = cross (n in tbl) {if (n > 8) {break(nil)}, x.Add(n)}, (rtn, x)} .. (<Nil>, [])
{x = [], rtn = cross (n in tbl) {(n > 8) && break(nil), x.Add(n)}, (rtn, x)} .. (<Nil>, [])
{x = [], cross (n in [11, 22, 33, 44, 55]) {|i| x.Add(Format('%d-%d', i, n))}, x} .. ['0-11', '1-22', '2-33', '3-44', '4-55']
{x = [], cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555]) {|i| x.Add(Format('%d-%d-%d', i, n1, n2))}, x} .. ['0-11-111', '1-11-222', '2-11-333', '3-11-444', '4-11-555', '5-22-111', '6-22-222', '7-22-333', '8-22-444', '9-22-555', '10-33-111', '11-33-222', '12-33-333', '13-33-444', '14-33-555', '15-44-111', '16-44-222', '17-44-333', '18-44-444', '19-44-555', '20-55-111', '21-55-222', '22-55-333', '23-55-444', '24-55-555']
{x = [], cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]) {|i| x.Add(Format('%d-%d-%d-%d', i, n1, n2, n3))}, x} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-11-444-1111', '16-11-444-2222', '17-11-444-3333', '18-11-444-4444', '19-11-444-5555', '20-11-555-1111', '21-11-555-2222', '22-11-555-3333', '23-11-555-4444', '24-11-555-5555', '25-22-111-1111', '26-22-111-2222', '27-22-111-3333', '28-22-111-4444', '29-22-111-5555', '30-22-222-1111', '31-22-222-2222', '32-22-222-3333', '33-22-222-4444', '34-22-222-5555', '35-22-333-1111', '36-22-333-2222', '37-22-333-3333', '38-22-333-4444', '39-22-333-5555', '40-22-444-1111', '41-22-444-2222', '42-22-444-3333', '43-22-444-4444', '44-22-444-5555', '45-22-555-1111', '46-22-555-2222', '47-22-555-3333', '48-22-555-4444', '49-22-555-5555', '50-33-111-1111', '51-33-111-2222', '52-33-111-3333', '53-33-111-4444', '54-33-111-5555', '55-33-222-1111', '56-33-222-2222', '57-33-222-3333', '58-33-222-4444', '59-33-222-5555', '60-33-333-1111', '61-33-333-2222', '62-33-333-3333', '63-33-333-4444', '64-33-333-5555', '65-33-444-1111', '66-33-444-2222', '67-33-444-3333', '68-33-444-4444', '69-33-444-5555', '70-33-555-1111', '71-33-555-2222', '72-33-555-3333', '73-33-555-4444', '74-33-555-5555', '75-44-111-1111', '76-44-111-2222', '77-44-111-3333', '78-44-111-4444', '79-44-111-5555', '80-44-222-1111', '81-44-222-2222', '82-44-222-3333', '83-44-222-4444', '84-44-222-5555', '85-44-333-1111', '86-44-333-2222', '87-44-333-3333', '88-44-333-4444', '89-44-333-5555', '90-44-444-1111', '91-44-444-2222', '92-44-444-3333', '93-44-444-4444', '94-44-444-5555', '95-44-555-1111', '96-44-555-2222', '97-44-555-3333', '98-44-555-4444', '99-44-555-5555', '100-55-111-1111', '101-55-111-2222', '102-55-111-3333', '103-55-111-4444', '104-55-111-5555', '105-55-222-1111', '106-55-222-2222', '107-55-222-3333', '108-55-222-4444', '109-55-222-5555', '110-55-333-1111', '111-55-333-2222', '112-55-333-3333', '113-55-333-4444', '114-55-333-5555', '115-55-444-1111', '116-55-444-2222', '117-55-444-3333', '118-55-444-4444', '119-55-444-5555', '120-55-555-1111', '121-55-555-2222', '122-55-555-3333', '123-55-555-4444', '124-55-555-5555']
{x = [], cross (n1 in [11, 22, 33], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]) {|i| x.Add(Format('%d-%d-%d-%d', i, n1, n2, n3))}, x} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-11-444-1111', '16-11-444-2222', '17-11-444-3333', '18-11-444-4444', '19-11-444-5555', '20-11-555-1111', '21-11-555-2222', '22-11-555-3333', '23-11-555-4444', '24-11-555-5555', '25-22-111-1111', '26-22-111-2222', '27-22-111-3333', '28-22-111-4444', '29-22-111-5555', '30-22-222-1111', '31-22-222-2222', '32-22-222-3333', '33-22-222-4444', '34-22-222-5555', '35-22-333-1111', '36-22-333-2222', '37-22-333-3333', '38-22-333-4444', '39-22-333-5555', '40-22-444-1111', '41-22-444-2222', '42-22-444-3333', '43-22-444-4444', '44-22-444-5555', '45-22-555-1111', '46-22-555-2222', '47-22-555-3333', '48-22-555-4444', '49-22-555-5555', '50-33-111-1111', '51-33-111-2222', '52-33-111-3333', '53-33-111-4444', '54-33-111-5555', '55-33-222-1111', '56-33-222-2222', '57-33-222-3333', '58-33-222-4444', '59-33-222-5555', '60-33-333-1111', '61-33-333-2222', '62-33-333-3333', '63-33-333-4444', '64-33-333-5555', '65-33-444-1111', '66-33-444-2222', '67-33-444-3333', '68-33-444-4444', '69-33-444-5555', '70-33-555-1111', '71-33-555-2222', '72-33-555-3333', '73-33-555-4444', '74-33-555-5555']
{x = [], cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333], n3 in [1111, 2222, 3333, 4444, 5555]) {|i| x.Add(Format('%d-%d-%d-%d', i, n1, n2, n3))}, x} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-22-111-1111', '16-22-111-2222', '17-22-111-3333', '18-22-111-4444', '19-22-111-5555', '20-22-222-1111', '21-22-222-2222', '22-22-222-3333', '23-22-222-4444', '24-22-222-5555', '25-22-333-1111', '26-22-333-2222', '27-22-333-3333', '28-22-333-4444', '29-22-333-5555', '30-33-111-1111', '31-33-111-2222', '32-33-111-3333', '33-33-111-4444', '34-33-111-5555', '35-33-222-1111', '36-33-222-2222', '37-33-222-3333', '38-33-222-4444', '39-33-222-5555', '40-33-333-1111', '41-33-333-2222', '42-33-333-3333', '43-33-333-4444', '44-33-333-5555', '45-44-111-1111', '46-44-111-2222', '47-44-111-3333', '48-44-111-4444', '49-44-111-5555', '50-44-222-1111', '51-44-222-2222', '52-44-222-3333', '53-44-222-4444', '54-44-222-5555', '55-44-333-1111', '56-44-333-2222', '57-44-333-3333', '58-44-333-4444', '59-44-333-5555', '60-55-111-1111', '61-55-111-2222', '62-55-111-3333', '63-55-111-4444', '64-55-111-5555', '65-55-222-1111', '66-55-222-2222', '67-55-222-3333', '68-55-222-4444', '69-55-222-5555', '70-55-333-1111', '71-55-333-2222', '72-55-333-3333', '73-55-333-4444', '74-55-333-5555']
{x = [], cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [111, 222, 333]) {|i| x.Add(Format('%d-%d-%d-%d', i, n1, n2, n3))}, x} .. ['0-11-111-111', '1-11-111-222', '2-11-111-333', '3-11-222-111', '4-11-222-222', '5-11-222-333', '6-11-333-111', '7-11-333-222', '8-11-333-333', '9-11-444-111', '10-11-444-222', '11-11-444-333', '12-11-555-111', '13-11-555-222', '14-11-555-333', '15-22-111-111', '16-22-111-222', '17-22-111-333', '18-22-222-111', '19-22-222-222', '20-22-222-333', '21-22-333-111', '22-22-333-222', '23-22-333-333', '24-22-444-111', '25-22-444-222', '26-22-444-333', '27-22-555-111', '28-22-555-222', '29-22-555-333', '30-33-111-111', '31-33-111-222', '32-33-111-333', '33-33-222-111', '34-33-222-222', '35-33-222-333', '36-33-333-111', '37-33-333-222', '38-33-333-333', '39-33-444-111', '40-33-444-222', '41-33-444-333', '42-33-555-111', '43-33-555-222', '44-33-555-333', '45-44-111-111', '46-44-111-222', '47-44-111-333', '48-44-222-111', '49-44-222-222', '50-44-222-333', '51-44-333-111', '52-44-333-222', '53-44-333-333', '54-44-444-111', '55-44-444-222', '56-44-444-333', '57-44-555-111', '58-44-555-222', '59-44-555-333', '60-55-111-111', '61-55-111-222', '62-55-111-333', '63-55-222-111', '64-55-222-222', '65-55-222-333', '66-55-333-111', '67-55-333-222', '68-55-333-333', '69-55-444-111', '70-55-444-222', '71-55-444-333', '72-55-555-111', '73-55-555-222', '74-55-555-333']
i .. symbol 'i' is not found
n1 .. symbol 'n1' is not found
n2 .. symbol 'n2' is not found
n3 .. symbol 'n3' is not found
======== Create list ========
tbl .. [11, 22, 33, 44, 55, 66, 77, 88, 99]
cross (n in []):list {n} .. []
cross (n in tbl):list {n} .. [11, 22, 33, 44, 55, 66, 77, 88, 99]
cross (n in tbl):list {|i| n + i} .. [11, 23, 35, 47, 59, 71, 83, 95, 107]
cross (n in tbl):list {if (n % 2 == 0) {continue}, n} .. [11, <Nil>, 33, <Nil>, 55, <Nil>, 77, <Nil>, 99]
cross (n in tbl):list {(n % 2 == 0) && continue, n} .. [11, <Nil>, 33, <Nil>, 55, <Nil>, 77, <Nil>, 99]
cross (n in tbl):list {if (n % 2 == 0) {continue}, n} .. [11, <Nil>, 33, <Nil>, 55, <Nil>, 77, <Nil>, 99]
cross (n in tbl):list {(n % 2 == 0) && continue, n} .. [11, <Nil>, 33, <Nil>, 55, <Nil>, 77, <Nil>, 99]
cross (n in tbl):xlist {if (n % 2 == 0) {continue}, n} .. [11, 33, 55, 77, 99]
cross (n in tbl):xlist {(n % 2 == 0) && continue, n} .. [11, 33, 55, 77, 99]
cross (n in tbl):list {if (n % 2 == 0) {continue('x')}, n} .. [11, 'x', 33, 'x', 55, 'x', 77, 'x', 99]
cross (n in tbl):list {(n % 2 == 0) && continue('x'), n} .. [11, 'x', 33, 'x', 55, 'x', 77, 'x', 99]
cross (n in tbl):list {if (n > 8) {break}, n} .. []
cross (n in tbl):list {(n > 8) && break, n} .. []
cross (n in tbl):list {if (n > 8) {break('end')}, n} .. ['end']
cross (n in tbl):list {(n > 8) && break('end'), n} .. ['end']
cross (n in tbl):list {if (n > 8) {break(nil)}, n} .. [<Nil>]
cross (n in tbl):list {(n > 8) && break(nil), n} .. [<Nil>]
cross (n in tbl):xlist {if (n > 8) {break}, n} .. []
cross (n in tbl):xlist {(n > 8) && break, n} .. []
cross (n in tbl):xlist {if (n > 8) {break('end')}, n} .. ['end']
cross (n in tbl):xlist {(n > 8) && break('end'), n} .. ['end']
cross (n in tbl):xlist {if (n > 8) {break(nil)}, n} .. []
cross (n in tbl):xlist {(n > 8) && break(nil), n} .. []
cross (n in [11, 22, 33, 44, 55]):list {|i| Format('%d-%d', i, n)} .. ['0-11', '1-22', '2-33', '3-44', '4-55']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555]):list {|i| Format('%d-%d-%d', i, n1, n2)} .. ['0-11-111', '1-11-222', '2-11-333', '3-11-444', '4-11-555', '5-22-111', '6-22-222', '7-22-333', '8-22-444', '9-22-555', '10-33-111', '11-33-222', '12-33-333', '13-33-444', '14-33-555', '15-44-111', '16-44-222', '17-44-333', '18-44-444', '19-44-555', '20-55-111', '21-55-222', '22-55-333', '23-55-444', '24-55-555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]):list {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-11-444-1111', '16-11-444-2222', '17-11-444-3333', '18-11-444-4444', '19-11-444-5555', '20-11-555-1111', '21-11-555-2222', '22-11-555-3333', '23-11-555-4444', '24-11-555-5555', '25-22-111-1111', '26-22-111-2222', '27-22-111-3333', '28-22-111-4444', '29-22-111-5555', '30-22-222-1111', '31-22-222-2222', '32-22-222-3333', '33-22-222-4444', '34-22-222-5555', '35-22-333-1111', '36-22-333-2222', '37-22-333-3333', '38-22-333-4444', '39-22-333-5555', '40-22-444-1111', '41-22-444-2222', '42-22-444-3333', '43-22-444-4444', '44-22-444-5555', '45-22-555-1111', '46-22-555-2222', '47-22-555-3333', '48-22-555-4444', '49-22-555-5555', '50-33-111-1111', '51-33-111-2222', '52-33-111-3333', '53-33-111-4444', '54-33-111-5555', '55-33-222-1111', '56-33-222-2222', '57-33-222-3333', '58-33-222-4444', '59-33-222-5555', '60-33-333-1111', '61-33-333-2222', '62-33-333-3333', '63-33-333-4444', '64-33-333-5555', '65-33-444-1111', '66-33-444-2222', '67-33-444-3333', '68-33-444-4444', '69-33-444-5555', '70-33-555-1111', '71-33-555-2222', '72-33-555-3333', '73-33-555-4444', '74-33-555-5555', '75-44-111-1111', '76-44-111-2222', '77-44-111-3333', '78-44-111-4444', '79-44-111-5555', '80-44-222-1111', '81-44-222-2222', '82-44-222-3333', '83-44-222-4444', '84-44-222-5555', '85-44-333-1111', '86-44-333-2222', '87-44-333-3333', '88-44-333-4444', '89-44-333-5555', '90-44-444-1111', '91-44-444-2222', '92-44-444-3333', '93-44-444-4444', '94-44-444-5555', '95-44-555-1111', '96-44-555-2222', '97-44-555-3333', '98-44-555-4444', '99-44-555-5555', '100-55-111-1111', '101-55-111-2222', '102-55-111-3333', '103-55-111-4444', '104-55-111-5555', '105-55-222-1111', '106-55-222-2222', '107-55-222-3333', '108-55-222-4444', '109-55-222-5555', '110-55-333-1111', '111-55-333-2222', '112-55-333-3333', '113-55-333-4444', '114-55-333-5555', '115-55-444-1111', '116-55-444-2222', '117-55-444-3333', '118-55-444-4444', '119-55-444-5555', '120-55-555-1111', '121-55-555-2222', '122-55-555-3333', '123-55-555-4444', '124-55-555-5555']
cross (n1 in [3, 1, 4], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]):list {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)} .. ['0-3-111-1111', '1-3-111-2222', '2-3-111-3333', '3-3-111-4444', '4-3-111-5555', '5-3-222-1111', '6-3-222-2222', '7-3-222-3333', '8-3-222-4444', '9-3-222-5555', '10-3-333-1111', '11-3-333-2222', '12-3-333-3333', '13-3-333-4444', '14-3-333-5555', '15-3-444-1111', '16-3-444-2222', '17-3-444-3333', '18-3-444-4444', '19-3-444-5555', '20-3-555-1111', '21-3-555-2222', '22-3-555-3333', '23-3-555-4444', '24-3-555-5555', '25-1-111-1111', '26-1-111-2222', '27-1-111-3333', '28-1-111-4444', '29-1-111-5555', '30-1-222-1111', '31-1-222-2222', '32-1-222-3333', '33-1-222-4444', '34-1-222-5555', '35-1-333-1111', '36-1-333-2222', '37-1-333-3333', '38-1-333-4444', '39-1-333-5555', '40-1-444-1111', '41-1-444-2222', '42-1-444-3333', '43-1-444-4444', '44-1-444-5555', '45-1-555-1111', '46-1-555-2222', '47-1-555-3333', '48-1-555-4444', '49-1-555-5555', '50-4-111-1111', '51-4-111-2222', '52-4-111-3333', '53-4-111-4444', '54-4-111-5555', '55-4-222-1111', '56-4-222-2222', '57-4-222-3333', '58-4-222-4444', '59-4-222-5555', '60-4-333-1111', '61-4-333-2222', '62-4-333-3333', '63-4-333-4444', '64-4-333-5555', '65-4-444-1111', '66-4-444-2222', '67-4-444-3333', '68-4-444-4444', '69-4-444-5555', '70-4-555-1111', '71-4-555-2222', '72-4-555-3333', '73-4-555-4444', '74-4-555-5555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333], n3 in [1111, 2222, 3333, 4444, 5555]):list {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-22-111-1111', '16-22-111-2222', '17-22-111-3333', '18-22-111-4444', '19-22-111-5555', '20-22-222-1111', '21-22-222-2222', '22-22-222-3333', '23-22-222-4444', '24-22-222-5555', '25-22-333-1111', '26-22-333-2222', '27-22-333-3333', '28-22-333-4444', '29-22-333-5555', '30-33-111-1111', '31-33-111-2222', '32-33-111-3333', '33-33-111-4444', '34-33-111-5555', '35-33-222-1111', '36-33-222-2222', '37-33-222-3333', '38-33-222-4444', '39-33-222-5555', '40-33-333-1111', '41-33-333-2222', '42-33-333-3333', '43-33-333-4444', '44-33-333-5555', '45-44-111-1111', '46-44-111-2222', '47-44-111-3333', '48-44-111-4444', '49-44-111-5555', '50-44-222-1111', '51-44-222-2222', '52-44-222-3333', '53-44-222-4444', '54-44-222-5555', '55-44-333-1111', '56-44-333-2222', '57-44-333-3333', '58-44-333-4444', '59-44-333-5555', '60-55-111-1111', '61-55-111-2222', '62-55-111-3333', '63-55-111-4444', '64-55-111-5555', '65-55-222-1111', '66-55-222-2222', '67-55-222-3333', '68-55-222-4444', '69-55-222-5555', '70-55-333-1111', '71-55-333-2222', '72-55-333-3333', '73-55-333-4444', '74-55-333-5555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333]):list {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)} .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-222-1111', '4-11-222-2222', '5-11-222-3333', '6-11-333-1111', '7-11-333-2222', '8-11-333-3333', '9-11-444-1111', '10-11-444-2222', '11-11-444-3333', '12-11-555-1111', '13-11-555-2222', '14-11-555-3333', '15-22-111-1111', '16-22-111-2222', '17-22-111-3333', '18-22-222-1111', '19-22-222-2222', '20-22-222-3333', '21-22-333-1111', '22-22-333-2222', '23-22-333-3333', '24-22-444-1111', '25-22-444-2222', '26-22-444-3333', '27-22-555-1111', '28-22-555-2222', '29-22-555-3333', '30-33-111-1111', '31-33-111-2222', '32-33-111-3333', '33-33-222-1111', '34-33-222-2222', '35-33-222-3333', '36-33-333-1111', '37-33-333-2222', '38-33-333-3333', '39-33-444-1111', '40-33-444-2222', '41-33-444-3333', '42-33-555-1111', '43-33-555-2222', '44-33-555-3333', '45-44-111-1111', '46-44-111-2222', '47-44-111-3333', '48-44-222-1111', '49-44-222-2222', '50-44-222-3333', '51-44-333-1111', '52-44-333-2222', '53-44-333-3333', '54-44-444-1111', '55-44-444-2222', '56-44-444-3333', '57-44-555-1111', '58-44-555-2222', '59-44-555-3333', '60-55-111-1111', '61-55-111-2222', '62-55-111-3333', '63-55-222-1111', '64-55-222-2222', '65-55-222-3333', '66-55-333-1111', '67-55-333-2222', '68-55-333-3333', '69-55-444-1111', '70-55-444-2222', '71-55-444-3333', '72-55-555-1111', '73-55-555-2222', '74-55-555-3333']
i .. symbol 'i' is not found
n1 .. symbol 'n1' is not found
n2 .. symbol 'n2' is not found
n3 .. symbol 'n3' is not found
======== Create iterator ========
tbl .. [11, 22, 33, 44, 55, 9, 2, 6, 5, 3, 5, 8]
cross (n in []):iter {n}[] .. []
cross (n in tbl):iter {n}[] .. [11, 22, 33, 44, 55, 9, 2, 6, 5, 3, 5, 8]
cross (n in tbl):iter {|i| n + i}[] .. [11, 23, 35, 47, 59, 14, 8, 13, 13, 12, 15, 19]
cross (n in tbl):iter {if (n % 2 == 0) {continue}, n}[] .. [11, <Nil>, 33, <Nil>, 55, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
cross (n in tbl):iter {(n % 2 == 0) && continue, n}[] .. [11, <Nil>, 33, <Nil>, 55, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
cross (n in tbl):iter {if (n % 2 == 0) {continue}, n}[] .. [11, <Nil>, 33, <Nil>, 55, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
cross (n in tbl):iter {(n % 2 == 0) && continue, n}[] .. [11, <Nil>, 33, <Nil>, 55, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
cross (n in tbl):xiter {if (n % 2 == 0) {continue}, n}[] .. [11, 33, 55, 9, 5, 3, 5]
cross (n in tbl):xiter {(n % 2 == 0) && continue, n}[] .. [11, 33, 55, 9, 5, 3, 5]
cross (n in tbl):iter {if (n % 2 == 0) {continue('x')}, n}[] .. [11, 'x', 33, 'x', 55, 9, 'x', 'x', 5, 3, 5, 'x']
cross (n in tbl):iter {(n % 2 == 0) && continue('x'), n}[] .. [11, 'x', 33, 'x', 55, 9, 'x', 'x', 5, 3, 5, 'x']
cross (n in tbl):iter {if (n > 8) {break}, n}[] .. []
cross (n in tbl):iter {(n > 8) && break, n}[] .. []
cross (n in tbl):iter {if (n > 8) {break('end')}, n}[] .. ['end']
cross (n in tbl):iter {(n > 8) && break('end'), n}[] .. ['end']
cross (n in tbl):iter {if (n > 8) {break(nil)}, n}[] .. [<Nil>]
cross (n in tbl):iter {(n > 8) && break(nil), n}[] .. [<Nil>]
cross (n in tbl):xiter {if (n > 8) {break}, n}[] .. []
cross (n in tbl):xiter {(n > 8) && break, n}[] .. []
cross (n in tbl):xiter {if (n > 8) {break('end')}, n}[] .. ['end']
cross (n in tbl):xiter {(n > 8) && break('end'), n}[] .. ['end']
cross (n in tbl):xiter {if (n > 8) {break(nil)}, n}[] .. []
cross (n in tbl):xiter {(n > 8) && break(nil), n}[] .. []
cross (n in [11, 22, 33, 44, 55]):iter {|i| Format('%d-%d', i, n)}[] .. ['0-11', '1-22', '2-33', '3-44', '4-55']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555]):iter {|i| Format('%d-%d-%d', i, n1, n2)}[] .. ['0-11-111', '1-11-222', '2-11-333', '3-11-444', '4-11-555', '5-22-111', '6-22-222', '7-22-333', '8-22-444', '9-22-555', '10-33-111', '11-33-222', '12-33-333', '13-33-444', '14-33-555', '15-44-111', '16-44-222', '17-44-333', '18-44-444', '19-44-555', '20-55-111', '21-55-222', '22-55-333', '23-55-444', '24-55-555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]):iter {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)}[] .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-11-444-1111', '16-11-444-2222', '17-11-444-3333', '18-11-444-4444', '19-11-444-5555', '20-11-555-1111', '21-11-555-2222', '22-11-555-3333', '23-11-555-4444', '24-11-555-5555', '25-22-111-1111', '26-22-111-2222', '27-22-111-3333', '28-22-111-4444', '29-22-111-5555', '30-22-222-1111', '31-22-222-2222', '32-22-222-3333', '33-22-222-4444', '34-22-222-5555', '35-22-333-1111', '36-22-333-2222', '37-22-333-3333', '38-22-333-4444', '39-22-333-5555', '40-22-444-1111', '41-22-444-2222', '42-22-444-3333', '43-22-444-4444', '44-22-444-5555', '45-22-555-1111', '46-22-555-2222', '47-22-555-3333', '48-22-555-4444', '49-22-555-5555', '50-33-111-1111', '51-33-111-2222', '52-33-111-3333', '53-33-111-4444', '54-33-111-5555', '55-33-222-1111', '56-33-222-2222', '57-33-222-3333', '58-33-222-4444', '59-33-222-5555', '60-33-333-1111', '61-33-333-2222', '62-33-333-3333', '63-33-333-4444', '64-33-333-5555', '65-33-444-1111', '66-33-444-2222', '67-33-444-3333', '68-33-444-4444', '69-33-444-5555', '70-33-555-1111', '71-33-555-2222', '72-33-555-3333', '73-33-555-4444', '74-33-555-5555', '75-44-111-1111', '76-44-111-2222', '77-44-111-3333', '78-44-111-4444', '79-44-111-5555', '80-44-222-1111', '81-44-222-2222', '82-44-222-3333', '83-44-222-4444', '84-44-222-5555', '85-44-333-1111', '86-44-333-2222', '87-44-333-3333', '88-44-333-4444', '89-44-333-5555', '90-44-444-1111', '91-44-444-2222', '92-44-444-3333', '93-44-444-4444', '94-44-444-5555', '95-44-555-1111', '96-44-555-2222', '97-44-555-3333', '98-44-555-4444', '99-44-555-5555', '100-55-111-1111', '101-55-111-2222', '102-55-111-3333', '103-55-111-4444', '104-55-111-5555', '105-55-222-1111', '106-55-222-2222', '107-55-222-3333', '108-55-222-4444', '109-55-222-5555', '110-55-333-1111', '111-55-333-2222', '112-55-333-3333', '113-55-333-4444', '114-55-333-5555', '115-55-444-1111', '116-55-444-2222', '117-55-444-3333', '118-55-444-4444', '119-55-444-5555', '120-55-555-1111', '121-55-555-2222', '122-55-555-3333', '123-55-555-4444', '124-55-555-5555']
cross (n1 in [3, 1, 4], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333, 4444, 5555]):iter {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)}[] .. ['0-3-111-1111', '1-3-111-2222', '2-3-111-3333', '3-3-111-4444', '4-3-111-5555', '5-3-222-1111', '6-3-222-2222', '7-3-222-3333', '8-3-222-4444', '9-3-222-5555', '10-3-333-1111', '11-3-333-2222', '12-3-333-3333', '13-3-333-4444', '14-3-333-5555', '15-3-444-1111', '16-3-444-2222', '17-3-444-3333', '18-3-444-4444', '19-3-444-5555', '20-3-555-1111', '21-3-555-2222', '22-3-555-3333', '23-3-555-4444', '24-3-555-5555', '25-1-111-1111', '26-1-111-2222', '27-1-111-3333', '28-1-111-4444', '29-1-111-5555', '30-1-222-1111', '31-1-222-2222', '32-1-222-3333', '33-1-222-4444', '34-1-222-5555', '35-1-333-1111', '36-1-333-2222', '37-1-333-3333', '38-1-333-4444', '39-1-333-5555', '40-1-444-1111', '41-1-444-2222', '42-1-444-3333', '43-1-444-4444', '44-1-444-5555', '45-1-555-1111', '46-1-555-2222', '47-1-555-3333', '48-1-555-4444', '49-1-555-5555', '50-4-111-1111', '51-4-111-2222', '52-4-111-3333', '53-4-111-4444', '54-4-111-5555', '55-4-222-1111', '56-4-222-2222', '57-4-222-3333', '58-4-222-4444', '59-4-222-5555', '60-4-333-1111', '61-4-333-2222', '62-4-333-3333', '63-4-333-4444', '64-4-333-5555', '65-4-444-1111', '66-4-444-2222', '67-4-444-3333', '68-4-444-4444', '69-4-444-5555', '70-4-555-1111', '71-4-555-2222', '72-4-555-3333', '73-4-555-4444', '74-4-555-5555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333], n3 in [1111, 2222, 3333, 4444, 5555]):iter {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)}[] .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-111-4444', '4-11-111-5555', '5-11-222-1111', '6-11-222-2222', '7-11-222-3333', '8-11-222-4444', '9-11-222-5555', '10-11-333-1111', '11-11-333-2222', '12-11-333-3333', '13-11-333-4444', '14-11-333-5555', '15-22-111-1111', '16-22-111-2222', '17-22-111-3333', '18-22-111-4444', '19-22-111-5555', '20-22-222-1111', '21-22-222-2222', '22-22-222-3333', '23-22-222-4444', '24-22-222-5555', '25-22-333-1111', '26-22-333-2222', '27-22-333-3333', '28-22-333-4444', '29-22-333-5555', '30-33-111-1111', '31-33-111-2222', '32-33-111-3333', '33-33-111-4444', '34-33-111-5555', '35-33-222-1111', '36-33-222-2222', '37-33-222-3333', '38-33-222-4444', '39-33-222-5555', '40-33-333-1111', '41-33-333-2222', '42-33-333-3333', '43-33-333-4444', '44-33-333-5555', '45-44-111-1111', '46-44-111-2222', '47-44-111-3333', '48-44-111-4444', '49-44-111-5555', '50-44-222-1111', '51-44-222-2222', '52-44-222-3333', '53-44-222-4444', '54-44-222-5555', '55-44-333-1111', '56-44-333-2222', '57-44-333-3333', '58-44-333-4444', '59-44-333-5555', '60-55-111-1111', '61-55-111-2222', '62-55-111-3333', '63-55-111-4444', '64-55-111-5555', '65-55-222-1111', '66-55-222-2222', '67-55-222-3333', '68-55-222-4444', '69-55-222-5555', '70-55-333-1111', '71-55-333-2222', '72-55-333-3333', '73-55-333-4444', '74-55-333-5555']
cross (n1 in [11, 22, 33, 44, 55], n2 in [111, 222, 333, 444, 555], n3 in [1111, 2222, 3333]):iter {|i| Format('%d-%d-%d-%d', i, n1, n2, n3)}[] .. ['0-11-111-1111', '1-11-111-2222', '2-11-111-3333', '3-11-222-1111', '4-11-222-2222', '5-11-222-3333', '6-11-333-1111', '7-11-333-2222', '8-11-333-3333', '9-11-444-1111', '10-11-444-2222', '11-11-444-3333', '12-11-555-1111', '13-11-555-2222', '14-11-555-3333', '15-22-111-1111', '16-22-111-2222', '17-22-111-3333', '18-22-222-1111', '19-22-222-2222', '20-22-222-3333', '21-22-333-1111', '22-22-333-2222', '23-22-333-3333', '24-22-444-1111', '25-22-444-2222', '26-22-444-3333', '27-22-555-1111', '28-22-555-2222', '29-22-555-3333', '30-33-111-1111', '31-33-111-2222', '32-33-111-3333', '33-33-222-1111', '34-33-222-2222', '35-33-222-3333', '36-33-333-1111', '37-33-333-2222', '38-33-333-3333', '39-33-444-1111', '40-33-444-2222', '41-33-444-3333', '42-33-555-1111', '43-33-555-2222', '44-33-555-3333', '45-44-111-1111', '46-44-111-2222', '47-44-111-3333', '48-44-222-1111', '49-44-222-2222', '50-44-222-3333', '51-44-333-1111', '52-44-333-2222', '53-44-333-3333', '54-44-444-1111', '55-44-444-2222', '56-44-444-3333', '57-44-555-1111', '58-44-555-2222', '59-44-555-3333', '60-55-111-1111', '61-55-111-2222', '62-55-111-3333', '63-55-222-1111', '64-55-222-2222', '65-55-222-3333', '66-55-333-1111', '67-55-333-2222', '68-55-333-3333', '69-55-444-1111', '70-55-444-2222', '71-55-444-3333', '72-55-555-1111', '73-55-555-2222', '74-55-555-3333']
i .. symbol 'i' is not found
n1 .. symbol 'n1' is not found
n2 .. symbol 'n2' is not found
n3 .. symbol 'n3' is not found
======== Convert Unrewindable ========
0-0
0-8
0-1
0-5
0-4
1-0
1-8
1-1
1-5
1-4
2-0
2-8
2-1
2-5
2-4
3-0
3-8
3-1
3-5
3-4
4-0
4-8
4-1
4-5
4-4
0-0,0-8,0-1,0-5,0-4,1-0,1-8,1-1,1-5,1-4,2-0,2-8,2-1,2-5,2-4,3-0,3-8,3-1,3-5,3-4,4-0,4-8,4-1,4-5,4-4
======== Cross iterator ========
(1, 'a', 'A')
(1, 'a', 'B')
(1, 'a', 'C')
(1, 'b', 'A')
(1, 'b', 'B')
(1, 'b', 'C')
(1, 'c', 'A')
(1, 'c', 'B')
(1, 'c', 'C')
(2, 'a', 'A')
(2, 'a', 'B')
(2, 'a', 'C')
(2, 'b', 'A')
(2, 'b', 'B')
(2, 'b', 'C')
(2, 'c', 'A')
(2, 'c', 'B')
(2, 'c', 'C')
(3, 'a', 'A')
(3, 'a', 'B')
(3, 'a', 'C')
(3, 'b', 'A')
(3, 'b', 'B')
(3, 'b', 'C')
(3, 'c', 'A')
(3, 'c', 'B')
(3, 'c', 'C')
(4, 'a', 'A')
(4, 'a', 'B')
(4, 'a', 'C')
(4, 'b', 'A')
(4, 'b', 'B')
(4, 'b', 'C')
(4, 'c', 'A')
(4, 'c', 'B')
(4, 'c', 'C')
(5, 'a', 'A')
(5, 'a', 'B')
(5, 'a', 'C')
(5, 'b', 'A')
(5, 'b', 'B')
(5, 'b', 'C')
(5, 'c', 'A')
(5, 'c', 'B')
(5, 'c', 'C')
+ (1, 'a', 'A')
+ (1, 'a', 'B')
+ (1, 'a', 'C')
+ (1, 'b', 'A')
+ (1, 'b', 'B')
+ (1, 'b', 'C')
+ (1, 'c', 'A')
+ (1, 'c', 'B')
+ (1, 'c', 'C')
+ (2, 'a', 'A')
+ (2, 'a', 'B')
+ (2, 'a', 'C')
+ (2, 'b', 'A')
+ (2, 'b', 'B')
+ (2, 'b', 'C')
+ (2, 'c', 'A')
+ (2, 'c', 'B')
+ (2, 'c', 'C')
+ (3, 'a', 'A')
+ (3, 'a', 'B')
+ (3, 'a', 'C')
+ (3, 'b', 'A')
+ (3, 'b', 'B')
+ (3, 'b', 'C')
+ (3, 'c', 'A')
+ (3, 'c', 'B')
+ (3, 'c', 'C')
+ (4, 'a', 'A')
+ (4, 'a', 'B')
+ (4, 'a', 'C')
+ (4, 'b', 'A')
+ (4, 'b', 'B')
+ (4, 'b', 'C')
+ (4, 'c', 'A')
+ (4, 'c', 'B')
+ (4, 'c', 'C')
+ (5, 'a', 'A')
+ (5, 'a', 'B')
+ (5, 'a', 'C')
+ (5, 'b', 'A')
+ (5, 'b', 'B')
+ (5, 'b', 'C')
+ (5, 'c', 'A')
+ (5, 'c', 'B')
+ (5, 'c', 'C')
- (1, 'a', 'A')
- (1, 'a', 'B')
- (1, 'a', 'C')
- (1, 'b', 'A')
- (1, 'b', 'B')
- (1, 'b', 'C')
- (1, 'c', 'A')
- (1, 'c', 'B')
- (1, 'c', 'C')
- (2, 'a', 'A')
- (2, 'a', 'B')
- (2, 'a', 'C')
- (2, 'b', 'A')
- (2, 'b', 'B')
- (2, 'b', 'C')
- (2, 'c', 'A')
- (2, 'c', 'B')
- (2, 'c', 'C')
- (3, 'a', 'A')
- (3, 'a', 'B')
- (3, 'a', 'C')
- (3, 'b', 'A')
- (3, 'b', 'B')
- (3, 'b', 'C')
- (3, 'c', 'A')
- (3, 'c', 'B')
- (3, 'c', 'C')
- (4, 'a', 'A')
- (4, 'a', 'B')
- (4, 'a', 'C')
- (4, 'b', 'A')
- (4, 'b', 'B')
- (4, 'b', 'C')
- (4, 'c', 'A')
- (4, 'c', 'B')
- (4, 'c', 'C')
- (5, 'a', 'A')
- (5, 'a', 'B')
- (5, 'a', 'C')
- (5, 'b', 'A')
- (5, 'b', 'B')
- (5, 'b', 'C')
- (5, 'c', 'A')
- (5, 'c', 'B')
- (5, 'c', 'C')
* (1, 'a', 'A')
* (1, 'a', 'B')
* (1, 'a', 'C')
* (1, 'b', 'A')
* (1, 'b', 'B')
* (1, 'b', 'C')
* (1, 'c', 'A')
* (1, 'c', 'B')
* (1, 'c', 'C')
* (2, 'a', 'A')
* (2, 'a', 'B')
* (2, 'a', 'C')
* (2, 'b', 'A')
* (2, 'b', 'B')
* (2, 'b', 'C')
* (2, 'c', 'A')
* (2, 'c', 'B')
* (2, 'c', 'C')
* (3, 'a', 'A')
* (3, 'a', 'B')
* (3, 'a', 'C')
* (3, 'b', 'A')
* (3, 'b', 'B')
* (3, 'b', 'C')
* (3, 'c', 'A')
* (3, 'c', 'B')
* (3, 'c', 'C')
* (4, 'a', 'A')
* (4, 'a', 'B')
* (4, 'a', 'C')
* (4, 'b', 'A')
* (4, 'b', 'B')
* (4, 'b', 'C')
* (4, 'c', 'A')
* (4, 'c', 'B')
* (4, 'c', 'C')
* (5, 'a', 'A')
* (5, 'a', 'B')
* (5, 'a', 'C')
* (5, 'b', 'A')
* (5, 'b', 'B')
* (5, 'b', 'C')
* (5, 'c', 'A')
* (5, 'c', 'B')
* (5, 'c', 'C')
