======== Empty ========
A .. <VType:A(){block?}>
a .. <A>
a .. <A>
======== Constructor ========
A0 .. <VType:A0(){block?}>
A1 .. <VType:A1(v){block?}>
A1(3) .. <A1>
A2 .. <VType:A2(v1,v2){block?}>
A2(3, 4) .. <A2>
Expected error occured: constructor's body must be a block
======== Destructor ========
A .. <VType:A(name as String):map{block?}>
A was destroyed
======== Property Declaration ========
--------
A.__propSlot__(`a1) .. <PropSlot:a1:nil:R:W as Any>
A.__propSlot__(`a2) .. <PropSlot:a2:nil:R:W as Number>
A.__propSlot__(`a3) .. <PropSlot:a3:nil:R:W as String>
A.__propSlot__(`a4) .. <PropSlot:a4:R:W as Number>
A.__propSlot__(`a5) .. <PropSlot:a5:R:W as String>
A.__propSlot__(`a6) .. <PropSlot:a6:R:W as Number>
A.__propSlot__(`a7) .. <PropSlot:a7:R:W as String>
A.__propSlot__(`a8) .. <PropSlot:a8:nil:R:W as Number>
A.__propSlot__(`a9) .. <PropSlot:a9:nil:R:W as String>
--------
A.__propSlot__(`b1) .. <PropSlot:b1[]:nil:R:W as Any>
A.__propSlot__(`b2) .. <PropSlot:b2[]:nil:R:W as Number>
A.__propSlot__(`b3) .. <PropSlot:b3[]:nil:R:W as String>
A.__propSlot__(`b4) .. <PropSlot:b4[]:R:W as Number>
A.__propSlot__(`b5) .. <PropSlot:b5[]:R:W as String>
A.__propSlot__(`b6) .. <PropSlot:b6[]:R:W as Any>
A.__propSlot__(`b7) .. <PropSlot:b7[]:R:W as Any>
A.__propSlot__(`b8) .. <PropSlot:b8[]:R:W as Number>
A.__propSlot__(`b9) .. <PropSlot:b9[]:R:W as String>
A.__propSlot__(`b10) .. <PropSlot:b10[]:nil:R:W as Number>
--------
A.__propSlot__(`c1) .. <PropSlot:c1:nil:public:R:W as Any>
A.__propSlot__(`c2) .. <PropSlot:c2:nil:public:R:W as Number>
A.__propSlot__(`c3) .. <PropSlot:c3:nil:public:R:W as String>
A.__propSlot__(`c4) .. <PropSlot:c4:public:R:W as Number>
A.__propSlot__(`c5) .. <PropSlot:c5:public:R:W as String>
A.__propSlot__(`c6) .. <PropSlot:c6:nil:public:R:W as Number>
A.__propSlot__(`c7) .. <PropSlot:c7:nil:public:R:W as String>
--------
A.__propSlot__(`d1) .. <PropSlot:d1[]:nil:public:R:W as Any>
A.__propSlot__(`d2) .. <PropSlot:d2[]:nil:public:R:W as Number>
A.__propSlot__(`d3) .. <PropSlot:d3[]:nil:public:R:W as String>
A.__propSlot__(`d4) .. <PropSlot:d4[]:public:R:W as Number>
A.__propSlot__(`d5) .. <PropSlot:d5[]:public:R:W as String>
A.__propSlot__(`d6) .. <PropSlot:d6[]:public:R:W as Any>
A.__propSlot__(`d7) .. <PropSlot:d7[]:R:W as Any>
A.__propSlot__(`d8) .. <PropSlot:d8[]:public:R:W as Number>
A.__propSlot__(`d9) .. <PropSlot:d9[]:public:R:W as String>
A.__propSlot__(`d10) .. <PropSlot:d10[]:nil:public:R:W as Number>
A.__propSlot__(`d11) .. <PropSlot:d11[]:nil:public:R:W as String>
--------
A.__propSlot__(`e1) .. <PropSlot:e1:nil:public:R:W as Any>
A.__propSlot__(`e2) .. <PropSlot:e2:nil:public:R:W as Number>
A.__propSlot__(`e3) .. <PropSlot:e3:nil:public:R:W as String>
A.__propSlot__(`e4) .. <PropSlot:e4:public:R:W as Number>
A.__propSlot__(`e5) .. <PropSlot:e5:public:R:W as String>
A.__propSlot__(`e6) .. <PropSlot:e6:nil:public:R:W as Number>
A.__propSlot__(`e7) .. <PropSlot:e7:nil:public:R:W as String>
--------
A.__propSlot__(`f1) .. <PropSlot:f1[]:nil:public:R:W as Any>
A.__propSlot__(`f2) .. <PropSlot:f2[]:nil:public:R:W as Number>
A.__propSlot__(`f3) .. <PropSlot:f3[]:nil:public:R:W as String>
A.__propSlot__(`f4) .. <PropSlot:f4[]:public:R:W as Number>
A.__propSlot__(`f5) .. <PropSlot:f5[]:public:R:W as String>
A.__propSlot__(`f6) .. <PropSlot:f6[]:public:R:W as Any>
A.__propSlot__(`f7) .. <PropSlot:f7[]:public:R:W as Any>
A.__propSlot__(`f8) .. <PropSlot:f8[]:public:R:W as Number>
A.__propSlot__(`f9) .. <PropSlot:f9[]:public:R:W as String>
A.__propSlot__(`f10) .. <PropSlot:f10[]:nil:public:R:W as Number>
A.__propSlot__(`f11) .. <PropSlot:f11[]:nil:public:R:W as String>
======== Property Access ========
a.a1 .. <Nil>
a.n1 .. 3
a.n2 .. 3
a.n3 .. <Nil>
a.n4 .. 3
a.s1 .. hello
a.s2 .. hello
a.s3 .. <Nil>
a.s4 .. hello
a.xxx .. value type 'A' doesn't have a property 'xxx'
a.a1 = 3 .. 3
a.a1 = 'world' .. world
a.a1 = nil .. <Nil>
a.n1 = 3 .. 3
a.n1 = 'world' .. n1 can't cast from String to Number
a.n1 = nil .. n1 can't accept nil value
a.n2 = 3 .. 3
a.n2 = 'world' .. n2 can't cast from String to Number
a.n2 = nil .. <Nil>
a.n3 = 3 .. 3
a.n3 = 'world' .. n3 can't cast from String to Number
a.n3 = nil .. <Nil>
a.n4 = 3 .. 3
a.n4 = 'world' .. n4 can't cast from String to Number
a.n4 = nil .. n4 can't accept nil value
a.s1 = 3 .. 3
a.s1 = 'world' .. world
a.s1 = nil .. <Nil>
a.s2 = 3 .. 3
a.s2 = 'world' .. world
a.s2 = nil .. <Nil>
a.s3 = 3 .. 3
a.s3 = 'world' .. world
a.s3 = nil .. <Nil>
a.s4 = 3 .. 3
a.s4 = 'world' .. world
a.s4 = nil .. <Nil>
======== Constant Property ========
A.__propSlot__(`a1) .. <PropSlot:a1:nil:public:R as Any>
A.__propSlot__(`n1) .. <PropSlot:n1:public:R as Number>
A.__propSlot__(`n2) .. <PropSlot:n2:nil:public:R as Number>
A.__propSlot__(`n3) .. <PropSlot:n3:nil:public:R as Number>
A.__propSlot__(`n4) .. <PropSlot:n4:public:R as Number>
A.__propSlot__(`s1) .. <PropSlot:s1:public:R as String>
A.__propSlot__(`s2) .. <PropSlot:s2:nil:public:R as String>
A.__propSlot__(`s3) .. <PropSlot:s3:nil:public:R as String>
A.__propSlot__(`s4) .. <PropSlot:s4:public:R as String>
a.a1 .. <Nil>
a.n1 .. 3
a.n2 .. 3
a.n3 .. <Nil>
a.n4 .. 3
a.s1 .. hello
a.s2 .. hello
a.s3 .. <Nil>
a.s4 .. hello
a.a1 = 3 .. property 'a1' is not writable
a.n1 = 3 .. property 'n1' is not writable
a.n2 = 3 .. property 'n2' is not writable
a.n3 = 3 .. property 'n3' is not writable
a.n4 = 3 .. property 'n4' is not writable
a.s1 = 'xxxx' .. property 's1' is not writable
a.s2 = 'xxxx' .. property 's2' is not writable
a.s3 = 'xxxx' .. property 's3' is not writable
a.s4 = 'xxxx' .. property 's4' is not writable
======== Class Property ========
A.__propSlot__(`p) .. <PropSlot:p:static:R:W as String>
B.__propSlot__(`p) .. <PropSlot:p:static:R:W as String>
A.p .. hello
a1.p .. hello
a2.p .. hello
b1.p .. hello
b1.p .. hello
A.p .. gura
a1.p .. gura
a2.p .. gura
b1.p .. hello
b2.p .. hello
A.p .. world
a1.p .. world
a2.p .. world
b1.p .. hello
b2.p .. hello
A.p .. world
a1.p .. world
a2.p .. world
b1.p .. !!!!
b2.p .. !!!!
======== Dict as Property ========
<PropSlot:d:R:W as Dict>
a.d .. %{}
A.ds .. %{}
a.ds .. %{}
a.d .. %{'apple' => 100, 'grape' => 200, 'orange' => 80}
A.ds .. %{'apple' => 100, 'grape' => 200, 'orange' => 80}
a.ds .. %{'apple' => 100, 'grape' => 200, 'orange' => 80}
A.ds .. %{'apple' => 100, 'grape' => 230, 'orange' => 80}
a.ds .. %{'apple' => 100, 'grape' => 230, 'orange' => 80}
======== Error in Property Declaration ========
A = class {a as Number = 'hello'} .. a can't cast from String to Number
A = class {a as Number = nil} .. <VType:A(){block?}>
A = class {a[] = nil} .. <VType:A(){block?}>
A = class {a[] = 3} .. must be initialized by a list
A = class {a[] = []} .. <VType:A(){block?}>
A = class {a[] as Number = []} .. <VType:A(){block?}>
A = class {a[] as Number = ['h']} .. a can't cast from String to Number
======== Example ========
<VType:Person(name as String,age as Number){block?}>
Taro is 10 years old.
Hanako is 12 years old.
======== Inheritance ========
A.__propSlot__(`p1) .. <PropSlot:p1:R:W as String>
A.__propSlot__(`p2) .. <PropSlot:p2:R:W as String>
A.__propSlot__(`p3) .. <PropSlot:p3:R:W as String>
B.__propSlot__(`p1) .. <PropSlot:p1:R:W as String>
B.__propSlot__(`p2) .. <PropSlot:p2:R:W as String>
B.__propSlot__(`p3) .. <PropSlot:p3:R:W as String>
a.p1 .. A#p1
a.p2 .. A#p2
a.p3 .. A#p3
b.p1 .. A#p1
b.p2 .. A#p2
b.p3 .. B#p3
a.FormatProp() .. A#p1 A#p2 A#p3
b.FormatProp() .. A#p1 A#p2 B#p3
a.f1() .. A#f1
a.f2() .. A#f2
a.f3() .. A#f3
b.f1() .. A#f1
b.f2() .. A#f2
b.f3() .. B#f3
a.p1 .. A#p1-mod
b.p1 .. B#p1-mod
b.p3 .. B#p3-mod
======== Constructor Inheritance (1) ========
Derive2().ToText() .. A, B, C
======== Constructor Inheritance (2) ========
Base(1, 2, 3).ToText() .. 1, 2, 3, EXT
Derive1(11, 22, 33).ToText() .. 11, 22, 33, EXT
Derive2(22, 33).ToText() .. 11, 22, 33, EXT
Derive3(111).ToText() .. 111, 222, 333, EXT
======== Post-definition of method ========
String.Test .. <CallableMember:String#Test()>
'Hello'.Test() .. Hello:5
A.Test .. <CallableMember:A#Test()>
a.Test() .. first second third
======== Call to class method ========
f()
g()
A.h() .. the function must be evaluated with an instance
======== Constructor call with mapping ========
[1, 2, 3]
======== Destructor of inherited class ========
----
A destructor
----
B destructor
A destructor
----
C destructor
B destructor
A destructor
======== Inherits from String ========
string=
string=
string=hoge
string=hoge
======== Default Constructor (1) ========
<VType:A(){block?}>
<VType:B(){block?}>
<VType:C(){block?}>
----
A.f1() this=<A>, v1=1, v2=2, v3=3
A.f1() this=<A>, v1=1, v2=2, v3=3
----
A.f1() this=<B>, v1=1, v2=2, v3=3
B.f2() this=<B>, v1=1, v2=2, v3=3
A.f1() this=<B>, v1=1, v2=2, v3=3
B.f2() this=<B>, v1=1, v2=2, v3=3
----
A.f1() this=<C>, v1=1, v2=2, v3=3
B.f2() this=<C>, v1=1, v2=2, v3=3
C.f3() this=<C>, v1=1, v2=2, v3=3
A.f1() this=<C>, v1=1, v2=2, v3=3
B.f2() this=<C>, v1=1, v2=2, v3=3
C.f3() this=<C>, v1=1, v2=2, v3=3
======== Default Constructor (2) ========
<VType:A(v1,v2,v3){block?}>
<VType:B(v1,v2,v3){block?}>
<VType:C(v1,v2,v3){block?}>
----
A.f1() this=<A>, v1=1, v2=2, v3=3
A.f1() this=<A>, v1=1, v2=2, v3=3
----
A.f1() this=<B>, v1=1, v2=2, v3=3
B.f2() this=<B>, v1=1, v2=2, v3=3
A.f1() this=<B>, v1=1, v2=2, v3=3
B.f2() this=<B>, v1=1, v2=2, v3=3
----
A.f1() this=<C>, v1=1, v2=2, v3=3
B.f2() this=<C>, v1=1, v2=2, v3=3
C.f3() this=<C>, v1=1, v2=2, v3=3
A.f1() this=<C>, v1=1, v2=2, v3=3
B.f2() this=<C>, v1=1, v2=2, v3=3
C.f3() this=<C>, v1=1, v2=2, v3=3
======== CallableMember ========
a.f1 .. <CallableMember:A.f1()>
a.f2 .. <CallableMember:A.f2()>
a.f3 .. <Function:Println(values* as Any):map>
======== Cast to Tuple ========
c as Tuple .. ('value1', 'value2', 'value3', 'value4', 'value5', 'value6', 'value7')
======== __cast__ ========
f(3) .. <A>
g(3) .. b can't cast from Number to B
======== __castTo__ ========
f(A()) .. a = 12345678
g(A()) .. a = 2011-12-23 12:34:56.000
h(A()) .. a can't cast from A to Color
