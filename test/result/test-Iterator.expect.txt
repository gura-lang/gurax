======== PUnit ========
()
  ##0 CreateList()
  ##1 GenIterator()
(1,)
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 GenIterator()
(1, 2, 3)
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
  ##7 GenIterator()
======== Iterator#IsFinite() and Iterator#IsInfinite() ========
1 .. 10.IsFinite() .. true
1 .. 10.IsInfinite() .. false
1...IsFinite() .. false
1...IsInfinite() .. true
======== Iterator#NextValue() ========
1
2
3
4
5
6
7
8
9
10
======== Iterator#After() ========
======== Iterator#Align() ========
======== Iterator#And() ========
[].Each().And() .. <Nil>
[false].Each().And() .. false
[nil].Each().And() .. <Nil>
[true].Each().And() .. true
[false, false].Each().And() .. false
[false, true].Each().And() .. false
[true, false].Each().And() .. false
[true, true].Each().And() .. true
[true, true, true, true, true, true, true, true].Each().And() .. true
[true, true, true, true, true, true, false, true].Each().And() .. false
[0].Each().And() .. 0
[0, 1, 2, 3].Each().And() .. 3
[5].Each().And() .. 5
[5, true].Each().And() .. true
[true, 5].Each().And() .. 5
[true, true, true, 5].Each().And() .. 5
[true, true, true, 5, false].Each().And() .. false
======== Iterator#ArgMax() ========
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax() .. 6
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():last_index .. 26
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():indices .. [6, 13, 14, 26]
======== Iterator#ArgMin() ========
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin() .. 7
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():last_index .. 28
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():indices .. [7, 10, 28]
======== Iterator#Before() ========
======== Iterator#Combination() ========
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(3):list .. 10 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'E'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'E'], ['C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(4):list .. 5 : [['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'C', 'D', 'E'], ['B', 'C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(5):list .. 1 : [['A', 'B', 'C', 'D', 'E']]
['A', 'B', 'C', 'D', 'E'].Each().Combination(6):list .. range over
======== Iterator#Contains() ========
======== Iterator#Count() ========
======== Iterator#Cycle() ========
======== Iterator#Each() ========
Each { .. }
----
----
----
----
----
----
----
----
----
----
----
Each {|x| .. }
zero
one
two
three
four
five
six
seven
eight
nine
ten
Each {|x, i| .. }
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
7 seven
8 eight
9 nine
10 ten
Each {|x| .. }, break at "t"
zero
one
two
Each {|x| .. }, break at "s"
zero
one
two
three
four
five
six
Each {|x| .. }, skip "t"
zero
one
four
five
six
seven
eight
nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
tbl.Each().Each {break} .. <Nil>
tbl.Each().Each {continue} .. <Nil>
======== Iterator#Each():list ========
tbl.Each().Each():list {|x| x} .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each().Each():xlist {|x| if (x.StartsWith('t')) {x}} .. ['two', 'three', 'ten']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {break}, x} .. ['zero', 'one']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {break('end')}, x} .. ['zero', 'one', 'end']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {continue}, x} .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {continue('x')}, x} .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each().Each():xlist {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}} .. ['2-two', '3-three', '10-ten']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)} .. ['0-zero', '1-one']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'end']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
tbl.Each().Each():list {break} .. []
tbl.Each().Each():list {break(nil)} .. [<Nil>]
tbl.Each().Each():list {continue} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each().Each():list {continue(nil)} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each().Each():xlist {break} .. []
tbl.Each().Each():xlist {break(nil)} .. []
tbl.Each().Each():xlist {continue} .. []
tbl.Each().Each():xlist {continue(nil)} .. []
======== Iterator#Each():iter ========
[tbl.Each().Each():iter {|x| x}] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Each().Each():xiter {|x| if (x.StartsWith('t')) {x}}] .. ['two', 'three', 'ten']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {break}, x}] .. ['zero', 'one']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {break('end')}, x}] .. ['zero', 'one', 'end']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {continue}, x}] .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {continue('x')}, x}] .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
[tbl.Each().Each():xiter {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}}] .. ['2-two', '3-three', '10-ten']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'end']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
[tbl.Each().Each():iter {break}] .. []
[tbl.Each().Each():iter {break(nil)}] .. [<Nil>]
[tbl.Each().Each():iter {continue}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each().Each():iter {continue(nil)}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each().Each():xiter {break}] .. []
[tbl.Each().Each():xiter {break(nil)}] .. []
[tbl.Each().Each():xiter {continue}] .. []
[tbl.Each().Each():xiter {continue(nil)}] .. []
======== Iterator#Filter() ========
======== Iterator#Find() ========
======== Iterator#Flatten() ========
======== Iterator#Fold() ========
======== Iterator#Format() ========
======== Iterator#Head() ========
======== Iterator#Join() ========
[].Each().Join() .. ''
[].Each().Join(',') .. ''
['abc'].Each().Join() .. 'abc'
['abc'].Each().Join(',') .. 'abc'
['abc', 'def'].Each().Join() .. 'abcdef'
['abc', 'def'].Each().Join(',') .. 'abc,def'
['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join() .. 'abcdefghijklmno'
['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join(',') .. 'abc,def,ghi,jkl,mno'
======== Iterator#Joinb() ========
======== Iterator#Map() ========
======== Iterator#Max() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Max() .. 9
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Max() .. zero
======== Iterator#Mean() ========
======== Iterator#Min() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Min() .. 0
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Min() .. eight
======== Iterator#NilTo() ========
======== Iterator#Offset() ========
======== Iterator#Or() ========
[].Each().Or() .. <Nil>
[false].Each().Or() .. false
[nil].Each().Or() .. <Nil>
[true].Each().Or() .. true
[false, false].Each().Or() .. false
[false, true].Each().Or() .. true
[true, false].Each().Or() .. true
[true, true].Each().Or() .. true
[true, true, true, true, true, true, true, true].Each().Or() .. true
[true, true, true, true, true, true, false, true].Each().Or() .. true
[0].Each().Or() .. 0
[0, 1, 2, 3].Each().Or() .. 0
[5].Each().Or() .. 5
[5, true].Each().Or() .. 5
[true, 5].Each().Or() .. true
[true, true, true, 5].Each().Or() .. true
[true, true, true, 5, false].Each().Or() .. true
======== Iterator#Pack() ========
======== Iterator#Permutation() ========
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation():list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation(5):list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation(3):list .. 60 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'B'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'B'], ['A', 'D', 'C'], ['A', 'D', 'E'], ['A', 'E', 'B'], ['A', 'E', 'C'], ['A', 'E', 'D'], ['B', 'A', 'C'], ['B', 'A', 'D'], ['B', 'A', 'E'], ['B', 'C', 'A'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'A'], ['B', 'D', 'C'], ['B', 'D', 'E'], ['B', 'E', 'A'], ['B', 'E', 'C'], ['B', 'E', 'D'], ['C', 'A', 'B'], ['C', 'A', 'D'], ['C', 'A', 'E'], ['C', 'B', 'A'], ['C', 'B', 'D'], ['C', 'B', 'E'], ['C', 'D', 'A'], ['C', 'D', 'B'], ['C', 'D', 'E'], ['C', 'E', 'A'], ['C', 'E', 'B'], ['C', 'E', 'D'], ['D', 'A', 'B'], ['D', 'A', 'C'], ['D', 'A', 'E'], ['D', 'B', 'A'], ['D', 'B', 'C'], ['D', 'B', 'E'], ['D', 'C', 'A'], ['D', 'C', 'B'], ['D', 'C', 'E'], ['D', 'E', 'A'], ['D', 'E', 'B'], ['D', 'E', 'C'], ['E', 'A', 'B'], ['E', 'A', 'C'], ['E', 'A', 'D'], ['E', 'B', 'A'], ['E', 'B', 'C'], ['E', 'B', 'D'], ['E', 'C', 'A'], ['E', 'C', 'B'], ['E', 'C', 'D'], ['E', 'D', 'A'], ['E', 'D', 'B'], ['E', 'D', 'C']]
['A', 'B', 'C', 'D', 'E'].Each().Permutation(6):list .. range over
======== Iterator#PingPong() ========
======== Iterator#Print() ========
======== Iterator#Printf() ========
======== Iterator#Println() ========
======== Iterator#Prod() ========
======== Iterator#Rank() ========
======== Iterator#Reduce() ========
======== Iterator#Replace() ========
======== Iterator#Reverse() ========
======== Iterator#RoundOff() ========
======== Iterator#RunLength() ========
======== Iterator#Since() ========
======== Iterator#Skip() ========
======== Iterator#SkipNil() ========
======== Iterator#Sort() ========
======== Iterator#Std() ========
======== Iterator#Sum() ========
======== Iterator#Tail() ========
======== Iterator#Until() ========
======== Iterator#Var() ========
======== Iterator#While() ========
