======== PUnit ========
()
  ##0 CreateList()
  ##1 GenIterator()
(1,)
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 GenIterator()
(1, 2, 3)
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
  ##7 GenIterator()
======== Iterator#IsFinite() and Iterator#IsInfinite() ========
1 .. 10.IsFinite() .. true
1 .. 10.IsInfinite() .. false
1...IsFinite() .. false
1...IsInfinite() .. true
======== Iterator#NextValue() ========
1
2
3
4
5
6
7
8
9
10
======== Iterator#After() ========
======== Iterator#Align() ========
======== Iterator#And() ========
[].Each().And() .. <Nil>
[false].Each().And() .. false
[nil].Each().And() .. <Nil>
[true].Each().And() .. true
[false, false].Each().And() .. false
[false, true].Each().And() .. false
[true, false].Each().And() .. false
[true, true].Each().And() .. true
[true, true, true, true, true, true, true, true].Each().And() .. true
[true, true, true, true, true, true, false, true].Each().And() .. false
[0].Each().And() .. 0
[0, 1, 2, 3].Each().And() .. 3
[5].Each().And() .. 5
[5, true].Each().And() .. true
[true, 5].Each().And() .. 5
[true, true, true, 5].Each().And() .. 5
[true, true, true, 5, false].Each().And() .. false
======== Iterator#ArgMax() ========
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax() .. 6
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():last_index .. 26
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMax():indices .. [6, 13, 14, 26]
======== Iterator#ArgMin() ========
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin() .. 7
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():last_index .. 28
(1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7).ArgMin():indices .. [7, 10, 28]
======== Iterator#Before() ========
======== Iterator#Combination() ========
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(3):list .. 10 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'E'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'E'], ['C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(4):list .. 5 : [['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'C', 'D', 'E'], ['B', 'C', 'D', 'E']]
----
['A', 'B', 'C', 'D', 'E'].Each().Combination(5):list .. 1 : [['A', 'B', 'C', 'D', 'E']]
['A', 'B', 'C', 'D', 'E'].Each().Combination(6):list .. range over
======== Iterator#Contains() ========
======== Iterator#Count() ========
======== Iterator#Cycle() ========
[].Each().Cycle(10) .. empty list can not be specified
['A'].Each().Cycle(10):list .. ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']
['A', 'B'].Each().Cycle(10):list .. ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']
['A', 'B', 'C', 'D', 'E'].Each().Cycle(10):list .. ['A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E']
======== Iterator#Each() ========
Each { .. }
----
----
----
----
----
----
----
----
----
----
----
Each {|x| .. }
zero
one
two
three
four
five
six
seven
eight
nine
ten
Each {|x, i| .. }
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
7 seven
8 eight
9 nine
10 ten
Each {|x| .. }, break at "t"
zero
one
two
Each {|x| .. }, break at "s"
zero
one
two
three
four
five
six
Each {|x| .. }, skip "t"
zero
one
four
five
six
seven
eight
nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
Each {|x, i| .. }, break at "t"
0 zero
1 one
2 two
Each {|x, i| .. }, break at "s"
0 zero
1 one
2 two
3 three
4 four
5 five
6 six
Each {|x, i| .. }, skip "t"
0 zero
1 one
4 four
5 five
6 six
7 seven
8 eight
9 nine
tbl.Each().Each {break} .. <Nil>
tbl.Each().Each {continue} .. <Nil>
======== Iterator#Each():list ========
tbl.Each().Each():list {|x| x} .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
tbl.Each().Each():xlist {|x| if (x.StartsWith('t')) {x}} .. ['two', 'three', 'ten']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {break}, x} .. ['zero', 'one']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {break('end')}, x} .. ['zero', 'one', 'end']
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {continue}, x} .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
tbl.Each().Each():list {|x| if (x.StartsWith('t')) {continue('x')}, x} .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
tbl.Each().Each():xlist {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}} .. ['2-two', '3-three', '10-ten']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)} .. ['0-zero', '1-one']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'end']
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
tbl.Each().Each():list {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)} .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
tbl.Each().Each():list {break} .. []
tbl.Each().Each():list {break(nil)} .. [<Nil>]
tbl.Each().Each():list {continue} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each().Each():list {continue(nil)} .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
tbl.Each().Each():xlist {break} .. []
tbl.Each().Each():xlist {break(nil)} .. []
tbl.Each().Each():xlist {continue} .. []
tbl.Each().Each():xlist {continue(nil)} .. []
======== Iterator#Each():iter ========
[tbl.Each().Each():iter {|x| x}] .. ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
[tbl.Each().Each():xiter {|x| if (x.StartsWith('t')) {x}}] .. ['two', 'three', 'ten']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {break}, x}] .. ['zero', 'one']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {break('end')}, x}] .. ['zero', 'one', 'end']
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {continue}, x}] .. ['zero', 'one', <Nil>, <Nil>, 'four', 'five', 'six', 'seven', 'eight', 'nine', <Nil>]
[tbl.Each().Each():iter {|x| if (x.StartsWith('t')) {continue('x')}, x}] .. ['zero', 'one', 'x', 'x', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'x']
[tbl.Each().Each():xiter {|x, i| if (x.StartsWith('t')) {Format('%d-%s', i, x)}}] .. ['2-two', '3-three', '10-ten']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {break}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {break('end')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'end']
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {continue}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', <Nil>, <Nil>, '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', <Nil>]
[tbl.Each().Each():iter {|x, i| if (x.StartsWith('t')) {continue('x')}, Format('%d-%s', i, x)}] .. ['0-zero', '1-one', 'x', 'x', '4-four', '5-five', '6-six', '7-seven', '8-eight', '9-nine', 'x']
[tbl.Each().Each():iter {break}] .. []
[tbl.Each().Each():iter {break(nil)}] .. [<Nil>]
[tbl.Each().Each():iter {continue}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each().Each():iter {continue(nil)}] .. [<Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>, <Nil>]
[tbl.Each().Each():xiter {break}] .. []
[tbl.Each().Each():xiter {break(nil)}] .. []
[tbl.Each().Each():xiter {continue}] .. []
[tbl.Each().Each():xiter {continue(nil)}] .. []
======== Iterator#Filter() ========
======== Iterator#Find() ========
======== Iterator#Flatten() ========
======== Iterator#Fold() ========
x.Each().Fold(1).Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Each().Fold(5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Each().Fold(8).Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19]
x.Each().Fold(1):neat.Join(', ') .. [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]
x.Each().Fold(5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Each().Fold(8):neat.Join(', ') .. [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]
x.Each().Fold(5, 1).Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [16, 17, 18, 19]
x.Each().Fold(5, 2).Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18], [16, 17, 18, 19]
x.Each().Fold(5, 3).Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19], [18, 19]
x.Each().Fold(5, 4).Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16], [16, 17, 18, 19]
x.Each().Fold(5, 5).Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
x.Each().Fold(5, 1):neat.Join(', ') .. [0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 13], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19]
x.Each().Fold(5, 2):neat.Join(', ') .. [0, 1, 2, 3, 4], [2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [6, 7, 8, 9, 10], [8, 9, 10, 11, 12], [10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18]
x.Each().Fold(5, 3):neat.Join(', ') .. [0, 1, 2, 3, 4], [3, 4, 5, 6, 7], [6, 7, 8, 9, 10], [9, 10, 11, 12, 13], [12, 13, 14, 15, 16], [15, 16, 17, 18, 19]
x.Each().Fold(5, 4):neat.Join(', ') .. [0, 1, 2, 3, 4], [4, 5, 6, 7, 8], [8, 9, 10, 11, 12], [12, 13, 14, 15, 16]
x.Each().Fold(5, 5):neat.Join(', ') .. [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]
======== Iterator#Format() ========
======== Iterator#Head() ========
[].Each().Head(10):list .. []
[0].Each().Head(10):list .. [0]
[0 .. 8].Each().Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8]
[0 .. 9].Each().Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 10].Each().Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0 .. 100].Each().Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
0...Head(10):list .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
======== Iterator#Join() ========
[].Each().Join() .. ''
[].Each().Join(',') .. ''
['abc'].Each().Join() .. 'abc'
['abc'].Each().Join(',') .. 'abc'
['abc', 'def'].Each().Join() .. 'abcdef'
['abc', 'def'].Each().Join(',') .. 'abc,def'
['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join() .. 'abcdefghijklmno'
['abc', 'def', 'ghi', 'jkl', 'mno'].Each().Join(',') .. 'abc,def,ghi,jkl,mno'
======== Iterator#Joinb() ========
======== Iterator#Map() ========
======== Iterator#Max() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Max() .. 9
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Max() .. zero
======== Iterator#Mean() ========
[].Each().Mean() .. <Nil>
[0].Each().Mean() .. 0
[0, 1].Each().Mean() .. 0.5
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Each().Mean() .. 5
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Each().Mean() .. unsuppported binary operation: Number + Expr
======== Iterator#Min() ========
[1, 1, 7, 3, 8, 4, 9, 0, 1, 8, 0, 4, 4, 9, 9, 1, 7, 4, 1, 1, 6, 6, 2, 7, 2, 2, 9, 8, 0, 7].Each().Min() .. 0
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Min() .. eight
======== Iterator#NilTo() ========
======== Iterator#Offset() ========
======== Iterator#Or() ========
[].Each().Or() .. <Nil>
[false].Each().Or() .. false
[nil].Each().Or() .. <Nil>
[true].Each().Or() .. true
[false, false].Each().Or() .. false
[false, true].Each().Or() .. true
[true, false].Each().Or() .. true
[true, true].Each().Or() .. true
[true, true, true, true, true, true, true, true].Each().Or() .. true
[true, true, true, true, true, true, false, true].Each().Or() .. true
[0].Each().Or() .. 0
[0, 1, 2, 3].Each().Or() .. 0
[5].Each().Or() .. 5
[5, true].Each().Or() .. 5
[true, 5].Each().Or() .. true
[true, true, true, 5].Each().Or() .. true
[true, true, true, 5, false].Each().Or() .. true
======== Iterator#Pack() ========
======== Iterator#Permutation() ========
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation():list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation(5):list .. 120 : [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D'], ['A', 'B', 'E', 'D', 'C'], ['A', 'C', 'B', 'D', 'E'], ['A', 'C', 'B', 'E', 'D'], ['A', 'C', 'D', 'B', 'E'], ['A', 'C', 'D', 'E', 'B'], ['A', 'C', 'E', 'B', 'D'], ['A', 'C', 'E', 'D', 'B'], ['A', 'D', 'B', 'C', 'E'], ['A', 'D', 'B', 'E', 'C'], ['A', 'D', 'C', 'B', 'E'], ['A', 'D', 'C', 'E', 'B'], ['A', 'D', 'E', 'B', 'C'], ['A', 'D', 'E', 'C', 'B'], ['A', 'E', 'B', 'C', 'D'], ['A', 'E', 'B', 'D', 'C'], ['A', 'E', 'C', 'B', 'D'], ['A', 'E', 'C', 'D', 'B'], ['A', 'E', 'D', 'B', 'C'], ['A', 'E', 'D', 'C', 'B'], ['B', 'A', 'C', 'D', 'E'], ['B', 'A', 'C', 'E', 'D'], ['B', 'A', 'D', 'C', 'E'], ['B', 'A', 'D', 'E', 'C'], ['B', 'A', 'E', 'C', 'D'], ['B', 'A', 'E', 'D', 'C'], ['B', 'C', 'A', 'D', 'E'], ['B', 'C', 'A', 'E', 'D'], ['B', 'C', 'D', 'A', 'E'], ['B', 'C', 'D', 'E', 'A'], ['B', 'C', 'E', 'A', 'D'], ['B', 'C', 'E', 'D', 'A'], ['B', 'D', 'A', 'C', 'E'], ['B', 'D', 'A', 'E', 'C'], ['B', 'D', 'C', 'A', 'E'], ['B', 'D', 'C', 'E', 'A'], ['B', 'D', 'E', 'A', 'C'], ['B', 'D', 'E', 'C', 'A'], ['B', 'E', 'A', 'C', 'D'], ['B', 'E', 'A', 'D', 'C'], ['B', 'E', 'C', 'A', 'D'], ['B', 'E', 'C', 'D', 'A'], ['B', 'E', 'D', 'A', 'C'], ['B', 'E', 'D', 'C', 'A'], ['C', 'A', 'B', 'D', 'E'], ['C', 'A', 'B', 'E', 'D'], ['C', 'A', 'D', 'B', 'E'], ['C', 'A', 'D', 'E', 'B'], ['C', 'A', 'E', 'B', 'D'], ['C', 'A', 'E', 'D', 'B'], ['C', 'B', 'A', 'D', 'E'], ['C', 'B', 'A', 'E', 'D'], ['C', 'B', 'D', 'A', 'E'], ['C', 'B', 'D', 'E', 'A'], ['C', 'B', 'E', 'A', 'D'], ['C', 'B', 'E', 'D', 'A'], ['C', 'D', 'A', 'B', 'E'], ['C', 'D', 'A', 'E', 'B'], ['C', 'D', 'B', 'A', 'E'], ['C', 'D', 'B', 'E', 'A'], ['C', 'D', 'E', 'A', 'B'], ['C', 'D', 'E', 'B', 'A'], ['C', 'E', 'A', 'B', 'D'], ['C', 'E', 'A', 'D', 'B'], ['C', 'E', 'B', 'A', 'D'], ['C', 'E', 'B', 'D', 'A'], ['C', 'E', 'D', 'A', 'B'], ['C', 'E', 'D', 'B', 'A'], ['D', 'A', 'B', 'C', 'E'], ['D', 'A', 'B', 'E', 'C'], ['D', 'A', 'C', 'B', 'E'], ['D', 'A', 'C', 'E', 'B'], ['D', 'A', 'E', 'B', 'C'], ['D', 'A', 'E', 'C', 'B'], ['D', 'B', 'A', 'C', 'E'], ['D', 'B', 'A', 'E', 'C'], ['D', 'B', 'C', 'A', 'E'], ['D', 'B', 'C', 'E', 'A'], ['D', 'B', 'E', 'A', 'C'], ['D', 'B', 'E', 'C', 'A'], ['D', 'C', 'A', 'B', 'E'], ['D', 'C', 'A', 'E', 'B'], ['D', 'C', 'B', 'A', 'E'], ['D', 'C', 'B', 'E', 'A'], ['D', 'C', 'E', 'A', 'B'], ['D', 'C', 'E', 'B', 'A'], ['D', 'E', 'A', 'B', 'C'], ['D', 'E', 'A', 'C', 'B'], ['D', 'E', 'B', 'A', 'C'], ['D', 'E', 'B', 'C', 'A'], ['D', 'E', 'C', 'A', 'B'], ['D', 'E', 'C', 'B', 'A'], ['E', 'A', 'B', 'C', 'D'], ['E', 'A', 'B', 'D', 'C'], ['E', 'A', 'C', 'B', 'D'], ['E', 'A', 'C', 'D', 'B'], ['E', 'A', 'D', 'B', 'C'], ['E', 'A', 'D', 'C', 'B'], ['E', 'B', 'A', 'C', 'D'], ['E', 'B', 'A', 'D', 'C'], ['E', 'B', 'C', 'A', 'D'], ['E', 'B', 'C', 'D', 'A'], ['E', 'B', 'D', 'A', 'C'], ['E', 'B', 'D', 'C', 'A'], ['E', 'C', 'A', 'B', 'D'], ['E', 'C', 'A', 'D', 'B'], ['E', 'C', 'B', 'A', 'D'], ['E', 'C', 'B', 'D', 'A'], ['E', 'C', 'D', 'A', 'B'], ['E', 'C', 'D', 'B', 'A'], ['E', 'D', 'A', 'B', 'C'], ['E', 'D', 'A', 'C', 'B'], ['E', 'D', 'B', 'A', 'C'], ['E', 'D', 'B', 'C', 'A'], ['E', 'D', 'C', 'A', 'B'], ['E', 'D', 'C', 'B', 'A']]
----
['A', 'B', 'C', 'D', 'E'].Each().Permutation(3):list .. 60 : [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'B', 'E'], ['A', 'C', 'B'], ['A', 'C', 'D'], ['A', 'C', 'E'], ['A', 'D', 'B'], ['A', 'D', 'C'], ['A', 'D', 'E'], ['A', 'E', 'B'], ['A', 'E', 'C'], ['A', 'E', 'D'], ['B', 'A', 'C'], ['B', 'A', 'D'], ['B', 'A', 'E'], ['B', 'C', 'A'], ['B', 'C', 'D'], ['B', 'C', 'E'], ['B', 'D', 'A'], ['B', 'D', 'C'], ['B', 'D', 'E'], ['B', 'E', 'A'], ['B', 'E', 'C'], ['B', 'E', 'D'], ['C', 'A', 'B'], ['C', 'A', 'D'], ['C', 'A', 'E'], ['C', 'B', 'A'], ['C', 'B', 'D'], ['C', 'B', 'E'], ['C', 'D', 'A'], ['C', 'D', 'B'], ['C', 'D', 'E'], ['C', 'E', 'A'], ['C', 'E', 'B'], ['C', 'E', 'D'], ['D', 'A', 'B'], ['D', 'A', 'C'], ['D', 'A', 'E'], ['D', 'B', 'A'], ['D', 'B', 'C'], ['D', 'B', 'E'], ['D', 'C', 'A'], ['D', 'C', 'B'], ['D', 'C', 'E'], ['D', 'E', 'A'], ['D', 'E', 'B'], ['D', 'E', 'C'], ['E', 'A', 'B'], ['E', 'A', 'C'], ['E', 'A', 'D'], ['E', 'B', 'A'], ['E', 'B', 'C'], ['E', 'B', 'D'], ['E', 'C', 'A'], ['E', 'C', 'B'], ['E', 'C', 'D'], ['E', 'D', 'A'], ['E', 'D', 'B'], ['E', 'D', 'C']]
['A', 'B', 'C', 'D', 'E'].Each().Permutation(6):list .. range over
======== Iterator#PingPong() ========
======== Iterator#Print() ========
======== Iterator#Printf() ========
======== Iterator#Println() ========
======== Iterator#Prod() ========
======== Iterator#Rank() ========
======== Iterator#Reduce() ========
======== Iterator#Replace() ========
======== Iterator#Reverse() ========
['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'].Each().Reverse():list .. ['ten', 'nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero']
======== Iterator#RoundOff() ========
======== Iterator#RunLength() ========
======== Iterator#Since() ========
======== Iterator#Skip() ========
======== Iterator#SkipNil() ========
======== Iterator#Sort() ========
words100.Each().Sort() .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Each().Sort(`ascend) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Each().Sort(`descend) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Each().Sort(& {$a < $b}) .. ['agreeable', 'beautiful', 'blow', 'boil', 'bore', 'boy', 'bruise', 'bubble', 'burst', 'bushes', 'cannon', 'cattle', 'cause', 'change', 'cheat', 'childlike', 'clap', 'complain', 'country', 'cover', 'cowardly', 'curve', 'dapper', 'deeply', 'demonic', 'detect', 'digestion', 'disgusting', 'dry', 'encourage', 'entertaining', 'equable', 'exotic', 'experience', 'flame', 'flat', 'flowery', 'force', 'foregoing', 'gaping', 'greasy', 'happen', 'hate', 'heal', 'horn', 'hydrant', 'ignore', 'impartial', 'inexpensive', 'iron', 'jump', 'living', 'loutish', 'mate', 'merciful', 'milk', 'miniature', 'mix', 'motionwhip', 'move', 'natural', 'nebulous', 'null', 'oceanic', 'part', 'person', 'pine', 'poor', 'possess', 'preach', 'prevent', 'private', 'property', 'purring', 'rampant', 'rat', 'ray', 'reading', 'religion', 'roasted', 'rob', 'roll', 'rural', 'sigh', 'smile', 'soap', 'steam', 'sudden', 'sulky', 'tasteful', 'thaw', 'tired', 'toy', 'try', 'unaccountable', 'unarmed', 'unusual', 'vest', 'volatile', 'yell']
words100.Each().Sort(& {$a > $b}) .. ['yell', 'volatile', 'vest', 'unusual', 'unarmed', 'unaccountable', 'try', 'toy', 'tired', 'thaw', 'tasteful', 'sulky', 'sudden', 'steam', 'soap', 'smile', 'sigh', 'rural', 'roll', 'rob', 'roasted', 'religion', 'reading', 'ray', 'rat', 'rampant', 'purring', 'property', 'private', 'prevent', 'preach', 'possess', 'poor', 'pine', 'person', 'part', 'oceanic', 'null', 'nebulous', 'natural', 'move', 'motionwhip', 'mix', 'miniature', 'milk', 'merciful', 'mate', 'loutish', 'living', 'jump', 'iron', 'inexpensive', 'impartial', 'ignore', 'hydrant', 'horn', 'heal', 'hate', 'happen', 'greasy', 'gaping', 'foregoing', 'force', 'flowery', 'flat', 'flame', 'experience', 'exotic', 'equable', 'entertaining', 'encourage', 'dry', 'disgusting', 'digestion', 'detect', 'demonic', 'deeply', 'dapper', 'curve', 'cowardly', 'cover', 'country', 'complain', 'clap', 'childlike', 'cheat', 'change', 'cause', 'cattle', 'cannon', 'bushes', 'burst', 'bubble', 'bruise', 'boy', 'bore', 'boil', 'blow', 'beautiful', 'agreeable']
words100.Each().Sort(& {$a.last < $b.last}) .. ['rob', 'oceanic', 'exotic', 'demonic', 'roasted', 'tired', 'unarmed', 'cattle', 'change', 'pine', 'mate', 'smile', 'bruise', 'experience', 'ignore', 'agreeable', 'bubble', 'equable', 'encourage', 'inexpensive', 'volatile', 'miniature', 'private', 'cause', 'move', 'unaccountable', 'curve', 'force', 'flame', 'hate', 'childlike', 'bore', 'reading', 'foregoing', 'living', 'gaping', 'disgusting', 'entertaining', 'purring', 'loutish', 'sigh', 'preach', 'milk', 'natural', 'unusual', 'impartial', 'heal', 'beautiful', 'yell', 'null', 'merciful', 'roll', 'boil', 'tasteful', 'rural', 'steam', 'sudden', 'happen', 'person', 'cannon', 'iron', 'complain', 'religion', 'horn', 'digestion', 'jump', 'soap', 'motionwhip', 'clap', 'poor', 'dapper', 'cover', 'bushes', 'possess', 'nebulous', 'rat', 'flat', 'cheat', 'part', 'burst', 'detect', 'prevent', 'vest', 'hydrant', 'rampant', 'thaw', 'blow', 'mix', 'deeply', 'try', 'greasy', 'sulky', 'ray', 'dry', 'property', 'country', 'toy', 'flowery', 'boy', 'cowardly']
rat
dry
rob
try
toy
mix
ray
boy
milk
horn
thaw
part
boil
mate
flat
roll
move
clap
sigh
poor
pine
hate
null
yell
vest
soap
iron
blow
jump
heal
bore
rural
flame
burst
force
cheat
cover
sulky
tired
smile
cause
curve
steam
preach
cattle
gaping
cannon
person
greasy
sudden
bubble
happen
detect
living
bruise
change
dapper
ignore
deeply
exotic
bushes
prevent
rampant
unusual
natural
flowery
loutish
possess
reading
unarmed
private
roasted
oceanic
hydrant
equable
demonic
country
purring
religion
complain
property
merciful
cowardly
volatile
tasteful
nebulous
childlike
digestion
foregoing
agreeable
impartial
miniature
encourage
beautiful
motionwhip
disgusting
experience
inexpensive
entertaining
unaccountable
unaccountable
entertaining
inexpensive
experience
motionwhip
disgusting
impartial
agreeable
digestion
childlike
beautiful
miniature
encourage
foregoing
nebulous
religion
complain
volatile
cowardly
property
merciful
tasteful
equable
hydrant
purring
rampant
flowery
roasted
demonic
unusual
natural
private
loutish
reading
unarmed
country
oceanic
possess
prevent
cattle
bubble
cannon
person
preach
sudden
gaping
detect
living
greasy
change
bruise
ignore
exotic
bushes
deeply
happen
dapper
force
flame
sulky
steam
rural
curve
cheat
smile
cause
tired
cover
burst
vest
heal
roll
blow
bore
clap
move
null
flat
jump
yell
boil
part
poor
soap
iron
milk
pine
hate
mate
thaw
horn
sigh
ray
boy
mix
toy
try
rob
dry
rat
words10.Each().Sort(`ascend, [0 .. 9]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Each().Sort(`ascend, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Each().Sort(`descend, [0 .. 9]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Each().Sort(`descend, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words10.Each().Sort(& {$a < $b}, [9 .. 0]) .. ['entertaining', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
words10.Each().Sort(& {$a > $b}, [9 .. 0]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'entertaining']
words100.Each().Sort(`ascend, [0 .. 99]) .. ['bubble', 'tasteful', 'yell', 'unarmed', 'vest', 'private', 'cowardly', 'happen', 'demonic', 'horn', 'motionwhip', 'rampant', 'bruise', 'religion', 'ignore', 'roll', 'foregoing', 'equable', 'hydrant', 'inexpensive', 'boy', 'flowery', 'exotic', 'bushes', 'toy', 'soap', 'iron', 'force', 'beautiful', 'loutish', 'childlike', 'bore', 'country', 'property', 'blow', 'oceanic', 'agreeable', 'impartial', 'sigh', 'smile', 'dry', 'prevent', 'thaw', 'preach', 'mate', 'gaping', 'sulky', 'poor', 'greasy', 'rob', 'rat', 'merciful', 'burst', 'try', 'digestion', 'rural', 'dapper', 'unaccountable', 'flame', 'natural', 'unusual', 'volatile', 'jump', 'cheat', 'null', 'mix', 'deeply', 'cover', 'encourage', 'experience', 'disgusting', 'entertaining', 'purring', 'tired', 'clap', 'cause', 'complain', 'flat', 'curve', 'change', 'boil', 'part', 'living', 'steam', 'detect', 'milk', 'pine', 'ray', 'sudden', 'person', 'roasted', 'cannon', 'hate', 'heal', 'move', 'miniature', 'reading', 'possess', 'nebulous', 'cattle']
words100.Each().Sort(`ascend, [99 .. 0]) .. ['cattle', 'nebulous', 'possess', 'reading', 'miniature', 'move', 'heal', 'hate', 'cannon', 'roasted', 'person', 'sudden', 'ray', 'pine', 'milk', 'detect', 'steam', 'living', 'part', 'boil', 'change', 'curve', 'flat', 'complain', 'cause', 'clap', 'tired', 'purring', 'entertaining', 'disgusting', 'experience', 'encourage', 'cover', 'deeply', 'mix', 'null', 'cheat', 'jump', 'volatile', 'unusual', 'natural', 'flame', 'unaccountable', 'dapper', 'rural', 'digestion', 'try', 'burst', 'merciful', 'rat', 'rob', 'greasy', 'poor', 'sulky', 'gaping', 'mate', 'preach', 'thaw', 'prevent', 'dry', 'smile', 'sigh', 'impartial', 'agreeable', 'oceanic', 'blow', 'property', 'country', 'bore', 'childlike', 'loutish', 'beautiful', 'force', 'iron', 'soap', 'toy', 'bushes', 'exotic', 'flowery', 'boy', 'inexpensive', 'hydrant', 'equable', 'foregoing', 'roll', 'ignore', 'religion', 'bruise', 'rampant', 'motionwhip', 'horn', 'demonic', 'happen', 'cowardly', 'private', 'vest', 'unarmed', 'yell', 'tasteful', 'bubble']
======== Iterator#Std() ========
======== Iterator#Sum() ========
[].Each().Sum() .. <Nil>
[0].Each().Sum() .. 0
[0, 1].Each().Sum() .. 1
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Each().Sum() .. 55
[0, 1, `a, 3, 4, 5, 6, 7, 8, 9, 10].Each().Sum() .. unsuppported binary operation: Number + Expr
======== Iterator#Tail() ========
======== Iterator#Until() ========
======== Iterator#Var() ========
======== Iterator#While() ========
