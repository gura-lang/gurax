======== PUnit ========
for (v in tbl) {}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 Value(<Nil>)
  ##4 ForEach(offsetToIterator=1,branchdest=##8, decls=[v])
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Jump(cont=##4)
  ##8 RemoveValues(offset=1,count=1)
  ##9 PopFrame()
for (v in tbl):list {}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 CreateList()
  ##4 Jump(cont=##8)
  ##5 ListElem(offsetToList=0)
  ##6 Jump(cont=##11)
  ##7 ListElem(offsetToList=0)
  ##8 ForEach(offsetToIterator=1,branchdest=##11, decls=[v])
  ##9 Value(<Nil>)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
for (v in tbl):xlist {}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 CreateList()
  ##4 Jump(cont=##8)
  ##5 ListElem(offsetToList=0):xlist
  ##6 Jump(cont=##11)
  ##7 ListElem(offsetToList=0):xlist
  ##8 ForEach(offsetToIterator=1,branchdest=##11, decls=[v])
  ##9 Value(<Nil>)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {}
  ##0 Lookup(`tbl1)
  ##1 GenIterator()
  ##2 Lookup(`tbl2)
  ##3 GenIterator()
  ##4 Lookup(`tbl3)
  ##5 GenIterator()
  ##6 PushFrame<Block>()
  ##7 Value(<Nil>)
  ##8 ForEach(offsetToIterator=1,branchdest=##12, decls=[v1,v2,v3])
  ##9 DiscardValue()
  ##10 Value(<Nil>)
  ##11 Jump(cont=##8)
  ##12 RemoveValues(offset=1,count=3)
  ##13 PopFrame()
for (v in tbl) {|n|}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 Value(<Nil>)
  ##5 ForEach(offsetToIterator=2,branchdest=##11, decls=[v])
  ##6 DiscardValue()
  ##7 EvalIterator(offsetToIterator=0,branchdest=##8)
  ##8 AssignToDeclArg(`n), DiscardValue()
  ##9 Value(<Nil>)
  ##10 Jump(cont=##5)
  ##11 RemoveValues(offset=1,count=2)
  ##12 PopFrame()
for (v in tbl):list {|n|}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(cont=##9)
  ##6 ListElem(offsetToList=0)
  ##7 Jump(cont=##14)
  ##8 ListElem(offsetToList=0)
  ##9 ForEach(offsetToIterator=2,branchdest=##14, decls=[v])
  ##10 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(<Nil>)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
for (v in tbl):xlist {|n|}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(cont=##9)
  ##6 ListElem(offsetToList=0):xlist
  ##7 Jump(cont=##14)
  ##8 ListElem(offsetToList=0):xlist
  ##9 ForEach(offsetToIterator=2,branchdest=##14, decls=[v])
  ##10 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(<Nil>)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n|}
  ##0 Lookup(`tbl1)
  ##1 GenIterator()
  ##2 Lookup(`tbl2)
  ##3 GenIterator()
  ##4 Lookup(`tbl3)
  ##5 GenIterator()
  ##6 PushFrame<Block>()
  ##7 GenCounterIterator()
  ##8 Value(<Nil>)
  ##9 ForEach(offsetToIterator=2,branchdest=##15, decls=[v1,v2,v3])
  ##10 DiscardValue()
  ##11 EvalIterator(offsetToIterator=0,branchdest=##12)
  ##12 AssignToDeclArg(`n), DiscardValue()
  ##13 Value(<Nil>)
  ##14 Jump(cont=##9)
  ##15 RemoveValues(offset=1,count=4)
  ##16 PopFrame()
for (v in tbl) {1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 Value(<Nil>)
  ##4 ForEach(offsetToIterator=1,branchdest=##8, decls=[v])
  ##5 DiscardValue()
  ##6 Value(<Number:1>)
  ##7 Jump(cont=##4)
  ##8 RemoveValues(offset=1,count=1)
  ##9 PopFrame()
for (v in tbl):list {1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 CreateList()
  ##4 Jump(cont=##8)
  ##5 ListElem(offsetToList=0)
  ##6 Jump(cont=##11)
  ##7 ListElem(offsetToList=0)
  ##8 ForEach(offsetToIterator=1,branchdest=##11, decls=[v])
  ##9 Value(<Number:1>)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
for (v in tbl):xlist {1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 CreateList()
  ##4 Jump(cont=##8)
  ##5 ListElem(offsetToList=0):xlist
  ##6 Jump(cont=##11)
  ##7 ListElem(offsetToList=0):xlist
  ##8 ForEach(offsetToIterator=1,branchdest=##11, decls=[v])
  ##9 Value(<Number:1>)
  ##10 Jump(cont=##7)
  ##11 RemoveValues(offset=1,count=1)
  ##12 PopFrame()
for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {1}
  ##0 Lookup(`tbl1)
  ##1 GenIterator()
  ##2 Lookup(`tbl2)
  ##3 GenIterator()
  ##4 Lookup(`tbl3)
  ##5 GenIterator()
  ##6 PushFrame<Block>()
  ##7 Value(<Nil>)
  ##8 ForEach(offsetToIterator=1,branchdest=##12, decls=[v1,v2,v3])
  ##9 DiscardValue()
  ##10 Value(<Number:1>)
  ##11 Jump(cont=##8)
  ##12 RemoveValues(offset=1,count=3)
  ##13 PopFrame()
for (v in tbl) {|n| 1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 Value(<Nil>)
  ##5 ForEach(offsetToIterator=2,branchdest=##11, decls=[v])
  ##6 DiscardValue()
  ##7 EvalIterator(offsetToIterator=0,branchdest=##8)
  ##8 AssignToDeclArg(`n), DiscardValue()
  ##9 Value(<Number:1>)
  ##10 Jump(cont=##5)
  ##11 RemoveValues(offset=1,count=2)
  ##12 PopFrame()
for (v in tbl):list {|n| 1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(cont=##9)
  ##6 ListElem(offsetToList=0)
  ##7 Jump(cont=##14)
  ##8 ListElem(offsetToList=0)
  ##9 ForEach(offsetToIterator=2,branchdest=##14, decls=[v])
  ##10 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(<Number:1>)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
for (v in tbl):xlist {|n| 1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(cont=##9)
  ##6 ListElem(offsetToList=0):xlist
  ##7 Jump(cont=##14)
  ##8 ListElem(offsetToList=0):xlist
  ##9 ForEach(offsetToIterator=2,branchdest=##14, decls=[v])
  ##10 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##11 AssignToDeclArg(`n), DiscardValue()
  ##12 Value(<Number:1>)
  ##13 Jump(cont=##8)
  ##14 RemoveValues(offset=1,count=2)
  ##15 PopFrame()
for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n| 1}
  ##0 Lookup(`tbl1)
  ##1 GenIterator()
  ##2 Lookup(`tbl2)
  ##3 GenIterator()
  ##4 Lookup(`tbl3)
  ##5 GenIterator()
  ##6 PushFrame<Block>()
  ##7 GenCounterIterator()
  ##8 Value(<Nil>)
  ##9 ForEach(offsetToIterator=2,branchdest=##15, decls=[v1,v2,v3])
  ##10 DiscardValue()
  ##11 EvalIterator(offsetToIterator=0,branchdest=##12)
  ##12 AssignToDeclArg(`n), DiscardValue()
  ##13 Value(<Number:1>)
  ##14 Jump(cont=##9)
  ##15 RemoveValues(offset=1,count=4)
  ##16 PopFrame()
for (v in tbl) {break, 1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 Value(<Nil>)
  ##4 ForEach(offsetToIterator=1,branchdest=##10, decls=[v])
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Break(marked=##4,branchDestFlag=true), DiscardValue()
  ##8 Value(<Number:1>)
  ##9 Jump(cont=##4)
  ##10 RemoveValues(offset=1,count=1)
  ##11 PopFrame()
for (v in tbl):list {break, 1}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 CreateList()
  ##4 Jump(cont=##8)
  ##5 ListElem(offsetToList=0)
  ##6 Jump(cont=##13)
  ##7 ListElem(offsetToList=0)
  ##8 ForEach(offsetToIterator=1,branchdest=##13, decls=[v])
  ##9 Value(<Undefined>)
  ##10 Break(marked=##5,branchDestFlag=false), DiscardValue()
  ##11 Value(<Number:1>)
  ##12 Jump(cont=##7)
  ##13 RemoveValues(offset=1,count=1)
  ##14 PopFrame()
======== Create list ========
tbl .. [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8]
for (n in tbl):list {n} .. [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8]
for (n in tbl):list {|i| n + i} .. [3, 2, 6, 4, 9, 14, 8, 13, 13, 12, 15, 19]
for (n in tbl):list {if ((n % 2) == 0) {continue}, n} .. [3, 1, <Nil>, 1, 5, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
for (n in tbl):list {((n % 2) == 0) && continue, n} .. [3, 1, <Nil>, 1, 5, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
for (n in tbl):list {if ((n % 2) == 0) {continue}, n} .. [3, 1, <Nil>, 1, 5, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
for (n in tbl):list {((n % 2) == 0) && continue, n} .. [3, 1, <Nil>, 1, 5, 9, <Nil>, <Nil>, 5, 3, 5, <Nil>]
for (n in tbl):xlist {if ((n % 2) == 0) {continue}, n} .. [3, 1, 1, 5, 9, 5, 3, 5]
for (n in tbl):xlist {((n % 2) == 0) && continue, n} .. [3, 1, 1, 5, 9, 5, 3, 5]
for (n in tbl):list {if ((n % 2) == 0) {continue('x')}, n} .. [3, 1, 'x', 1, 5, 9, 'x', 'x', 5, 3, 5, 'x']
for (n in tbl):list {((n % 2) == 0) && continue('x'), n} .. [3, 1, 'x', 1, 5, 9, 'x', 'x', 5, 3, 5, 'x']
for (n in tbl):list {if (n > 8) {break}, n} .. [3, 1, 4, 1, 5]
for (n in tbl):list {(n > 8) && break, n} .. [3, 1, 4, 1, 5]
for (n in tbl):list {if (n > 8) {break('end')}, n} .. [3, 1, 4, 1, 5, 'end']
for (n in tbl):list {(n > 8) && break('end'), n} .. [3, 1, 4, 1, 5, 'end']
for (n in tbl):list {if (n > 8) {break(nil)}, n} .. [3, 1, 4, 1, 5, <Nil>]
for (n in tbl):list {(n > 8) && break(nil), n} .. [3, 1, 4, 1, 5, <Nil>]
for (n in tbl):xlist {if (n > 8) {break}, n} .. [3, 1, 4, 1, 5]
for (n in tbl):xlist {(n > 8) && break, n} .. [3, 1, 4, 1, 5]
for (n in tbl):xlist {if (n > 8) {break('end')}, n} .. [3, 1, 4, 1, 5, 'end']
for (n in tbl):xlist {(n > 8) && break('end'), n} .. [3, 1, 4, 1, 5, 'end']
for (n in tbl):xlist {if (n > 8) {break(nil)}, n} .. [3, 1, 4, 1, 5]
for (n in tbl):xlist {(n > 8) && break(nil), n} .. [3, 1, 4, 1, 5]
