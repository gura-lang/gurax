======== PUnit ========
~a
  ##0 Lookup(`a)
  ##1 UnaryOp(~)
-a
  ##0 Lookup(`a)
  ##1 UnaryOp(-)
!a
  ##0 Lookup(`a)
  ##1 UnaryOp(!)
+a
  ##0 Lookup(`a)
  ##1 UnaryOp(+)
a%
  ##0 Lookup(`a)
  ##1 UnaryOp(%)
a%%
  ##0 Lookup(`a)
  ##1 UnaryOp(%%)
a*
  ##0 Lookup(`a)
  ##1 UnaryOp(*)
a+
  ##0 Lookup(`a)
  ##1 UnaryOp(+)
a?
  ##0 Lookup(`a)
  ##1 UnaryOp(?)
a..
  ##0 Lookup(`a)
  ##1 UnaryOp(..)
a + b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(+)
a & b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(&)
a && b
  ##0 Lookup(`a)
  ##1 JumpIfNot(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
a <=> b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(<=>)
a |+| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|+|)
a in b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(in)
a |^| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|^|)
a |-| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|-|)
a / b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(/)
a |.| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|.|)
a == b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(==)
a |*| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|*|)
a >= b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(>=)
a > b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(>)
a |&| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|&|)
a <= b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(<=)
a < b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(<)
a % b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(%)
a %% b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(%%)
a * b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(*)
a != b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(!=)
a | b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|)
a || b
  ##0 Lookup(`a)
  ##1 JumpIf(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
a => b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(=>)
a ** b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(**)
a .. b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(..)
a << b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(<<)
a >> b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(>>)
a - b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(-)
a ||| b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(|||)
a ^ b
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(^)
a && b
  ##0 Lookup(`a)
  ##1 JumpIfNot(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
(a && b) && c
  ##0 Lookup(`a)
  ##1 JumpIfNot(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
  ##4 JumpIfNot(branchDest=##6,keep)
  ##5 Lookup(`c)
  ##6 NoOperation()
a && (b && c)
  ##0 Lookup(`a)
  ##1 JumpIfNot(branchDest=##6,keep)
  ##2 Lookup(`b)
  ##3 JumpIfNot(branchDest=##5,keep)
  ##4 Lookup(`c)
  ##5 NoOperation()
  ##6 NoOperation()
a || b
  ##0 Lookup(`a)
  ##1 JumpIf(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
(a || b) || c
  ##0 Lookup(`a)
  ##1 JumpIf(branchDest=##3,keep)
  ##2 Lookup(`b)
  ##3 NoOperation()
  ##4 JumpIf(branchDest=##6,keep)
  ##5 Lookup(`c)
  ##6 NoOperation()
a || (b || c)
  ##0 Lookup(`a)
  ##1 JumpIf(branchDest=##6,keep)
  ##2 Lookup(`b)
  ##3 JumpIf(branchDest=##5,keep)
  ##4 Lookup(`c)
  ##5 NoOperation()
  ##6 NoOperation()
false && false
  ##0 Lookup(`false)
  ##1 JumpIfNot(branchDest=##3,keep)
  ##2 Lookup(`false)
  ##3 NoOperation()
======== Error Message ========
+nil .. unsupported unary operation: +Nil
nil* .. unsupported unary operation: Nil*
nil + nil .. unsuppported binary operation: Nil + Nil
math.Sin(nil) .. unsupported math operation: math.Sin(Nil)
math.Atan2(nil, nil) .. unsuppported math operation: math.Atan2(Nil, Nil)
======== Operator ! ========
!nil .. true
!false .. true
!true .. false
!0 .. false
!1 .. false
!'' .. false
![] .. []
======== Operator .. ========
1 .. 10 .. <Iterator:Range:begin=1:end=11:step=1>
1 .. 1 .. <Iterator:Range:begin=1:end=2:step=1>
1 .. 0 .. <Iterator:Range:begin=1:end=-1:step=-1>
1 .. (-10) .. <Iterator:Range:begin=1:end=-11:step=-1>
======== Operators && and || ========
true && true .. true
true && false .. false
false && true .. false
false && false .. false
true || true .. true
true || false .. true
false || true .. true
false || false .. false
'hello' && 'world' .. world
'hello' && false .. false
false && 'hello' .. false
'hello' && true .. true
true && 'hello' .. hello
'hello' || 'world' .. hello
'hello' || false .. hello
false || 'hello' .. hello
'hello' || true .. hello
true || 'hello' .. true
======== Comparison with nil ========
nil == nil .. true
nil == 0 .. false
0 == nil .. false
nil != nil .. false
nil != 0 .. true
0 != nil .. true
======== Operator => ========
3 => 4 .. [3, 4]
(`hoge) => 4 .. [hoge, 4]
'hoge' => 4 .. ['hoge', 4]
'hoge' => [3, 4, 5] .. ['hoge', [3, 4, 5]]
['hoge', 'foo', 'bar'] => 4 .. [['hoge', 'foo', 'bar'], 4]
['hoge', 'foo', 'bar'] => [3, 4, 5] .. [['hoge', 'foo', 'bar'], [3, 4, 5]]
