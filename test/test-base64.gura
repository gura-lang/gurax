#!/usr/bin/env gurax
//==============================================================================
// test-base64.gura
//==============================================================================
import(util.tester) {*}

PrintSep() = Println('----------------------------------------------------------')

PrintBuff(buffSrc:Binary, buffEnc:Binary, buffDec:Binary):void = {
	dumpFlag = (buffSrc.bytes < 80)
	Printf('Source:  %s\n', cond(dumpFlag, buffSrc, Format('(%dbytes)', buffSrc.bytes)))
	if (buffSrc == buffDec) {
		Printf('Encoded: %s .. OK\n', cond(dumpFlag, buffEnc, Format('(%dbytes)', buffEnc.bytes)))
	} else {
		Printf('Encoded: %s .. **NG** %s\n', buffEnc, buffDec)
	}
}

TestCase('base64.Encode() and base64.Decode()') {
	buffSrcTbl = [
		b''
		b'f'
		b'fo'
		b'foo'
		b'foob'
		b'fooba'
		b'foobar'
		b'abcdefghijklmnopqrstuvwxyz'
		Binary {|buff| buff.p.Put(`uint8, Range(1024)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1025)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1026)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1027)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1028)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1029)), buff} 
	]
	PrintSep()
	Println('[Base16]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = base64.Encode(buffSrc):base16:singleLine
		buffDec = base64.Decode(buffEnc):base16
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base32]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = base64.Encode(buffSrc):base32:singleLine
		buffDec = base64.Decode(buffEnc):base32
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base32hex]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = base64.Encode(buffSrc):base32hex:singleLine
		buffDec = base64.Decode(buffEnc):base32hex
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base64]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = base64.Encode(buffSrc):base64:singleLine
		buffDec = base64.Decode(buffEnc):base64
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
}

TestCase('base64.Writer() and base64.Reader()') {
	buffSrcTbl = [
		b''
		b'f'
		b'fo'
		b'foo'
		b'foob'
		b'fooba'
		b'foobar'
		b'abcdefghijklmnopqrstuvwxyz'
		Binary {|buff| buff.p.Put(`uint8, Range(1024)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1025)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1026)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1027)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1028)), buff} 
		Binary {|buff| buff.p.Put(`uint8, Range(1029)), buff} 
	]
	PrintSep()
	Println('[Base16]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = Binary(), buffDec = Binary()
		(base64.Writer(buffEnc):base16:singleLine).Write(buffSrc)
		buffDec = (base64.Reader(buffEnc):base16).Read()
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base32]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = Binary(), buffDec = Binary()
		(base64.Writer(buffEnc):base32:singleLine).Write(buffSrc)
		buffDec = (base64.Reader(buffEnc):base32).Read()
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base32hex]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = Binary(), buffDec = Binary()
		(base64.Writer(buffEnc):base32hex:singleLine).Write(buffSrc)
		buffDec = (base64.Reader(buffEnc):base32hex).Read()
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
	PrintSep()
	Println('[Base64]')
	buffSrcTbl.Each {|buffSrc|
		buffEnc = Binary(), buffDec = Binary()
		(base64.Writer(buffEnc):base64:singleLine).Write(buffSrc)
		buffDec = (base64.Reader(buffEnc):base64).Read()
		PrintBuff(buffSrc, buffEnc, buffDec)
	}
}

TestCase('Line Length') {
	(buffSrc = B'').p.Put(`uint8, Range(256))
	PrintSep()
	Println('Encode():base16')
	base64.Encode(buffSrc):base16 {|buffResult|
		Stream.Pipe(buffResult, sys.cout)
		Printf('%s\n', cond(base64.Decode(buffResult):base16 == buffSrc, 'OK', 'NG'))
	}
	PrintSep()
	Println('Encode():base32')
	base64.Encode(buffSrc):base32 {|buffResult|
		Stream.Pipe(buffResult, sys.cout)
		Printf('%s\n', cond(base64.Decode(buffResult):base32 == buffSrc, 'OK', 'NG'))
	}
	PrintSep()
	Println('Encode():base32hex')
	base64.Encode(buffSrc):base32hex {|buffResult|
		Stream.Pipe(buffResult, sys.cout)
		Printf('%s\n', cond(base64.Decode(buffResult):base32hex == buffSrc, 'OK', 'NG'))
	}
	PrintSep()
	Println('Encode():base64')
	base64.Encode(buffSrc):base64 {|buffResult|
		Stream.Pipe(buffResult, sys.cout)
		Printf('%s\n', cond(base64.Decode(buffResult):base64 == buffSrc, 'OK', 'NG'))
	}
	PrintSep()
	Println('Encode(lineLen = 32):base64')
	base64.Encode(buffSrc, lineLen = 32):base64 {|buffResult|
		Stream.Pipe(buffResult, sys.cout)
		Printf('%s\n', cond(base64.Decode(buffResult):base64 == buffSrc, 'OK', 'NG'))
	}
	PrintSep()
	Println('Encode(lineLen = 0):base64')
	base64.Encode(buffSrc, lineLen = 0):base64 {|buffResult|
		Stream.Pipe(buffResult, sys.cout), Println()
		Printf('%s\n', cond(base64.Decode(buffResult):base64 == buffSrc, 'OK', 'NG'))
	}
}

TestCase('Suffix') {
	Tester(`b'666F6F626172'base16)
	Tester(`b'MZXW6YTBOI======'base32)
	Tester(`b'CPNMUOJ1E8======'base32hex)
	Tester(`b'Zm9vYmFy'base64)
}
