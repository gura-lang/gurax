#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Constructor') {
	Tester(`Operator.Unary(`~))
	Tester(`Operator.Unary(`-))
	Tester(`Operator.Unary(`!))
	Tester(`Operator.Unary(`+))
	Tester(`Operator.Unary(`?))
	Tester(`Operator.UnaryPost(`%))
	Tester(`Operator.UnaryPost(`%%))
	Tester(`Operator.UnaryPost(`*))
	Tester(`Operator.UnaryPost(`+))
	Tester(`Operator.UnaryPost(`?))
	Tester(`Operator.UnaryPost(`..))
	Tester(`Operator.Binary(`+))
	Tester(`Operator.Binary(`&))
	Tester(`Operator.Binary(`&&))
	Tester(`Operator.Binary(`<=>))
	Tester(`Operator.Binary(`|+|))
	Tester(`Operator.Binary(`in))
	Tester(`Operator.Binary(`|^|))
	Tester(`Operator.Binary(`|-|))
	Tester(`Operator.Binary(`/))
	Tester(`Operator.Binary(`|.|))
	Tester(`Operator.Binary(`==))
	Tester(`Operator.Binary(`|*|))
	Tester(`Operator.Binary(`>=))
	Tester(`Operator.Binary(`>))
	Tester(`Operator.Binary(`|&|))
	Tester(`Operator.Binary(`<=))
	Tester(`Operator.Binary(`<))
	Tester(`Operator.Binary(`%))
	Tester(`Operator.Binary(`%%))
	Tester(`Operator.Binary(`*))
	Tester(`Operator.Binary(`!=))
	Tester(`Operator.Binary(`|))
	Tester(`Operator.Binary(`||))
	Tester(`Operator.Binary(`=>))
	Tester(`Operator.Binary(`**))
	Tester(`Operator.Binary(`..))
	Tester(`Operator.Binary(`<<))
	Tester(`Operator.Binary(`>>))
	Tester(`Operator.Binary(`-))
	Tester(`Operator.Binary(`|||))
	Tester(`Operator.Binary(`^))
	Tester(`Operator.Math(`Abs))
	Tester(`Operator.Math(`Acos))
	Tester(`Operator.Math(`Arg))
	Tester(`Operator.Math(`Asin))
	Tester(`Operator.Math(`Atan))
	Tester(`Operator.Math(`Atan2))
	Tester(`Operator.Math(`Ceil))
	Tester(`Operator.Math(`Conj))
	Tester(`Operator.Math(`Cos))
	Tester(`Operator.Math(`Cosh))
	Tester(`Operator.Math(`Covariance))
	Tester(`Operator.Math(`Cross))
	Tester(`Operator.Math(`Delta))
	Tester(`Operator.Math(`Dot))
	Tester(`Operator.Math(`Exp))
	Tester(`Operator.Math(`Floor))
	Tester(`Operator.Math(`Hypot))
	Tester(`Operator.Math(`Imag))
	Tester(`Operator.Math(`Log))
	Tester(`Operator.Math(`Log10))
	Tester(`Operator.Math(`Norm))
	Tester(`Operator.Math(`Real))
	Tester(`Operator.Math(`Relu))
	Tester(`Operator.Math(`Sigmoid))
	Tester(`Operator.Math(`Sin))
	Tester(`Operator.Math(`Sinh))
	Tester(`Operator.Math(`Sqrt))
	Tester(`Operator.Math(`Tan))
	Tester(`Operator.Math(`Tanh))
	Tester(`Operator.Math(`Unitstep))
}

TestCase('Operator#Assign()') {
	Operator.Unary(`-).Assign(String, &{$str.Each().Reverse().Join()})
	Operator.Binary(`+).Assign(String, Number, &{$str.Left($n)})
	Operator.Binary(`-).Assign(String, Number, &{$str.Right($n)})
	Tester(`(-'A quick brown fox jumps over the lazy dog.'))
	Tester(`('A quick brown fox jumps over the lazy dog.' + 10))
	Tester(`('A quick brown fox jumps over the lazy dog.' - 10))
}
