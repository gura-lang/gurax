#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	PrintPropSlots(Rational)
}

TestCase('Constructor') {
	Tester(`Rational())
	Tester(`Rational(3))
	Tester(`Rational(-3))
	Tester(`Rational(3, 4))
	Tester(`Rational(-3, 4))
	Tester(`Rational(3, -4))
	Tester(`Rational(-3, -4))
	Tester(`Rational(12, 8))
	Tester(`Rational(10000, 10000))
	Tester(`Rational(10000, 10001))
	Tester(`Rational(0x10000000, 0x10000000))
	Tester(`Rational(0x100000000, 0x10000000))
	Tester(`Rational(0x100000000, 0x100000000))
	Tester(`Rational(0x100000000, 0x100000000))
}

TestCase('Property access') {
	Tester(`Rational(3, 4)) {|rat|
		Tester(`rat.numer)
		Tester(`rat.denom)
	}
	Tester(`Rational(-3, 4)) {|rat|
		Tester(`rat.numer)
		Tester(`rat.denom)
	}
	Tester(`Rational(3, -4)) {|rat|
		Tester(`rat.numer)
		Tester(`rat.denom)
	}
	Tester(`Rational(-3, -4)) {|rat|
		Tester(`rat.numer)
		Tester(`rat.denom)
	}
}

/*
testcase {
	[
		`(4 / 7r + 3 / 10r)
		`(3 / 5r + 3 / 10r)
		`(2 / 3r - 3 / 5r)
		`(6 / 7r - 1 / 3r)
	].each {|test|
		printf('%s .. %s\n', test, test.eval()):nomap
	}
}
testcase {
	[
		`(rational(4, 7) + rational(3, 10))
		`(rational(3, 5) + rational(3, 10))
		`(rational(4, 7) + rational(2, 5))
		`(rational(1, 2) + rational(3, 7))
		`(rational(2, 7) + rational(3, 5))
		`(rational(2, 5) + rational(5, 9))
		`(rational(2, 5) + rational(3, 7))
		`(rational(3, 10) + rational(3, 5))
		`(rational(2, 3) + rational(3, 10))
		`(rational(3, 4) + rational(1, 5))
		`(rational(2, 3) - rational(3, 5))
		`(rational(6, 7) - rational(1, 3))
		`(rational(6, 7) - rational(1, 3))
		`(rational(8, 9) - rational(5, 6))
		`(rational(1, 2) - rational(1, 4))
		`(rational(2, 7) - rational(1, 5))
		`(rational(1, 2) - rational(1, 3))
		`(rational(1, 3) - rational(1, 5))
		`(rational(2, 9) - rational(1, 5))
		`(rational(3, 8) - rational(1, 5))
		`(rational(1, 4) - rational(1, 5))
		`(rational(1, 2) + rational(1, 3))
		`(rational(3, 10) - rational(3, 10))
		`(rational(2, 9) - rational(1, 5))
		`(rational(5, 6) - rational(2, 7))
		`(rational(1, 2) - rational(4, 9))
		`(rational(2, 5) - rational(2, 5))
		`(rational(3, 5) - rational(3, 5))
		`(rational(2, 3) - rational(5, 8))
		`(rational(1, 2) - rational(1, 4))
		`(rational(2, 3) * rational(1, 2))
		`(rational(1, 2) * 3)
		`(rational(10, 13) * rational(10, 3))
		`(rational(13, 8) * rational(10, 3))
		`(rational(5, 9) * rational(9, 2))
		`(2 * rational(11, 7))
		`(4 * rational(11, 14))
		`(rational(3, 7) / rational(3, 4))
		`(rational(5, 2) / rational(5, 7))
		`(5 / rational(14, 9))
		`(rational(6, 11) / rational(1, 4))
		`(rational(12, 5) / rational(15, 7))
		`(rational(4, 3) / rational(3, 2))
		`(rational(13, 7) / 2)
	].each {|test|
		printf('%s .. %s\n', test, test.eval()):nomap
	}
}
*/
