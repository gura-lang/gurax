#!/usr/bin/env gurax
import(util.tester) {*}

TestCase('Property') {
	Number.PrintPropSlots()
}

TestCase('Property Access') {
	test(a as Number) = {
		Tester(`a)
		Tester(`a.abs)
		Tester(`a.arg)
		Tester(`a.imag)
		Tester(`a.norm)
		Tester(`a.real)
	}
	test(3)
}

TestCase('Constructor') {
	Tester(`Number())
	Tester(`Number('0'))
	Tester(`Number('1234'))
	Tester(`Number('-1234'))
	Tester(`Number('1234.56'))
	Tester(`Number('-1234.56'))
	Tester(`Number('0b011101011'))
	Tester(`Number('01234'))
	Tester(`Number('-01234'))
	Tester(`Number('0x1234'))
	Tester(`Number('-0x1234'))
}

TestCase('Operator') {
	Tester(`(~3))
	Tester(`(-3))
	Tester(`(+3))
	Tester(`(3 + 5))
	Tester(`(3 & 5))
	Tester(`(3 <=> 5))
	Tester(`(3 <=> 3))
	Tester(`(5 <=> 3))
	Tester(`(3 / 5))
	Tester(`(3 / 0))
	Tester(`(3 == 5))
	Tester(`(3 == 3))
	Tester(`(5 == 3))
	Tester(`(3 >= 5))
	Tester(`(3 >= 3))
	Tester(`(5 >= 3))
	Tester(`(3 > 5))
	Tester(`(3 > 3))
	Tester(`(5 > 3))
	Tester(`(3 <= 5))
	Tester(`(3 <= 3))
	Tester(`(5 <= 3))
	Tester(`(3 < 5))
	Tester(`(3 < 3))
	Tester(`(5 < 3))
	Tester(`(3 * 5))
	Tester(`(3 - 5))
}

TestCase('Number.format@int / Number.format@float') {
	format@int = Number.format@int
	format@float = Number.format@float
	Tester(`(Number.format@int = '%d'))
	Tester(`(Number.format@int64 = '%lld'))
	Tester(`1234567891234)
	Tester(`(Number.format@float = '%g'))
	Tester(`123456789.123456789)
	Tester(`(Number.format@int = '%x'))
	Tester(`(Number.format@int64 = '%llx'))
	Tester(`1234567891234)
	Tester(`(Number.format@float = '%f'))
	Tester(`123456789.123456789)
	Tester(`(Number.format@float = '%.3f'))
	Tester(`123456789.123456789)
	Tester(`(Number.format@int = '%d'))
	Tester(`(Number.format@int = '%f'))
	Tester(`(Number.format@float = '%d'))
	Tester(`(Number.format@int = ''))
	Tester(`(Number.format@float = ''))
	Tester(`(Number.format@int = '%d %d'))
	Tester(`(Number.format@float = '%f %f'))
	Number.format@int = format@int
	Number.format@float = format@float
}

TestCase('Suffx f') {
	Tester(`0f)
	Tester(`1f)
	Tester(`123456f)
	Tester(`1.23456f)
}

TestCase('Number#sign') {
	Tester(`(0).sign)
	Tester(`(9).sign)
	Tester(`(-9).sign)
}

TestCase('Serialization') {
	[
		0, 1, -1, 12345, -12345, 3.14
	].Each {|num|
		buff = Binary()
		buff.Writer().Serialize(num)
		buff.Dump()
		numDec = buff.Reader().Deserialize()
		Printf('%.2f\n', numDec)
	}
}
