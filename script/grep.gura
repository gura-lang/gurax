#!/usr/bin/env gurax
import(re)
import(argopt)

//sys.stdout.setcodec(nil)

tmplHelp = tR'''
usage: grep.gura [options] pattern file ...
options:
  ${p.FormatHelp() + '\n'}
'''

argopt.Parser {|p|
	p.OptBool('ignore-case',	'i', 'ignore character cases')
	p.OptBool('line-number',	'n', 'print line number with output lines')
	p.OptBool('recursive',		'r', 'recursively search sub directories')
	p.OptInt('level',			'l', 'specify depth-level for recursive search', 'NUM')
	opt = nil
	try {[argv, opt] = p.Parse(sys.argv)} catch {|e| sys.cerr.Println(e.text)}
	if (!opt || argv.len < 1) {
		tmplHelp.Render(sys.cerr)
		sys.Exit(1)
	}
	pattern = cond(opt['ignore-case'], re.Pattern(argv[0]):icase, re.Pattern(argv[0]))
}
if (opt['recursive']) {
	level = opt['level']
	fileNames = path.Walk('', level, argv.Offset(1)*):file
} else {
	fileNames = path.Glob(argv.Offset(1)):list:file
}
fileNames.Each {|fileName|
	try {
		ReadLines(fileName).Grep(pattern) {|m, iLine|
			if (opt['line-number']) {
				Printf('%s:%d:%s', fileName, iLine + 1, m.source)
			} else {
				Printf('%s:%s', fileName, m.source)
			}
		}
	} catch {|e|
		Println('error while reading ', fileName)
	}
}
