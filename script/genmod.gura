#!/usr/bin/env gurax

//------------------------------------------------------------------------------
// Template of build.gura
//------------------------------------------------------------------------------
tmpl_build = R'''
#!/usr/bin/env gurax
import(util.modbuild) {Builder}

builder = Builder('${dotName}')
builder.pathNamesSrc = ['module-${ubarName}.cpp']
builder.Run()
'''T

//------------------------------------------------------------------------------
// Template of test-NAME.gura
//------------------------------------------------------------------------------
tmpl_test = R'''
#!/usr/bin/env gurax
import(util.tester) {*}
import(${dotName})

TestCase('Basic test') {
	Println(${dotName}.Test(3, 4))
}
'''T

//------------------------------------------------------------------------------
// Template of stdafx.h
//------------------------------------------------------------------------------
tmpl_stdafx = R'''
#include "${fileName_header}"
'''T

//------------------------------------------------------------------------------
// Template of module-NAME.h
//------------------------------------------------------------------------------
tmpl_header = R'''
//==============================================================================
// Gura module: ${dotName}
//==============================================================================
#ifndef ${incOnceMacroName}
#define ${incOnceMacroName}
#include <gurax.h>

Gurax_BeginModuleHeader(${ubarName})
Gurax_EndModuleHeader(${ubarName})

#endif
'''T

//------------------------------------------------------------------------------
// Template of module-NAME.cpp
//------------------------------------------------------------------------------
tmpl_source = R'''
//==============================================================================
// ${fileName_main}
//==============================================================================
#include "stdafx.h"

Gurax_BeginModule(${ubarName})

//------------------------------------------------------------------------------
// Implementation of function
//------------------------------------------------------------------------------
// re.Test()
Gurax_DeclareFunction(Test)
{
	Declare(VTYPE_Number, Flag::None);
	DeclareArg("num1", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("num2", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunction(Test)
{
	// Arguments
	ArgPicker args(argument);
	Double num1 = args.PickNumber<Double>();
	Double num2 = args.PickNumber<Double>();
	// Function body
	return new Value_Number(num1 + num2);
}

//------------------------------------------------------------------------------
// Entries
//------------------------------------------------------------------------------
Gurax_ModuleValidate()
{
	return true;
}

Gurax_ModulePrepare()
{
	// Assignment of function
	Assign(Gurax_CreateFunction(Test));
	return true;
}

Gurax_ModuleTerminate()
{
}

Gurax_EndModule(${ubarName})
'''T

strHelp = R'''
Generates a set of files to build a Gura binary module.
usage: genmod.gura module-name
'''

//------------------------------------------------------------------------------
// main
//------------------------------------------------------------------------------
main() = {
	if (sys.argv.len < 2) {
		sys.cerr.Print(strHelp)
		sys.Exit(1)
	}
	fields = path.FileName(sys.argv[1]).Split('.'):list
	dotName = fields.Join('.')
	ubarName = fields.Join('_')
	baseName = fields[-1]
	fileName_build = 'build.gura'
	fileName_test = 'test-' + ubarName + '.gura'
	fileName_stdafx = 'stdafx.h'
	fileName_header = 'module-' + ubarName + '.h'
	fileName_main = 'module-' + ubarName + '.cpp'
	incOnceMacroName = 'GURAX_MODULE_' + ubarName.Upper()  + '_H'
	if (fs.Exists([fileName_build, fileName_test, fileName_stdafx, fileName_header, fileName_main]).Or()) {
		sys.cerr.Println('file already exists')
		sys.Exit(1)
	}
	tmpl_build.Render(Open(fileName_build, 'w'))
	tmpl_test.Render(Open(fileName_test, 'w'))
	tmpl_stdafx.Render(Open(fileName_stdafx, 'w'))
	tmpl_header.Render(Open(fileName_header, 'w'))
	tmpl_source.Render(Open(fileName_main, 'w'))
	//fs.ChangeMode('a+x', fileName_build)
	//fs.ChangeMode('a+x', fileName_test)
	R'''
	Following files were generated.
	- Build Script: ${fileName_build}
	- Test Script:  ${fileName_test}
	- Source Files: ${fileName_stdafx}, ${fileName_header}, ${fileName_main}
	'''.RenderTemplate(sys.cout)
}

main()
