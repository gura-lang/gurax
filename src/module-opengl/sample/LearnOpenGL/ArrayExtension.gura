#!/usr/bin/env gurax

Array.Rotation(elemType as Symbol, angle as Number, ax as Number, ay as Number, az as Number):static = {
	axis = [ax, ay, az]
	[nx, ny, nz] = axis / math.Sqrt((axis * axis).Sum())
	cos = math.Cos(angle), sin = math.Sin(angle)
	Array(elemType,
		[[cos + nx * nx * (1 - cos), nx * ny * (1 - cos) - nz * sin, nz * nx * (1 - cos) + ny * sin, 0]
		 [nx * ny * (1 - cos) + nz * sin, cos + ny * ny * (1 - cos), ny * nz * (1 - cos) - nx * sin, 0]
		 [nz * nx * (1 - cos) - ny * sin, ny * nz * (1 - cos) + nx * sin, cos + nz * nz * (1 - cos), 0]
		 [0, 0, 0, 1]])
}

Array.Translation(elemType as Symbol, tx as Number, ty as Number, tz as Number):static = {
	Array(elemType,
		[[1, 0, 0, tx]
		 [0, 1, 0, ty]
		 [0, 0, 1, tz]
		 [0, 0, 0, 1]])
}

Array.Scale(elemType as Symbol, sx as Number, sy as Number, sz as Number):static = {
	Array(elemType,
		[[sx, 0, 0, 0]
		 [0, sy, 0, 0]
		 [0, 0, sz, 0]
		 [0, 0, 0, 1]])
}

Array.Ortho(elemType as Symbol, left as Number, right as Number, bottom as Number, top as Number, near as Number, far as Number):static = {
	Array(elemType,
		[[2 / (right - left), 0, 0, -(right + left) / (right - left)]
		 [0, 2 / (top - bottom), 0, -(top + bottom) / (top - bottom)]
		 [0, 0, -2 / (far - near), -(far + near) / (far - near)]
		 [0, 0, 0, 1]])
}

Array.Perspective(elemType as Symbol, fieldOfView as Number, aspect as Number, near as Number, far as Number):static = {
	top = near * math.Tan(fieldOfView / 2)
	right = top * aspect
	Array(elemType,
		[[near / right, 0, 0, 0]
		 [0, near / top, 0, 0]
		 [0, 0, -(far + near) / (far - near), -2 * far * near / (far - near)]
		 [0, 0, -1, 0]])
}

Array.LookAt(elemType as Symbol, px as Number, py as Number, pz as Number,
			tx as Number, ty as Number, tz as Number, ux as Number, uy as Number, uz as Number):static = {
	dVec = [px, py, pz] - [tx, ty, tz]
	[dx, dy, dz] = dVec / math.Sqrt((dVec * dVec).Sum())
	rVec = [uy * dz - uz * dy, uz * dx - ux * dz, ux * dy - uy * dx]
	[rx, ry, rz] = rVec / math.Sqrt((rVec * rVec).Sum())
	[ux, uy, uz] = [dy * rz - dz * ry, dz * rx - dx * rz, dx * ry - dy * rx]
	rtn = Array(elemType, [[rx, ry, rz, 0], [ux, uy, uz, 0], [dx, dy, dz, 0], [0, 0, 0, 1]])
	rtn |.| Array(elemType, [[1, 0, 0, -px], [0, 1, 0, -py], [0, 0, 1, -pz], [0, 0, 0, 1]])
}
