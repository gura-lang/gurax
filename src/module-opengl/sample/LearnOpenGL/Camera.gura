#!/usr/bin/env gurax
import(opengl) {*}
import(array_extension)
import(Util) {*}

// Default camera values
YAW         = -90.0f;
PITCH       =  0.0f;
SPEED       =  2.5f;
SENSITIVITY =  0.1f;
ZOOM        =  45.0f;

// An abstract camera class that processes input and calculates the corresponding Euler Angles, Vectors and Matrices for use in OpenGL
Camera = class {
	// camera Attributes
	Position[]:Number;
	Front[]:Number;
	Up[]:Number;
	Right[]:Number;
	WorldUp[]:Number;
	// euler Angles
	Yaw:Number;
	Pitch:Number;
	// camera options
	MovementSpeed:Number;
	MouseSensitivity:Number;
	Zoom:Number;
	__init__(position[]:Number = [0.0f, 0.0f, 0.0f], up[]:Number = [0.0f, 1.0f, 0.0f], yaw:Number = YAW, pitch:Number = PITCH) = {
		this.Front = [0.0f, 0.0f, -1.0f]
		this.MovementSpeed = SPEED
		this.MouseSensitivity = SENSITIVITY
		this.Zoom = ZOOM
		this.Position = position;
		this.WorldUp = up;
		this.Yaw = yaw;
		this.Pitch = pitch;
		this.updateCameraVectors();
	}
	// returns the view matrix calculated using Euler Angles and the LookAt Matrix
	GetViewMatrix() = Array.LookAt(`float, this.Position*, (this.Position + this.Front)*, this.Up*)
	// processes input received from any keyboard-like input system. Accepts input parameter in the form of camera defined ENUM (to abstract it from windowing systems)
	ProcessKeyboard(direction:Symbol, deltaTime:Number) = {
		velocity = this.MovementSpeed * deltaTime;
		if (direction == `FORWARD) {
			this.Position += this.Front * velocity;
		} elsif (direction == `BACKWARD) {
			this.Position -= this.Front * velocity;
		} elsif (direction == `LEFT) {
			this.Position -= this.Right * velocity;
		} elsif (direction == `RIGHT) {
			this.Position += this.Right * velocity;
		}
	}
	// processes input received from a mouse input system. Expects the offset value in both the x and y direction.
	ProcessMouseMovement(xoffset:Number, yoffset:Number, constrainPitch:Bool = true) = {
		xoffset *= this.MouseSensitivity;
		yoffset *= this.MouseSensitivity;

		this.Yaw   += xoffset;
		this.Pitch += yoffset;

		// make sure that when pitch is out of bounds, screen doesn't get flipped
		if (constrainPitch) {
			if (this.Pitch > 89.0f) {
				this.Pitch = 89.0f;
			}
			if (this.Pitch < -89.0f) {
				this.Pitch = -89.0f;
			}
		}

		// update Front, Right and Up Vectors using the updated Euler angles
		this.updateCameraVectors();
	}
	// processes input received from a mouse scroll-wheel event. Only requires input on the vertical wheel-axis
	ProcessMouseScroll(yoffset:Number) = {
		this.Zoom -= yoffset;
		if (this.Zoom < 1.0f) {
			this.Zoom = 1.0f;
		}
		if (this.Zoom > 45.0f) {
			this.Zoom = 45.0f;
		}
	}
	// calculates the front vector from the Camera's (updated) Euler Angles
	updateCameraVectors() = {
		// calculate the new Front vector
		x = math.Cos(Radians(this.Yaw)) * math.Cos(Radians(this.Pitch));
		y = math.Sin(Radians(this.Pitch));
		z = math.Sin(Radians(this.Yaw)) * math.Cos(Radians(this.Pitch));
		this.Front = Normalize([x, y, z]);
		// also re-calculate the Right and Up vector
		this.Right = Normalize(Cross(this.Front, this.WorldUp));  // normalize the vectors, because their length gets closer to 0 the more you look up or down which results in slower movement.
		this.Up    = Normalize(Cross(this.Right, this.Front));
	}
}
