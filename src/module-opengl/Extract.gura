#!/usr/bin/env gurax
import(re)

FuncInfo = struct {
	funcName as String
	args[] as String
	typeNameRtn as String
	Print() = Printf('%s(%s):%s\n', this.funcName, this.args.Join(', '), this.typeNameRtn)
}

DefineInfo = struct {
	varName as String
	Print() = Printf('AssignConst(%s);\n', this.varName)
}

SepInfo = struct {
	name as String
	Print() = Printf('//======== %s ========\n', this.name)
}

infoTbl = []
funcInfoMap = %{}
ReadLines('../../guest/glew-2.1.0/include/GL/glew.h') {|line|
	if (m = line.Match(r'^GLAPI\s+(.+)\s+GLAPIENTRY\s+(\w+)\s*\((.*)\)') || \
			line.Match(r'^typedef\s+(.+)\s+\(GLAPIENTRY\s*\*\s*(\w+)\)\s+\((.*)\)')) {
		typeNameRtn = m[1]
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list {|arg|
			fields = arg.Strip().SplitReg(r'\s+'):list
			if (fields.len < 2) {
				if (fields[0] != 'void') {
					sys.cerr.Printf('error [%s]\n', arg)
					//sys.Exit(1)
				}
				continue
			}
			typeName = fields.Head(fields.len - 1):*Replace('*', ' * '):*Strip().Join(' ')
			varName = fields.last
			if (varName.StartsWith('*')) {
				typeName += ' *'
				varName = varName.Mid(1)
			}
			Format('%s:%s', varName, typeName.Replace(' ', '_').Replace('*', 'p'))
		}
		funcInfo = FuncInfo(funcName, args, typeNameRtn)
		//infoTbl.Add(funcInfo)
		funcInfoMap[funcInfo.funcName] = funcInfo
		//Printf('%s(%s):%s\n', funcName, args.Join(', '), typeNameRtn)
	} elsif (m = line.Match(r'#define\s+(\w+)\s+(\d+)')) {
		varName = m[1]
		defineInfo = DefineInfo(varName)
		infoTbl.Add(defineInfo)
	} elsif (m = line.Match(r'GLEW_FUN_EXPORT\s+(\w+)\s+__glew(\w+)')) {
		funcName = m[1]
		funcNameExport = 'gl' + m[2]
		if (funcInfo = funcInfoMap.Get(funcName)) {
			funcInfo.funcName = funcNameExport
		} else {
			sys.cerr.Printf('Error: function name not found: %s\n', funcName)
		}
	} elsif (m = line.Match(r'^/\* -+\s+(\w+)\s+-+ \*/')) {
		infoTbl.last.IsInstanceOf(SepInfo) && infoTbl.Erase(-1)
		infoTbl.Add(SepInfo(m[1]))
	}
}
//infoTbl.Each {|item| item.Print(), Println()}
infoTbl.Each {|item| item.Print()}
