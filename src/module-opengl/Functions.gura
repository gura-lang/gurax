#!/usr/bin/env gurax
import(cbridge)

r = cbridge.Renderer()

//------------------------------------------------------------------------------
// Type Information
//------------------------------------------------------------------------------
r.DeclareType_Number('GLenum')
r.DeclareType_Number('GLbitfield')
r.DeclareType_Number('GLuint')
r.DeclareType_Number('GLint')
r.DeclareType_Number('GLsizei')
r.DeclareType_Number('GLbyte')
r.DeclareType_Number('GLshort')
r.DeclareType_Number('GLubyte')
r.DeclareType_Number('GLushort')
r.DeclareType_Number('GLulong')
r.DeclareType_Number('GLfloat')
r.DeclareType_Number('GLclampf')
r.DeclareType_Number('GLdouble')
r.DeclareType_Number('GLclampd')
r.DeclareType_Number('GLint64')
r.DeclareType_Number('GLuint64')
r.DeclareType_Number('GLsync')
r.DeclareType_Number('GLchar')
r.DeclareType_Number('GLintptr')
r.DeclareType_Number('GLsizeiptr')
//r.DeclareType(GLvoid)
r.DeclareType('GLboolean', 'GLboolean', 'Bool',
	codePicker = R'''
	${this.cType} ${varName} = static_cast<GLboolean>(args_gurax.PickBool());
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? static_cast<GLboolean>(args_gurax.PickBool()) : GL_FALSE;
	'''
	codePickerVec = R'''
	auto ${varName} = args_gurax.PickListT<GLboolean>([](Gurax::Value& value) {
		return value.GetBool()? GL_TRUE : GL_FALSE;
	});
	'''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Gurax::Value_Bool(!!rtn);
	''')

r.DeclareType('String_const_GLchar_p', 'const GLchar*', 'String',
	codePicker = R'''
	${this.cType} ${varName} = reinterpret_cast<${this.cType}>(args_gurax.PickString());
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? reinterpret_cast<${this.cType}>(args_gurax.PickString()) : nullptr;
	'''
	codePickerVec = ''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Gurax::Value_String(reinterpret_cast<const char*>(rtn));
	''')

r.DeclareType('String_const_GLubyte_p', 'const GLubyte*', 'String',
	codePicker = R'''
	${this.cType} ${varName} = reinterpret_cast<${this.cType}>(args_gurax.PickString());
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? reinterpret_cast<${this.cType}>(args_gurax.PickString()) : nullptr;
	'''
	codePickerVec = ''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Gurax::Value_String(reinterpret_cast<const char*>(rtn));
	''')

r.DeclareType_Pointer('const_GLboolean_p', 'const GLboolean*')
r.DeclareType_Pointer('const_GLenum_p', 'const GLenum*')
r.DeclareType_Pointer('const_GLbitfield_p', 'const GLbitfield*')
r.DeclareType_Pointer('const_GLuint_p', 'const GLuint*')
r.DeclareType_Pointer('const_GLint_p', 'const GLint*')
r.DeclareType_Pointer('const_GLsizei_p', 'const GLsizei*')
r.DeclareType_Pointer('const_GLbyte_p', 'const GLbyte*')
r.DeclareType_Pointer('const_GLshort_p', 'const GLshort*')
r.DeclareType_Pointer('const_GLubyte_p', 'const GLubyte*')
r.DeclareType_Pointer('const_GLushort_p', 'const GLushort*')
r.DeclareType_Pointer('const_GLulong_p', 'const GLulong*')
r.DeclareType_Pointer('const_GLfloat_p', 'const GLfloat*')
r.DeclareType_Pointer('const_GLclampf_p', 'const GLclampf*')
r.DeclareType_Pointer('const_GLdouble_p', 'const GLdouble*')
r.DeclareType_Pointer('const_GLclampd_p', 'const GLclampd*')
r.DeclareType_Pointer('const_GLint64_p', 'const GLint64*')
r.DeclareType_Pointer('const_GLuint64_p', 'const GLuint64*')
r.DeclareType_Pointer('const_GLsync_p', 'const GLsync*')
r.DeclareType_Pointer('const_GLchar_p', 'const GLchar*')
r.DeclareType_Pointer('const_GLintptr_p', 'const GLintptr*')
r.DeclareType_Pointer('const_GLsizeiptr_p', 'const GLsizeiptr*')
r.DeclareType_Pointer('const_GLvoid_p', 'const GLvoid*')

r.DeclareType_WritablePointer('GLboolean_p', 'GLboolean*')
r.DeclareType_WritablePointer('GLenum_p', 'GLenum*')
r.DeclareType_WritablePointer('GLbitfield_p', 'GLbitfield*')
r.DeclareType_WritablePointer('GLuint_p', 'GLuint*')
r.DeclareType_WritablePointer('GLint_p', 'GLint*')
r.DeclareType_WritablePointer('GLsizei_p', 'GLsizei*')
r.DeclareType_WritablePointer('GLbyte_p', 'GLbyte*')
r.DeclareType_WritablePointer('GLshort_p', 'GLshort*')
r.DeclareType_WritablePointer('GLubyte_p', 'GLubyte*')
r.DeclareType_WritablePointer('GLushort_p', 'GLushort*')
r.DeclareType_WritablePointer('GLulong_p', 'GLulong*')
r.DeclareType_WritablePointer('GLfloat_p', 'GLfloat*')
r.DeclareType_WritablePointer('GLclampf_p', 'GLclampf*')
r.DeclareType_WritablePointer('GLdouble_p', 'GLdouble*')
r.DeclareType_WritablePointer('GLclampd_p', 'GLclampd*')
r.DeclareType_WritablePointer('GLint64_p', 'GLint64*')
r.DeclareType_WritablePointer('GLuint64_p', 'GLuint64*')
r.DeclareType_WritablePointer('GLsync_p', 'GLsync*')
r.DeclareType_WritablePointer('GLchar_p', 'GLchar*')
r.DeclareType_WritablePointer('GLintptr_p', 'GLintptr*')
r.DeclareType_WritablePointer('GLsizeiptr_p', 'GLsizeiptr*')
r.DeclareType_WritablePointer('GLvoid_p', 'GLvoid*')

//------------------------------------------------------------------------------
// Function Registration: Context
//------------------------------------------------------------------------------
r.Register('opengl') {

//======== GLEW ========
glewInit():GLenum

glewIsSupported(name:const_char_p):GLboolean

glewGetExtension(name:const_char_p):GLboolean

glewGetErrorString(error:GLenum):String_const_GLubyte_p

glewGetString(name:GLenum):String_const_GLubyte_p

//======== GL_VERSION_1_1 ========
glAccum(op:GLenum, value:GLfloat)

glAlphaFunc(func:GLenum, ref:GLclampf):void

glAreTexturesResident(n:GLsizei, textures[]:GLuint, residences:GLboolean_p):GLboolean

glArrayElement(i:GLint):void

glBegin(mode:GLenum):void

glBindTexture(target:GLenum, texture:GLuint):void

glBitmap(width:GLsizei, height:GLsizei, xorig:GLfloat, yorig:GLfloat, xmove:GLfloat, ymove:GLfloat, bitmap:const_GLubyte_p):void

glBlendFunc(sfactor:GLenum, dfactor:GLenum):void

glCallList(list:GLuint):void

glCallLists(n:GLsizei, type:GLenum, lists:const_void_p):void

glClear(mask:GLbitfield):void

glClearAccum(red:GLfloat, green:GLfloat, blue:GLfloat, alpha:GLfloat):void

glClearColor(red:GLclampf, green:GLclampf, blue:GLclampf, alpha:GLclampf):void

glClearDepth(depth:GLclampd):void

glClearIndex(c:GLfloat):void

glClearStencil(s:GLint):void

glClipPlane(plane:GLenum, equation[4]:GLdouble):void

glColor3b(red:GLbyte, green:GLbyte, blue:GLbyte):void

glColor3bv(v[3]:GLbyte):void

glColor3d(red:GLdouble, green:GLdouble, blue:GLdouble):void

glColor3dv(v[3]:GLdouble):void

glColor3f(red:GLfloat, green:GLfloat, blue:GLfloat):void

glColor3fv(v[3]:GLfloat):void

glColor3i(red:GLint, green:GLint, blue:GLint):void

glColor3iv(v[3]:GLint):void

glColor3s(red:GLshort, green:GLshort, blue:GLshort):void

glColor3sv(v[3]:GLshort):void

glColor3ub(red:GLubyte, green:GLubyte, blue:GLubyte):void

glColor3ubv(v[3]:GLubyte):void

glColor3ui(red:GLuint, green:GLuint, blue:GLuint):void

glColor3uiv(v[3]:GLuint):void

glColor3us(red:GLushort, green:GLushort, blue:GLushort):void

glColor3usv(v[3]:GLushort):void

glColor4b(red:GLbyte, green:GLbyte, blue:GLbyte, alpha:GLbyte):void

glColor4bv(v[4]:GLbyte):void

glColor4d(red:GLdouble, green:GLdouble, blue:GLdouble, alpha:GLdouble):void

glColor4dv(v[4]:GLdouble):void

glColor4f(red:GLfloat, green:GLfloat, blue:GLfloat, alpha:GLfloat):void

glColor4fv(v[4]:GLfloat):void

glColor4i(red:GLint, green:GLint, blue:GLint, alpha:GLint):void

glColor4iv(v[4]:GLint):void

glColor4s(red:GLshort, green:GLshort, blue:GLshort, alpha:GLshort):void

glColor4sv(v[4]:GLshort):void

glColor4ub(red:GLubyte, green:GLubyte, blue:GLubyte, alpha:GLubyte):void

glColor4ubv(v[4]:GLubyte):void

glColor4ui(red:GLuint, green:GLuint, blue:GLuint, alpha:GLuint):void

glColor4uiv(v[4]:GLuint):void

glColor4us(red:GLushort, green:GLushort, blue:GLushort, alpha:GLushort):void

glColor4usv(v[4]:GLushort):void

glColorMask(red:GLboolean, green:GLboolean, blue:GLboolean, alpha:GLboolean):void

glColorMaterial(face:GLenum, mode:GLenum):void

glColorPointer(size:GLint, type:GLenum, stride:GLsizei, pointer:const_void_p):void

glCopyPixels(x:GLint, y:GLint, width:GLsizei, height:GLsizei, type:GLenum):void

glCopyTexImage1D(target:GLenum, level:GLint, internalFormat:GLenum, x:GLint, y:GLint, width:GLsizei, border:GLint):void

glCopyTexImage2D(target:GLenum, level:GLint, internalFormat:GLenum, x:GLint, y:GLint, width:GLsizei, height:GLsizei, border:GLint):void

glCopyTexSubImage1D(target:GLenum, level:GLint, xoffset:GLint, x:GLint, y:GLint, width:GLsizei):void

glCopyTexSubImage2D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, x:GLint, y:GLint, width:GLsizei, height:GLsizei):void

glCullFace(mode:GLenum):void

glDeleteLists(list:GLuint, range:GLsizei):void

glDeleteTextures(textures[]:GLuint):void = \
	R'''
	glDeleteTextures(textures.sizeT<GLsizei>(), textures);
	return Value::nil();
	'''

glDepthFunc(func:GLenum):void

glDepthMask(flag:GLboolean):void

glDepthRange(zNear:GLclampd, zFar:GLclampd):void

glDisable(cap:GLenum):void

glDisableClientState(array:GLenum):void

glDrawArrays(mode:GLenum, first:GLint, count:GLsizei):void

glDrawBuffer(mode:GLenum):void

glDrawElements(mode:GLenum, count:GLsizei, type:GLenum, indices:const_void_p):void

glDrawPixels(width:GLsizei, height:GLsizei, format:GLenum, type:GLenum, pixels:const_void_p):void

glEdgeFlag(flag:GLboolean):void

glEdgeFlagPointer(stride:GLsizei, pointer:const_void_p):void

glEdgeFlagv(flag[]:GLboolean):void

glEnable(cap:GLenum):void

glEnableClientState(array:GLenum):void

glEnd():void

glEndList():void

glEvalCoord1d(u:GLdouble):void

glEvalCoord1dv(u[1]:GLdouble):void

glEvalCoord1f(u:GLfloat):void

glEvalCoord1fv(u[1]:GLfloat):void

glEvalCoord2d(u:GLdouble, v:GLdouble):void

glEvalCoord2dv(u[2]:GLdouble):void

glEvalCoord2f(u:GLfloat, v:GLfloat):void

glEvalCoord2fv(u[2]:GLfloat):void

glEvalMesh1(mode:GLenum, i1:GLint, i2:GLint):void

glEvalMesh2(mode:GLenum, i1:GLint, i2:GLint, j1:GLint, j2:GLint):void

glEvalPoint1(i:GLint):void

glEvalPoint2(i:GLint, j:GLint):void

glFeedbackBuffer(size:GLsizei, type:GLenum, buffer:GLfloat_p):void

glFinish():void

glFlush():void

glFogf(pname:GLenum, param:GLfloat):void

glFogfv(pname:GLenum, params[]:GLfloat):void

glFogi(pname:GLenum, param:GLint):void

glFogiv(pname:GLenum, params[]:GLint):void

glFrontFace(mode:GLenum):void

glFrustum(left:GLdouble, right:GLdouble, bottom:GLdouble, top:GLdouble, zNear:GLdouble, zFar:GLdouble):void

glGenLists(range:GLsizei):GLuint

glGenTextures(n:GLsizei, textures:GLuint_p);

glGetBooleanv(pname:GLenum, params:GLboolean_p):void

glGetClipPlane(plane:GLenum, equation:GLdouble_p):void

glGetDoublev(pname:GLenum, params:GLdouble_p):void

glGetError():GLenum

glGetFloatv(pname:GLenum, params:GLfloat_p):void

glGetIntegerv(pname:GLenum, params:GLint_p):void

glGetLightfv(light:GLenum, pname:GLenum, params:GLfloat_p):void

glGetLightiv(light:GLenum, pname:GLenum, params:GLint_p):void

glGetMapdv(target:GLenum, query:GLenum, v:GLdouble_p):void

glGetMapfv(target:GLenum, query:GLenum, v:GLfloat_p):void

glGetMapiv(target:GLenum, query:GLenum, v:GLint_p):void

glGetMaterialfv(face:GLenum, pname:GLenum, params:GLfloat_p):void

glGetMaterialiv(face:GLenum, pname:GLenum, params:GLint_p):void

glGetPixelMapfv(map:GLenum, values:GLfloat_p):void

glGetPixelMapuiv(map:GLenum, values:GLuint_p):void

glGetPixelMapusv(map:GLenum, values:GLushort_p):void

//glGetPointerv(pname:GLenum, params[]:void_p):void

glGetPolygonStipple(mask:GLubyte_p):void

glGetString(name:GLenum):String_const_GLubyte_p

glGetTexEnvfv(target:GLenum, pname:GLenum, params:GLfloat_p):void

glGetTexEnviv(target:GLenum, pname:GLenum, params:GLint_p):void

glGetTexGendv(coord:GLenum, pname:GLenum, params:GLdouble_p):void

glGetTexGenfv(coord:GLenum, pname:GLenum, params:GLfloat_p):void

glGetTexGeniv(coord:GLenum, pname:GLenum, params:GLint_p):void

glGetTexImage(target:GLenum, level:GLint, format:GLenum, type:GLenum, pixels:void_p):void

glGetTexLevelParameterfv(target:GLenum, level:GLint, pname:GLenum, params:GLfloat_p):void

glGetTexLevelParameteriv(target:GLenum, level:GLint, pname:GLenum, params:GLint_p):void

glGetTexParameterfv(target:GLenum, pname:GLenum, params:GLfloat_p):void

glGetTexParameteriv(target:GLenum, pname:GLenum, params:GLint_p):void

glHint(target:GLenum, mode:GLenum):void

glIndexMask(mask:GLuint):void

glIndexPointer(type:GLenum, stride:GLsizei, pointer:const_void_p):void

glIndexd(c:GLdouble):void

glIndexdv(c[]:GLdouble):void

glIndexf(c:GLfloat):void

glIndexfv(c[]:GLfloat):void

glIndexi(c:GLint):void

glIndexiv(c[]:GLint):void

glIndexs(c:GLshort):void

glIndexsv(c[]:GLshort):void

glIndexub(c:GLubyte):void

glIndexubv(c[]:GLubyte):void

glInitNames():void

glInterleavedArrays(format:GLenum, stride:GLsizei, pointer:const_void_p):void

glIsEnabled(cap:GLenum):GLboolean

glIsList(list:GLuint):GLboolean

glIsTexture(texture:GLuint):GLboolean

glLightModelf(pname:GLenum, param:GLfloat):void

glLightModelfv(pname:GLenum, params[]:GLfloat):void

glLightModeli(pname:GLenum, param:GLint):void

glLightModeliv(pname:GLenum, params[]:GLint):void

glLightf(light:GLenum, pname:GLenum, param:GLfloat):void

glLightfv(light:GLenum, pname:GLenum, params[]:GLfloat):void

glLighti(light:GLenum, pname:GLenum, param:GLint):void

glLightiv(light:GLenum, pname:GLenum, params[]:GLint):void

glLineStipple(factor:GLint, pattern:GLushort):void

glLineWidth(width:GLfloat):void

glListBase(base:GLuint):void

glLoadIdentity():void

glLoadMatrixd(m[]:GLdouble):void

glLoadMatrixf(m[]:GLfloat):void

glLoadName(name:GLuint):void

glLogicOp(opcode:GLenum):void

glMap1d(target:GLenum, u1:GLdouble, u2:GLdouble, stride:GLint, order:GLint, points[]:GLdouble):void

glMap1f(target:GLenum, u1:GLfloat, u2:GLfloat, stride:GLint, order:GLint, points[]:GLfloat):void

glMap2d(target:GLenum, u1:GLdouble, u2:GLdouble, ustride:GLint, uorder:GLint, v1:GLdouble, v2:GLdouble, vstride:GLint, vorder:GLint, points[]:GLdouble):void

glMap2f(target:GLenum, u1:GLfloat, u2:GLfloat, ustride:GLint, uorder:GLint, v1:GLfloat, v2:GLfloat, vstride:GLint, vorder:GLint, points[]:GLfloat):void

glMapGrid1d(un:GLint, u1:GLdouble, u2:GLdouble):void

glMapGrid1f(un:GLint, u1:GLfloat, u2:GLfloat):void

glMapGrid2d(un:GLint, u1:GLdouble, u2:GLdouble, vn:GLint, v1:GLdouble, v2:GLdouble):void

glMapGrid2f(un:GLint, u1:GLfloat, u2:GLfloat, vn:GLint, v1:GLfloat, v2:GLfloat):void

glMaterialf(face:GLenum, pname:GLenum, param:GLfloat):void

glMaterialfv(face:GLenum, pname:GLenum, params[]:GLfloat):void

glMateriali(face:GLenum, pname:GLenum, param:GLint):void

glMaterialiv(face:GLenum, pname:GLenum, params[]:GLint):void

glMatrixMode(mode:GLenum):void

glMultMatrixd(m[]:GLdouble):void

glMultMatrixf(m[]:GLfloat):void

glNewList(list:GLuint, mode:GLenum):void

glNormal3b(nx:GLbyte, ny:GLbyte, nz:GLbyte):void

glNormal3bv(v[]:GLbyte):void

glNormal3d(nx:GLdouble, ny:GLdouble, nz:GLdouble):void

glNormal3dv(v[]:GLdouble):void

glNormal3f(nx:GLfloat, ny:GLfloat, nz:GLfloat):void

glNormal3fv(v[]:GLfloat):void

glNormal3i(nx:GLint, ny:GLint, nz:GLint):void

glNormal3iv(v[]:GLint):void

glNormal3s(nx:GLshort, ny:GLshort, nz:GLshort):void

glNormal3sv(v[]:GLshort):void

glNormalPointer(type:GLenum, stride:GLsizei, pointer:const_void_p):void

glOrtho(left:GLdouble, right:GLdouble, bottom:GLdouble, top:GLdouble, zNear:GLdouble, zFar:GLdouble):void

glPassThrough(token:GLfloat):void

glPixelMapfv(map:GLenum, mapsize:GLsizei, values[]:GLfloat):void

glPixelMapuiv(map:GLenum, mapsize:GLsizei, values[]:GLuint):void

glPixelMapusv(map:GLenum, mapsize:GLsizei, values[]:GLushort):void

glPixelStoref(pname:GLenum, param:GLfloat):void

glPixelStorei(pname:GLenum, param:GLint):void

glPixelTransferf(pname:GLenum, param:GLfloat):void

glPixelTransferi(pname:GLenum, param:GLint):void

glPixelZoom(xfactor:GLfloat, yfactor:GLfloat):void

glPointSize(size:GLfloat):void

glPolygonMode(face:GLenum, mode:GLenum):void

glPolygonOffset(factor:GLfloat, units:GLfloat):void

glPolygonStipple(mask[]:GLubyte):void

glPopAttrib():void

glPopClientAttrib():void

glPopMatrix():void

glPopName():void

glPrioritizeTextures(n:GLsizei, textures[]:GLuint, priorities[]:GLclampf):void

glPushAttrib(mask:GLbitfield):void

glPushClientAttrib(mask:GLbitfield):void

glPushMatrix():void

glPushName(name:GLuint):void

glRasterPos2d(x:GLdouble, y:GLdouble):void

glRasterPos2dv(v[]:GLdouble):void

glRasterPos2f(x:GLfloat, y:GLfloat):void

glRasterPos2fv(v[]:GLfloat):void

glRasterPos2i(x:GLint, y:GLint):void

glRasterPos2iv(v[]:GLint):void

glRasterPos2s(x:GLshort, y:GLshort):void

glRasterPos2sv(v[]:GLshort):void

glRasterPos3d(x:GLdouble, y:GLdouble, z:GLdouble):void

glRasterPos3dv(v[]:GLdouble):void

glRasterPos3f(x:GLfloat, y:GLfloat, z:GLfloat):void

glRasterPos3fv(v[]:GLfloat):void

glRasterPos3i(x:GLint, y:GLint, z:GLint):void

glRasterPos3iv(v[]:GLint):void

glRasterPos3s(x:GLshort, y:GLshort, z:GLshort):void

glRasterPos3sv(v[]:GLshort):void

glRasterPos4d(x:GLdouble, y:GLdouble, z:GLdouble, w:GLdouble):void

glRasterPos4dv(v[]:GLdouble):void

glRasterPos4f(x:GLfloat, y:GLfloat, z:GLfloat, w:GLfloat):void

glRasterPos4fv(v[]:GLfloat):void

glRasterPos4i(x:GLint, y:GLint, z:GLint, w:GLint):void

glRasterPos4iv(v[]:GLint):void

glRasterPos4s(x:GLshort, y:GLshort, z:GLshort, w:GLshort):void

glRasterPos4sv(v[]:GLshort):void

glReadBuffer(mode:GLenum):void

glReadPixels(x:GLint, y:GLint, width:GLsizei, height:GLsizei, format:GLenum, type:GLenum, pixels:void_p):void

glRectd(x1:GLdouble, y1:GLdouble, x2:GLdouble, y2:GLdouble):void

glRectdv(v1[]:GLdouble, v2[]:GLdouble):void

glRectf(x1:GLfloat, y1:GLfloat, x2:GLfloat, y2:GLfloat):void

glRectfv(v1[]:GLfloat, v2[]:GLfloat):void

glRecti(x1:GLint, y1:GLint, x2:GLint, y2:GLint):void

glRectiv(v1[]:GLint, v2[]:GLint):void

glRects(x1:GLshort, y1:GLshort, x2:GLshort, y2:GLshort):void

glRectsv(v1[]:GLshort, v2[]:GLshort):void

glRenderMode(mode:GLenum):GLint

glRotated(angle:GLdouble, x:GLdouble, y:GLdouble, z:GLdouble):void

glRotatef(angle:GLfloat, x:GLfloat, y:GLfloat, z:GLfloat):void

glScaled(x:GLdouble, y:GLdouble, z:GLdouble):void

glScalef(x:GLfloat, y:GLfloat, z:GLfloat):void

glScissor(x:GLint, y:GLint, width:GLsizei, height:GLsizei):void

glSelectBuffer(size:GLsizei, buffer:GLuint_p):void

glShadeModel(mode:GLenum):void

glStencilFunc(func:GLenum, ref:GLint, mask:GLuint):void

glStencilMask(mask:GLuint):void

glStencilOp(fail:GLenum, zfail:GLenum, zpass:GLenum):void

glTexCoord1d(s:GLdouble):void

glTexCoord1dv(v[]:GLdouble):void

glTexCoord1f(s:GLfloat):void

glTexCoord1fv(v[]:GLfloat):void

glTexCoord1i(s:GLint):void

glTexCoord1iv(v[]:GLint):void

glTexCoord1s(s:GLshort):void

glTexCoord1sv(v[]:GLshort):void

glTexCoord2d(s:GLdouble, t:GLdouble):void

glTexCoord2dv(v[]:GLdouble):void

glTexCoord2f(s:GLfloat, t:GLfloat):void

glTexCoord2fv(v[]:GLfloat):void

glTexCoord2i(s:GLint, t:GLint):void

glTexCoord2iv(v[]:GLint):void

glTexCoord2s(s:GLshort, t:GLshort):void

glTexCoord2sv(v[]:GLshort):void

glTexCoord3d(s:GLdouble, t:GLdouble, r:GLdouble):void

glTexCoord3dv(v[]:GLdouble):void

glTexCoord3f(s:GLfloat, t:GLfloat, r:GLfloat):void

glTexCoord3fv(v[]:GLfloat):void

glTexCoord3i(s:GLint, t:GLint, r:GLint):void

glTexCoord3iv(v[]:GLint):void

glTexCoord3s(s:GLshort, t:GLshort, r:GLshort):void

glTexCoord3sv(v[]:GLshort):void

glTexCoord4d(s:GLdouble, t:GLdouble, r:GLdouble, q:GLdouble):void

glTexCoord4dv(v[]:GLdouble):void

glTexCoord4f(s:GLfloat, t:GLfloat, r:GLfloat, q:GLfloat):void

glTexCoord4fv(v[]:GLfloat):void

glTexCoord4i(s:GLint, t:GLint, r:GLint, q:GLint):void

glTexCoord4iv(v[]:GLint):void

glTexCoord4s(s:GLshort, t:GLshort, r:GLshort, q:GLshort):void

glTexCoord4sv(v[]:GLshort):void

glTexCoordPointer(size:GLint, type:GLenum, stride:GLsizei, pointer:const_void_p):void

glTexEnvf(target:GLenum, pname:GLenum, param:GLfloat):void

glTexEnvfv(target:GLenum, pname:GLenum, params[]:GLfloat):void

glTexEnvi(target:GLenum, pname:GLenum, param:GLint):void

glTexEnviv(target:GLenum, pname:GLenum, params[]:GLint):void

glTexGend(coord:GLenum, pname:GLenum, param:GLdouble):void

glTexGendv(coord:GLenum, pname:GLenum, params[]:GLdouble):void

glTexGenf(coord:GLenum, pname:GLenum, param:GLfloat):void

glTexGenfv(coord:GLenum, pname:GLenum, params[]:GLfloat):void

glTexGeni(coord:GLenum, pname:GLenum, param:GLint):void

glTexGeniv(coord:GLenum, pname:GLenum, params[]:GLint):void

glTexImage1D(target:GLenum, level:GLint, internalformat:GLint, width:GLsizei, border:GLint, format:GLenum, type:GLenum, pixels:void_p):void

glTexImage2D(target:GLenum, level:GLint, internalformat:GLint, width:GLsizei, height:GLsizei, border:GLint, format:GLenum, type:GLenum, pixels:void_p):void

glTexParameterf(target:GLenum, pname:GLenum, param:GLfloat):void

glTexParameterfv(target:GLenum, pname:GLenum, params[]:GLfloat):void

glTexParameteri(target:GLenum, pname:GLenum, param:GLint):void

glTexParameteriv(target:GLenum, pname:GLenum, params[]:GLint):void

glTexSubImage1D(target:GLenum, level:GLint, xoffset:GLint, width:GLsizei, format:GLenum, type:GLenum, pixels:void_p):void

glTexSubImage2D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, width:GLsizei, height:GLsizei, format:GLenum, type:GLenum, pixels:void_p):void

glTranslated(x:GLdouble, y:GLdouble, z:GLdouble):void

glTranslatef(x:GLfloat, y:GLfloat, z:GLfloat):void

glVertex2d(x:GLdouble, y:GLdouble):void

glVertex2dv(v[2]:GLdouble):void

glVertex2f(x:GLfloat, y:GLfloat):void

glVertex2fv(v[2]:GLfloat):void

glVertex2i(x:GLint, y:GLint):void

glVertex2iv(v[2]:GLint):void

glVertex2s(x:GLshort, y:GLshort):void

glVertex2sv(v[2]:GLshort):void

glVertex3d(x:GLdouble, y:GLdouble, z:GLdouble):void

glVertex3dv(v[3]:GLdouble):void

glVertex3f(x:GLfloat, y:GLfloat, z:GLfloat):void

glVertex3fv(v[3]:GLfloat):void

glVertex3i(x:GLint, y:GLint, z:GLint):void

glVertex3iv(v[3]:GLint):void

glVertex3s(x:GLshort, y:GLshort, z:GLshort):void

glVertex3sv(v[3]:GLshort):void

glVertex4d(x:GLdouble, y:GLdouble, z:GLdouble, w:GLdouble):void

glVertex4dv(v[4]:GLdouble):void

glVertex4f(x:GLfloat, y:GLfloat, z:GLfloat, w:GLfloat):void

glVertex4fv(v[4]:GLfloat):void

glVertex4i(x:GLint, y:GLint, z:GLint, w:GLint):void

glVertex4iv(v[4]:GLint):void

glVertex4s(x:GLshort, y:GLshort, z:GLshort, w:GLshort):void

glVertex4sv(v[4]:GLshort):void

glVertexPointer(size:GLint, type:GLenum, stride:GLsizei, pointer:const_void_p):void

glViewport(x:GLint, y:GLint, width:GLsizei, height:GLsizei):void

//======== GL_VERSION_1_2 ========

glCopyTexSubImage3D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, zoffset:GLint, x:GLint, y:GLint, width:GLsizei, height:GLsizei):void

glDrawRangeElements(mode:GLenum, start:GLuint, end:GLuint, count:GLsizei, type:GLenum, indices:const_void_p):void

glTexImage3D(target:GLenum, level:GLint, internalFormat:GLint, width:GLsizei, height:GLsizei, depth:GLsizei, border:GLint, format:GLenum, type:GLenum, pixels:const_void_p):void

glTexSubImage3D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, zoffset:GLint, width:GLsizei, height:GLsizei, depth:GLsizei, format:GLenum, type:GLenum, pixels:const_void_p):void

//======== GL_VERSION_1_3 ========

glActiveTexture(texture:GLenum):void

glClientActiveTexture(texture:GLenum):void

glCompressedTexImage1D(target:GLenum, level:GLint, internalformat:GLenum, width:GLsizei, border:GLint, imageSize:GLsizei, data:const_void_p):void

glCompressedTexImage2D(target:GLenum, level:GLint, internalformat:GLenum, width:GLsizei, height:GLsizei, border:GLint, imageSize:GLsizei, data:const_void_p):void

glCompressedTexImage3D(target:GLenum, level:GLint, internalformat:GLenum, width:GLsizei, height:GLsizei, depth:GLsizei, border:GLint, imageSize:GLsizei, data:const_void_p):void

glCompressedTexSubImage1D(target:GLenum, level:GLint, xoffset:GLint, width:GLsizei, format:GLenum, imageSize:GLsizei, data:const_void_p):void

glCompressedTexSubImage2D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, width:GLsizei, height:GLsizei, format:GLenum, imageSize:GLsizei, data:const_void_p):void

glCompressedTexSubImage3D(target:GLenum, level:GLint, xoffset:GLint, yoffset:GLint, zoffset:GLint, width:GLsizei, height:GLsizei, depth:GLsizei, format:GLenum, imageSize:GLsizei, data:const_void_p):void

glGetCompressedTexImage(target:GLenum, lod:GLint, img:void_p):void

glLoadTransposeMatrixd(m[16]:GLdouble):void

glLoadTransposeMatrixf(m[16]:GLfloat):void

glMultTransposeMatrixd(m[16]:GLdouble):void

glMultTransposeMatrixf(m[16]:GLfloat):void

glMultiTexCoord1d(target:GLenum, s:GLdouble):void

glMultiTexCoord1dv(target:GLenum, v[]:GLdouble):void

glMultiTexCoord1f(target:GLenum, s:GLfloat):void

glMultiTexCoord1fv(target:GLenum, v[]:GLfloat):void

glMultiTexCoord1i(target:GLenum, s:GLint):void

glMultiTexCoord1iv(target:GLenum, v[]:GLint):void

glMultiTexCoord1s(target:GLenum, s:GLshort):void

glMultiTexCoord1sv(target:GLenum, v[]:GLshort):void

glMultiTexCoord2d(target:GLenum, s:GLdouble, t:GLdouble):void

glMultiTexCoord2dv(target:GLenum, v[]:GLdouble):void

glMultiTexCoord2f(target:GLenum, s:GLfloat, t:GLfloat):void

glMultiTexCoord2fv(target:GLenum, v[]:GLfloat):void

glMultiTexCoord2i(target:GLenum, s:GLint, t:GLint):void

glMultiTexCoord2iv(target:GLenum, v[]:GLint):void

glMultiTexCoord2s(target:GLenum, s:GLshort, t:GLshort):void

glMultiTexCoord2sv(target:GLenum, v[]:GLshort):void

glMultiTexCoord3d(target:GLenum, s:GLdouble, t:GLdouble, r:GLdouble):void

glMultiTexCoord3dv(target:GLenum, v[]:GLdouble):void

glMultiTexCoord3f(target:GLenum, s:GLfloat, t:GLfloat, r:GLfloat):void

glMultiTexCoord3fv(target:GLenum, v[]:GLfloat):void

glMultiTexCoord3i(target:GLenum, s:GLint, t:GLint, r:GLint):void

glMultiTexCoord3iv(target:GLenum, v[]:GLint):void

glMultiTexCoord3s(target:GLenum, s:GLshort, t:GLshort, r:GLshort):void

glMultiTexCoord3sv(target:GLenum, v[]:GLshort):void

glMultiTexCoord4d(target:GLenum, s:GLdouble, t:GLdouble, r:GLdouble, q:GLdouble):void

glMultiTexCoord4dv(target:GLenum, v[]:GLdouble):void

glMultiTexCoord4f(target:GLenum, s:GLfloat, t:GLfloat, r:GLfloat, q:GLfloat):void

glMultiTexCoord4fv(target:GLenum, v[]:GLfloat):void

glMultiTexCoord4i(target:GLenum, s:GLint, t:GLint, r:GLint, q:GLint):void

glMultiTexCoord4iv(target:GLenum, v[]:GLint):void

glMultiTexCoord4s(target:GLenum, s:GLshort, t:GLshort, r:GLshort, q:GLshort):void

glMultiTexCoord4sv(target:GLenum, v[]:GLshort):void

glSampleCoverage(value:GLclampf, invert:GLboolean):void

//======== GL_VERSION_1_4 ========

glBlendColor(red:GLclampf, green:GLclampf, blue:GLclampf, alpha:GLclampf):void

glBlendEquation(mode:GLenum):void

glBlendFuncSeparate(sfactorRGB:GLenum, dfactorRGB:GLenum, sfactorAlpha:GLenum, dfactorAlpha:GLenum):void

glFogCoordPointer(type:GLenum, stride:GLsizei, pointer:const_void_p):void

glFogCoordd(coord:GLdouble):void

glFogCoorddv(coord[]:GLdouble):void

glFogCoordf(coord:GLfloat):void

glFogCoordfv(coord[]:GLfloat):void

glMultiDrawArrays(mode:GLenum, first[]:GLint, count[]:GLsizei, drawcount:GLsizei):void

glMultiDrawElements(mode:GLenum, count[]:GLsizei, type:GLenum, indices[]:const_void_p):void = \
	R'''
	GLsizei drawcount = count.sizeT<GLsizei>();
	if (drawcount != indices.sizeT<GLsizei>()) {
		Error::Issue(ErrorType::RangeError, "count and indices must have the same number of elements");
		return Value::nil();
	}
	glMultiDrawElements(mode, count, type, indices, drawcount);
	return Value::nil();
	'''

glPointParameterf(pname:GLenum, param:GLfloat):void

glPointParameterfv(pname:GLenum, params[]:GLfloat):void

glPointParameteri(pname:GLenum, param:GLint):void

glPointParameteriv(pname:GLenum, params[]:GLint):void

glSecondaryColor3b(red:GLbyte, green:GLbyte, blue:GLbyte):void

glSecondaryColor3bv(v[]:GLbyte):void

glSecondaryColor3d(red:GLdouble, green:GLdouble, blue:GLdouble):void

glSecondaryColor3dv(v[]:GLdouble):void

glSecondaryColor3f(red:GLfloat, green:GLfloat, blue:GLfloat):void

glSecondaryColor3fv(v[]:GLfloat):void

glSecondaryColor3i(red:GLint, green:GLint, blue:GLint):void

glSecondaryColor3iv(v[]:GLint):void

glSecondaryColor3s(red:GLshort, green:GLshort, blue:GLshort):void

glSecondaryColor3sv(v[]:GLshort):void

glSecondaryColor3ub(red:GLubyte, green:GLubyte, blue:GLubyte):void

glSecondaryColor3ubv(v[]:GLubyte):void

glSecondaryColor3ui(red:GLuint, green:GLuint, blue:GLuint):void

glSecondaryColor3uiv(v[]:GLuint):void

glSecondaryColor3us(red:GLushort, green:GLushort, blue:GLushort):void

glSecondaryColor3usv(v[]:GLushort):void

glSecondaryColorPointer(size:GLint, type:GLenum, stride:GLsizei, pointer:const_void_p):void

glWindowPos2d(x:GLdouble, y:GLdouble):void

glWindowPos2dv(p[]:GLdouble):void

glWindowPos2f(x:GLfloat, y:GLfloat):void

glWindowPos2fv(p[]:GLfloat):void

glWindowPos2i(x:GLint, y:GLint):void

glWindowPos2iv(p[]:GLint):void

glWindowPos2s(x:GLshort, y:GLshort):void

glWindowPos2sv(p[]:GLshort):void

glWindowPos3d(x:GLdouble, y:GLdouble, z:GLdouble):void

glWindowPos3dv(p[]:GLdouble):void

glWindowPos3f(x:GLfloat, y:GLfloat, z:GLfloat):void

glWindowPos3fv(p[]:GLfloat):void

glWindowPos3i(x:GLint, y:GLint, z:GLint):void

glWindowPos3iv(p[]:GLint):void

glWindowPos3s(x:GLshort, y:GLshort, z:GLshort):void

glWindowPos3sv(p[]:GLshort):void

//======== GL_VERSION_1_5 ========

glBeginQuery(target:GLenum, id:GLuint):void

glBindBuffer(target:GLenum, buffer:GLuint):void

glBufferData(target:GLenum, size:GLsizeiptr, data:const_void_p, usage:GLenum):void

glBufferSubData(target:GLenum, offset:GLintptr, size:GLsizeiptr, data:const_void_p):void

glDeleteBuffers(n:GLsizei, buffers[]:GLuint):void

glDeleteQueries(n:GLsizei, ids[]:GLuint):void

glEndQuery(target:GLenum):void

glGenBuffers(n:GLsizei, buffers:GLuint_p):void

glGenQueries(n:GLsizei, ids:GLuint_p):void

glGetBufferParameteriv(target:GLenum, pname:GLenum, params:GLint_p):void

//glGetBufferPointerv(target:GLenum, pname:GLenum, params[]:void_p):void

glGetBufferSubData(target:GLenum, offset:GLintptr, size:GLsizeiptr, data:void_p):void

glGetQueryObjectiv(id:GLuint, pname:GLenum, params:GLint_p):void

glGetQueryObjectuiv(id:GLuint, pname:GLenum, params:GLuint_p):void

glGetQueryiv(target:GLenum, pname:GLenum, params:GLint_p):void

glIsBuffer(buffer:GLuint):GLboolean

glIsQuery(id:GLuint):GLboolean

//glMapBuffer(target:GLenum, access:GLenum):void*

glUnmapBuffer(target:GLenum):GLboolean

//======== GL_VERSION_2_0 ========

glAttachShader(program:GLuint, shader:GLuint):void

glBindAttribLocation(program:GLuint, index:GLuint, name:String_const_GLchar_p):void

glBlendEquationSeparate(modeRGB:GLenum, modeAlpha:GLenum):void

glCompileShader(shader:GLuint):void

glCreateProgram():GLuint

glCreateShader(type:GLenum):GLuint

glDeleteProgram(program:GLuint):void

glDeleteShader(shader:GLuint):void

glDetachShader(program:GLuint, shader:GLuint):void

glDisableVertexAttribArray(index:GLuint):void

glDrawBuffers(n:GLsizei, bufs[]:GLenum):void

glEnableVertexAttribArray(index:GLuint):void

glGetActiveAttrib(program:GLuint, index:GLuint, maxLength:GLsizei, length:GLsizei_p, size:GLint_p, type:GLenum_p, name:GLchar_p):void

glGetActiveUniform(program:GLuint, index:GLuint, maxLength:GLsizei, length:GLsizei_p, size:GLint_p, type:GLenum_p, name:GLchar_p):void

glGetAttachedShaders(program:GLuint, maxCount:GLsizei, count:GLsizei_p, shaders:GLuint_p):void

glGetAttribLocation(program:GLuint, name:String_const_GLchar_p):GLint

glGetProgramInfoLog(program:GLuint, bufSize:GLsizei, length:GLsizei_p, infoLog:GLchar_p):void

glGetProgramiv(program:GLuint, pname:GLenum, param:GLint_p):void

glGetShaderInfoLog(shader:GLuint, bufSize:GLsizei, length:GLsizei_p, infoLog:GLchar_p):void

glGetShaderSource(obj:GLuint, maxLength:GLsizei, length:GLsizei_p, source:GLchar_p):void

glGetShaderiv(shader:GLuint, pname:GLenum, param:GLint_p):void

glGetUniformLocation(program:GLuint, name:String_const_GLchar_p):GLint

glGetUniformfv(program:GLuint, location:GLint, params:GLfloat_p):void

glGetUniformiv(program:GLuint, location:GLint, params:GLint_p):void

//glGetVertexAttribPointerv(index:GLuint, pname:GLenum, pointer:void_p__p):void

glGetVertexAttribdv(index:GLuint, pname:GLenum, params:GLdouble_p):void

glGetVertexAttribfv(index:GLuint, pname:GLenum, params:GLfloat_p):void

glGetVertexAttribiv(index:GLuint, pname:GLenum, params:GLint_p):void

glIsProgram(program:GLuint):GLboolean

glIsShader(shader:GLuint):GLboolean

glLinkProgram(program:GLuint):void

//glShaderSource(shader:GLuint, count:GLsizei, string:const_GLchar_p_const_p, length:GLint_p):void

glStencilFuncSeparate(frontfunc:GLenum, backfunc:GLenum, ref:GLint, mask:GLuint):void

glStencilMaskSeparate(face:GLenum, mask:GLuint):void

glStencilOpSeparate(face:GLenum, sfail:GLenum, dpfail:GLenum, dppass:GLenum):void

glUniform1f(location:GLint, v0:GLfloat):void

glUniform1fv(location:GLint, count:GLsizei, value[]:GLfloat):void

glUniform1i(location:GLint, v0:GLint):void

glUniform1iv(location:GLint, count:GLsizei, value[]:GLint):void

glUniform2f(location:GLint, v0:GLfloat, v1:GLfloat):void

glUniform2fv(location:GLint, count:GLsizei, value[]:GLfloat):void

glUniform2i(location:GLint, v0:GLint, v1:GLint):void

glUniform2iv(location:GLint, count:GLsizei, value[]:GLint):void

glUniform3f(location:GLint, v0:GLfloat, v1:GLfloat, v2:GLfloat):void

glUniform3fv(location:GLint, count:GLsizei, value[]:GLfloat):void

glUniform3i(location:GLint, v0:GLint, v1:GLint, v2:GLint):void

glUniform3iv(location:GLint, count:GLsizei, value[]:GLint):void

glUniform4f(location:GLint, v0:GLfloat, v1:GLfloat, v2:GLfloat, v3:GLfloat):void

glUniform4fv(location:GLint, count:GLsizei, value[]:GLfloat):void

glUniform4i(location:GLint, v0:GLint, v1:GLint, v2:GLint, v3:GLint):void

glUniform4iv(location:GLint, count:GLsizei, value[]:GLint):void

glUniformMatrix2fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix3fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix4fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUseProgram(program:GLuint):void

glValidateProgram(program:GLuint):void

glVertexAttrib1d(index:GLuint, x:GLdouble):void

glVertexAttrib1dv(index:GLuint, v[]:GLdouble):void

glVertexAttrib1f(index:GLuint, x:GLfloat):void

glVertexAttrib1fv(index:GLuint, v[]:GLfloat):void

glVertexAttrib1s(index:GLuint, x:GLshort):void

glVertexAttrib1sv(index:GLuint, v[]:GLshort):void

glVertexAttrib2d(index:GLuint, x:GLdouble, y:GLdouble):void

glVertexAttrib2dv(index:GLuint, v[]:GLdouble):void

glVertexAttrib2f(index:GLuint, x:GLfloat, y:GLfloat):void

glVertexAttrib2fv(index:GLuint, v[]:GLfloat):void

glVertexAttrib2s(index:GLuint, x:GLshort, y:GLshort):void

glVertexAttrib2sv(index:GLuint, v[]:GLshort):void

glVertexAttrib3d(index:GLuint, x:GLdouble, y:GLdouble, z:GLdouble):void

glVertexAttrib3dv(index:GLuint, v[]:GLdouble):void

glVertexAttrib3f(index:GLuint, x:GLfloat, y:GLfloat, z:GLfloat):void

glVertexAttrib3fv(index:GLuint, v[]:GLfloat):void

glVertexAttrib3s(index:GLuint, x:GLshort, y:GLshort, z:GLshort):void

glVertexAttrib3sv(index:GLuint, v[]:GLshort):void

glVertexAttrib4Nbv(index:GLuint, v[]:GLbyte):void

glVertexAttrib4Niv(index:GLuint, v[]:GLint):void

glVertexAttrib4Nsv(index:GLuint, v[]:GLshort):void

glVertexAttrib4Nub(index:GLuint, x:GLubyte, y:GLubyte, z:GLubyte, w:GLubyte):void

glVertexAttrib4Nubv(index:GLuint, v[]:GLubyte):void

glVertexAttrib4Nuiv(index:GLuint, v[]:GLuint):void

glVertexAttrib4Nusv(index:GLuint, v[]:GLushort):void

glVertexAttrib4bv(index:GLuint, v[]:GLbyte):void

glVertexAttrib4d(index:GLuint, x:GLdouble, y:GLdouble, z:GLdouble, w:GLdouble):void

glVertexAttrib4dv(index:GLuint, v[]:GLdouble):void

glVertexAttrib4f(index:GLuint, x:GLfloat, y:GLfloat, z:GLfloat, w:GLfloat):void

glVertexAttrib4fv(index:GLuint, v[]:GLfloat):void

glVertexAttrib4iv(index:GLuint, v[]:GLint):void

glVertexAttrib4s(index:GLuint, x:GLshort, y:GLshort, z:GLshort, w:GLshort):void

glVertexAttrib4sv(index:GLuint, v[]:GLshort):void

glVertexAttrib4ubv(index:GLuint, v[]:GLubyte):void

glVertexAttrib4uiv(index:GLuint, v[]:GLuint):void

glVertexAttrib4usv(index:GLuint, v[]:GLushort):void

glVertexAttribPointer(index:GLuint, size:GLint, type:GLenum, normalized:GLboolean, stride:GLsizei, pointer:const_void_p):void

//======== GL_VERSION_2_1 ========

glUniformMatrix2x3fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix2x4fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix3x2fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix3x4fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix4x2fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

glUniformMatrix4x3fv(location:GLint, count:GLsizei, transpose:GLboolean, value[]:GLfloat):void

//======== GL_VERSION_3_0 ========

glBeginConditionalRender(id:GLuint, mode:GLenum):void

glBeginTransformFeedback(primitiveMode:GLenum):void

glBindFragDataLocation(program:GLuint, colorNumber:GLuint, name:String_const_GLchar_p):void

glClampColor(target:GLenum, clamp:GLenum):void

glClearBufferfi(buffer:GLenum, drawBuffer:GLint, depth:GLfloat, stencil:GLint):void

glClearBufferfv(buffer:GLenum, drawBuffer:GLint, value[]:GLfloat):void

glClearBufferiv(buffer:GLenum, drawBuffer:GLint, value[]:GLint):void

glClearBufferuiv(buffer:GLenum, drawBuffer:GLint, value[]:GLuint):void

glColorMaski(buf:GLuint, red:GLboolean, green:GLboolean, blue:GLboolean, alpha:GLboolean):void

glDisablei(cap:GLenum, index:GLuint):void

glEnablei(cap:GLenum, index:GLuint):void

glEndConditionalRender():void

glEndTransformFeedback():void

glGetBooleani_v(pname:GLenum, index:GLuint, data:GLboolean_p):void

glGetFragDataLocation(program:GLuint, name:String_const_GLchar_p):GLint

glGetStringi(name:GLenum, index:GLuint):String_const_GLubyte_p

glGetTexParameterIiv(target:GLenum, pname:GLenum, params:GLint_p):void

glGetTexParameterIuiv(target:GLenum, pname:GLenum, params:GLuint_p):void

glGetTransformFeedbackVarying(program:GLuint, index:GLuint, bufSize:GLsizei, length:GLsizei_p, size:GLsizei_p, type:GLenum_p, name:GLchar_p):void

glGetUniformuiv(program:GLuint, location:GLint, params:GLuint_p):void

glGetVertexAttribIiv(index:GLuint, pname:GLenum, params:GLint_p):void

glGetVertexAttribIuiv(index:GLuint, pname:GLenum, params:GLuint_p):void

glIsEnabledi(cap:GLenum, index:GLuint):GLboolean

glTexParameterIiv(target:GLenum, pname:GLenum, params[]:GLint):void

glTexParameterIuiv(target:GLenum, pname:GLenum, params[]:GLuint):void

//glTransformFeedbackVaryings(program:GLuint, count:GLsizei, varyings:const_GLchar_p_const_p, bufferMode:GLenum):void

glUniform1ui(location:GLint, v0:GLuint):void

glUniform1uiv(location:GLint, count:GLsizei, value[]:GLuint):void

glUniform2ui(location:GLint, v0:GLuint, v1:GLuint):void

glUniform2uiv(location:GLint, count:GLsizei, value[]:GLuint):void

glUniform3ui(location:GLint, v0:GLuint, v1:GLuint, v2:GLuint):void

glUniform3uiv(location:GLint, count:GLsizei, value[]:GLuint):void

glUniform4ui(location:GLint, v0:GLuint, v1:GLuint, v2:GLuint, v3:GLuint):void

glUniform4uiv(location:GLint, count:GLsizei, value[]:GLuint):void

glVertexAttribI1i(index:GLuint, v0:GLint):void

glVertexAttribI1iv(index:GLuint, v0[]:GLint):void

glVertexAttribI1ui(index:GLuint, v0:GLuint):void

glVertexAttribI1uiv(index:GLuint, v0[]:GLuint):void

glVertexAttribI2i(index:GLuint, v0:GLint, v1:GLint):void

glVertexAttribI2iv(index:GLuint, v0[]:GLint):void

glVertexAttribI2ui(index:GLuint, v0:GLuint, v1:GLuint):void

glVertexAttribI2uiv(index:GLuint, v0[]:GLuint):void

glVertexAttribI3i(index:GLuint, v0:GLint, v1:GLint, v2:GLint):void

glVertexAttribI3iv(index:GLuint, v0[]:GLint):void

glVertexAttribI3ui(index:GLuint, v0:GLuint, v1:GLuint, v2:GLuint):void

glVertexAttribI3uiv(index:GLuint, v0[]:GLuint):void

glVertexAttribI4bv(index:GLuint, v0[]:GLbyte):void

glVertexAttribI4i(index:GLuint, v0:GLint, v1:GLint, v2:GLint, v3:GLint):void

glVertexAttribI4iv(index:GLuint, v0[]:GLint):void

glVertexAttribI4sv(index:GLuint, v0[]:GLshort):void

glVertexAttribI4ubv(index:GLuint, v0[]:GLubyte):void

glVertexAttribI4ui(index:GLuint, v0:GLuint, v1:GLuint, v2:GLuint, v3:GLuint):void

glVertexAttribI4uiv(index:GLuint, v0[]:GLuint):void

glVertexAttribI4usv(index:GLuint, v0[]:GLushort):void

glVertexAttribIPointer(index:GLuint, size:GLint, type:GLenum, stride:GLsizei, pointer:const_void_p):void

//======== GL_VERSION_3_1 ========

glDrawArraysInstanced(mode:GLenum, first:GLint, count:GLsizei, primcount:GLsizei):void

glDrawElementsInstanced(mode:GLenum, count:GLsizei, type:GLenum, indices:const_void_p, primcount:GLsizei):void

glPrimitiveRestartIndex(buffer:GLuint):void

glTexBuffer(target:GLenum, internalFormat:GLenum, buffer:GLuint):void

//======== GL_VERSION_3_2 ========

glFramebufferTexture(target:GLenum, attachment:GLenum, texture:GLuint, level:GLint):void

glGetBufferParameteri64v(target:GLenum, value:GLenum, data:GLint64_p):void

glGetInteger64i_v(pname:GLenum, index:GLuint, data:GLint64_p):void

//======== GL_VERSION_3_3 ========

glVertexAttribDivisor(index:GLuint, divisor:GLuint):void

//======== GL_VERSION_4_0 ========

glBlendEquationSeparatei(buf:GLuint, modeRGB:GLenum, modeAlpha:GLenum):void

glBlendEquationi(buf:GLuint, mode:GLenum):void

glBlendFuncSeparatei(buf:GLuint, srcRGB:GLenum, dstRGB:GLenum, srcAlpha:GLenum, dstAlpha:GLenum):void

glBlendFunci(buf:GLuint, src:GLenum, dst:GLenum):void

glMinSampleShading(value:GLclampf):void

//======== GL_VERSION_4_5 ========

glGetGraphicsResetStatus():GLenum

glGetnCompressedTexImage(target:GLenum, lod:GLint, bufSize:GLsizei, pixels:GLvoid_p):void

glGetnTexImage(tex:GLenum, level:GLint, format:GLenum, type:GLenum, bufSize:GLsizei, pixels:GLvoid_p):void

glGetnUniformdv(program:GLuint, location:GLint, bufSize:GLsizei, params:GLdouble_p):void

//======== GL_VERSION_4_6 ========

glMultiDrawArraysIndirectCount(mode:GLenum, indirect:const_GLvoid_p, drawcount:GLintptr, maxdrawcount:GLsizei, stride:GLsizei):void

glMultiDrawElementsIndirectCount(mode:GLenum, type:GLenum, indirect:const_GLvoid_p, drawcount:GLintptr, maxdrawcount:GLsizei, stride:GLsizei):void

glSpecializeShader(shader:GLuint, pEntryPoint[]:GLchar, numSpecializationConstants:GLuint, pConstantIndex[]:GLuint, pConstantValue[]:GLuint):void

}

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(opengl)

${r.ComposeImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeAssignment('frame.')}
}

Gurax_EndModuleScope(opengl)
'''.Render('Functions.cpp')
