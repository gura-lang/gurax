#!/usr/bin/env gurax
import(cbridge)

r = cbridge.Renderer()

//------------------------------------------------------------------------------
// Type Information
//------------------------------------------------------------------------------
r.DeclareType_Number('GLenum')
r.DeclareType('GLboolean', 'GLboolean', 'Bool',
	codePicker = R'''
	${this.cType} ${varName} = static_cast<GLboolean>(args.PickBool());
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args.IsValid()? static_cast<GLboolean>(args.PickBool()) : GL_FALSE;
	'''
	codePickerVec = ''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Value_${this.vtype}(!!rtn);
	''')
r.DeclareType('const_GLubyte_p', 'const GLubyte*', 'String',
	codePicker = R'''
	${this.cType} ${varName} = reinterpret_cast<${this.cType}>(args.PickString());
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args.IsValid()? reinterpret_cast<${this.cType}>(args.PickString()) : nullptr;
	'''
	codePickerVec = ''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Value_${this.vtype}(reinterpret_cast<const char*>(rtn));
	''')

//------------------------------------------------------------------------------
// Function Registration: Context
//------------------------------------------------------------------------------
r.Register('opengl') {

glewInit():GLenum
glewIsSupported(name:const_char_p):GLboolean
glewGetExtension(name:const_char_p):GLboolean
glewGetErrorString(error:GLenum):const_GLubyte_p
glewGetString(name:GLenum):const_GLubyte_p

}

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(opengl)

${r.ComposeImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeAssignment('frame.')}
}

Gurax_EndModuleScope(opengl)
'''.Render('Functions.cpp')
