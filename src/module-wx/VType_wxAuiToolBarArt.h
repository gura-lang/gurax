//==============================================================================
// VType_wxAuiToolBarArt.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXAUITOOLBARART_H
#define GURAX_MODULE_WX_VTYPE_WXAUITOOLBARART_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/aui/auibar.h>
#include "Util.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxAuiToolBarArt
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxAuiToolBarArt : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxAuiToolBarArt VTYPE_wxAuiToolBarArt;

//------------------------------------------------------------------------------
// Value_wxAuiToolBarArt
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxAuiToolBarArt : public Value_Object {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxAuiToolBarArt);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxAuiToolBarArt");
protected:
	wxAuiToolBarArt* _pEntity;
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxAuiToolBarArt() = delete;
	explicit Value_wxAuiToolBarArt(wxAuiToolBarArt* pEntity, VType& vtype = VTYPE_wxAuiToolBarArt) :
		Value_Object(vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxAuiToolBarArt(const Value_wxAuiToolBarArt& src) = delete;
	Value_wxAuiToolBarArt& operator=(const Value_wxAuiToolBarArt& src) = delete;
	// Move constructor/operator
	Value_wxAuiToolBarArt(Value_wxAuiToolBarArt&& src) noexcept = delete;
	Value_wxAuiToolBarArt& operator=(Value_wxAuiToolBarArt&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxAuiToolBarArt() = default;
public:
	wxAuiToolBarArt& GetEntity() { return *_pEntity; }
	const wxAuiToolBarArt& GetEntity() const { return *_pEntity; }
	wxAuiToolBarArt* GetEntityPtr() { return _pEntity; }
	const wxAuiToolBarArt* GetEntityPtr() const { return _pEntity; }
public:
	static wxAuiToolBarArt& GetEntity(Value& value) {
		return dynamic_cast<Value_wxAuiToolBarArt&>(value).GetEntity();
	}
	static const wxAuiToolBarArt& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxAuiToolBarArt&>(value).GetEntity();
	}
	static wxAuiToolBarArt* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxAuiToolBarArt&>(value).GetEntityPtr();
	}
	static const wxAuiToolBarArt* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxAuiToolBarArt&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
