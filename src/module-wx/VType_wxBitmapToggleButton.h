//==============================================================================
// VType_wxBitmapToggleButton.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXBITMAPTOGGLEBUTTON_H
#define GURAX_MODULE_WX_VTYPE_WXBITMAPTOGGLEBUTTON_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/tglbtn.h>
#include "Util.h"
#include "VType_wxToggleButton.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxBitmapToggleButton
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxBitmapToggleButton : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxBitmapToggleButton VTYPE_wxBitmapToggleButton;

//------------------------------------------------------------------------------
// Value_wxBitmapToggleButton
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxBitmapToggleButton : public Value_wxToggleButton {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxBitmapToggleButton);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxBitmapToggleButton");
public:
	class EntityT : public wxBitmapToggleButton {
	public:
		using wxBitmapToggleButton::wxBitmapToggleButton;
	public:
		EntityCore core_gurax;
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxBitmapToggleButton() = delete;
	explicit Value_wxBitmapToggleButton(wxEvtHandler* pEntity, VType& vtype = VTYPE_wxBitmapToggleButton) :
		Value_wxToggleButton(pEntity, vtype) {}
	// Copy constructor/operator
	Value_wxBitmapToggleButton(const Value_wxBitmapToggleButton& src) = delete;
	Value_wxBitmapToggleButton& operator=(const Value_wxBitmapToggleButton& src) = delete;
	// Move constructor/operator
	Value_wxBitmapToggleButton(Value_wxBitmapToggleButton&& src) noexcept = delete;
	Value_wxBitmapToggleButton& operator=(Value_wxBitmapToggleButton&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxBitmapToggleButton() = default;
public:
	wxBitmapToggleButton& GetEntity() {
		return reinterpret_cast<wxBitmapToggleButton&>(Value_wxEvtHandler::GetEntity());
	}
	const wxBitmapToggleButton& GetEntity() const {
		return reinterpret_cast<const wxBitmapToggleButton&>(Value_wxEvtHandler::GetEntity());
	}
	wxBitmapToggleButton* GetEntityPtr() {
		return reinterpret_cast<wxBitmapToggleButton*>(Value_wxEvtHandler::GetEntityPtr());
	}
	const wxBitmapToggleButton* GetEntityPtr() const {
		return reinterpret_cast<const wxBitmapToggleButton*>(Value_wxEvtHandler::GetEntityPtr());
	}
public:
	static wxBitmapToggleButton& GetEntity(Value& value) {
		return dynamic_cast<Value_wxBitmapToggleButton&>(value).GetEntity();
	}
	static const wxBitmapToggleButton& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxBitmapToggleButton&>(value).GetEntity();
	}
	static wxBitmapToggleButton* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxBitmapToggleButton&>(value).GetEntityPtr();
	}
	static const wxBitmapToggleButton* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxBitmapToggleButton&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
