//==============================================================================
// VType_wxDC.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.DC, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.DC, `en)}

${help.ComposeMethodHelp(wx.DC, `en)}
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.DC#CopyAttributes(dc as wx.DC)
Gurax_DeclareMethodAlias(wxDC, CopyAttributes_gurax, "CopyAttributes")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("dc", VTYPE_wxDC, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CopyAttributes_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDC& value_dc = args_gurax.Pick<Value_wxDC>();
	const wxDC& dc = value_dc.GetEntity();
	// Function body
	pEntity_gurax->CopyAttributes(dc);
	return Gurax::Value::nil();
}

// wx.DC#GetDepth()
Gurax_DeclareMethodAlias(wxDC, GetDepth_gurax, "GetDepth")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetDepth_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	int rtn = pEntity_gurax->GetDepth();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetDeviceOrigin() {block?}
Gurax_DeclareMethodAlias(wxDC, GetDeviceOrigin_gurax, "GetDeviceOrigin")
{
	Declare(VTYPE_wxPoint, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetDeviceOrigin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxPoint(
		pEntity_gurax->GetDeviceOrigin()));
}

// wx.DC#GetLogicalFunction()
Gurax_DeclareMethodAlias(wxDC, GetLogicalFunction_gurax, "GetLogicalFunction")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetLogicalFunction_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxRasterOperationMode rtn = pEntity_gurax->GetLogicalFunction();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetMapMode()
Gurax_DeclareMethodAlias(wxDC, GetMapMode_gurax, "GetMapMode")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetMapMode_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxMappingMode rtn = pEntity_gurax->GetMapMode();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetPixel(x as Number, y as Number) {block?}
Gurax_DeclareMethodAlias(wxDC, GetPixel_gurax, "GetPixel")
{
	Declare(VTYPE_wxColour, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetPixel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxColour colour;
	bool rtn = pEntity_gurax->GetPixel(x, y, &colour);
	if (!rtn) return Value::nil();
	return new Value_wxColour(colour);
}

// wx.DC#GetPPI() {block?}
Gurax_DeclareMethodAlias(wxDC, GetPPI_gurax, "GetPPI")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetPPI_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetPPI()));
}

// wx.DC#GetSize() {block?}
Gurax_DeclareMethodAlias(wxDC, GetSize_gurax, "GetSize")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetSize()));
}

// wx.DC#GetSizeMM() {block?}
Gurax_DeclareMethodAlias(wxDC, GetSizeMM_gurax, "GetSizeMM")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetSizeMM_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetSizeMM()));
}

// wx.DC#GetUserScale()
Gurax_DeclareMethodAlias(wxDC, GetUserScale_gurax, "GetUserScale")
{
	Declare(VTYPE_Tuple, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetUserScale_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	double x, y;
	pEntity_gurax->GetUserScale(&x, &y);
	return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
}

// wx.DC#IsOk()
Gurax_DeclareMethodAlias(wxDC, IsOk_gurax, "IsOk")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, IsOk_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsOk();
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#SetAxisOrientation(xLeftRight as Bool, yBottomUp as Bool)
Gurax_DeclareMethodAlias(wxDC, SetAxisOrientation_gurax, "SetAxisOrientation")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("xLeftRight", VTYPE_Bool, ArgOccur::Once, ArgFlag::None);
	DeclareArg("yBottomUp", VTYPE_Bool, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetAxisOrientation_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	bool xLeftRight = args_gurax.PickBool();
	bool yBottomUp = args_gurax.PickBool();
	// Function body
	pEntity_gurax->SetAxisOrientation(xLeftRight, yBottomUp);
	return Gurax::Value::nil();
}

// wx.DC#SetDeviceOrigin(x as Number, y as Number)
Gurax_DeclareMethodAlias(wxDC, SetDeviceOrigin_gurax, "SetDeviceOrigin")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetDeviceOrigin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	pEntity_gurax->SetDeviceOrigin(x, y);
	return Gurax::Value::nil();
}

// wx.DC#SetLogicalFunction(function as Number)
Gurax_DeclareMethodAlias(wxDC, SetLogicalFunction_gurax, "SetLogicalFunction")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("function", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetLogicalFunction_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxRasterOperationMode function = args_gurax.PickNumber<wxRasterOperationMode>();
	// Function body
	pEntity_gurax->SetLogicalFunction(function);
	return Gurax::Value::nil();
}

// wx.DC#SetMapMode(mode as Number)
Gurax_DeclareMethodAlias(wxDC, SetMapMode_gurax, "SetMapMode")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("mode", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetMapMode_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxMappingMode mode = args_gurax.PickNumber<wxMappingMode>();
	// Function body
	pEntity_gurax->SetMapMode(mode);
	return Gurax::Value::nil();
}

// wx.DC#SetPalette(palette as wx.Palette)
Gurax_DeclareMethodAlias(wxDC, SetPalette_gurax, "SetPalette")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("palette", VTYPE_wxPalette, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetPalette_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxPalette& value_palette = args_gurax.Pick<Value_wxPalette>();
	const wxPalette& palette = value_palette.GetEntity();
	// Function body
	pEntity_gurax->SetPalette(palette);
	return Gurax::Value::nil();
}

// wx.DC#SetUserScale(xScale as Number, yScale as Number)
Gurax_DeclareMethodAlias(wxDC, SetUserScale_gurax, "SetUserScale")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("xScale", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("yScale", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetUserScale_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	double xScale = args_gurax.PickNumber<double>();
	double yScale = args_gurax.PickNumber<double>();
	// Function body
	pEntity_gurax->SetUserScale(xScale, yScale);
	return Gurax::Value::nil();
}

// wx.DC#GetAsBitmap(subrect? as wx.Rect) {block?}
Gurax_DeclareMethodAlias(wxDC, GetAsBitmap_gurax, "GetAsBitmap")
{
	Declare(VTYPE_wxBitmap, Flag::None);
	DeclareArg("subrect", VTYPE_wxRect, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetAsBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const wxRect* subrect = args_gurax.IsValid()? args_gurax.Pick<Value_wxRect>().GetEntityPtr() : nullptr;
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxBitmap(
		pEntity_gurax->GetAsBitmap(subrect)));
}

// wx.DC#SetLogicalScale(x as Number, y as Number)
Gurax_DeclareMethodAlias(wxDC, SetLogicalScale_gurax, "SetLogicalScale")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetLogicalScale_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	double x = args_gurax.PickNumber<double>();
	double y = args_gurax.PickNumber<double>();
	// Function body
	pEntity_gurax->SetLogicalScale(x, y);
	return Gurax::Value::nil();
}

// wx.DC#GetLogicalScale()
Gurax_DeclareMethodAlias(wxDC, GetLogicalScale_gurax, "GetLogicalScale")
{
	Declare(VTYPE_Tuple, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetLogicalScale_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	double x, y;
	pEntity_gurax->GetLogicalScale(&x, &y);
	return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
}

// wx.DC#SetLogicalOrigin(x as Number, y as Number)
Gurax_DeclareMethodAlias(wxDC, SetLogicalOrigin_gurax, "SetLogicalOrigin")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetLogicalOrigin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	pEntity_gurax->SetLogicalOrigin(x, y);
	return Gurax::Value::nil();
}

// wx.DC#DeviceToLogicalX(x as Number):map
Gurax_DeclareMethodAlias(wxDC, DeviceToLogicalX_gurax, "DeviceToLogicalX")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DeviceToLogicalX_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->DeviceToLogicalX(x);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#DeviceToLogicalXRel(x as Number):map
Gurax_DeclareMethodAlias(wxDC, DeviceToLogicalXRel_gurax, "DeviceToLogicalXRel")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DeviceToLogicalXRel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->DeviceToLogicalXRel(x);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#DeviceToLogicalY(y as Number):map
Gurax_DeclareMethodAlias(wxDC, DeviceToLogicalY_gurax, "DeviceToLogicalY")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DeviceToLogicalY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->DeviceToLogicalY(y);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#DeviceToLogicalYRel(y as Number):map
Gurax_DeclareMethodAlias(wxDC, DeviceToLogicalYRel_gurax, "DeviceToLogicalYRel")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DeviceToLogicalYRel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->DeviceToLogicalYRel(y);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#LogicalToDeviceX(x as Number):map
Gurax_DeclareMethodAlias(wxDC, LogicalToDeviceX_gurax, "LogicalToDeviceX")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, LogicalToDeviceX_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->LogicalToDeviceX(x);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#LogicalToDeviceXRel(x as Number):map
Gurax_DeclareMethodAlias(wxDC, LogicalToDeviceXRel_gurax, "LogicalToDeviceXRel")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, LogicalToDeviceXRel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->LogicalToDeviceXRel(x);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#LogicalToDeviceY(y as Number):map
Gurax_DeclareMethodAlias(wxDC, LogicalToDeviceY_gurax, "LogicalToDeviceY")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, LogicalToDeviceY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->LogicalToDeviceY(y);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#LogicalToDeviceYRel(y as Number):map
Gurax_DeclareMethodAlias(wxDC, LogicalToDeviceYRel_gurax, "LogicalToDeviceYRel")
{
	Declare(VTYPE_Number, Flag::Map);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, LogicalToDeviceYRel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	wxCoord rtn = pEntity_gurax->LogicalToDeviceYRel(y);
	return new Gurax::Value_Number(rtn);
}

// wx.DC#Clear()
Gurax_DeclareMethodAlias(wxDC, Clear_gurax, "Clear")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, Clear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->Clear();
	return Gurax::Value::nil();
}

// wx.DC#DrawArc(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawArc_gurax, "DrawArc")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawArc_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawArc(xStart as Coord, yStart as Coord, xEnd as Coord, yEnd as Coord, xc as Coord, yc as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("xStart", VTYPE_Number);
			pDeclCallable->DeclareArg("yStart", VTYPE_Number);
			pDeclCallable->DeclareArg("xEnd", VTYPE_Number);
			pDeclCallable->DeclareArg("yEnd", VTYPE_Number);
			pDeclCallable->DeclareArg("xc", VTYPE_Number);
			pDeclCallable->DeclareArg("yc", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord xStart = args.PickNumber<wxCoord>();
		wxCoord yStart = args.PickNumber<wxCoord>();
		wxCoord xEnd = args.PickNumber<wxCoord>();
		wxCoord yEnd = args.PickNumber<wxCoord>();
		wxCoord xc = args.PickNumber<wxCoord>();
		wxCoord yc = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawArc(xStart, yStart, xEnd, yEnd, xc, yc);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawArc(ptStart as const_Point_r, ptEnd as const_Point_r, centre as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("ptStart", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("ptEnd", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("centre", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& ptStart = args.Pick<Value_wxPoint>().GetEntity();
		const wxPoint& ptEnd = args.Pick<Value_wxPoint>().GetEntity();
		const wxPoint& centre = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->DrawArc(ptStart, ptEnd, centre);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawBitmap(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawBitmap_gurax, "DrawBitmap")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawBitmap(bitmap as const_Bitmap_r, x as Coord, y as Coord, useMask as bool = false) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("bitmap", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("useMask", VTYPE_Bool, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxBitmap& bitmap = args.Pick<Value_wxBitmap>().GetEntity();
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		bool useMask = args.IsValid()? args.PickBool() : false;
		pEntity_gurax->DrawBitmap(bitmap, x, y, useMask);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawBitmap(bmp as const_Bitmap_r, pt as const_Point_r, useMask as bool = false) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("bitmap", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("useMask", VTYPE_Bool, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxBitmap& bitmap = args.Pick<Value_wxBitmap>().GetEntity();
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		bool useMask = args.IsValid()? args.PickBool() : false;
		pEntity_gurax->DrawBitmap(bitmap, pt, useMask);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawCheckMark(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawCheckMark_gurax, "DrawCheckMark")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawCheckMark_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawCheckMark(x as Coord, y as Coord, width as Coord, height as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawCheckMark(x, y, width, height);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawCheckMark(rect as const_Rect_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		pEntity_gurax->DrawCheckMark(rect);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawCircle(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawCircle_gurax, "DrawCircle")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawCircle_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawCircle(x as Coord, y as Coord, radius as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("radius", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord radius = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawCircle(x, y, radius);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawCircle(pt as const_Point_r, radius as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("radius", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		wxCoord radius = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawCircle(pt, radius);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawEllipse(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawEllipse_gurax, "DrawEllipse")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawEllipse_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawEllipse(x as Coord, y as Coord, width as Coord, height as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawEllipse(x, y, width, height);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawEllipse(pt as const_Point_r, size as const_Size_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("size", VTYPE_wxSize);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
		pEntity_gurax->DrawEllipse(pt, size);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawEllipse(rect as const_Rect_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		pEntity_gurax->DrawEllipse(rect);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawEllipticArc(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawEllipticArc_gurax, "DrawEllipticArc")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawEllipticArc_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawEllipticArc(x as Coord, y as Coord, width as Coord, height as Coord, start as double, end as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
			pDeclCallable->DeclareArg("start", VTYPE_Number);
			pDeclCallable->DeclareArg("end", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		double start = args.PickNumber<double>();
		double end = args.PickNumber<double>();
		pEntity_gurax->DrawEllipticArc(x, y, width, height, start, end);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawEllipticArc(pt as const_Point_r, sz as const_Size_r, sa as double, ea as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("sz", VTYPE_wxSize);
			pDeclCallable->DeclareArg("sa", VTYPE_Number);
			pDeclCallable->DeclareArg("ea", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxSize& sz = args.Pick<Value_wxSize>().GetEntity();
		double start = args.PickNumber<double>();
		double end = args.PickNumber<double>();
		pEntity_gurax->DrawEllipticArc(pt, sz, start, end);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawIcon(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawIcon_gurax, "DrawIcon")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawIcon_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawIcon(icon as const_Icon_r, x as Coord, y as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("icon", VTYPE_wxIcon);
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxIcon& icon = args.Pick<Value_wxIcon>().GetEntity();
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawIcon(icon, x, y);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawIcon(icon as const_Icon_r, pt as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("icon", VTYPE_wxIcon);
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxIcon& icon = args.Pick<Value_wxIcon>().GetEntity();
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->DrawIcon(icon, pt);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawLabel(text as String, rect as wx.Rect, alignment? as Number, indexAccel? as Number):map
Gurax_DeclareMethodAlias(wxDC, DrawLabel_gurax, "DrawLabel")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("text", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	DeclareArg("rect", VTYPE_wxRect, ArgOccur::Once, ArgFlag::None);
	DeclareArg("alignment", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("indexAccel", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawLabel_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const char* text = args_gurax.PickString();
	Value_wxRect& value_rect = args_gurax.Pick<Value_wxRect>();
	const wxRect& rect = value_rect.GetEntity();
	bool alignment_validFlag = args_gurax.IsValid();
	int alignment = alignment_validFlag? args_gurax.PickNumber<int>() : (wxALIGN_LEFT | wxALIGN_TOP);
	bool indexAccel_validFlag = args_gurax.IsValid();
	int indexAccel = indexAccel_validFlag? args_gurax.PickNumber<int>() : -1;
	// Function body
	pEntity_gurax->DrawLabel(text, rect, alignment, indexAccel);
	return Gurax::Value::nil();
}

// wx.DC#DrawLine(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawLine_gurax, "DrawLine")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawLine_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawLine(x1 as Coord, y1 as Coord, x2 as Coord, y2 as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x1", VTYPE_Number);
			pDeclCallable->DeclareArg("y1", VTYPE_Number);
			pDeclCallable->DeclareArg("x2", VTYPE_Number);
			pDeclCallable->DeclareArg("y2", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x1 = args.PickNumber<wxCoord>();
		wxCoord y1 = args.PickNumber<wxCoord>();
		wxCoord x2 = args.PickNumber<wxCoord>();
		wxCoord y2 = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawLine(x1, y1, x2, y2);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawLine(pt1 as const_Point_r, pt2 as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt1", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("pt2", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt1 = args.Pick<Value_wxPoint>().GetEntity();
		const wxPoint& pt2 = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->DrawLine(pt1, pt2);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawLines(points[] as wx.Point, xoffset? as Number, yoffset? as Number):map
Gurax_DeclareMethodAlias(wxDC, DrawLines_gurax, "DrawLines")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("points", VTYPE_wxPoint, ArgOccur::Once, ArgFlag::ListVar);
	DeclareArg("xoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("yoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawLines_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	std::unique_ptr<wxPointList> points(Util::CreatePointList(args_gurax.PickList()));
	bool xoffset_validFlag = args_gurax.IsValid();
	wxCoord xoffset = xoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	bool yoffset_validFlag = args_gurax.IsValid();
	wxCoord yoffset = yoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	// Function body
	pEntity_gurax->DrawLines(points.get(), xoffset, yoffset);
	return Gurax::Value::nil();
}

// wx.DC#DrawPoint(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawPoint_gurax, "DrawPoint")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawPoint_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawPoint(x as Coord, y as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawPoint(x, y);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawPoint(pt as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->DrawPoint(pt);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawPolygon(points[] as wx.Point, xoffset? as Number, yoffset? as Number, fill_style? as Number):map
Gurax_DeclareMethodAlias(wxDC, DrawPolygon_gurax, "DrawPolygon")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("points", VTYPE_wxPoint, ArgOccur::Once, ArgFlag::ListVar);
	DeclareArg("xoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("yoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("fill_style", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawPolygon_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	std::unique_ptr<wxPointList> points(Util::CreatePointList(args_gurax.PickList()));
	bool xoffset_validFlag = args_gurax.IsValid();
	wxCoord xoffset = xoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	bool yoffset_validFlag = args_gurax.IsValid();
	wxCoord yoffset = yoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	bool fill_style_validFlag = args_gurax.IsValid();
	wxPolygonFillMode fill_style = fill_style_validFlag? args_gurax.PickNumber<wxPolygonFillMode>() : wxODDEVEN_RULE;
	// Function body
	pEntity_gurax->DrawPolygon(points.get(), xoffset, yoffset, fill_style);
	return Gurax::Value::nil();
}

// wx.DC#DrawPolyPolygon(count[] as Number, points[] as Any, xoffset? as Number, yoffset? as Number, fill_style? as Number):map
Gurax_DeclareMethodAlias(wxDC, DrawPolyPolygon_gurax, "DrawPolyPolygon")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("count", VTYPE_Number, ArgOccur::Once, ArgFlag::ListVar);
	DeclareArg("points", VTYPE_Any, ArgOccur::Once, ArgFlag::ListVar);
	DeclareArg("xoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("yoffset", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("fill_style", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawPolyPolygon_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	auto count = args_gurax.PickNumList<int>();
	const Gurax::ValueList& points = args_gurax.PickList();
	bool xoffset_validFlag = args_gurax.IsValid();
	wxCoord xoffset = xoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	bool yoffset_validFlag = args_gurax.IsValid();
	wxCoord yoffset = yoffset_validFlag? args_gurax.PickNumber<wxCoord>() : 0;
	bool fill_style_validFlag = args_gurax.IsValid();
	wxPolygonFillMode fill_style = fill_style_validFlag? args_gurax.PickNumber<wxPolygonFillMode>() : wxODDEVEN_RULE;
	// Function body
	std::vector<wxPoint> points_;
	points_.reserve(points.size());
	int n = count.size();
	if (n != points.size()) {
		Error::Issue(ErrorType::RangeError, "count and points must have the same length.");
		return Value::nil();
	}
	for (const Value* pValue : points) {
		if (!pValue->IsType(VTYPE_wxPoint)) {
			Error::Issue(ErrorType::TypeError, "the element must be of wx.Point.");
			return Value::nil();
		}
		points_.push_back(Value_wxPoint::GetEntity(*pValue));
	}
	pEntity_gurax->DrawPolyPolygon(n, count.data(), points_.data(), xoffset, yoffset, fill_style);
	return Value::nil();
}

// wx.DC#DrawRectangle(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawRectangle_gurax, "DrawRectangle")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawRectangle_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawRectangle(x as Coord, y as Coord, width as Coord, height as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawRectangle(x, y, width, height);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawRectangle(pt as const_Point_r, size as const_Size_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("size", VTYPE_wxSize);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
		pEntity_gurax->DrawRectangle(pt, size);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawRectangle(rect as const_Rect_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		pEntity_gurax->DrawRectangle(rect);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawRotatedText(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawRotatedText_gurax, "DrawRotatedText")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawRotatedText_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawRotatedText(text as String, x as Coord, y as Coord, angle as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("text", VTYPE_String);
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("angle", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const char* text = args.PickString();
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		double angle = args.PickNumber<double>();
		pEntity_gurax->DrawRotatedText(text, x, y, angle);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawRotatedText(text as String, point as const_Point_r, angle as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("text", VTYPE_String);
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("angle", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const char* text = args.PickString();
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		double angle = args.PickNumber<double>();
		pEntity_gurax->DrawRotatedText(text, pt, angle);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawRoundedRectangle(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawRoundedRectangle_gurax, "DrawRoundedRectangle")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawRoundedRectangle_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawRoundedRectangle(x as Coord, y as Coord, width as Coord, height as Coord, radius as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
			pDeclCallable->DeclareArg("radius", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		double radius = args.PickNumber<double>();
		pEntity_gurax->DrawRoundedRectangle(x, y, width, height, radius);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawRoundedRectangle(pt as const_Point_r, sz as const_Size_r, radius as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("size", VTYPE_wxSize);
			pDeclCallable->DeclareArg("radius", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
		double radius = args.PickNumber<double>();
		pEntity_gurax->DrawRoundedRectangle(pt, size, radius);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawRoundedRectangle(rect as const_Rect_r, radius as double) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
			pDeclCallable->DeclareArg("radius", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		double radius = args.PickNumber<double>();
		pEntity_gurax->DrawRoundedRectangle(rect, radius);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DrawSpline(points[] as wx.Point):map
Gurax_DeclareMethodAlias(wxDC, DrawSpline_gurax, "DrawSpline")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("points", VTYPE_wxPoint, ArgOccur::Once, ArgFlag::ListVar);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawSpline_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	std::unique_ptr<wxPointList> points(Util::CreatePointList(args_gurax.PickList()));
	// Function body
	pEntity_gurax->DrawSpline(points.get());
	return Gurax::Value::nil();
}

// wx.DC#DrawSplineXY(x1 as Number, y1 as Number, x2 as Number, y2 as Number, x3 as Number, y3 as Number):map
Gurax_DeclareMethodAlias(wxDC, DrawSplineXY_gurax, "DrawSplineXY")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("x1", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y1", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("x2", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y2", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("x3", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y3", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawSplineXY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x1 = args_gurax.PickNumber<wxCoord>();
	wxCoord y1 = args_gurax.PickNumber<wxCoord>();
	wxCoord x2 = args_gurax.PickNumber<wxCoord>();
	wxCoord y2 = args_gurax.PickNumber<wxCoord>();
	wxCoord x3 = args_gurax.PickNumber<wxCoord>();
	wxCoord y3 = args_gurax.PickNumber<wxCoord>();
	// Function body
	pEntity_gurax->DrawSpline(x1, y1, x2, y2, x3, y3);
	return Gurax::Value::nil();
}

// wx.DC#DrawText(args* as Any):map
Gurax_DeclareMethodAlias(wxDC, DrawText_gurax, "DrawText")
{
	Declare(VTYPE_Nil, Flag::Map);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DrawText_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// DrawText(text as String, x as Coord, y as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("text", VTYPE_String);
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const char* text = args.PickString();
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		pEntity_gurax->DrawText(text, x, y);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// DrawText(text as String, pt as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("text", VTYPE_String);
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const char* text = args.PickString();
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->DrawText(text, pt);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#GradientFillConcentric(rect as wx.Rect, initialColour as wx.Colour, destColour as wx.Colour, circleCenter? as wx.Point)
Gurax_DeclareMethodAlias(wxDC, GradientFillConcentric_gurax, "GradientFillConcentric")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("rect", VTYPE_wxRect, ArgOccur::Once, ArgFlag::None);
	DeclareArg("initialColour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	DeclareArg("destColour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	DeclareArg("circleCenter", VTYPE_wxPoint, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GradientFillConcentric_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRect& value_rect = args_gurax.Pick<Value_wxRect>();
	const wxRect& rect = value_rect.GetEntity();
	Value_wxColour& value_initialColour = args_gurax.Pick<Value_wxColour>();
	const wxColour& initialColour = value_initialColour.GetEntity();
	Value_wxColour& value_destColour = args_gurax.Pick<Value_wxColour>();
	const wxColour& destColour = value_destColour.GetEntity();
	const wxPoint* circleCenter = args_gurax.IsValid()? args_gurax.Pick<Value_wxPoint>().GetEntityPtr() : nullptr;
	// Function body
	if (circleCenter) {
		pEntity_gurax->GradientFillConcentric(rect, initialColour, destColour, *circleCenter);
	} else {
		pEntity_gurax->GradientFillConcentric(rect, initialColour, destColour);
	}
	return Value::nil();
}

// wx.DC#GradientFillLinear(rect as wx.Rect, initialColour as wx.Colour, destColour as wx.Colour, nDirection? as Number)
Gurax_DeclareMethodAlias(wxDC, GradientFillLinear_gurax, "GradientFillLinear")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("rect", VTYPE_wxRect, ArgOccur::Once, ArgFlag::None);
	DeclareArg("initialColour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	DeclareArg("destColour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	DeclareArg("nDirection", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GradientFillLinear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRect& value_rect = args_gurax.Pick<Value_wxRect>();
	const wxRect& rect = value_rect.GetEntity();
	Value_wxColour& value_initialColour = args_gurax.Pick<Value_wxColour>();
	const wxColour& initialColour = value_initialColour.GetEntity();
	Value_wxColour& value_destColour = args_gurax.Pick<Value_wxColour>();
	const wxColour& destColour = value_destColour.GetEntity();
	bool nDirection_validFlag = args_gurax.IsValid();
	wxDirection nDirection = nDirection_validFlag? args_gurax.PickNumber<wxDirection>() : wxRIGHT;
	// Function body
	pEntity_gurax->GradientFillLinear(rect, initialColour, destColour, nDirection);
	return Gurax::Value::nil();
}

// wx.DC#FloodFill(args* as Any)
Gurax_DeclareMethodAlias(wxDC, FloodFill_gurax, "FloodFill")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, FloodFill_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// FloodFill(x as Coord, y as Coord, colour as const_Colour_r, style as FloodFillStyle = wxFLOOD_SURFACE) as void = FloodFill
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("colour", VTYPE_wxColour);
			pDeclCallable->DeclareArg("style", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		const wxColour& colour = args.Pick<Value_wxColour>().GetEntity();
		wxFloodFillStyle style = args.PickNumber<wxFloodFillStyle>();
		pEntity_gurax->FloodFill(x, y, colour, style);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// FloodFill(pt as const_Point_r, col as const_Colour_r, style as FloodFillStyle = wxFLOOD_SURFACE) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("colour", VTYPE_wxColour);
			pDeclCallable->DeclareArg("style", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxColour& colour = args.Pick<Value_wxColour>().GetEntity();
		wxFloodFillStyle style = args.PickNumber<wxFloodFillStyle>();
		pEntity_gurax->FloodFill(pt, colour, style);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#CrossHair(args* as Any)
Gurax_DeclareMethodAlias(wxDC, CrossHair_gurax, "CrossHair")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CrossHair_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// CrossHair(x as Coord, y as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		pEntity_gurax->CrossHair(x, y);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// CrossHair(pt as const_Point_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		pEntity_gurax->CrossHair(pt);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#DestroyClippingRegion()
Gurax_DeclareMethodAlias(wxDC, DestroyClippingRegion_gurax, "DestroyClippingRegion")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, DestroyClippingRegion_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->DestroyClippingRegion();
	return Gurax::Value::nil();
}

// wx.DC#GetClippingBox()
Gurax_DeclareMethodAlias(wxDC, GetClippingBox_gurax, "GetClippingBox")
{
	Declare(VTYPE_Tuple, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetClippingBox_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord x, y, width, height;
	pEntity_gurax->GetClippingBox(&x, &y, &width, &height);
	return Value_Tuple::Create(new Value_Number(x), new Value_Number(y), new Value_Number(width), new Value_Number(height));
}

// wx.DC#SetClippingRegion(args* as Any)
Gurax_DeclareMethodAlias(wxDC, SetClippingRegion_gurax, "SetClippingRegion")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetClippingRegion_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// SetClippingRegion(x as Coord, y as Coord, width as Coord, height as Coord) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		pEntity_gurax->SetClippingRegion(x, y, width, height);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// SetClippingRegion(pt as const_Point_r, size as const_Size_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			pDeclCallable->DeclareArg("size", VTYPE_wxSize);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
		pEntity_gurax->SetClippingRegion(pt, size);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	// SetClippingRegion(rect as const_Rect_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		pEntity_gurax->SetClippingRegion(rect);
		return Value::nil();
	} while (0);
	return Value::nil();
}

// wx.DC#SetDeviceClippingRegion(region as wx.Region)
Gurax_DeclareMethodAlias(wxDC, SetDeviceClippingRegion_gurax, "SetDeviceClippingRegion")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("region", VTYPE_wxRegion, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetDeviceClippingRegion_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRegion& value_region = args_gurax.Pick<Value_wxRegion>();
	const wxRegion& region = value_region.GetEntity();
	// Function body
	pEntity_gurax->SetDeviceClippingRegion(region);
	return Gurax::Value::nil();
}

// wx.DC#GetCharHeight()
Gurax_DeclareMethodAlias(wxDC, GetCharHeight_gurax, "GetCharHeight")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetCharHeight_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->GetCharHeight();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetCharWidth()
Gurax_DeclareMethodAlias(wxDC, GetCharWidth_gurax, "GetCharWidth")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetCharWidth_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->GetCharWidth();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetFontMetrics() {block?}
Gurax_DeclareMethodAlias(wxDC, GetFontMetrics_gurax, "GetFontMetrics")
{
	Declare(VTYPE_wxFontMetrics, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetFontMetrics_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxFontMetrics(
		pEntity_gurax->GetFontMetrics()));
}

// wx.DC#GetMultiLineTextExtent(string as String) {block?}
Gurax_DeclareMethodAlias(wxDC, GetMultiLineTextExtent_gurax, "GetMultiLineTextExtent")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareArg("string", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetMultiLineTextExtent_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const char* string = args_gurax.PickString();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetMultiLineTextExtent(string)));
}

// wx.DC#GetTextExtent(string as String) {block?}
Gurax_DeclareMethodAlias(wxDC, GetTextExtent_gurax, "GetTextExtent")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareArg("string", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetTextExtent_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const char* string = args_gurax.PickString();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetTextExtent(string)));
}

// wx.DC#GetBackgroundMode()
Gurax_DeclareMethodAlias(wxDC, GetBackgroundMode_gurax, "GetBackgroundMode")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetBackgroundMode_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	int rtn = pEntity_gurax->GetBackgroundMode();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetFont() {block?}
Gurax_DeclareMethodAlias(wxDC, GetFont_gurax, "GetFont")
{
	Declare(VTYPE_wxFont, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetFont_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxFont(
		pEntity_gurax->GetFont()));
}

// wx.DC#GetLayoutDirection()
Gurax_DeclareMethodAlias(wxDC, GetLayoutDirection_gurax, "GetLayoutDirection")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetLayoutDirection_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxLayoutDirection rtn = pEntity_gurax->GetLayoutDirection();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#GetTextBackground() {block?}
Gurax_DeclareMethodAlias(wxDC, GetTextBackground_gurax, "GetTextBackground")
{
	Declare(VTYPE_wxColour, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetTextBackground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxColour(
		pEntity_gurax->GetTextBackground()));
}

// wx.DC#GetTextForeground() {block?}
Gurax_DeclareMethodAlias(wxDC, GetTextForeground_gurax, "GetTextForeground")
{
	Declare(VTYPE_wxColour, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetTextForeground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxColour(
		pEntity_gurax->GetTextForeground()));
}

// wx.DC#SetBackgroundMode(mode as Number)
Gurax_DeclareMethodAlias(wxDC, SetBackgroundMode_gurax, "SetBackgroundMode")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("mode", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetBackgroundMode_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int mode = args_gurax.PickNumber<int>();
	// Function body
	pEntity_gurax->SetBackgroundMode(mode);
	return Gurax::Value::nil();
}

// wx.DC#SetFont(font as wx.Font)
Gurax_DeclareMethodAlias(wxDC, SetFont_gurax, "SetFont")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("font", VTYPE_wxFont, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetFont_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxFont& value_font = args_gurax.Pick<Value_wxFont>();
	const wxFont& font = value_font.GetEntity();
	// Function body
	pEntity_gurax->SetFont(font);
	return Gurax::Value::nil();
}

// wx.DC#SetTextBackground(colour as wx.Colour)
Gurax_DeclareMethodAlias(wxDC, SetTextBackground_gurax, "SetTextBackground")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("colour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetTextBackground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxColour& value_colour = args_gurax.Pick<Value_wxColour>();
	const wxColour& colour = value_colour.GetEntity();
	// Function body
	pEntity_gurax->SetTextBackground(colour);
	return Gurax::Value::nil();
}

// wx.DC#SetTextForeground(colour as wx.Colour)
Gurax_DeclareMethodAlias(wxDC, SetTextForeground_gurax, "SetTextForeground")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("colour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetTextForeground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxColour& value_colour = args_gurax.Pick<Value_wxColour>();
	const wxColour& colour = value_colour.GetEntity();
	// Function body
	pEntity_gurax->SetTextForeground(colour);
	return Gurax::Value::nil();
}

// wx.DC#SetLayoutDirection(dir as Number)
Gurax_DeclareMethodAlias(wxDC, SetLayoutDirection_gurax, "SetLayoutDirection")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("dir", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetLayoutDirection_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxLayoutDirection dir = args_gurax.PickNumber<wxLayoutDirection>();
	// Function body
	pEntity_gurax->SetLayoutDirection(dir);
	return Gurax::Value::nil();
}

// wx.DC#CalcBoundingBox(x as Number, y as Number)
Gurax_DeclareMethodAlias(wxDC, CalcBoundingBox_gurax, "CalcBoundingBox")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CalcBoundingBox_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	pEntity_gurax->CalcBoundingBox(x, y);
	return Gurax::Value::nil();
}

// wx.DC#MaxX()
Gurax_DeclareMethodAlias(wxDC, MaxX_gurax, "MaxX")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, MaxX_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->MaxX();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#MaxY()
Gurax_DeclareMethodAlias(wxDC, MaxY_gurax, "MaxY")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, MaxY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->MaxY();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#MinX()
Gurax_DeclareMethodAlias(wxDC, MinX_gurax, "MinX")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, MinX_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->MinX();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#MinY()
Gurax_DeclareMethodAlias(wxDC, MinY_gurax, "MinY")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, MinY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord rtn = pEntity_gurax->MinY();
	return new Gurax::Value_Number(rtn);
}

// wx.DC#ResetBoundingBox()
Gurax_DeclareMethodAlias(wxDC, ResetBoundingBox_gurax, "ResetBoundingBox")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, ResetBoundingBox_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->ResetBoundingBox();
	return Gurax::Value::nil();
}

// wx.DC#StartDoc(message as String)
Gurax_DeclareMethodAlias(wxDC, StartDoc_gurax, "StartDoc")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("message", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, StartDoc_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const char* message = args_gurax.PickString();
	// Function body
	bool rtn = pEntity_gurax->StartDoc(message);
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#StartPage()
Gurax_DeclareMethodAlias(wxDC, StartPage_gurax, "StartPage")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, StartPage_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->StartPage();
	return Gurax::Value::nil();
}

// wx.DC#EndDoc()
Gurax_DeclareMethodAlias(wxDC, EndDoc_gurax, "EndDoc")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, EndDoc_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->EndDoc();
	return Gurax::Value::nil();
}

// wx.DC#EndPage()
Gurax_DeclareMethodAlias(wxDC, EndPage_gurax, "EndPage")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, EndPage_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->EndPage();
	return Gurax::Value::nil();
}

// wx.DC#Blit(xdest as Number, ydest as Number, width as Number, height as Number, source as wx.DC, xsrc as Number, ysrc as Number, logicalFunc? as Number, useMask? as Bool, xsrcMask? as Number, ysrcMask? as Number)
Gurax_DeclareMethodAlias(wxDC, Blit_gurax, "Blit")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("xdest", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("ydest", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("width", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("height", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("source", VTYPE_wxDC, ArgOccur::Once, ArgFlag::None);
	DeclareArg("xsrc", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("ysrc", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("logicalFunc", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("useMask", VTYPE_Bool, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("xsrcMask", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("ysrcMask", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, Blit_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord xdest = args_gurax.PickNumber<wxCoord>();
	wxCoord ydest = args_gurax.PickNumber<wxCoord>();
	wxCoord width = args_gurax.PickNumber<wxCoord>();
	wxCoord height = args_gurax.PickNumber<wxCoord>();
	Value_wxDC& value_source = args_gurax.Pick<Value_wxDC>();
	wxDC* source = value_source.GetEntityPtr();
	wxCoord xsrc = args_gurax.PickNumber<wxCoord>();
	wxCoord ysrc = args_gurax.PickNumber<wxCoord>();
	bool logicalFunc_validFlag = args_gurax.IsValid();
	wxRasterOperationMode logicalFunc = logicalFunc_validFlag? args_gurax.PickNumber<wxRasterOperationMode>() : wxCOPY;
	bool useMask = args_gurax.IsValid()? args_gurax.PickBool() : false;
	bool xsrcMask_validFlag = args_gurax.IsValid();
	wxCoord xsrcMask = xsrcMask_validFlag? args_gurax.PickNumber<wxCoord>() : wxDefaultCoord;
	bool ysrcMask_validFlag = args_gurax.IsValid();
	wxCoord ysrcMask = ysrcMask_validFlag? args_gurax.PickNumber<wxCoord>() : wxDefaultCoord;
	// Function body
	bool rtn = pEntity_gurax->Blit(xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc, useMask, xsrcMask, ysrcMask);
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#StretchBlit(xdest as Number, ydest as Number, dstWidth as Number, dstHeight as Number, source as wx.DC, xsrc as Number, ysrc as Number, srcWidth as Number, srcHeight as Number, logicalFunc? as Number, useMask? as Bool, xsrcMask? as Number, ysrcMask? as Number)
Gurax_DeclareMethodAlias(wxDC, StretchBlit_gurax, "StretchBlit")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("xdest", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("ydest", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("dstWidth", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("dstHeight", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("source", VTYPE_wxDC, ArgOccur::Once, ArgFlag::None);
	DeclareArg("xsrc", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("ysrc", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("srcWidth", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("srcHeight", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("logicalFunc", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("useMask", VTYPE_Bool, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("xsrcMask", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("ysrcMask", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, StretchBlit_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord xdest = args_gurax.PickNumber<wxCoord>();
	wxCoord ydest = args_gurax.PickNumber<wxCoord>();
	wxCoord dstWidth = args_gurax.PickNumber<wxCoord>();
	wxCoord dstHeight = args_gurax.PickNumber<wxCoord>();
	Value_wxDC& value_source = args_gurax.Pick<Value_wxDC>();
	wxDC* source = value_source.GetEntityPtr();
	wxCoord xsrc = args_gurax.PickNumber<wxCoord>();
	wxCoord ysrc = args_gurax.PickNumber<wxCoord>();
	wxCoord srcWidth = args_gurax.PickNumber<wxCoord>();
	wxCoord srcHeight = args_gurax.PickNumber<wxCoord>();
	bool logicalFunc_validFlag = args_gurax.IsValid();
	wxRasterOperationMode logicalFunc = logicalFunc_validFlag? args_gurax.PickNumber<wxRasterOperationMode>() : wxCOPY;
	bool useMask = args_gurax.IsValid()? args_gurax.PickBool() : false;
	bool xsrcMask_validFlag = args_gurax.IsValid();
	wxCoord xsrcMask = xsrcMask_validFlag? args_gurax.PickNumber<wxCoord>() : wxDefaultCoord;
	bool ysrcMask_validFlag = args_gurax.IsValid();
	wxCoord ysrcMask = ysrcMask_validFlag? args_gurax.PickNumber<wxCoord>() : wxDefaultCoord;
	// Function body
	bool rtn = pEntity_gurax->StretchBlit(xdest, ydest, dstWidth, dstHeight, source, xsrc, ysrc, srcWidth, srcHeight, logicalFunc, useMask, xsrcMask, ysrcMask);
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#GetBackground() {block?}
Gurax_DeclareMethodAlias(wxDC, GetBackground_gurax, "GetBackground")
{
	Declare(VTYPE_wxBrush, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetBackground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxBrush(
		pEntity_gurax->GetBackground()));
}

// wx.DC#GetBrush() {block?}
Gurax_DeclareMethodAlias(wxDC, GetBrush_gurax, "GetBrush")
{
	Declare(VTYPE_wxBrush, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetBrush_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxBrush(
		pEntity_gurax->GetBrush()));
}

// wx.DC#GetPen() {block?}
Gurax_DeclareMethodAlias(wxDC, GetPen_gurax, "GetPen")
{
	Declare(VTYPE_wxPen, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetPen_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxPen(
		pEntity_gurax->GetPen()));
}

// wx.DC#SetBackground(brush as wx.Brush)
Gurax_DeclareMethodAlias(wxDC, SetBackground_gurax, "SetBackground")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("brush", VTYPE_wxBrush, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetBackground_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxBrush& value_brush = args_gurax.Pick<Value_wxBrush>();
	const wxBrush& brush = value_brush.GetEntity();
	// Function body
	pEntity_gurax->SetBackground(brush);
	return Gurax::Value::nil();
}

// wx.DC#SetBrush(brush as wx.Brush)
Gurax_DeclareMethodAlias(wxDC, SetBrush_gurax, "SetBrush")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("brush", VTYPE_wxBrush, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetBrush_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxBrush& value_brush = args_gurax.Pick<Value_wxBrush>();
	const wxBrush& brush = value_brush.GetEntity();
	// Function body
	pEntity_gurax->SetBrush(brush);
	return Gurax::Value::nil();
}

// wx.DC#SetPen(pen as wx.Pen)
Gurax_DeclareMethodAlias(wxDC, SetPen_gurax, "SetPen")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("pen", VTYPE_wxPen, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetPen_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxPen& value_pen = args_gurax.Pick<Value_wxPen>();
	const wxPen& pen = value_pen.GetEntity();
	// Function body
	pEntity_gurax->SetPen(pen);
	return Gurax::Value::nil();
}

// wx.DC#CanUseTransformMatrix()
Gurax_DeclareMethodAlias(wxDC, CanUseTransformMatrix_gurax, "CanUseTransformMatrix")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CanUseTransformMatrix_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->CanUseTransformMatrix();
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#SetTransformMatrix(matrix as wx.AffineMatrix2D)
Gurax_DeclareMethodAlias(wxDC, SetTransformMatrix_gurax, "SetTransformMatrix")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("matrix", VTYPE_wxAffineMatrix2D, ArgOccur::Once, ArgFlag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, SetTransformMatrix_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxAffineMatrix2D& value_matrix = args_gurax.Pick<Value_wxAffineMatrix2D>();
	const wxAffineMatrix2D& matrix = value_matrix.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->SetTransformMatrix(matrix);
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#GetTransformMatrix() {block?}
Gurax_DeclareMethodAlias(wxDC, GetTransformMatrix_gurax, "GetTransformMatrix")
{
	Declare(VTYPE_wxAffineMatrix2D, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetTransformMatrix_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxAffineMatrix2D(
		pEntity_gurax->GetTransformMatrix()));
}

// wx.DC#ResetTransformMatrix()
Gurax_DeclareMethodAlias(wxDC, ResetTransformMatrix_gurax, "ResetTransformMatrix")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, ResetTransformMatrix_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->ResetTransformMatrix();
	return Gurax::Value::nil();
}

// wx.DC#CanDrawBitmap()
Gurax_DeclareMethodAlias(wxDC, CanDrawBitmap_gurax, "CanDrawBitmap")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CanDrawBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->CanDrawBitmap();
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#CanGetTextExtent()
Gurax_DeclareMethodAlias(wxDC, CanGetTextExtent_gurax, "CanGetTextExtent")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, CanGetTextExtent_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->CanGetTextExtent();
	return new Gurax::Value_Bool(rtn);
}

// wx.DC#GetLogicalOriginXY()
Gurax_DeclareMethodAlias(wxDC, GetLogicalOriginXY_gurax, "GetLogicalOriginXY")
{
	Declare(VTYPE_Tuple, Flag::None);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetLogicalOriginXY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord x, y;
	pEntity_gurax->GetLogicalOrigin(&x, &y);
	return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
}

// wx.DC#GetLogicalOrigin() {block?}
Gurax_DeclareMethodAlias(wxDC, GetLogicalOrigin_gurax, "GetLogicalOrigin")
{
	Declare(VTYPE_wxPoint, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(Gurax_Symbol(en), u8R"**(
)**");
}

Gurax_ImplementMethodEx(wxDC, GetLogicalOrigin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxPoint(
		pEntity_gurax->GetLogicalOrigin()));
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxDC
//------------------------------------------------------------------------------
VType_wxDC VTYPE_wxDC("DC");

void VType_wxDC::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp("en", g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_Object, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxDC, CopyAttributes_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetDepth_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetDeviceOrigin_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetLogicalFunction_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetMapMode_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetPixel_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetPPI_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetSize_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetSizeMM_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetUserScale_gurax));
	Assign(Gurax_CreateMethod(wxDC, IsOk_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetAxisOrientation_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetDeviceOrigin_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetLogicalFunction_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetMapMode_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetPalette_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetUserScale_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetAsBitmap_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetLogicalScale_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetLogicalScale_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetLogicalOrigin_gurax));
	Assign(Gurax_CreateMethod(wxDC, DeviceToLogicalX_gurax));
	Assign(Gurax_CreateMethod(wxDC, DeviceToLogicalXRel_gurax));
	Assign(Gurax_CreateMethod(wxDC, DeviceToLogicalY_gurax));
	Assign(Gurax_CreateMethod(wxDC, DeviceToLogicalYRel_gurax));
	Assign(Gurax_CreateMethod(wxDC, LogicalToDeviceX_gurax));
	Assign(Gurax_CreateMethod(wxDC, LogicalToDeviceXRel_gurax));
	Assign(Gurax_CreateMethod(wxDC, LogicalToDeviceY_gurax));
	Assign(Gurax_CreateMethod(wxDC, LogicalToDeviceYRel_gurax));
	Assign(Gurax_CreateMethod(wxDC, Clear_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawArc_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawBitmap_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawCheckMark_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawCircle_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawEllipse_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawEllipticArc_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawIcon_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawLabel_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawLine_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawLines_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawPoint_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawPolygon_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawPolyPolygon_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawRectangle_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawRotatedText_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawRoundedRectangle_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawSpline_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawSplineXY_gurax));
	Assign(Gurax_CreateMethod(wxDC, DrawText_gurax));
	Assign(Gurax_CreateMethod(wxDC, GradientFillConcentric_gurax));
	Assign(Gurax_CreateMethod(wxDC, GradientFillLinear_gurax));
	Assign(Gurax_CreateMethod(wxDC, FloodFill_gurax));
	Assign(Gurax_CreateMethod(wxDC, CrossHair_gurax));
	Assign(Gurax_CreateMethod(wxDC, DestroyClippingRegion_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetClippingBox_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetClippingRegion_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetDeviceClippingRegion_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetCharHeight_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetCharWidth_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetFontMetrics_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetMultiLineTextExtent_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetTextExtent_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetBackgroundMode_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetFont_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetLayoutDirection_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetTextBackground_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetTextForeground_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetBackgroundMode_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetFont_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetTextBackground_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetTextForeground_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetLayoutDirection_gurax));
	Assign(Gurax_CreateMethod(wxDC, CalcBoundingBox_gurax));
	Assign(Gurax_CreateMethod(wxDC, MaxX_gurax));
	Assign(Gurax_CreateMethod(wxDC, MaxY_gurax));
	Assign(Gurax_CreateMethod(wxDC, MinX_gurax));
	Assign(Gurax_CreateMethod(wxDC, MinY_gurax));
	Assign(Gurax_CreateMethod(wxDC, ResetBoundingBox_gurax));
	Assign(Gurax_CreateMethod(wxDC, StartDoc_gurax));
	Assign(Gurax_CreateMethod(wxDC, StartPage_gurax));
	Assign(Gurax_CreateMethod(wxDC, EndDoc_gurax));
	Assign(Gurax_CreateMethod(wxDC, EndPage_gurax));
	Assign(Gurax_CreateMethod(wxDC, Blit_gurax));
	Assign(Gurax_CreateMethod(wxDC, StretchBlit_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetBackground_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetBrush_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetPen_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetBackground_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetBrush_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetPen_gurax));
	Assign(Gurax_CreateMethod(wxDC, CanUseTransformMatrix_gurax));
	Assign(Gurax_CreateMethod(wxDC, SetTransformMatrix_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetTransformMatrix_gurax));
	Assign(Gurax_CreateMethod(wxDC, ResetTransformMatrix_gurax));
	Assign(Gurax_CreateMethod(wxDC, CanDrawBitmap_gurax));
	Assign(Gurax_CreateMethod(wxDC, CanGetTextExtent_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetLogicalOriginXY_gurax));
	Assign(Gurax_CreateMethod(wxDC, GetLogicalOrigin_gurax));
}

//------------------------------------------------------------------------------
// Value_wxDC
//------------------------------------------------------------------------------
VType& Value_wxDC::vtype = VTYPE_wxDC;

String Value_wxDC::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.DC");
}

Gurax_EndModuleScope(wx)
