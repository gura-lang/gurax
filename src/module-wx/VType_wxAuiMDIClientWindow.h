//==============================================================================
// VType_wxAuiMDIClientWindow.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXAUIMDICLIENTWINDOW_H
#define GURAX_MODULE_WX_VTYPE_WXAUIMDICLIENTWINDOW_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/aui/tabmdi.h>
#include "Util.h"
#include "VType_wxAuiNotebook.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxAuiMDIClientWindow
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxAuiMDIClientWindow : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxAuiMDIClientWindow VTYPE_wxAuiMDIClientWindow;

//------------------------------------------------------------------------------
// Value_wxAuiMDIClientWindow
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxAuiMDIClientWindow : public Value_wxAuiNotebook {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxAuiMDIClientWindow);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxAuiMDIClientWindow");
public:
	class EntityT : public wxAuiMDIClientWindow {
	public:
		using wxAuiMDIClientWindow::wxAuiMDIClientWindow;
	public:
		EntityCore core_gurax;
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxAuiMDIClientWindow() = delete;
	explicit Value_wxAuiMDIClientWindow(wxEvtHandler* pEntity, VType& vtype = VTYPE_wxAuiMDIClientWindow) :
		Value_wxAuiNotebook(pEntity, vtype) {}
	// Copy constructor/operator
	Value_wxAuiMDIClientWindow(const Value_wxAuiMDIClientWindow& src) = delete;
	Value_wxAuiMDIClientWindow& operator=(const Value_wxAuiMDIClientWindow& src) = delete;
	// Move constructor/operator
	Value_wxAuiMDIClientWindow(Value_wxAuiMDIClientWindow&& src) noexcept = delete;
	Value_wxAuiMDIClientWindow& operator=(Value_wxAuiMDIClientWindow&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxAuiMDIClientWindow() = default;
public:
	wxAuiMDIClientWindow& GetEntity() {
		return reinterpret_cast<wxAuiMDIClientWindow&>(Value_wxEvtHandler::GetEntity());
	}
	const wxAuiMDIClientWindow& GetEntity() const {
		return reinterpret_cast<const wxAuiMDIClientWindow&>(Value_wxEvtHandler::GetEntity());
	}
	wxAuiMDIClientWindow* GetEntityPtr() {
		return reinterpret_cast<wxAuiMDIClientWindow*>(Value_wxEvtHandler::GetEntityPtr());
	}
	const wxAuiMDIClientWindow* GetEntityPtr() const {
		return reinterpret_cast<const wxAuiMDIClientWindow*>(Value_wxEvtHandler::GetEntityPtr());
	}
public:
	static wxAuiMDIClientWindow& GetEntity(Value& value) {
		return dynamic_cast<Value_wxAuiMDIClientWindow&>(value).GetEntity();
	}
	static const wxAuiMDIClientWindow& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxAuiMDIClientWindow&>(value).GetEntity();
	}
	static wxAuiMDIClientWindow* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxAuiMDIClientWindow&>(value).GetEntityPtr();
	}
	static const wxAuiMDIClientWindow* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxAuiMDIClientWindow&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
