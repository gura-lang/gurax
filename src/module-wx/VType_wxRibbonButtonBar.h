//==============================================================================
// VType_wxRibbonButtonBar.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXRIBBONBUTTONBAR_H
#define GURAX_MODULE_WX_VTYPE_WXRIBBONBUTTONBAR_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/ribbon/buttonbar.h>
#include "Util.h"
#include "VType_wxRibbonControl.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxRibbonButtonBar
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxRibbonButtonBar : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxRibbonButtonBar VTYPE_wxRibbonButtonBar;

//------------------------------------------------------------------------------
// Value_wxRibbonButtonBar
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxRibbonButtonBar : public Value_wxRibbonControl {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxRibbonButtonBar);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxRibbonButtonBar");
protected:
	wxWeakRef<wxRibbonButtonBar> _pEntity;
public:
	class EntityT : public wxRibbonButtonBar {
	public:
		using wxRibbonButtonBar::wxRibbonButtonBar;
	public:
		EntityCore core_gurax;
		virtual size_t GetButtonCount() const override;
		virtual int GetItemId(wxRibbonButtonBarButtonBase* item) const override;
		virtual bool Realize() override;
		virtual void ClearButtons() override;
		virtual bool DeleteButton(int button_id) override;
		virtual void EnableButton(int button_id, bool enable) override;
		virtual void ToggleButton(int button_id, bool checked) override;
		size_t public_GetButtonCount() const { return wxRibbonButtonBar::GetButtonCount(); }
		int public_GetItemId(wxRibbonButtonBarButtonBase* item) const { return wxRibbonButtonBar::GetItemId(item); }
		bool public_Realize() { return wxRibbonButtonBar::Realize(); }
		void public_ClearButtons() { wxRibbonButtonBar::ClearButtons(); }
		bool public_DeleteButton(int button_id) { return wxRibbonButtonBar::DeleteButton(button_id); }
		void public_EnableButton(int button_id, bool enable) { wxRibbonButtonBar::EnableButton(button_id, enable); }
		void public_ToggleButton(int button_id, bool checked) { wxRibbonButtonBar::ToggleButton(button_id, checked); }
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxRibbonButtonBar() = delete;
	explicit Value_wxRibbonButtonBar(wxRibbonButtonBar* pEntity, VType& vtype = VTYPE_wxRibbonButtonBar) :
		Value_wxRibbonControl(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxRibbonButtonBar(const Value_wxRibbonButtonBar& src) = delete;
	Value_wxRibbonButtonBar& operator=(const Value_wxRibbonButtonBar& src) = delete;
	// Move constructor/operator
	Value_wxRibbonButtonBar(Value_wxRibbonButtonBar&& src) noexcept = delete;
	Value_wxRibbonButtonBar& operator=(Value_wxRibbonButtonBar&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxRibbonButtonBar() = default;
public:
	wxRibbonButtonBar& GetEntity() { return *_pEntity; }
	const wxRibbonButtonBar& GetEntity() const { return *_pEntity; }
	wxRibbonButtonBar* GetEntityPtr() { return _pEntity.get(); }
	const wxRibbonButtonBar* GetEntityPtr() const { return _pEntity.get(); }
public:
	static wxRibbonButtonBar& GetEntity(Value& value) {
		return dynamic_cast<Value_wxRibbonButtonBar&>(value).GetEntity();
	}
	static const wxRibbonButtonBar& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxRibbonButtonBar&>(value).GetEntity();
	}
	static wxRibbonButtonBar* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxRibbonButtonBar&>(value).GetEntityPtr();
	}
	static const wxRibbonButtonBar* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxRibbonButtonBar&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
