//==============================================================================
// VType_wxPropertyCategory.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXPROPERTYCATEGORY_H
#define GURAX_MODULE_WX_VTYPE_WXPROPERTYCATEGORY_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/propgrid/property.h>
#include "Util.h"
#include "VType_wxPGProperty.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxPropertyCategory
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxPropertyCategory : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxPropertyCategory VTYPE_wxPropertyCategory;

//------------------------------------------------------------------------------
// Value_wxPropertyCategory
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxPropertyCategory : public Value_wxPGProperty {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxPropertyCategory);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxPropertyCategory");
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxPropertyCategory() = delete;
	explicit Value_wxPropertyCategory(const wxPropertyCategory& entity, VType& vtype = VTYPE_wxPropertyCategory) :
		Value_wxPGProperty(entity, vtype) {}
	// Copy constructor/operator
	Value_wxPropertyCategory(const Value_wxPropertyCategory& src) = delete;
	Value_wxPropertyCategory& operator=(const Value_wxPropertyCategory& src) = delete;
	// Move constructor/operator
	Value_wxPropertyCategory(Value_wxPropertyCategory&& src) noexcept = delete;
	Value_wxPropertyCategory& operator=(Value_wxPropertyCategory&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxPropertyCategory() = default;
public:
	wxPropertyCategory& GetEntity() { return reinterpret_cast<wxPropertyCategory&>(Value_wxPGProperty::GetEntity()); }
	const wxPropertyCategory& GetEntity() const { return reinterpret_cast<const wxPropertyCategory&>(Value_wxPGProperty::GetEntity()); }
	wxPropertyCategory* GetEntityPtr() { return reinterpret_cast<wxPropertyCategory*>(Value_wxPGProperty::GetEntityPtr()); }\
	const wxPropertyCategory* GetEntityPtr() const { return reinterpret_cast<const wxPropertyCategory*>(Value_wxPGProperty::GetEntityPtr()); }
public:
	static wxPropertyCategory& GetEntity(Value& value) {
		return dynamic_cast<Value_wxPropertyCategory&>(value).GetEntity();
	}
	static const wxPropertyCategory& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxPropertyCategory&>(value).GetEntity();
	}
	static wxPropertyCategory* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxPropertyCategory&>(value).GetEntityPtr();
	}
	static const wxPropertyCategory* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxPropertyCategory&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
