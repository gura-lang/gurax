//==============================================================================
// VType_wxDateTime.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.DateTime, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.DateTime, `en)}

${help.ComposeMethodHelp(wx.DateTime, `en)}
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------
// wx.DateTime() {block?}
Gurax_DeclareConstructorAlias(DateTime_gurax, "DateTime")
{
	Declare(VTYPE_wxDateTime, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"Creates an instance of wx.DateTime.");
}

Gurax_ImplementConstructorEx(DateTime_gurax, processor_gurax, argument_gurax)
{
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxDateTime(
		wxDateTime()));
}

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.DateTime#ResetTime()
Gurax_DeclareMethodAlias(wxDateTime, ResetTime_gurax, "ResetTime")
{
	Declare(VTYPE_Any, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, ResetTime_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->ResetTime();
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetDay(day as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetDay_gurax, "SetDay")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("day", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetDay_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned short day = args_gurax.PickNumber<unsigned short>();
	// Function body
	pEntity_gurax->SetDay(day);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetFromDOS(ddt as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetFromDOS_gurax, "SetFromDOS")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("ddt", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetFromDOS_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned long ddt = args_gurax.PickNumber<unsigned long>();
	// Function body
	pEntity_gurax->SetFromDOS(ddt);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetHour(hour as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetHour_gurax, "SetHour")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("hour", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetHour_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned short hour = args_gurax.PickNumber<unsigned short>();
	// Function body
	pEntity_gurax->SetHour(hour);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetMillisecond(millisecond as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetMillisecond_gurax, "SetMillisecond")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("millisecond", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetMillisecond_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned short millisecond = args_gurax.PickNumber<unsigned short>();
	// Function body
	pEntity_gurax->SetMillisecond(millisecond);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetMinute(minute as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetMinute_gurax, "SetMinute")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("minute", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetMinute_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned short minute = args_gurax.PickNumber<unsigned short>();
	// Function body
	pEntity_gurax->SetMinute(minute);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetMonth(month as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetMonth_gurax, "SetMonth")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("month", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetMonth_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxDateTime::Month month = args_gurax.PickNumber<wxDateTime::Month>();
	// Function body
	pEntity_gurax->SetMonth(month);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetSecond(second as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetSecond_gurax, "SetSecond")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("second", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetSecond_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	unsigned short second = args_gurax.PickNumber<unsigned short>();
	// Function body
	pEntity_gurax->SetSecond(second);
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetToCurrent()
Gurax_DeclareMethodAlias(wxDateTime, SetToCurrent_gurax, "SetToCurrent")
{
	Declare(VTYPE_Any, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetToCurrent_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->SetToCurrent();
	return valueThis_gurax.Reference();
}

// wx.DateTime#SetYear(year as Number)
Gurax_DeclareMethodAlias(wxDateTime, SetYear_gurax, "SetYear")
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("year", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, SetYear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int year = args_gurax.PickNumber<int>();
	// Function body
	pEntity_gurax->SetYear(year);
	return valueThis_gurax.Reference();
}

// wx.DateTime#GetAsDOS()
Gurax_DeclareMethodAlias(wxDateTime, GetAsDOS_gurax, "GetAsDOS")
{
	Declare(VTYPE_Number, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, GetAsDOS_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	unsigned long rtn = pEntity_gurax->GetAsDOS();
	return new Gurax::Value_Number(rtn);
}

// wx.DateTime#IsValid()
Gurax_DeclareMethodAlias(wxDateTime, IsValid_gurax, "IsValid")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsValid_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsValid();
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsWorkDay(country? as Number)
Gurax_DeclareMethodAlias(wxDateTime, IsWorkDay_gurax, "IsWorkDay")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("country", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsWorkDay_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	bool country_validFlag = args_gurax.IsValid();
	wxDateTime::Country country = country_validFlag? args_gurax.PickNumber<wxDateTime::Country>() : wxDateTime::Country_Default;
	// Function body
	bool rtn = pEntity_gurax->IsWorkDay(country);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsEarlierThan(datetime as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsEarlierThan_gurax, "IsEarlierThan")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("datetime", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsEarlierThan_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_datetime = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& datetime = value_datetime.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsEarlierThan(datetime);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsEqualTo(datetime as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsEqualTo_gurax, "IsEqualTo")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("datetime", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsEqualTo_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_datetime = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& datetime = value_datetime.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsEqualTo(datetime);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsLaterThan(datetime as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsLaterThan_gurax, "IsLaterThan")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("datetime", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsLaterThan_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_datetime = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& datetime = value_datetime.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsLaterThan(datetime);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsSameDate(dt as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsSameDate_gurax, "IsSameDate")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("dt", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsSameDate_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_dt = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& dt = value_dt.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsSameDate(dt);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsSameTime(dt as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsSameTime_gurax, "IsSameTime")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("dt", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsSameTime_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_dt = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& dt = value_dt.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsSameTime(dt);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsStrictlyBetween(t1 as wx.DateTime, t2 as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsStrictlyBetween_gurax, "IsStrictlyBetween")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("t1", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	DeclareArg("t2", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsStrictlyBetween_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_t1 = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& t1 = value_t1.GetEntity();
	Value_wxDateTime& value_t2 = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& t2 = value_t2.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsStrictlyBetween(t1, t2);
	return new Gurax::Value_Bool(rtn);
}

// wx.DateTime#IsBetween(t1 as wx.DateTime, t2 as wx.DateTime)
Gurax_DeclareMethodAlias(wxDateTime, IsBetween_gurax, "IsBetween")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("t1", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	DeclareArg("t2", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxDateTime, IsBetween_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_t1 = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& t1 = value_t1.GetEntity();
	Value_wxDateTime& value_t2 = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& t2 = value_t2.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsBetween(t1, t2);
	return new Gurax::Value_Bool(rtn);
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxDateTime
//------------------------------------------------------------------------------
VType_wxDateTime VTYPE_wxDateTime("DateTime");

void VType_wxDateTime::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp("en", g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_Object, Flag::Mutable, Gurax_CreateConstructor(DateTime_gurax));
	// Assignment of constant value
	GetFrame().Assign("Local", new Value_Number(wxDateTime::Local));
	GetFrame().Assign("GMT_12", new Value_Number(wxDateTime::GMT_12));
	GetFrame().Assign("GMT_11", new Value_Number(wxDateTime::GMT_11));
	GetFrame().Assign("Gregorian", new Value_Number(wxDateTime::Gregorian));
	GetFrame().Assign("Julian", new Value_Number(wxDateTime::Julian));
	GetFrame().Assign("Country_Unknown", new Value_Number(wxDateTime::Country_Unknown));
	GetFrame().Assign("Country_Default", new Value_Number(wxDateTime::Country_Default));
	GetFrame().Assign("Country_WesternEurope_Start", new Value_Number(wxDateTime::Country_WesternEurope_Start));
	GetFrame().Assign("Country_EEC", new Value_Number(wxDateTime::Country_EEC));
	GetFrame().Assign("France", new Value_Number(wxDateTime::France));
	GetFrame().Assign("Germany", new Value_Number(wxDateTime::Germany));
	GetFrame().Assign("UK", new Value_Number(wxDateTime::UK));
	GetFrame().Assign("Country_WesternEurope_End", new Value_Number(wxDateTime::Country_WesternEurope_End));
	GetFrame().Assign("Russia", new Value_Number(wxDateTime::Russia));
	GetFrame().Assign("USA", new Value_Number(wxDateTime::USA));
	GetFrame().Assign("Jan", new Value_Number(wxDateTime::Jan));
	GetFrame().Assign("Feb", new Value_Number(wxDateTime::Feb));
	GetFrame().Assign("Mar", new Value_Number(wxDateTime::Mar));
	GetFrame().Assign("Apr", new Value_Number(wxDateTime::Apr));
	GetFrame().Assign("May", new Value_Number(wxDateTime::May));
	GetFrame().Assign("Jun", new Value_Number(wxDateTime::Jun));
	GetFrame().Assign("Jul", new Value_Number(wxDateTime::Jul));
	GetFrame().Assign("Aug", new Value_Number(wxDateTime::Aug));
	GetFrame().Assign("Sep", new Value_Number(wxDateTime::Sep));
	GetFrame().Assign("Oct", new Value_Number(wxDateTime::Oct));
	GetFrame().Assign("Nov", new Value_Number(wxDateTime::Nov));
	GetFrame().Assign("Dec", new Value_Number(wxDateTime::Dec));
	GetFrame().Assign("Inv_Month", new Value_Number(wxDateTime::Inv_Month));
	GetFrame().Assign("Sun", new Value_Number(wxDateTime::Sun));
	GetFrame().Assign("Mon", new Value_Number(wxDateTime::Mon));
	GetFrame().Assign("Tue", new Value_Number(wxDateTime::Tue));
	GetFrame().Assign("Wed", new Value_Number(wxDateTime::Wed));
	GetFrame().Assign("Thu", new Value_Number(wxDateTime::Thu));
	GetFrame().Assign("Fri", new Value_Number(wxDateTime::Fri));
	GetFrame().Assign("Sat", new Value_Number(wxDateTime::Sat));
	GetFrame().Assign("Inv_WeekDay", new Value_Number(wxDateTime::Inv_WeekDay));
	GetFrame().Assign("Inv_Year", new Value_Number(wxDateTime::Inv_Year));
	GetFrame().Assign("Name_Full", new Value_Number(wxDateTime::Name_Full));
	GetFrame().Assign("Name_Abbr", new Value_Number(wxDateTime::Name_Abbr));
	GetFrame().Assign("Default_First", new Value_Number(wxDateTime::Default_First));
	GetFrame().Assign("Monday_First", new Value_Number(wxDateTime::Monday_First));
	GetFrame().Assign("Sunday_First", new Value_Number(wxDateTime::Sunday_First));
	// Assignment of method
	Assign(Gurax_CreateMethod(wxDateTime, ResetTime_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetDay_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetFromDOS_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetHour_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetMillisecond_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetMinute_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetMonth_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetSecond_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetToCurrent_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, SetYear_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, GetAsDOS_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsValid_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsWorkDay_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsEarlierThan_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsEqualTo_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsLaterThan_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsSameDate_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsSameTime_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsStrictlyBetween_gurax));
	Assign(Gurax_CreateMethod(wxDateTime, IsBetween_gurax));
}

//------------------------------------------------------------------------------
// Value_wxDateTime
//------------------------------------------------------------------------------
VType& Value_wxDateTime::vtype = VTYPE_wxDateTime;

String Value_wxDateTime::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.DateTime");
}

Gurax_EndModuleScope(wx)
