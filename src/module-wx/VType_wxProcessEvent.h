//==============================================================================
// VType_wxProcessEvent.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXPROCESSEVENT_H
#define GURAX_MODULE_WX_VTYPE_WXPROCESSEVENT_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/process.h>
#include "Util.h"
#include "VType_wxEvent.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxProcessEvent
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxProcessEvent : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxProcessEvent VTYPE_wxProcessEvent;

//------------------------------------------------------------------------------
// Value_wxProcessEvent
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxProcessEvent : public Value_wxEvent {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxProcessEvent);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxProcessEvent");
public:
	static VType& vtype;
	static EventValueFactoryDeriv<Value_wxProcessEvent> eventValueFactory;
public:
	// Constructor
	Value_wxProcessEvent() = delete;
	Value_wxProcessEvent(wxEvent& entity, Value* pValueUserData, VType& vtype = VTYPE_wxProcessEvent) :
		Value_wxEvent(entity, pValueUserData, vtype) {}
	// Copy constructor/operator
	Value_wxProcessEvent(const Value_wxProcessEvent& src) = delete;
	Value_wxProcessEvent& operator=(const Value_wxProcessEvent& src) = delete;
	// Move constructor/operator
	Value_wxProcessEvent(Value_wxProcessEvent&& src) noexcept = delete;
	Value_wxProcessEvent& operator=(Value_wxProcessEvent&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxProcessEvent() = default;
public:
	wxProcessEvent& GetEntity() { return reinterpret_cast<wxProcessEvent&>(Value_wxEvent::GetEntity()); }
	const wxProcessEvent& GetEntity() const { return reinterpret_cast<const wxProcessEvent&>(Value_wxEvent::GetEntity()); }
	wxProcessEvent* GetEntityPtr() { return reinterpret_cast<wxProcessEvent*>(Value_wxEvent::GetEntityPtr()); }\
	const wxProcessEvent* GetEntityPtr() const { return reinterpret_cast<const wxProcessEvent*>(Value_wxEvent::GetEntityPtr()); }
public:
	static wxProcessEvent& GetEntity(Value& value) {
		return dynamic_cast<Value_wxProcessEvent&>(value).GetEntity();
	}
	static const wxProcessEvent& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxProcessEvent&>(value).GetEntity();
	}
	static wxProcessEvent* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxProcessEvent&>(value).GetEntityPtr();
	}
	static const wxProcessEvent* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxProcessEvent&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
