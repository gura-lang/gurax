//==============================================================================
// VType_wxTimePickerCtrl.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"""(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.TimePickerCtrl, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.TimePickerCtrl, `en)}

${help.ComposeMethodHelp(wx.TimePickerCtrl, `en)}
)""";

static const char* g_docHelp_ja = u8R"""(
# 概要

# 定数

${help.ComposePropertyHelp(wx.TimePickerCtrl, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.TimePickerCtrl, `ja)}

${help.ComposeMethodHelp(wx.TimePickerCtrl, `ja)}
)""";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------
// wx.TimePickerCtrl(parent as wx.Window, id as Number, dt? as wx.DateTime, pos? as wx.Point, size? as wx.Size, style? as Number, validator? as wx.Validator, name? as String) {block?}
Gurax_DeclareConstructorAlias(TimePickerCtrl_gurax, "TimePickerCtrl")
{
	Declare(VTYPE_wxTimePickerCtrl, Flag::None);
	DeclareArg("parent", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("dt", VTYPE_wxDateTime, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("pos", VTYPE_wxPoint, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("size", VTYPE_wxSize, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("style", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("validator", VTYPE_wxValidator, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("name", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementConstructorEx(TimePickerCtrl_gurax, processor_gurax, argument_gurax)
{
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_parent = args_gurax.Pick<Value_wxWindow>();
	wxWindow* parent = value_parent.GetEntityPtr();
	wxWindowID id = args_gurax.PickNumber<wxWindowID>();
	const wxDateTime& dt = args_gurax.IsValid()? args_gurax.Pick<Value_wxDateTime>().GetEntity() : wxDefaultDateTime;
	const wxPoint& pos = args_gurax.IsValid()? args_gurax.Pick<Value_wxPoint>().GetEntity() : wxDefaultPosition;
	const wxSize& size = args_gurax.IsValid()? args_gurax.Pick<Value_wxSize>().GetEntity() : wxDefaultSize;
	bool style_validFlag = args_gurax.IsValid();
	long style = style_validFlag? args_gurax.PickNumber<long>() : wxTP_DEFAULT;
	const wxValidator& validator = args_gurax.IsValid()? args_gurax.Pick<Value_wxValidator>().GetEntity() : wxDefaultValidator;
	bool name_validFlag = args_gurax.IsValid();
	wxString name = name_validFlag? wxString(args_gurax.PickString()) : "timectrl";
	// Function body
	auto pEntity_gurax = new Value_wxTimePickerCtrl::EntityT(parent, id, dt, pos, size, style, validator, name);
	RefPtr<Value_wxTimePickerCtrl> pValue_gurax(new Value_wxTimePickerCtrl(pEntity_gurax));
	pEntity_gurax->core_gurax.SetInfo(processor_gurax.Reference(), *pValue_gurax);
	return argument_gurax.ReturnValue(processor_gurax, pValue_gurax.release());
}

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.TimePickerCtrl#Create(parent as wx.Window, id as Number, dt? as wx.DateTime, pos? as wx.Point, size? as wx.Size, style? as Number, validator? as wx.Validator, name? as String)
Gurax_DeclareMethodAlias(wxTimePickerCtrl, Create_gurax, "Create")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("parent", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("dt", VTYPE_wxDateTime, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("pos", VTYPE_wxPoint, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("size", VTYPE_wxSize, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("style", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("validator", VTYPE_wxValidator, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("name", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxTimePickerCtrl, Create_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_parent = args_gurax.Pick<Value_wxWindow>();
	wxWindow* parent = value_parent.GetEntityPtr();
	wxWindowID id = args_gurax.PickNumber<wxWindowID>();
	const wxDateTime& dt = args_gurax.IsValid()? args_gurax.Pick<Value_wxDateTime>().GetEntity() : wxDefaultDateTime;
	const wxPoint& pos = args_gurax.IsValid()? args_gurax.Pick<Value_wxPoint>().GetEntity() : wxDefaultPosition;
	const wxSize& size = args_gurax.IsValid()? args_gurax.Pick<Value_wxSize>().GetEntity() : wxDefaultSize;
	bool style_validFlag = args_gurax.IsValid();
	long style = style_validFlag? args_gurax.PickNumber<long>() : (wxDP_DEFAULT | wxDP_SHOWCENTURY);
	const wxValidator& validator = args_gurax.IsValid()? args_gurax.Pick<Value_wxValidator>().GetEntity() : wxDefaultValidator;
	bool name_validFlag = args_gurax.IsValid();
	wxString name = name_validFlag? wxString(args_gurax.PickString()) : "timectrl";
	// Function body
	bool rtn = pEntity_gurax->Create(parent, id, dt, pos, size, style, validator, name);
	return new Gurax::Value_Bool(rtn);
}

// wx.TimePickerCtrl#GetTime(&hour:nilRef as Number, &min:nilRef as Number, &sec:nilRef as Number)
Gurax_DeclareMethodAlias(wxTimePickerCtrl, GetTime_gurax, "GetTime")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("hour", VTYPE_Number, ArgOccur::Once, ArgFlag::NilRef | ArgFlag::Referencer);
	DeclareArg("min", VTYPE_Number, ArgOccur::Once, ArgFlag::NilRef | ArgFlag::Referencer);
	DeclareArg("sec", VTYPE_Number, ArgOccur::Once, ArgFlag::NilRef | ArgFlag::Referencer);
}

Gurax_ImplementMethodEx(wxTimePickerCtrl, GetTime_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	RefPtr<Referencer> hour(args_gurax.PickReferencer().Reference());
	RefPtr<Referencer> min(args_gurax.PickReferencer().Reference());
	RefPtr<Referencer> sec(args_gurax.PickReferencer().Reference());
	// Function body
	int hour_, min_, sec_;
	bool rtn = pEntity_gurax->GetTime(&hour_, &min_, &sec_);
	hour->SetValue(new Value_Number(hour_));
	min->SetValue(new Value_Number(min_));
	sec->SetValue(new Value_Number(sec_));
	return new Value_Bool(rtn);
}

// wx.TimePickerCtrl#GetValue() {block?}
Gurax_DeclareMethodAlias(wxTimePickerCtrl, GetValue_gurax, "GetValue")
{
	Declare(VTYPE_wxDateTime, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxTimePickerCtrl, GetValue_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = dynamic_cast<Value_wxTimePickerCtrl::EntityT*>(valueThis_gurax.GetEntityPtr());
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxDateTime(
		pEntity_gurax->GetValue()));
}

// wx.TimePickerCtrl#SetTime(hour as Number, min as Number, sec as Number)
Gurax_DeclareMethodAlias(wxTimePickerCtrl, SetTime_gurax, "SetTime")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("hour", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("min", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("sec", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxTimePickerCtrl, SetTime_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int hour = args_gurax.PickNumber<int>();
	int min = args_gurax.PickNumber<int>();
	int sec = args_gurax.PickNumber<int>();
	// Function body
	bool rtn = pEntity_gurax->SetTime(hour, min, sec);
	return new Gurax::Value_Bool(rtn);
}

// wx.TimePickerCtrl#SetValue(dt as wx.DateTime)
Gurax_DeclareMethodAlias(wxTimePickerCtrl, SetValue_gurax, "SetValue")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("dt", VTYPE_wxDateTime, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxTimePickerCtrl, SetValue_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = dynamic_cast<Value_wxTimePickerCtrl::EntityT*>(valueThis_gurax.GetEntityPtr());
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDateTime& value_dt = args_gurax.Pick<Value_wxDateTime>();
	const wxDateTime& dt = value_dt.GetEntity();
	// Function body
	pEntity_gurax->SetValue(dt);
	return Gurax::Value::nil();
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxTimePickerCtrl
//------------------------------------------------------------------------------
VType_wxTimePickerCtrl VTYPE_wxTimePickerCtrl("TimePickerCtrl");

void VType_wxTimePickerCtrl::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp(Gurax_Symbol(en), g_docHelp_en);
	AddHelp(Gurax_Symbol(ja), g_docHelp_ja);
	// Declaration of VType
	Declare(VTYPE_wxControl, Flag::Mutable, Gurax_CreateConstructor(TimePickerCtrl_gurax));
	// Assignment of method
	Assign(Gurax_CreateMethod(wxTimePickerCtrl, Create_gurax));
	Assign(Gurax_CreateMethod(wxTimePickerCtrl, GetTime_gurax));
	Assign(Gurax_CreateMethod(wxTimePickerCtrl, GetValue_gurax));
	Assign(Gurax_CreateMethod(wxTimePickerCtrl, SetTime_gurax));
	Assign(Gurax_CreateMethod(wxTimePickerCtrl, SetValue_gurax));
}

//------------------------------------------------------------------------------
// Value_wxTimePickerCtrl
//------------------------------------------------------------------------------
VType& Value_wxTimePickerCtrl::vtype = VTYPE_wxTimePickerCtrl;

String Value_wxTimePickerCtrl::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.TimePickerCtrl");
}

//------------------------------------------------------------------------------
// Value_wxTimePickerCtrl::EntityT
//------------------------------------------------------------------------------
wxDateTime Value_wxTimePickerCtrl::EntityT::GetValue() const
{
	static const Symbol* pSymbolFunc = nullptr;
	if (!pSymbolFunc) pSymbolFunc = Symbol::Add("GetValue");
	do {
		Gurax::Function* pFunc_gurax;
		RefPtr<Gurax::Argument> pArgument_gurax;
		if (!core_gurax.PrepareOverrideMethod(pSymbolFunc, &pFunc_gurax, pArgument_gurax)) break;
		// Argument
		// (none)
		// Evaluation
		RefPtr<Value> pValueRtn(pFunc_gurax->Eval(core_gurax.GetProcessor(), *pArgument_gurax));
		if (Error::IsIssued()) {
			Util::ExitMainLoop();
			break;
		}
		// Return Value
		if (!pValueRtn->IsInstanceOf(VTYPE_wxDateTime)) {
			Error::Issue(ErrorType::TypeError, "the function GetValue is expected to return a value of %s or its derived class",
				VTYPE_wxDateTime.MakeFullName().c_str());
			Util::ExitMainLoop();
			break;
		}
		return Value_wxDateTime::GetEntity(*pValueRtn);
	} while (0);
	return public_GetValue();
}

void Value_wxTimePickerCtrl::EntityT::SetValue(const wxDateTime& dt)
{
	static const Symbol* pSymbolFunc = nullptr;
	if (!pSymbolFunc) pSymbolFunc = Symbol::Add("SetValue");
	do {
		Gurax::Function* pFunc_gurax;
		RefPtr<Gurax::Argument> pArgument_gurax;
		if (!core_gurax.PrepareOverrideMethod(pSymbolFunc, &pFunc_gurax, pArgument_gurax)) break;
		// Argument
		Gurax::ArgFeeder args_gurax(*pArgument_gurax, core_gurax.GetProcessor().GetFrameCur());
		if (!args_gurax.FeedValue(new Value_wxDateTime(dt))) {
			Util::ExitMainLoop();
			break;
		}
		// Evaluation
		RefPtr<Value> pValueRtn(pFunc_gurax->Eval(core_gurax.GetProcessor(), *pArgument_gurax));
		if (Error::IsIssued()) {
			Util::ExitMainLoop();
			break;
		}
		return;
	} while (0);
	public_SetValue(dt);
}

Gurax_EndModuleScope(wx)
