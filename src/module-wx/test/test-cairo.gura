#!/usr/bin/env gurax
import(wx)
import(cairo) {*}
import(png)

M_PI = math.pi
sqrt(x) = math.Sqrt(x)

MyApp = class(wx.App) {
	OnInit() = {
		MyFrame(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(800, 600)).Show()
		true
	}
}

MyFrame = class(wx.Frame) {
	canvas as Canvas
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		this.canvas = Canvas(this)
		this.canvas.EvalSample(Sample_curve_rectangle)
		this.canvas.Refresh()
	}
}

Sample_arc = class {
	name:static = "arc"
	Draw(cr as cairo_t) = {
		xc = 128.0;
		yc = 128.0;
		radius = 100.0;
		angle1 = 45.0  * (M_PI/180.0);  /* angles are specified */
		angle2 = 180.0 * (M_PI/180.0);  /* in radians           */

		cairo_set_line_width (cr, 10.0);
		cairo_arc (cr, xc, yc, radius, angle1, angle2);
		cairo_stroke (cr);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);

		cairo_arc (cr, xc, yc, 10.0, 0, 2*M_PI);
		cairo_fill (cr);

		cairo_arc (cr, xc, yc, radius, angle1, angle1);
		cairo_line_to (cr, xc, yc);
		cairo_arc (cr, xc, yc, radius, angle2, angle2);
		cairo_line_to (cr, xc, yc);
		cairo_stroke (cr);
	}
}

Sample_curve_rectangle = class {
	name:static = "curve rectangle"
	Draw(cr as cairo_t) = {
		/* a custom shape that could be wrapped in a function */
		x0      = 25.6,   /* parameters like cairo_rectangle */
		y0      = 25.6,
		rect_width  = 204.8,
		rect_height = 204.8,
		radius = 102.4;   /* and an approximate curvature radius */

		x1=x0+rect_width;
		y1=y0+rect_height;
		(rect_width == 0 || rect_height == 0) && return
		if (rect_width/2<radius) {
			if (rect_height/2<radius) {
				cairo_move_to  (cr, x0, (y0 + y1)/2);
				cairo_curve_to (cr, x0 ,y0, x0, y0, (x0 + x1)/2, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, (y0 + y1)/2);
				cairo_curve_to (cr, x1, y1, x1, y1, (x1 + x0)/2, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, (y0 + y1)/2);
			} else {
				cairo_move_to  (cr, x0, y0 + radius);
				cairo_curve_to (cr, x0 ,y0, x0, y0, (x0 + x1)/2, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, y0 + radius);
				cairo_line_to (cr, x1 , y1 - radius);
				cairo_curve_to (cr, x1, y1, x1, y1, (x1 + x0)/2, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, y1- radius);
			}
		} else {
			if (rect_height/2<radius) {
				cairo_move_to  (cr, x0, (y0 + y1)/2);
				cairo_curve_to (cr, x0 , y0, x0 , y0, x0 + radius, y0);
				cairo_line_to (cr, x1 - radius, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, (y0 + y1)/2);
				cairo_curve_to (cr, x1, y1, x1, y1, x1 - radius, y1);
				cairo_line_to (cr, x0 + radius, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, (y0 + y1)/2);
			} else {
				cairo_move_to  (cr, x0, y0 + radius);
				cairo_curve_to (cr, x0 , y0, x0 , y0, x0 + radius, y0);
				cairo_line_to (cr, x1 - radius, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, y0 + radius);
				cairo_line_to (cr, x1 , y1 - radius);
				cairo_curve_to (cr, x1, y1, x1, y1, x1 - radius, y1);
				cairo_line_to (cr, x0 + radius, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, y1- radius);
			}
		}
		cairo_close_path (cr);

		cairo_set_source_rgb (cr, 0.5, 0.5, 1);
		cairo_fill_preserve (cr);
		cairo_set_source_rgba (cr, 0.5, 0, 0, 0.5);
		cairo_set_line_width (cr, 10.0);
		cairo_stroke (cr);
	}
}

Canvas = class(wx.Panel) {
	img as Image
	__init__(parent as wx.Window) = {|parent|
		wx.EVT_PAINT(this, this.OnPaint)
	}
	EvalSample(sample as VType) = {
		surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 256, 256)
		cr = surface.create()
		sample().Draw(cr)
		cairo_fill(cr)
		cr.destroy()
		this.img = surface.ToImage()
		surface.destroy()
	}
	OnPaint(event as wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		this.img && dc.DrawBitmap(this.img, 10, 10)
		dc = nil
	}
}

wx.ImplementApp(MyApp())
