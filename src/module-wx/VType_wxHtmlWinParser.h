//==============================================================================
// VType_wxHtmlWinParser.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXHTMLWINPARSER_H
#define GURAX_MODULE_WX_VTYPE_WXHTMLWINPARSER_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/html/winpars.h>
#include "Util.h"
#include "VType_wxHtmlParser.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxHtmlWinParser
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxHtmlWinParser : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxHtmlWinParser VTYPE_wxHtmlWinParser;

//------------------------------------------------------------------------------
// Value_wxHtmlWinParser
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxHtmlWinParser : public Value_wxHtmlParser {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxHtmlWinParser);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxHtmlWinParser");
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxHtmlWinParser() = delete;
	explicit Value_wxHtmlWinParser(const wxHtmlWinParser& entity, VType& vtype = VTYPE_wxHtmlWinParser) :
		Value_wxHtmlParser(entity, vtype) {}
	// Copy constructor/operator
	Value_wxHtmlWinParser(const Value_wxHtmlWinParser& src) = delete;
	Value_wxHtmlWinParser& operator=(const Value_wxHtmlWinParser& src) = delete;
	// Move constructor/operator
	Value_wxHtmlWinParser(Value_wxHtmlWinParser&& src) noexcept = delete;
	Value_wxHtmlWinParser& operator=(Value_wxHtmlWinParser&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxHtmlWinParser() = default;
public:
	wxHtmlWinParser& GetEntity() { return reinterpret_cast<wxHtmlWinParser&>(Value_wxHtmlParser::GetEntity()); }
	const wxHtmlWinParser& GetEntity() const { return reinterpret_cast<const wxHtmlWinParser&>(Value_wxHtmlParser::GetEntity()); }
	wxHtmlWinParser* GetEntityPtr() { return reinterpret_cast<wxHtmlWinParser*>(Value_wxHtmlParser::GetEntityPtr()); }\
	const wxHtmlWinParser* GetEntityPtr() const { return reinterpret_cast<const wxHtmlWinParser*>(Value_wxHtmlParser::GetEntityPtr()); }
public:
	static wxHtmlWinParser& GetEntity(Value& value) {
		return dynamic_cast<Value_wxHtmlWinParser&>(value).GetEntity();
	}
	static const wxHtmlWinParser& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxHtmlWinParser&>(value).GetEntity();
	}
	static wxHtmlWinParser* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxHtmlWinParser&>(value).GetEntityPtr();
	}
	static const wxHtmlWinParser* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxHtmlWinParser&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
