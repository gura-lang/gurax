//==============================================================================
// VType_wxGrid.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXGRID_H
#define GURAX_MODULE_WX_VTYPE_WXGRID_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/grid.h>
#include "Util.h"
#include "VType_wxScrolledCanvas.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxGrid
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxGrid : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxGrid VTYPE_wxGrid;

//------------------------------------------------------------------------------
// Value_wxGrid
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxGrid : public Value_wxScrolledCanvas {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxGrid);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxGrid");
protected:
	wxWeakRef<wxGrid> _pEntity;
public:
	class EntityT : public wxGrid {
	public:
		using wxGrid::wxGrid;
	public:
		EntityCore core_gurax;
		virtual void DrawRowLabel(wxDC& dc, int row) override;
		virtual void DrawColLabel(wxDC& dc, int col) override;
		virtual void DrawCornerLabel(wxDC& dc) override;
		virtual wxPen GetColGridLinePen(int col) override;
		virtual wxPen GetDefaultGridLinePen() override;
		virtual wxPen GetRowGridLinePen(int row) override;
		virtual void Fit() override;
		void public_DrawRowLabel(wxDC& dc, int row) { wxGrid::DrawRowLabel(dc, row); }
		void public_DrawColLabel(wxDC& dc, int col) { wxGrid::DrawColLabel(dc, col); }
		void public_DrawCornerLabel(wxDC& dc) { wxGrid::DrawCornerLabel(dc); }
		wxPen public_GetColGridLinePen(int col) { return wxGrid::GetColGridLinePen(col); }
		wxPen public_GetDefaultGridLinePen() { return wxGrid::GetDefaultGridLinePen(); }
		wxPen public_GetRowGridLinePen(int row) { return wxGrid::GetRowGridLinePen(row); }
		void public_Fit() { wxGrid::Fit(); }
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxGrid() = delete;
	explicit Value_wxGrid(wxGrid* pEntity, VType& vtype = VTYPE_wxGrid) :
		Value_wxScrolledCanvas(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxGrid(const Value_wxGrid& src) = delete;
	Value_wxGrid& operator=(const Value_wxGrid& src) = delete;
	// Move constructor/operator
	Value_wxGrid(Value_wxGrid&& src) noexcept = delete;
	Value_wxGrid& operator=(Value_wxGrid&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxGrid() = default;
public:
	wxGrid& GetEntity() { return *_pEntity; }
	const wxGrid& GetEntity() const { return *_pEntity; }
	wxGrid* GetEntityPtr() { return _pEntity.get(); }
	const wxGrid* GetEntityPtr() const { return _pEntity.get(); }
public:
	static wxGrid& GetEntity(Value& value) {
		return dynamic_cast<Value_wxGrid&>(value).GetEntity();
	}
	static const wxGrid& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxGrid&>(value).GetEntity();
	}
	static wxGrid* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxGrid&>(value).GetEntityPtr();
	}
	static const wxGrid* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxGrid&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
