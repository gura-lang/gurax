//==============================================================================
// VType_wxImage.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXIMAGE_H
#define GURAX_MODULE_WX_VTYPE_WXIMAGE_H
#include <gurax.h>
#include <wx/wx.h>
#include "Util.h"
#include "VType_wxObject.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxImage
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxImage : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
	virtual Value* DoCastFrom(Processor& processor, const Value& value, DeclArg::Flags flags) const override;
};

extern GURAX_DLLDECLARE VType_wxImage VTYPE_wxImage;

//------------------------------------------------------------------------------
// Value_wxImage
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxImage : public Value_wxObject {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxImage);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxImage");
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxImage() = delete;
	explicit Value_wxImage(const wxImage& entity, VType& vtype = VTYPE_wxImage) :
		Value_wxObject(entity, vtype) {}
	// Copy constructor/operator
	Value_wxImage(const Value_wxImage& src) = delete;
	Value_wxImage& operator=(const Value_wxImage& src) = delete;
	// Move constructor/operator
	Value_wxImage(Value_wxImage&& src) noexcept = delete;
	Value_wxImage& operator=(Value_wxImage&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxImage() = default;
public:
	wxImage& GetEntity() { return reinterpret_cast<wxImage&>(Value_wxObject::GetEntity()); }
	const wxImage& GetEntity() const { return reinterpret_cast<const wxImage&>(Value_wxObject::GetEntity()); }
	wxImage* GetEntityPtr() { return reinterpret_cast<wxImage*>(Value_wxObject::GetEntityPtr()); }\
	const wxImage* GetEntityPtr() const { return reinterpret_cast<const wxImage*>(Value_wxObject::GetEntityPtr()); }
public:
	static wxImage& GetEntity(Value& value) {
		return dynamic_cast<Value_wxImage&>(value).GetEntity();
	}
	static const wxImage& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxImage&>(value).GetEntity();
	}
	static wxImage* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxImage&>(value).GetEntityPtr();
	}
	static const wxImage* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxImage&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
