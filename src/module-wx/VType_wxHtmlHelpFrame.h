//==============================================================================
// VType_wxHtmlHelpFrame.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXHTMLHELPFRAME_H
#define GURAX_MODULE_WX_VTYPE_WXHTMLHELPFRAME_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/html/helpfrm.h>
#include "Util.h"
#include "VType_wxFrame.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxHtmlHelpFrame
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxHtmlHelpFrame : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxHtmlHelpFrame VTYPE_wxHtmlHelpFrame;

//------------------------------------------------------------------------------
// Value_wxHtmlHelpFrame
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxHtmlHelpFrame : public Value_wxFrame {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxHtmlHelpFrame);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxHtmlHelpFrame");
protected:
	wxWeakRef<wxHtmlHelpFrame> _pEntity;
public:
	class EntityT : public wxHtmlHelpFrame {
	public:
		using wxHtmlHelpFrame::wxHtmlHelpFrame;
	public:
		EntityCore core_gurax;
		virtual void AddToolbarButtons(wxToolBar* toolBar, int style) override;
		void public_AddToolbarButtons(wxToolBar* toolBar, int style) { wxHtmlHelpFrame::AddToolbarButtons(toolBar, style); }
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxHtmlHelpFrame() = delete;
	explicit Value_wxHtmlHelpFrame(wxHtmlHelpFrame* pEntity, VType& vtype = VTYPE_wxHtmlHelpFrame) :
		Value_wxFrame(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxHtmlHelpFrame(const Value_wxHtmlHelpFrame& src) = delete;
	Value_wxHtmlHelpFrame& operator=(const Value_wxHtmlHelpFrame& src) = delete;
	// Move constructor/operator
	Value_wxHtmlHelpFrame(Value_wxHtmlHelpFrame&& src) noexcept = delete;
	Value_wxHtmlHelpFrame& operator=(Value_wxHtmlHelpFrame&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxHtmlHelpFrame() = default;
public:
	wxHtmlHelpFrame& GetEntity() { return *_pEntity; }
	const wxHtmlHelpFrame& GetEntity() const { return *_pEntity; }
	wxHtmlHelpFrame* GetEntityPtr() { return _pEntity.get(); }
	const wxHtmlHelpFrame* GetEntityPtr() const { return _pEntity.get(); }
public:
	static wxHtmlHelpFrame& GetEntity(Value& value) {
		return dynamic_cast<Value_wxHtmlHelpFrame&>(value).GetEntity();
	}
	static const wxHtmlHelpFrame& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxHtmlHelpFrame&>(value).GetEntity();
	}
	static wxHtmlHelpFrame* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxHtmlHelpFrame&>(value).GetEntityPtr();
	}
	static const wxHtmlHelpFrame* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxHtmlHelpFrame&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
