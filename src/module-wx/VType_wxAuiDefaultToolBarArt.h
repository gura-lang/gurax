//==============================================================================
// VType_wxAuiDefaultToolBarArt.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXAUIDEFAULTTOOLBARART_H
#define GURAX_MODULE_WX_VTYPE_WXAUIDEFAULTTOOLBARART_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/aui/auibar.h>
#include "Util.h"
#include "VType_wxAuiToolBarArt.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxAuiDefaultToolBarArt
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxAuiDefaultToolBarArt : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxAuiDefaultToolBarArt VTYPE_wxAuiDefaultToolBarArt;

//------------------------------------------------------------------------------
// Value_wxAuiDefaultToolBarArt
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxAuiDefaultToolBarArt : public Value_wxAuiToolBarArt {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxAuiDefaultToolBarArt);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxAuiDefaultToolBarArt");
protected:
	wxAuiDefaultToolBarArt* _pEntity;
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxAuiDefaultToolBarArt() = delete;
	explicit Value_wxAuiDefaultToolBarArt(wxAuiDefaultToolBarArt* pEntity, VType& vtype = VTYPE_wxAuiDefaultToolBarArt) :
		Value_wxAuiToolBarArt(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxAuiDefaultToolBarArt(const Value_wxAuiDefaultToolBarArt& src) = delete;
	Value_wxAuiDefaultToolBarArt& operator=(const Value_wxAuiDefaultToolBarArt& src) = delete;
	// Move constructor/operator
	Value_wxAuiDefaultToolBarArt(Value_wxAuiDefaultToolBarArt&& src) noexcept = delete;
	Value_wxAuiDefaultToolBarArt& operator=(Value_wxAuiDefaultToolBarArt&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxAuiDefaultToolBarArt() = default;
public:
	wxAuiDefaultToolBarArt& GetEntity() { return *_pEntity; }
	const wxAuiDefaultToolBarArt& GetEntity() const { return *_pEntity; }
	wxAuiDefaultToolBarArt* GetEntityPtr() { return _pEntity; }
	const wxAuiDefaultToolBarArt* GetEntityPtr() const { return _pEntity; }
public:
	static wxAuiDefaultToolBarArt& GetEntity(Value& value) {
		return dynamic_cast<Value_wxAuiDefaultToolBarArt&>(value).GetEntity();
	}
	static const wxAuiDefaultToolBarArt& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxAuiDefaultToolBarArt&>(value).GetEntity();
	}
	static wxAuiDefaultToolBarArt* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxAuiDefaultToolBarArt&>(value).GetEntityPtr();
	}
	static const wxAuiDefaultToolBarArt* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxAuiDefaultToolBarArt&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
