//==============================================================================
// VType_wxClipboard.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

# Property

# Operator

# Cast Operation

# Constructor

# Method
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------
// wx.Clipboard() {block?}
Gurax_DeclareConstructorAlias(Clipboard_gurax, "Clipboard")
{
	Declare(VTYPE_wxClipboard, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"Creates an instance of wx.Clipboard.");
}

Gurax_ImplementConstructorEx(Clipboard_gurax, processor_gurax, argument_gurax)
{
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxClipboard(
		wxClipboard()));
}

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.Clipboard#AddData(data as wx.DataObject)
Gurax_DeclareMethodAlias(wxClipboard, AddData_gurax, "AddData")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("data", VTYPE_wxDataObject, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, AddData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDataObject& value_data = args_gurax.Pick<Value_wxDataObject>();
	wxDataObject* data = value_data.GetEntityPtr();
	// Function body
	bool rtn = pEntity_gurax->AddData(data);
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#Clear()
Gurax_DeclareMethodAlias(wxClipboard, Clear_gurax, "Clear")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, Clear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->Clear();
	return Gurax::Value::nil();
}

// wx.Clipboard#Close()
Gurax_DeclareMethodAlias(wxClipboard, Close_gurax, "Close")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, Close_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->Close();
	return Gurax::Value::nil();
}

// wx.Clipboard#Flush()
Gurax_DeclareMethodAlias(wxClipboard, Flush_gurax, "Flush")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, Flush_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->Flush();
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#GetData(data as wx.DataObject)
Gurax_DeclareMethodAlias(wxClipboard, GetData_gurax, "GetData")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("data", VTYPE_wxDataObject, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, GetData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDataObject& value_data = args_gurax.Pick<Value_wxDataObject>();
	wxDataObject& data = value_data.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->GetData(data);
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#IsOpened()
Gurax_DeclareMethodAlias(wxClipboard, IsOpened_gurax, "IsOpened")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, IsOpened_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsOpened();
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#IsSupported(format as wx.DataFormat)
Gurax_DeclareMethodAlias(wxClipboard, IsSupported_gurax, "IsSupported")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("format", VTYPE_wxDataFormat, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, IsSupported_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDataFormat& value_format = args_gurax.Pick<Value_wxDataFormat>();
	const wxDataFormat& format = value_format.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsSupported(format);
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#IsUsingPrimarySelection()
Gurax_DeclareMethodAlias(wxClipboard, IsUsingPrimarySelection_gurax, "IsUsingPrimarySelection")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, IsUsingPrimarySelection_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsUsingPrimarySelection();
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#Open()
Gurax_DeclareMethodAlias(wxClipboard, Open_gurax, "Open")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, Open_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->Open();
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#SetData(data as wx.DataObject)
Gurax_DeclareMethodAlias(wxClipboard, SetData_gurax, "SetData")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("data", VTYPE_wxDataObject, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, SetData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxDataObject& value_data = args_gurax.Pick<Value_wxDataObject>();
	wxDataObject* data = value_data.GetEntityPtr();
	// Function body
	bool rtn = pEntity_gurax->SetData(data);
	return new Gurax::Value_Bool(rtn);
}

// wx.Clipboard#UsePrimarySelection(primary? as Bool)
Gurax_DeclareMethodAlias(wxClipboard, UsePrimarySelection_gurax, "UsePrimarySelection")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("primary", VTYPE_Bool, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxClipboard, UsePrimarySelection_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	bool primary = args_gurax.IsValid()? args_gurax.PickBool() : false;
	// Function body
	pEntity_gurax->UsePrimarySelection(primary);
	return Gurax::Value::nil();
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxClipboard
//------------------------------------------------------------------------------
VType_wxClipboard VTYPE_wxClipboard("Clipboard");

void VType_wxClipboard::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelpTmpl(Gurax_Symbol(en), g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_wxObject, Flag::Mutable, Gurax_CreateConstructor(Clipboard_gurax));
	// Assignment of method
	Assign(Gurax_CreateMethod(wxClipboard, AddData_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, Clear_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, Close_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, Flush_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, GetData_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, IsOpened_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, IsSupported_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, IsUsingPrimarySelection_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, Open_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, SetData_gurax));
	Assign(Gurax_CreateMethod(wxClipboard, UsePrimarySelection_gurax));
}

//------------------------------------------------------------------------------
// Value_wxClipboard
//------------------------------------------------------------------------------
VType& Value_wxClipboard::vtype = VTYPE_wxClipboard;

String Value_wxClipboard::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.Clipboard");
}

Gurax_EndModuleScope(wx)
