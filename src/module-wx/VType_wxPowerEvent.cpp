//==============================================================================
// VType_wxPowerEvent.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.PowerEvent, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.PowerEvent, `en)}

${help.ComposeMethodHelp(wx.PowerEvent, `en)}
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.PowerEvent#Veto()
Gurax_DeclareMethodAlias(wxPowerEvent, Veto_gurax, "Veto")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxPowerEvent, Veto_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->Veto();
	return Gurax::Value::nil();
}

// wx.PowerEvent#IsVetoed()
Gurax_DeclareMethodAlias(wxPowerEvent, IsVetoed_gurax, "IsVetoed")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxPowerEvent, IsVetoed_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsVetoed();
	return new Gurax::Value_Bool(rtn);
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxPowerEvent
//------------------------------------------------------------------------------
VType_wxPowerEvent VTYPE_wxPowerEvent("PowerEvent");

void VType_wxPowerEvent::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp("en", g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_wxEvent, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxPowerEvent, Veto_gurax));
	Assign(Gurax_CreateMethod(wxPowerEvent, IsVetoed_gurax));
}

//------------------------------------------------------------------------------
// Value_wxPowerEvent
//------------------------------------------------------------------------------
VType& Value_wxPowerEvent::vtype = VTYPE_wxPowerEvent;
EventValueFactoryDeriv<Value_wxPowerEvent> Value_wxPowerEvent::eventValueFactory;

String Value_wxPowerEvent::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.PowerEvent");
}

Gurax_EndModuleScope(wx)
