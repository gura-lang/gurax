//==============================================================================
// VType_wxRadioBox.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXRADIOBOX_H
#define GURAX_MODULE_WX_VTYPE_WXRADIOBOX_H
#include <gurax.h>
#include <wx/wx.h>
#include "Util.h"
#include "VType_wxControl.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxRadioBox
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxRadioBox : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxRadioBox VTYPE_wxRadioBox;

//------------------------------------------------------------------------------
// Value_wxRadioBox
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxRadioBox : public Value_wxControl {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxRadioBox);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxRadioBox");
public:
	class EntityT : public wxRadioBox {
	public:
		using wxRadioBox::wxRadioBox;
	public:
		EntityCore core_gurax;
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxRadioBox() = delete;
	explicit Value_wxRadioBox(wxEvtHandler* pEntity, VType& vtype = VTYPE_wxRadioBox) :
		Value_wxControl(pEntity, vtype) {}
	// Copy constructor/operator
	Value_wxRadioBox(const Value_wxRadioBox& src) = delete;
	Value_wxRadioBox& operator=(const Value_wxRadioBox& src) = delete;
	// Move constructor/operator
	Value_wxRadioBox(Value_wxRadioBox&& src) noexcept = delete;
	Value_wxRadioBox& operator=(Value_wxRadioBox&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxRadioBox() = default;
public:
	wxRadioBox& GetEntity() {
		return reinterpret_cast<wxRadioBox&>(Value_wxEvtHandler::GetEntity());
	}
	const wxRadioBox& GetEntity() const {
		return reinterpret_cast<const wxRadioBox&>(Value_wxEvtHandler::GetEntity());
	}
	wxRadioBox* GetEntityPtr() {
		return reinterpret_cast<wxRadioBox*>(Value_wxEvtHandler::GetEntityPtr());
	}
	const wxRadioBox* GetEntityPtr() const {
		return reinterpret_cast<const wxRadioBox*>(Value_wxEvtHandler::GetEntityPtr());
	}
public:
	static wxRadioBox& GetEntity(Value& value) {
		return dynamic_cast<Value_wxRadioBox&>(value).GetEntity();
	}
	static const wxRadioBox& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxRadioBox&>(value).GetEntity();
	}
	static wxRadioBox* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxRadioBox&>(value).GetEntityPtr();
	}
	static const wxRadioBox* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxRadioBox&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
