//==============================================================================
// VType_wxGridBagSizer.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"""(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.GridBagSizer, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.GridBagSizer, `en)}

${help.ComposeMethodHelp(wx.GridBagSizer, `en)}
)""";

static const char* g_docHelp_ja = u8R"""(
# 概要

# 定数

${help.ComposePropertyHelp(wx.GridBagSizer, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.GridBagSizer, `ja)}

${help.ComposeMethodHelp(wx.GridBagSizer, `ja)}
)""";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.GridBagSizer#CalcMin() {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, CalcMin_gurax, "CalcMin")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, CalcMin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(pEntity_gurax->CalcMin()));
}

// wx.GridBagSizer#FindItemAtPoint(pt as wx.Point) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, FindItemAtPoint_gurax, "FindItemAtPoint")
{
	Declare(VTYPE_wxGBSizerItem, Flag::None);
	DeclareArg("pt", VTYPE_wxPoint, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, FindItemAtPoint_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxPoint& value_pt = args_gurax.Pick<Value_wxPoint>();
	const wxPoint& pt = value_pt.GetEntity();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBSizerItem(*pEntity_gurax->FindItemAtPoint(pt)));
}

// wx.GridBagSizer#FindItemAtPosition(pos as wx.GBPosition) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, FindItemAtPosition_gurax, "FindItemAtPosition")
{
	Declare(VTYPE_wxGBSizerItem, Flag::None);
	DeclareArg("pos", VTYPE_wxGBPosition, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, FindItemAtPosition_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxGBPosition& value_pos = args_gurax.Pick<Value_wxGBPosition>();
	const wxGBPosition& pos = value_pos.GetEntity();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBSizerItem(*pEntity_gurax->FindItemAtPosition(pos)));
}

// wx.GridBagSizer#FindItemWithData(userData as wx.Object) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, FindItemWithData_gurax, "FindItemWithData")
{
	Declare(VTYPE_wxGBSizerItem, Flag::None);
	DeclareArg("userData", VTYPE_wxObject, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, FindItemWithData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxObject& value_userData = args_gurax.Pick<Value_wxObject>();
	const wxObject* userData = value_userData.GetEntityPtr();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBSizerItem(*pEntity_gurax->FindItemWithData(userData)));
}

// wx.GridBagSizer#GetCellSize(row as Number, col as Number) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, GetCellSize_gurax, "GetCellSize")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareArg("row", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("col", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, GetCellSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int row = args_gurax.PickNumber<int>();
	int col = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(pEntity_gurax->GetCellSize(row, col)));
}

// wx.GridBagSizer#GetEmptyCellSize() {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, GetEmptyCellSize_gurax, "GetEmptyCellSize")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, GetEmptyCellSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(pEntity_gurax->GetEmptyCellSize()));
}

// wx.GridBagSizer#RecalcSizes()
Gurax_DeclareMethodAlias(wxGridBagSizer, RecalcSizes_gurax, "RecalcSizes")
{
	Declare(VTYPE_Nil, Flag::None);
}

Gurax_ImplementMethodEx(wxGridBagSizer, RecalcSizes_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->RecalcSizes();
	return Gurax::Value::nil();
}

// wx.GridBagSizer#SetEmptyCellSize(sz as wx.Size)
Gurax_DeclareMethodAlias(wxGridBagSizer, SetEmptyCellSize_gurax, "SetEmptyCellSize")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("sz", VTYPE_wxSize, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxGridBagSizer, SetEmptyCellSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxSize& value_sz = args_gurax.Pick<Value_wxSize>();
	const wxSize& sz = value_sz.GetEntity();
	// Function body
	pEntity_gurax->SetEmptyCellSize(sz);
	return Gurax::Value::nil();
}

// wx.GridBagSizer#Add(args* as Any) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, Add_gurax, "Add")
{
	Declare(VTYPE_wxSizerItem, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, Add_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//Add(window as Window_p, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
			pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
			pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
		const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
		const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
		int flag = args.IsValid()? args.PickNumber<int>() : 0;
		int border = args.IsValid()? args.PickNumber<int>() : 0;
		wxObject* userData = nullptr;
		wxSizerItem* rtn = pEntity_gurax->Add(window, pos, span, flag, border, userData);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::ClearIssuedFlag();
	//Add(sizer as Sizer_p, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
			pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
			pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
		const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
		const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
		int flag = args.IsValid()? args.PickNumber<int>() : 0;
		int border = args.IsValid()? args.PickNumber<int>() : 0;
		wxObject* userData = nullptr;
		wxSizerItem* rtn = pEntity_gurax->Add(sizer, pos, span, flag, border, userData);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::ClearIssuedFlag();
	//Add(item as GBSizerItem_p) as SizerItem_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("item", VTYPE_wxGBSizerItem);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxGBSizerItem* item = args.Pick<Value_wxGBSizerItem>().GetEntityPtr();
		wxSizerItem* rtn = pEntity_gurax->Add(item);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::ClearIssuedFlag();
	//Add(width as int, height as int, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
			pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
			pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		int width = args.PickNumber<int>();
		int height = args.PickNumber<int>();
		const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
		const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
		int flag = args.IsValid()? args.PickNumber<int>() : 0;
		int border = args.IsValid()? args.PickNumber<int>() : 0;
		wxObject* userData = nullptr;
		wxSizerItem* rtn = pEntity_gurax->Add(width, height, pos, span, flag, border, userData);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	return Value::nil();
}

// wx.GridBagSizer#CheckForIntersection(args* as Any)
Gurax_DeclareMethodAlias(wxGridBagSizer, CheckForIntersection_gurax, "CheckForIntersection")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxGridBagSizer, CheckForIntersection_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//CheckForIntersection(item as GBSizerItem_p, excludeItem as GBSizerItem_p = NULL) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("item", VTYPE_wxGBSizerItem);
			pDeclCallable->DeclareArg("excludeItem", VTYPE_wxGBSizerItem, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxGBSizerItem* item = args.Pick<Value_wxGBSizerItem>().GetEntityPtr();
		wxGBSizerItem* excludeItem = args.IsValid()? args.Pick<Value_wxGBSizerItem>().GetEntityPtr() : nullptr;
		bool rtn = pEntity_gurax->CheckForIntersection(item, excludeItem);
		return argument_gurax.ReturnValue(processor_gurax, new Value_Bool(rtn));
	} while (0);
	Error::ClearIssuedFlag();
	//CheckForIntersection(pos as const_GBPosition_r, span as const_GBSpan_r, excludeItem as GBSizerItem_p = NULL) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
			pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan);
			pDeclCallable->DeclareArg("excludeItem", VTYPE_wxGBSizerItem, DeclArg::Occur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
		const wxGBSpan& span = args.Pick<Value_wxGBSpan>().GetEntity();
		wxGBSizerItem* excludeItem = args.IsValid()? args.Pick<Value_wxGBSizerItem>().GetEntityPtr() : nullptr;
		bool rtn = pEntity_gurax->CheckForIntersection(pos, span, excludeItem);
		return argument_gurax.ReturnValue(processor_gurax, new Value_Bool(rtn));
	} while (0);
	return Value::nil();
}

// wx.GridBagSizer#FindItem(window as wx.Window) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, FindItem_gurax, "FindItem")
{
	Declare(VTYPE_wxGBSizerItem, Flag::None);
	DeclareArg("window", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, FindItem_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_window = args_gurax.Pick<Value_wxWindow>();
	wxWindow* window = value_window.GetEntityPtr();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBSizerItem(*pEntity_gurax->FindItem(window)));
}

// wx.GridBagSizer#GetItemPosition(window as wx.Window) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, GetItemPosition_gurax, "GetItemPosition")
{
	Declare(VTYPE_wxGBPosition, Flag::None);
	DeclareArg("window", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, GetItemPosition_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_window = args_gurax.Pick<Value_wxWindow>();
	wxWindow* window = value_window.GetEntityPtr();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBPosition(pEntity_gurax->GetItemPosition(window)));
}

// wx.GridBagSizer#GetItemSpan(window as wx.Window) {block?}
Gurax_DeclareMethodAlias(wxGridBagSizer, GetItemSpan_gurax, "GetItemSpan")
{
	Declare(VTYPE_wxGBSpan, Flag::None);
	DeclareArg("window", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxGridBagSizer, GetItemSpan_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_window = args_gurax.Pick<Value_wxWindow>();
	wxWindow* window = value_window.GetEntityPtr();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxGBSpan(pEntity_gurax->GetItemSpan(window)));
}

// wx.GridBagSizer#SetItemPosition(window as wx.Window, pos as wx.GBPosition)
Gurax_DeclareMethodAlias(wxGridBagSizer, SetItemPosition_gurax, "SetItemPosition")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("window", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareArg("pos", VTYPE_wxGBPosition, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxGridBagSizer, SetItemPosition_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_window = args_gurax.Pick<Value_wxWindow>();
	wxWindow* window = value_window.GetEntityPtr();
	Value_wxGBPosition& value_pos = args_gurax.Pick<Value_wxGBPosition>();
	const wxGBPosition& pos = value_pos.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->SetItemPosition(window, pos);
	return new Gurax::Value_Bool(rtn);
}

// wx.GridBagSizer#SetItemSpan(window as wx.Window, span as wx.GBSpan)
Gurax_DeclareMethodAlias(wxGridBagSizer, SetItemSpan_gurax, "SetItemSpan")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("window", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareArg("span", VTYPE_wxGBSpan, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxGridBagSizer, SetItemSpan_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_window = args_gurax.Pick<Value_wxWindow>();
	wxWindow* window = value_window.GetEntityPtr();
	Value_wxGBSpan& value_span = args_gurax.Pick<Value_wxGBSpan>();
	const wxGBSpan& span = value_span.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->SetItemSpan(window, span);
	return new Gurax::Value_Bool(rtn);
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxGridBagSizer
//------------------------------------------------------------------------------
VType_wxGridBagSizer VTYPE_wxGridBagSizer("GridBagSizer");

void VType_wxGridBagSizer::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp(Gurax_Symbol(en), g_docHelp_en);
	AddHelp(Gurax_Symbol(ja), g_docHelp_ja);
	// Declaration of VType
	Declare(VTYPE_wxFlexGridSizer, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxGridBagSizer, CalcMin_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, FindItemAtPoint_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, FindItemAtPosition_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, FindItemWithData_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, GetCellSize_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, GetEmptyCellSize_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, RecalcSizes_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, SetEmptyCellSize_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, Add_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, CheckForIntersection_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, FindItem_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, GetItemPosition_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, GetItemSpan_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, SetItemPosition_gurax));
	Assign(Gurax_CreateMethod(wxGridBagSizer, SetItemSpan_gurax));
}

//------------------------------------------------------------------------------
// Value_wxGridBagSizer
//------------------------------------------------------------------------------
VType& Value_wxGridBagSizer::vtype = VTYPE_wxGridBagSizer;

String Value_wxGridBagSizer::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.GridBagSizer");
}

Gurax_EndModuleScope(wx)
