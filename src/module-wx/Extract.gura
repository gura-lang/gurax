import(re)

//------------------------------------------------------------------------------
txt = R'''
wxSize 	CalcMin ()
 	Called when the managed size of the sizer is needed or when layout needs done. More...
 
wxGBSizerItem * 	FindItemAtPoint (const wxPoint &pt)
 	Return the sizer item located at the point given in pt, or NULL if there is no item at that point. More...
 
wxGBSizerItem * 	FindItemAtPosition (const wxGBPosition &pos)
 	Return the sizer item for the given grid cell, or NULL if there is no item at that position. More...
 
wxGBSizerItem * 	FindItemWithData (const wxObject *userData)
 	Return the sizer item that has a matching user data (it only compares pointer values) or NULL if not found. More...
 
wxSize 	GetCellSize (int row, int col) const
 	Get the size of the specified cell, including hgap and vgap. More...
 
wxSize 	GetEmptyCellSize () const
 	Get the size used for cells in the grid with no item. More...
 
void 	RecalcSizes ()
 	Called when the managed size of the sizer is needed or when layout needs done. More...
 
void 	SetEmptyCellSize (const wxSize &sz)
 	Set the size used for cells in the grid with no item. More...
 
wxSizerItem * 	Add (wxWindow *window, const wxGBPosition &pos, const wxGBSpan &span=wxDefaultSpan, int flag=0, int border=0, wxObject *userData=NULL)
 	Adds the given item to the given position. More...
 
wxSizerItem * 	Add (wxSizer *sizer, const wxGBPosition &pos, const wxGBSpan &span=wxDefaultSpan, int flag=0, int border=0, wxObject *userData=NULL)
 	Adds the given item to the given position. More...
 
wxSizerItem * 	Add (wxGBSizerItem *item)
 	Adds the given item to the given position. More...
 
wxSizerItem * 	Add (int width, int height, const wxGBPosition &pos, const wxGBSpan &span=wxDefaultSpan, int flag=0, int border=0, wxObject *userData=NULL)
 	Adds a spacer to the given position. More...
 
bool 	CheckForIntersection (wxGBSizerItem *item, wxGBSizerItem *excludeItem=NULL)
 	Look at all items and see if any intersect (or would overlap) the given item. More...
 
bool 	CheckForIntersection (const wxGBPosition &pos, const wxGBSpan &span, wxGBSizerItem *excludeItem=NULL)
 	Look at all items and see if any intersect (or would overlap) the given item. More...
 
wxGBSizerItem * 	FindItem (wxWindow *window)
 	Find the sizer item for the given window or subsizer, returns NULL if not found. More...
 
wxGBSizerItem * 	FindItem (wxSizer *sizer)
 	Find the sizer item for the given window or subsizer, returns NULL if not found. More...
 
wxGBPosition 	GetItemPosition (wxWindow *window)
 	Get the grid position of the specified item. More...
 
wxGBPosition 	GetItemPosition (wxSizer *sizer)
 	Get the grid position of the specified item. More...
 
wxGBPosition 	GetItemPosition (size_t index)
 	Get the grid position of the specified item. More...
 
wxGBSpan 	GetItemSpan (wxWindow *window)
 	Get the row/col spanning of the specified item. More...
 
wxGBSpan 	GetItemSpan (wxSizer *sizer)
 	Get the row/col spanning of the specified item. More...
 
wxGBSpan 	GetItemSpan (size_t index)
 	Get the row/col spanning of the specified item. More...
 
bool 	SetItemPosition (wxWindow *window, const wxGBPosition &pos)
 	Set the grid position of the specified item. More...
 
bool 	SetItemPosition (wxSizer *sizer, const wxGBPosition &pos)
 	Set the grid position of the specified item. More...
 
bool 	SetItemPosition (size_t index, const wxGBPosition &pos)
 	Set the grid position of the specified item. More...
 
bool 	SetItemSpan (wxWindow *window, const wxGBSpan &span)
 	Set the row/col spanning of the specified item. More...
 
bool 	SetItemSpan (wxSizer *sizer, const wxGBSpan &span)
 	Set the row/col spanning of the specified item. More...
 
bool 	SetItemSpan (size_t index, const wxGBSpan &span)
 	Set the row/col spanning of the specified item. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
