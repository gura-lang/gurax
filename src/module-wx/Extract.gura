import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxAuiMDIChildFrame (wxAuiMDIParentFrame *parent, wxWindowID winid, const wxString &title, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE, const wxString &name=wxFrameNameStr)
 
bool 	Create (wxAuiMDIParentFrame *parent, wxWindowID winid, const wxString &title, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE, const wxString &name=wxFrameNameStr)
 
virtual void 	SetMenuBar (wxMenuBar *menuBar)
 
virtual wxMenuBar * 	GetMenuBar () const
 
virtual void 	SetTitle (const wxString &title)
 
virtual wxString 	GetTitle () const
 
virtual void 	SetIcons (const wxIconBundle &icons)
 
virtual const wxIconBundle & 	GetIcons () const
 
virtual void 	SetIcon (const wxIcon &icon)
 
virtual const wxIcon & 	GetIcon () const
 
virtual void 	Activate ()
 
virtual bool 	Destroy ()
 	Destroys the window safely. More...
 
virtual bool 	Show (bool show=true)
 	Shows or hides the window. More...
 
virtual wxStatusBar * 	CreateStatusBar (int number=1, long style=1, wxWindowID winid=1, const wxString &name=wxEmptyString)
 
virtual wxStatusBar * 	GetStatusBar () const
 
virtual void 	SetStatusText (const wxString &text, int number=0)
 
virtual void 	SetStatusWidths (int n, const int widths_field[])
 
virtual wxToolBar * 	CreateToolBar (long style, wxWindowID winid, const wxString &name)
 
virtual wxToolBar * 	GetToolBar () const
 
virtual void 	Maximize (bool maximize=true)
 
virtual void 	Restore ()
 
virtual void 	Iconize (bool iconize=true)
 
virtual bool 	IsMaximized () const
 
virtual bool 	IsIconized () const
 
virtual bool 	ShowFullScreen (bool show, long style)
 
virtual bool 	IsFullScreen () const
 
virtual bool 	IsTopLevel () const
 	Returns true if the given window is a top-level one. More...
 
void 	SetMDIParentFrame (wxAuiMDIParentFrame *parent)
 
wxAuiMDIParentFrame * 	GetMDIParentFrame () const
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
