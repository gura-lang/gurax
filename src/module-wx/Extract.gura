import(re)

//------------------------------------------------------------------------------
txt = R'''
 
wxToolBarToolBase * 	AddCheckTool (int toolId, const wxString &label, const wxBitmap &bitmap1, const wxBitmap &bmpDisabled=wxNullBitmap, const wxString &shortHelp=wxEmptyString, const wxString &longHelp=wxEmptyString, wxObject *clientData=NULL)
 	Adds a new check (or toggle) tool to the toolbar. More...
 
virtual wxToolBarToolBase * 	AddControl (wxControl *control, const wxString &label=wxEmptyString)
 	Adds any control to the toolbar, typically e.g. a wxComboBox. More...
 
wxToolBarToolBase * 	AddRadioTool (int toolId, const wxString &label, const wxBitmap &bitmap1, const wxBitmap &bmpDisabled=wxNullBitmap, const wxString &shortHelp=wxEmptyString, const wxString &longHelp=wxEmptyString, wxObject *clientData=NULL)
 	Adds a new radio tool to the toolbar. More...
 
virtual wxToolBarToolBase * 	AddSeparator ()
 	Adds a separator for spacing groups of tools. More...
 
wxToolBarToolBase * 	AddStretchableSpace ()
 	Adds a stretchable space to the toolbar. More...
 
virtual void 	ClearTools ()
 	Deletes all the tools in the toolbar. More...
 
virtual bool 	DeleteTool (int toolId)
 	Removes the specified tool from the toolbar and deletes it. More...
 
virtual bool 	DeleteToolByPos (size_t pos)
 	This function behaves like DeleteTool() but it deletes the tool at the specified position and not the one with the given id. More...
 
virtual void 	EnableTool (int toolId, bool enable)
 	Enables or disables the tool. More...
 
wxToolBarToolBase * 	FindById (int id) const
 	Returns a pointer to the tool identified by id or NULL if no corresponding tool is found. More...
 
virtual wxControl * 	FindControl (int id)
 	Returns a pointer to the control identified by id or NULL if no corresponding control is found. More...
 
virtual wxToolBarToolBase * 	FindToolForPosition (wxCoord x, wxCoord y) const
 	Finds a tool for the given mouse position. More...
 
wxSize 	GetMargins () const
 	Returns the left/right and top/bottom margins, which are also used for inter-toolspacing. More...
 
virtual wxSize 	GetToolBitmapSize () const
 	Returns the size of bitmap that the toolbar expects to have. More...
 
const wxToolBarToolBase * 	GetToolByPos (int pos) const
 	Returns a pointer to the tool at ordinal position pos. More...
 
virtual wxObject * 	GetToolClientData (int toolId) const
 	Get any client data associated with the tool. More...
 
virtual bool 	GetToolEnabled (int toolId) const
 	Called to determine whether a tool is enabled (responds to user input). More...
 
virtual wxString 	GetToolLongHelp (int toolId) const
 	Returns the long help for the given tool. More...
 
virtual int 	GetToolPacking () const
 	Returns the value used for packing tools. More...
 
virtual int 	GetToolPos (int toolId) const
 	Returns the tool position in the toolbar, or wxNOT_FOUND if the tool is not found. More...
 
virtual int 	GetToolSeparation () const
 	Returns the default separator size. More...
 
virtual wxString 	GetToolShortHelp (int toolId) const
 	Returns the short help for the given tool. More...
 
virtual wxSize 	GetToolSize () const
 	Returns the size of a whole button, which is usually larger than a tool bitmap because of added 3D effects. More...
 
virtual bool 	GetToolState (int toolId) const
 	Gets the on/off state of a toggle tool. More...
 
size_t 	GetToolsCount () const
 	Returns the number of tools in the toolbar. More...
 
virtual wxToolBarToolBase * 	InsertControl (size_t pos, wxControl *control, const wxString &label=wxEmptyString)
 	Inserts the control into the toolbar at the given position. More...
 
virtual wxToolBarToolBase * 	InsertSeparator (size_t pos)
 	Inserts the separator into the toolbar at the given position. More...
 
wxToolBarToolBase * 	InsertStretchableSpace (size_t pos)
 	Inserts a stretchable space at the given position. More...
 
virtual bool 	OnLeftClick (int toolId, bool toggleDown)
 	Called when the user clicks on a tool with the left mouse button. More...
 
virtual void 	OnMouseEnter (int toolId)
 	This is called when the mouse cursor moves into a tool or out of the toolbar. More...
 
virtual void 	OnRightClick (int toolId, long x, long y)
 
virtual bool 	Realize ()
 	This function should be called after you have added tools. More...
 
virtual wxToolBarToolBase * 	RemoveTool (int id)
 	Removes the given tool from the toolbar but doesn't delete it. More...
 
void 	SetBitmapResource (int resourceId)
 	Sets the bitmap resource identifier for specifying tool bitmaps as indices into a custom bitmap. More...
 
bool 	SetDropdownMenu (int id, wxMenu *menu)
 	Sets the dropdown menu for the tool given by its id. More...
 
virtual void 	SetToolBitmapSize (const wxSize &size)
 	Sets the default size of each tool bitmap. More...
 
virtual void 	SetToolClientData (int id, wxObject *clientData)
 	Sets the client data associated with the tool. More...
 
virtual void 	SetToolDisabledBitmap (int id, const wxBitmap &bitmap)
 	Sets the bitmap to be used by the tool with the given ID when the tool is in a disabled state. More...
 
virtual void 	SetToolLongHelp (int toolId, const wxString &helpString)
 	Sets the long help for the given tool. More...
 
virtual void 	SetToolNormalBitmap (int id, const wxBitmap &bitmap)
 	Sets the bitmap to be used by the tool with the given ID. More...
 
virtual void 	SetToolPacking (int packing)
 	Sets the value used for spacing tools. More...
 
virtual void 	SetToolSeparation (int separation)
 	Sets the default separator size. More...
 
virtual void 	SetToolShortHelp (int toolId, const wxString &helpString)
 	Sets the short help for the given tool. More...
 
virtual void 	ToggleTool (int toolId, bool toggle)
 	Toggles a tool on or off. More...
 
virtual wxToolBarToolBase * 	CreateTool (int toolId, const wxString &label, const wxBitmap &bmpNormal, const wxBitmap &bmpDisabled=wxNullBitmap, wxItemKind kind=wxITEM_NORMAL, wxObject *clientData=NULL, const wxString &shortHelp=wxEmptyString, const wxString &longHelp=wxEmptyString)
 	Factory function to create a new toolbar tool. More...
 
virtual wxToolBarToolBase * 	CreateTool (wxControl *control, const wxString &label)
 	Factory function to create a new control toolbar tool. More...
 
virtual wxToolBarToolBase * 	AddTool (wxToolBarToolBase *tool)
 	Adds a tool to the toolbar. More...
 
wxToolBarToolBase * 	AddTool (int toolId, const wxString &label, const wxBitmap &bitmap, const wxString &shortHelp=wxEmptyString, wxItemKind kind=wxITEM_NORMAL)
 	Adds a tool to the toolbar. More...
 
wxToolBarToolBase * 	AddTool (int toolId, const wxString &label, const wxBitmap &bitmap, const wxBitmap &bmpDisabled, wxItemKind kind=wxITEM_NORMAL, const wxString &shortHelpString=wxEmptyString, const wxString &longHelpString=wxEmptyString, wxObject *clientData=NULL)
 	Adds a tool to the toolbar. More...
 
wxToolBarToolBase * 	InsertTool (size_t pos, int toolId, const wxString &label, const wxBitmap &bitmap, const wxBitmap &bmpDisabled=wxNullBitmap, wxItemKind kind=wxITEM_NORMAL, const wxString &shortHelp=wxEmptyString, const wxString &longHelp=wxEmptyString, wxObject *clientData=NULL)
 	Inserts the tool with the specified attributes into the toolbar at the given position. More...
 
wxToolBarToolBase * 	InsertTool (size_t pos, wxToolBarToolBase *tool)
 	Inserts the tool with the specified attributes into the toolbar at the given position. More...
 
virtual void 	SetMargins (int x, int y)
 	Set the values to be used as margins for the toolbar. More...
 
void 	SetMargins (const wxSize &size)
 	Set the margins for the toolbar. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
