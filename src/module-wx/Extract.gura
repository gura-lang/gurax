import(re)

//------------------------------------------------------------------------------
txt = R'''
 
void 	AddMainButtonId (wxWindowID id)
 	Adds an identifier to be regarded as a main button for the non-scrolling area of a dialog. More...
 
virtual bool 	CanDoLayoutAdaptation ()
 	Returns true if this dialog can and should perform layout adaptation using DoLayoutAdaptation(), usually if the dialog is too large to fit on the display. More...
 
void 	Centre (int direction=wxBOTH)
 	Centres the dialog box on the display. More...
 
bool 	Create (wxWindow *parent, wxWindowID id, const wxString &title, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxDEFAULT_DIALOG_STYLE, const wxString &name=wxDialogNameStr)
 	Used for two-step dialog box construction. More...
 
wxSizer * 	CreateButtonSizer (long flags)
 	Creates a sizer with standard buttons. More...
 
wxSizer * 	CreateSeparatedButtonSizer (long flags)
 	Creates a sizer with standard buttons using CreateButtonSizer() separated from the rest of the dialog contents by a horizontal wxStaticLine. More...
 
wxSizer * 	CreateSeparatedSizer (wxSizer *sizer)
 	Returns the sizer containing the given one with a separating wxStaticLine if necessarily. More...
 
wxStdDialogButtonSizer * 	CreateStdDialogButtonSizer (long flags)
 	Creates a wxStdDialogButtonSizer with standard buttons. More...
 
wxSizer * 	CreateTextSizer (const wxString &message)
 	Splits text up at newlines and places the lines into wxStaticText objects in a vertical wxBoxSizer. More...
 
virtual bool 	DoLayoutAdaptation ()
 	Performs layout adaptation, usually if the dialog is too large to fit on the display. More...
 
virtual bool 	DoOK ()
 	This function is called when the titlebar OK button is pressed (PocketPC only). More...
 
virtual void 	EndModal (int retCode)
 	Ends a modal dialog, passing a value to be returned from the ShowModal() invocation. More...
 
int 	GetAffirmativeId () const
 	Gets the identifier of the button which works like standard OK button in this dialog. More...
 
virtual wxWindow * 	GetContentWindow () const
 	Override this to return a window containing the main content of the dialog. More...
 
int 	GetEscapeId () const
 	Gets the identifier of the button to map presses of ESC button to. More...
 
bool 	GetLayoutAdaptationDone () const
 	Returns true if the dialog has been adapted, usually by making it scrollable to work with a small display. More...
 
int 	GetLayoutAdaptationLevel () const
 	Gets a value representing the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog. More...
 
wxDialogLayoutAdaptationMode 	GetLayoutAdaptationMode () const
 	Gets the adaptation mode, overriding the global adaptation flag. More...
 
wxArrayInt & 	GetMainButtonIds ()
 	Returns an array of identifiers to be regarded as the main buttons for the non-scrolling area of a dialog. More...
 
int 	GetReturnCode () const
 	Gets the return code for this window. More...
 
wxToolBar * 	GetToolBar () const
 	On PocketPC, a dialog is automatically provided with an empty toolbar. More...
 
virtual void 	Iconize (bool iconize=true)
 	Iconizes or restores the dialog. More...
 
virtual bool 	IsIconized () const
 	Returns true if the dialog box is iconized. More...
 
bool 	IsMainButtonId (wxWindowID id) const
 	Returns true if id is in the array of identifiers to be regarded as the main buttons for the non-scrolling area of a dialog. More...
 
virtual bool 	IsModal () const
 	Returns true if the dialog box is modal, false otherwise. More...
 
void 	SetAffirmativeId (int id)
 	Sets the identifier to be used as OK button. More...
 
void 	SetEscapeId (int id)
 	Sets the identifier of the button which should work like the standard "Cancel" button in this dialog. More...
 
void 	SetIcon (const wxIcon &icon)
 	Sets the icon for this dialog. More...
 
void 	SetIcons (const wxIconBundle &icons)
 	Sets the icons for this dialog. More...
 
void 	SetLayoutAdaptationDone (bool done)
 	Marks the dialog as having been adapted, usually by making it scrollable to work with a small display. More...
 
void 	SetLayoutAdaptationLevel (int level)
 	Sets the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog. More...
 
void 	SetLayoutAdaptationMode (wxDialogLayoutAdaptationMode mode)
 	Sets the adaptation mode, overriding the global adaptation flag. More...
 
void 	SetReturnCode (int retCode)
 	Sets the return code for this window. More...
 
virtual bool 	Show (bool show=1)
 	Hides or shows the dialog. More...
 
virtual int 	ShowModal ()
 	Shows an application-modal dialog. More...
 
void 	ShowWindowModal ()
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
