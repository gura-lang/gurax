import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxRibbonBar (wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxRIBBON_BAR_DEFAULT_STYLE)
 	Construct a ribbon bar with the given parameters. More...
 
bool 	Create (wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxRIBBON_BAR_DEFAULT_STYLE)
 	Create a ribbon bar in two-step ribbon bar construction. More...
 
void 	SetTabCtrlMargins (int left, int right)
 	Set the margin widths (in pixels) on the left and right sides of the tab bar region of the ribbon bar. More...
 
void 	SetArtProvider (wxRibbonArtProvider *art)
 	Set the art provider to be used be the ribbon bar. More...
 
bool 	SetActivePage (size_t page)
 	Set the active page by index, without triggering any events. More...
 
bool 	SetActivePage (wxRibbonPage *page)
 	Set the active page, without triggering any events. More...
 
int 	GetActivePage () const
 	Get the index of the active page. More...
 
wxRibbonPage * 	GetPage (int n)
 	Get a page by index. More...
 
size_t 	GetPageCount () const
 	Get the number of pages in this bar. More...
 
bool 	DismissExpandedPanel ()
 	Dismiss the expanded panel of the currently active page. More...
 
int 	GetPageNumber (wxRibbonPage *page) const
 	Returns the number for a given ribbon bar page. More...
 
void 	DeletePage (size_t n)
 	Delete a single page from this ribbon bar. More...
 
void 	ClearPages ()
 	Delete all pages from the ribbon bar. More...
 
bool 	IsPageShown (size_t page) const
 	Indicates whether the tab for the given page is shown to the user or not. More...
 
void 	ShowPage (size_t page, bool show_tab=true)
 	Show or hide the tab for a given page. More...
 
void 	HidePage (size_t page)
 	Hides the tab for a given page. More...
 
bool 	IsPageHighlighted (size_t page) const
 	Indicates whether a tab is currently highlighted. More...
 
void 	AddPageHighlight (size_t page, bool highlight=true)
 	Highlight the specified tab. More...
 
void 	RemovePageHighlight (size_t page)
 	Changes a tab to not be highlighted. More...
 
void 	ShowPanels (bool show=true)
 	Shows or hides the panel area of the ribbon bar. More...
 
void 	HidePanels ()
 	Hides the panel area of the ribbon bar. More...
 
bool 	ArePanelsShown () const
 	Indicates whether the panel area of the ribbon bar is shown. More...
 
virtual bool 	Realize ()
 	Perform initial layout and size calculations of the bar and its children. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
