import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual void 	AppendText (const wxString &text)
 	Appends the text to the end of the text control. More...
 
bool 	AutoComplete (const wxArrayString &choices)
 	Call this function to enable auto-completion of the text typed in a single-line text control using the given choices. More...
 
bool 	AutoComplete (wxTextCompleter *completer)
 	Enable auto-completion using the provided completer object. More...
 
bool 	AutoCompleteFileNames ()
 	Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths. More...
 
bool 	AutoCompleteDirectories ()
 	Call this function to enable auto-completion of the text using the file system directories. More...
 
virtual bool 	CanCopy () const
 	Returns true if the selection can be copied to the clipboard. More...
 
virtual bool 	CanCut () const
 	Returns true if the selection can be cut to the clipboard. More...
 
virtual bool 	CanPaste () const
 	Returns true if the contents of the clipboard can be pasted into the text control. More...
 
virtual bool 	CanRedo () const
 	Returns true if there is a redo facility available and the last operation can be redone. More...
 
virtual bool 	CanUndo () const
 	Returns true if there is an undo facility available and the last operation can be undone. More...
 
virtual void 	ChangeValue (const wxString &value)
 	Sets the new text control value. More...
 
virtual void 	Clear ()
 	Clears the text in the control. More...
 
virtual void 	Copy ()
 	Copies the selected text to the clipboard. More...
 
virtual void 	Cut ()
 	Copies the selected text to the clipboard and removes it from the control. More...
 
virtual long 	GetInsertionPoint () const
 	Returns the insertion point, or cursor, position. More...
 
virtual wxTextPos 	GetLastPosition () const
 	Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control. More...
 
virtual wxString 	GetRange (long from, long to) const
 	Returns the string containing the text starting in the positions from and up to to in the control. More...
 
virtual void 	GetSelection (long *from, long *to) const
 	Gets the current selection span. More...
 
virtual wxString 	GetStringSelection () const
 	Gets the text currently selected in the control. More...
 
virtual wxString 	GetValue () const
 	Gets the contents of the control. More...
 
virtual bool 	IsEditable () const
 	Returns true if the controls contents may be edited by user (note that it always can be changed by the program). More...
 
virtual bool 	IsEmpty () const
 	Returns true if the control is currently empty. More...
 
virtual void 	Paste ()
 	Pastes text from the clipboard to the text item. More...
 
virtual void 	Redo ()
 	If there is a redo facility and the last operation can be redone, redoes the last operation. More...
 
virtual void 	Remove (long from, long to)
 	Removes the text starting at the first given position up to (but not including) the character at the last position. More...
 
virtual void 	Replace (long from, long to, const wxString &value)
 	Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. More...
 
virtual void 	SetEditable (bool editable)
 	Makes the text item editable or read-only, overriding the wxTE_READONLY flag. More...
 
virtual void 	SetInsertionPoint (long pos)
 	Sets the insertion point at the given position. More...
 
virtual void 	SetInsertionPointEnd ()
 	Sets the insertion point at the end of the text control. More...
 
virtual void 	SetMaxLength (unsigned long len)
 	This function sets the maximum number of characters the user can enter into the control. More...
 
virtual void 	SetSelection (long from, long to)
 	Selects the text starting at the first position up to (but not including) the character at the last position. More...
 
virtual void 	SelectAll ()
 	Selects all text in the control. More...
 
virtual void 	SelectNone ()
 	Deselects selected text in the control. More...
 
virtual bool 	SetHint (const wxString &hint)
 	Sets a hint shown in an empty unfocused text control. More...
 
virtual wxString 	GetHint () const
 	Returns the current hint string. More...
 
wxPoint 	GetMargins () const
 	Returns the margins used by the control. More...
 
virtual void 	SetValue (const wxString &value)
 	Sets the new text control value. More...
 
virtual void 	Undo ()
 	If there is an undo facility and the last operation can be undone, undoes the last operation. More...
 
virtual void 	WriteText (const wxString &text)
 	Writes the text into the text control at the current insertion position. More...
 
bool 	SetMargins (const wxPoint &pt)
 	Attempts to set the control margins. More...
 
bool 	SetMargins (wxCoord left, wxCoord top=-1)
 	Attempts to set the control margins. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
