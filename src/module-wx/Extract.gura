import(re)

//------------------------------------------------------------------------------
txt = R'''
 
@Mouse functions
void 	CaptureMouse ()
 	Directs all mouse input to this window. More...
 
wxCaret * 	GetCaret () const
 	Returns the caret() associated with the window. More...
 
const wxCursor & 	GetCursor () const
 	Return the cursor associated with this window. More...
 
virtual bool 	HasCapture () const
 	Returns true if this window has the current mouse capture. More...
 
void 	ReleaseMouse ()
 	Releases mouse input captured with CaptureMouse(). More...
 
void 	SetCaret (wxCaret *caret)
 	Sets the caret() associated with the window. More...
 
virtual bool 	SetCursor (const wxCursor &cursor)
 	Sets the window's cursor. More...
 
virtual void 	WarpPointer (int x, int y)
 	Moves the pointer to the given position on the window. More...
 
@Miscellaneous functions
wxHitTest 	HitTest (wxCoord x, wxCoord y) const
 	Get the window border style from the given flags: this is different from simply doing flags & wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. More...
 
wxHitTest 	HitTest (const wxPoint &pt) const
 	Get the window border style from the given flags: this is different from simply doing flags & wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. More...
 
wxBorder 	GetBorder (long flags) const
 	Get the window border style from the given flags: this is different from simply doing flags & wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. More...
 
wxBorder 	GetBorder () const
 	Get border for the flags of this window. More...
 
virtual void 	DoUpdateWindowUI (wxUpdateUIEvent &event)
 	Does the window-specific updating after processing the update event. More...
 
virtual WXWidget 	GetHandle () const
 	Returns the platform-specific handle of the physical window. More...
 
virtual bool 	HasMultiplePages () const
 	This method should be overridden to return true if this window has multiple pages. More...
 
virtual void 	InheritAttributes ()
 	This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours. More...
 
virtual void 	InitDialog ()
 	Sends an wxEVT_INIT_DIALOG event, whose handler usually transfers data to the dialog via validators. More...
 
virtual bool 	IsDoubleBuffered () const
 	Returns true if the window contents is double-buffered by the system, i.e. if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later. More...
 
void 	SetDoubleBuffered (bool on)
 	Turn on or off double buffering of the window if the system supports it. More...
 
virtual bool 	IsRetained () const
 	Returns true if the window is retained, false otherwise. More...
 
bool 	IsThisEnabled () const
 	Returns true if this window is intrinsically enabled, false otherwise, i.e. if Enable() Enable(false) had been called. More...
 
virtual bool 	IsTopLevel () const
 	Returns true if the given window is a top-level one. More...
 
virtual void 	OnInternalIdle ()
 	This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class. More...
 
virtual bool 	SendIdleEvents (wxIdleEvent &event)
 	Send idle event to window and all subwindows. More...
 
virtual bool 	RegisterHotKey (int hotkeyId, int modifiers, int virtualKeyCode)
 	Registers a system wide hotkey. More...
 
virtual bool 	UnregisterHotKey (int hotkeyId)
 
	Unregisters a system wide hotkey. More...
 
virtual void 	UpdateWindowUI (long flags=wxUPDATE_UI_NONE)
 	This function sends one or more wxUpdateUIEvent to the window. More...
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Printf('// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		typeRtn = m[1].Strip().Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('%s(%s) as %s\n', funcName, argsMod, typeRtn)
	}
}
