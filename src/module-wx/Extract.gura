import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual bool 	AddPage (wxWindow *page, const wxString &text, bool bSelect=false, int imageId=wxNOT_FOUND)
 	Adds a new page. More...
 
virtual bool 	AddSubPage (wxWindow *page, const wxString &text, bool bSelect=false, int imageId=wxNOT_FOUND)
 	Adds a new child-page to the last top-level page. More...
 
bool 	CollapseNode (size_t pageId)
 	Shortcut for ExpandNode( pageId, false ). More...
 
bool 	Create (wxWindow *parent, wxWindowID id, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxBK_DEFAULT, const wxString &name=wxEmptyString)
 	Creates a treebook control. More...
 
virtual bool 	DeletePage (size_t pagePos)
 	Deletes the page at the specified position and all its children. More...
 
virtual bool 	ExpandNode (size_t pageId, bool expand=true)
 	Expands (collapses) the pageId node. More...
 
int 	GetPageParent (size_t page) const
 	Returns the parent page of the given one or wxNOT_FOUND if this is a top-level page. More...
 
virtual int 	GetSelection () const
 	Returns the currently selected page, or wxNOT_FOUND if none was selected. More...
 
virtual bool 	InsertPage (size_t pagePos, wxWindow *page, const wxString &text, bool bSelect=false, int imageId=wxNOT_FOUND)
 	Inserts a new page just before the page indicated by pagePos. More...
 
virtual bool 	InsertSubPage (size_t pagePos, wxWindow *page, const wxString &text, bool bSelect=false, int imageId=wxNOT_FOUND)
 	Inserts a sub page under the specified page. More...
 
virtual bool 	IsNodeExpanded (size_t pageId) const
 	Returns true if the page represented by pageId is expanded. More...
 
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
