import(re)

//------------------------------------------------------------------------------
txt = R'''
 virtual int 	GetRowCount () const
 	Returns the number of rows in the notebook control. More...
 
virtual wxColour 	GetThemeBackgroundColour () const
 	If running under Windows and themes are enabled for the application, this function returns a suitable colour for painting the background of a notebook page, and can be passed to SetBackgroundColour(). More...
 
void 	OnSelChange (wxBookCtrlEvent &event)
 	An event handler function, called when the page selection is changed. More...
 
virtual void 	SetPadding (const wxSize &padding)
 	Sets the amount of space around each page's icon and label, in pixels. More...
 
virtual int 	GetPageImage (size_t nPage) const
 	Returns the image index for the given page. More...
 
virtual bool 	SetPageImage (size_t page, int image)
 	Sets the image index for the given page. More...
 
virtual wxString 	GetPageText (size_t nPage) const
 	Returns the string for the given page. More...
 
virtual bool 	SetPageText (size_t page, const wxString &text)
 	Sets the text for the given page. More...
 
virtual int 	GetSelection () const
 	Returns the currently selected page, or wxNOT_FOUND if none was selected. More...
 
virtual int 	SetSelection (size_t page)
 	Sets the selection to the given page, returning the previous selection. More...
 
virtual int 	ChangeSelection (size_t page)
 	Changes the selection to the given page, returning the previous selection. More...
 
virtual bool 	InsertPage (size_t index, wxWindow *page, const wxString &text, bool select=false, int imageId=NO_IMAGE)
 	Inserts a new page at the specified position. More...
 
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
