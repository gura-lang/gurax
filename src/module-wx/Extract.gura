import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual void 	AddArcToPoint (wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2, wxDouble r)
 	Appends a an arc to two tangents connecting (current) to (x1,y1) and (x1,y1) to (x2,y2), also a straight line from (current) to (x1,y1). More...
 
virtual void 	AddCircle (wxDouble x, wxDouble y, wxDouble r)
 	Appends a circle around (x,y) with radius r as a new closed subpath. More...
 
virtual void 	AddCurveToPoint (wxDouble cx1, wxDouble cy1, wxDouble cx2, wxDouble cy2, wxDouble x, wxDouble y)
 	Adds a cubic bezier curve from the current point, using two control points and an end point. More...
 
void 	AddCurveToPoint (const wxPoint2DDouble &c1, const wxPoint2DDouble &c2, const wxPoint2DDouble &e)
 	Adds a cubic bezier curve from the current point, using two control points and an end point. More...
 
virtual void 	AddEllipse (wxDouble x, wxDouble y, wxDouble w, wxDouble h)
 	Appends an ellipse fitting into the passed in rectangle. More...
 
virtual void 	AddLineToPoint (wxDouble x, wxDouble y)
 	Adds a straight line from the current point to (x,y). More...
 
void 	AddLineToPoint (const wxPoint2DDouble &p)
 	Adds a straight line from the current point to p. More...
 
virtual void 	AddPath (const wxGraphicsPath &path)
 	Adds another path. More...
 
virtual void 	AddQuadCurveToPoint (wxDouble cx, wxDouble cy, wxDouble x, wxDouble y)
 	Adds a quadratic bezier curve from the current point, using a control point and an end point. More...
 
virtual void 	AddRectangle (wxDouble x, wxDouble y, wxDouble w, wxDouble h)
 	Appends a rectangle as a new closed subpath. More...
 
virtual void 	AddRoundedRectangle (wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble radius)
 	Appends a rounded rectangle as a new closed subpath. More...
 
virtual void 	CloseSubpath ()
 	Closes the current sub-path. More...
 
bool 	Contains (const wxPoint2DDouble &c, wxPolygonFillMode fillStyle=wxODDEVEN_RULE) const
 
virtual bool 	Contains (wxDouble x, wxDouble y, wxPolygonFillMode fillStyle=wxODDEVEN_RULE) const
 
wxRect2DDouble 	GetBox () const
 	Gets the bounding box enclosing all points (possibly including control points). More...
 
virtual void 	GetBox (wxDouble *x, wxDouble *y, wxDouble *w, wxDouble *h) const
 	Gets the bounding box enclosing all points (possibly including control points). More...
 
virtual void 	GetCurrentPoint (wxDouble *x, wxDouble *y) const
 	Gets the last point of the current path, (0,0) if not yet set. More...
 
wxPoint2DDouble 	GetCurrentPoint () const
 	Gets the last point of the current path, (0,0) if not yet set. More...
 
virtual void * 	GetNativePath () const
 	Returns the native path (CGPathRef for Core Graphics, Path pointer for GDIPlus and a cairo_path_t pointer for cairo). More...
 
virtual void 	MoveToPoint (wxDouble x, wxDouble y)
 	Begins a new subpath at (x,y). More...
 
void 	MoveToPoint (const wxPoint2DDouble &p)
 	Begins a new subpath at p. More...
 
virtual void 	Transform (const wxGraphicsMatrix &matrix)
 	Transforms each point of this path by the matrix. More...
 
virtual void 	UnGetNativePath (void *p) const
 	Gives back the native path returned by GetNativePath() because there might be some deallocations necessary (e.g. More...
 
virtual void 	AddArc (wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise)
 	Adds an arc of a circle. More...
 
void 	AddArc (const wxPoint2DDouble &c, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise)
 	Adds an arc of a circle. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
