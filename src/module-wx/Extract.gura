import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxScrolled (wxWindow *parent, wxWindowID id=-1, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxHSCROLL|wxVSCROLL, const wxString &name="scrolledWindow")
 	Constructor. More...
 
void 	CalcScrolledPosition (int x, int y, int *xx, int *yy) const
 	Translates the logical coordinates to the device ones. More...
 
wxPoint 	CalcScrolledPosition (const wxPoint &pt) const
 
void 	CalcUnscrolledPosition (int x, int y, int *xx, int *yy) const
 	Translates the device coordinates to the logical ones. More...
 
wxPoint 	CalcUnscrolledPosition (const wxPoint &pt) const
 
bool 	Create (wxWindow *parent, wxWindowID id=-1, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxHSCROLL|wxVSCROLL, const wxString &name="scrolledWindow")
 	Creates the window for two-step construction. More...
 
void 	DisableKeyboardScrolling ()
 	Disable use of keyboard keys for scrolling. More...
 
void 	DoPrepareDC (wxDC &dc)
 	Call this function to prepare the device context for drawing a scrolled image. More...
 
void 	EnableScrolling (bool xScrolling, bool yScrolling)
 	Enable or disable use of wxWindow::ScrollWindow() for scrolling. More...
 
void 	ShowScrollbars (wxScrollbarVisibility horz, wxScrollbarVisibility vert)
 	Set the scrollbar visibility. More...
 
void 	GetScrollPixelsPerUnit (int *xUnit, int *yUnit) const
 	Get the number of pixels per scroll unit (line), in each direction, as set by SetScrollbars(). More...
 
void 	GetViewStart (int *x, int *y) const
 	Get the position at which the visible portion of the window starts. More...
 
wxPoint 	GetViewStart () const
 	This is a simple overload of GetViewStart(int*,int*); see that function for more info. More...
 
void 	GetVirtualSize (int *x, int *y) const
 	Gets the size in device units of the scrollable window area (as opposed to the client size, which is the area of the window currently visible). More...
 
bool 	IsRetained () const
 	Motif only: true if the window has a backing bitmap. More...
 
virtual void 	OnDraw (wxDC &dc)
 	Called by the default paint event handler to allow the application to define painting behaviour without having to worry about calling DoPrepareDC(). More...
 
void 	PrepareDC (wxDC &dc)
 	This function is for backwards compatibility only and simply calls DoPrepareDC() now. More...
 
void 	Scroll (int x, int y)
 	Scrolls a window so the view start is at the given point. More...
 
void 	Scroll (const wxPoint &pt)
 	This is an overload of Scroll(int,int); see that function for more info. More...
 
void 	SetScrollRate (int xstep, int ystep)
 	Set the horizontal and vertical scrolling increment only. More...
 
void 	SetScrollbars (int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, int noUnitsY, int xPos=0, int yPos=0, bool noRefresh=false)
 	Sets up vertical and/or horizontal scrollbars. More...
 
void 	SetTargetWindow (wxWindow *window)
 	Call this function to tell wxScrolled to perform the actual scrolling on a different window (and not on itself). More...
 
wxWindow * 	GetTargetWindow () const
 
void 	SetTargetRect (const wxRect &rect)
 
wxRect 	GetTargetRect () const
 
int 	GetScrollPageSize (int orient) const
 
void 	SetScrollPageSize (int orient, int pageSize)
 
int 	GetScrollLines (int orient) const
 
void 	SetScale (double xs, double ys)
 
double 	GetScaleX () const
 
double 	GetScaleY () const
 
virtual void 	AdjustScrollbars ()
 
bool 	IsAutoScrolling () const
 	Are we generating the autoscroll events? More...
 
void 	StopAutoScrolling ()
 	Stop generating the scroll events when mouse is held outside the window. More...
 
virtual bool 	SendAutoScrollEvents (wxScrollWinEvent &event) const
 	This method can be overridden in a derived class to forbid sending the auto scroll events - note that unlike StopAutoScrolling() it doesn't stop the timer, so it will be called repeatedly and will typically return different values depending on the current mouse position. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
