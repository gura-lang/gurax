import(re)

//------------------------------------------------------------------------------
txt = R'''
wxMenuItem * 	Append (int id, const wxString &item=wxEmptyString, const wxString &helpString=wxEmptyString, wxItemKind kind=wxITEM_NORMAL)
 	Adds a menu item. More...
 
wxMenuItem * 	Append (int id, const wxString &item, wxMenu *subMenu, const wxString &helpString=wxEmptyString)
 	Adds a submenu. More...
 
wxMenuItem * 	Append (wxMenuItem *menuItem)
 	Adds a menu item object. More...
 
wxMenuItem * 	AppendCheckItem (int id, const wxString &item, const wxString &help=wxEmptyString)
 	Adds a checkable item to the end of the menu. More...
 
wxMenuItem * 	AppendRadioItem (int id, const wxString &item, const wxString &help=wxEmptyString)
 	Adds a radio item to the end of the menu. More...
 
wxMenuItem * 	AppendSeparator ()
 	Adds a separator to the end of the menu. More...
 
wxMenuItem * 	AppendSubMenu (wxMenu *submenu, const wxString &text, const wxString &help=wxEmptyString)
 	Adds the given submenu to this menu. More...
 
virtual void 	Break ()
 	Inserts a break in a menu, causing the next appended item to appear in a new column. More...
 
void 	Check (int id, bool check)
 	Checks or unchecks the menu item. More...
 
bool 	Delete (int id)
 	Deletes the menu item from the menu. More...
 
bool 	Delete (wxMenuItem *item)
 	Deletes the menu item from the menu. More...
 
bool 	Destroy (int id)
 	Deletes the menu item from the menu. More...
 
bool 	Destroy (wxMenuItem *item)
 	Deletes the menu item from the menu. More...
 
void 	Enable (int id, bool enable)
 	Enables or disables (greys out) a menu item. More...
 
wxMenuItem * 	FindChildItem (int id, size_t *pos=NULL) const
 	Finds the menu item object associated with the given menu item identifier and, optionally, the position of the item in the menu. More...
 
virtual int 	FindItem (const wxString &itemString) const
 	Finds the menu id for a menu item string. More...
 
wxMenuItem * 	FindItem (int id, wxMenu **menu=NULL) const
 	Finds the menu item object associated with the given menu item identifier and, optionally, the (sub)menu it belongs to. More...
 
wxMenuItem * 	FindItemByPosition (size_t position) const
 	Returns the wxMenuItem given a position in the menu. More...
 
virtual wxString 	GetHelpString (int id) const
 	Returns the help string associated with a menu item. More...
 
wxString 	GetLabel (int id) const
 	Returns a menu item label. More...
 
wxString 	GetLabelText (int id) const
 	Returns a menu item label, without any of the original mnemonics and accelerators. More...
 
size_t 	GetMenuItemCount () const
 	Returns the number of items in the menu. More...
 
const wxString & 	GetTitle () const
 	Returns the title of the menu. More...
 
wxMenuItem * 	Insert (size_t pos, wxMenuItem *menuItem)
 	Inserts the given item before the position pos. More...
 
wxMenuItem * 	Insert (size_t pos, int id, const wxString &item=wxEmptyString, const wxString &helpString=wxEmptyString, wxItemKind kind=wxITEM_NORMAL)
 	Inserts the given item before the position pos. More...
 
wxMenuItem * 	Insert (size_t pos, int id, const wxString &text, wxMenu *submenu, const wxString &help=wxEmptyString)
 	Inserts the given submenu before the position pos. More...
 
wxMenuItem * 	InsertCheckItem (size_t pos, int id, const wxString &item, const wxString &helpString=wxEmptyString)
 	Inserts a checkable item at the given position. More...
 
wxMenuItem * 	InsertRadioItem (size_t pos, int id, const wxString &item, const wxString &helpString=wxEmptyString)
 	Inserts a radio item at the given position. More...
 
wxMenuItem * 	InsertSeparator (size_t pos)
 	Inserts a separator at the given position. More...
 
bool 	IsChecked (int id) const
 	Determines whether a menu item is checked. More...
 
bool 	IsEnabled (int id) const
 	Determines whether a menu item is enabled. More...
 
wxMenuItem * 	Prepend (wxMenuItem *item)
 	Inserts the given item at position 0, i.e. before all the other existing items. More...
 
wxMenuItem * 	Prepend (int id, const wxString &item=wxEmptyString, const wxString &helpString=wxEmptyString, wxItemKind kind=wxITEM_NORMAL)
 	Inserts the given item at position 0, i.e. before all the other existing items. More...
 
wxMenuItem * 	Prepend (int id, const wxString &text, wxMenu *submenu, const wxString &help=wxEmptyString)
 	Inserts the given submenu at position 0. More...
 
wxMenuItem * 	PrependCheckItem (int id, const wxString &item, const wxString &helpString=wxEmptyString)
 	Inserts a checkable item at position 0. More...
 
wxMenuItem * 	PrependRadioItem (int id, const wxString &item, const wxString &helpString=wxEmptyString)
 	Inserts a radio item at position 0. More...
 
wxMenuItem * 	PrependSeparator ()
 	Inserts a separator at position 0. More...
 
wxMenuItem * 	Remove (int id)
 	Removes the menu item from the menu but doesn't delete the associated C++ object. More...
 
wxMenuItem * 	Remove (wxMenuItem *item)
 	Removes the menu item from the menu but doesn't delete the associated C++ object. More...
 
virtual void 	SetHelpString (int id, const wxString &helpString)
 	Sets an item's help string. More...
 
void 	SetLabel (int id, const wxString &label)
 	Sets the label of a menu item. More...
 
virtual void 	SetTitle (const wxString &title)
 	Sets the title of the menu. More...
 
void 	UpdateUI (wxEvtHandler *source=NULL)
 	Sends events to source (or owning window if NULL) to update the menu UI. More...
 
void 	SetInvokingWindow (wxWindow *win)
 
wxWindow * 	GetInvokingWindow () const
 
wxWindow * 	GetWindow () const
 
long 	GetStyle () const
 
void 	SetParent (wxMenu *parent)
 
wxMenu * 	GetParent () const
 
virtual void 	Attach (wxMenuBar *menubar)
 
virtual void 	Detach ()
 
bool 	IsAttached () const
 
wxMenuItemList & 	GetMenuItems ()
 	Returns the list of items in the menu. More...
 
const wxMenuItemList & 	GetMenuItems () const
 	Returns the list of items in the menu. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
