import(re)

//------------------------------------------------------------------------------
txt = R'''
 
int 	GetModifiers () const
 	Return the bit mask of all pressed modifier keys. More...
 
bool 	HasAnyModifiers () const
 	Returns true if any modifiers at all are pressed. More...
 
bool 	HasModifiers () const
 	Returns true if Control or Alt are pressed. More...
 
bool 	ControlDown () const
 	Returns true if the Control key or Apple/Command key under OS X is pressed. More...
 
bool 	RawControlDown () const
 	Returns true if the Control key (also under OS X). More...
 
bool 	ShiftDown () const
 	Returns true if the Shift key is pressed. More...
 
bool 	MetaDown () const
 	Returns true if the Meta/Windows/Apple key is pressed. More...
 
bool 	AltDown () const
 	Returns true if the Alt key is pressed. More...
 
bool 	CmdDown () const
 	Returns true if the key used for command accelerators is pressed. More...
 
void 	SetControlDown (bool down)
 
void 	SetRawControlDown (bool down)
 
void 	SetShiftDown (bool down)
 
void 	SetAltDown (bool down)
 
void 	SetMetaDown (bool down)
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
