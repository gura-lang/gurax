import(re)

//------------------------------------------------------------------------------
txt = R'''
bool 	CreateBase (wxWindow *parent, wxWindowID id, const wxString &text=wxEmptyString, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxValidator &validator=wxDefaultValidator, const wxString &name=wxButtonNameStr)
 
int 	GetInternalMargin () const
 	Returns the margin (in pixel) between the picker and the text control. More...
 
int 	GetPickerCtrlProportion () const
 	Returns the proportion value of the picker. More...
 
wxTextCtrl * 	GetTextCtrl ()
 	Returns a pointer to the text control handled by this window or NULL if the wxPB_USE_TEXTCTRL style was not specified when this control was created. More...
 
wxControl * 	GetPickerCtrl ()
 	Returns the native implementation of the real picker control. More...
 
int 	GetTextCtrlProportion () const
 	Returns the proportion value of the text control. More...
 
bool 	HasTextCtrl () const
 	Returns true if this window has a valid text control (i.e. if the wxPB_USE_TEXTCTRL style was given when creating this control). More...
 
bool 	IsPickerCtrlGrowable () const
 	Returns true if the picker control is growable. More...
 
bool 	IsTextCtrlGrowable () const
 	Returns true if the text control is growable. More...
 
void 	SetInternalMargin (int margin)
 	Sets the margin (in pixel) between the picker and the text control. More...
 
void 	SetPickerCtrlGrowable (bool grow=true)
 	Sets the picker control as growable when grow is true. More...
 
void 	SetPickerCtrlProportion (int prop)
 	Sets the proportion value of the picker. More...
 
void 	SetTextCtrlGrowable (bool grow=true)
 	Sets the text control as growable when grow is true. More...
 
void 	SetTextCtrlProportion (int prop)
 	Sets the proportion value of the text control. More...
 
void 	SetTextCtrl (wxTextCtrl *text)
 
void 	SetPickerCtrl (wxControl *picker)
 
virtual void 	UpdatePickerFromTextCtrl ()=0
 
virtual void 	UpdateTextCtrlFromPicker ()=0
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
