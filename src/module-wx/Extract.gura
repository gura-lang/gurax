import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxMenuBar (long style=0)
 	Construct an empty menu bar. More...
 
 	wxMenuBar (size_t n, wxMenu *menus[], const wxString titles[], long style=0)
 	Construct a menu bar from arrays of menus and titles. More...
 
virtual bool 	Append (wxMenu *menu, const wxString &title)
 	Adds the item to the end of the menu bar. More...
 
void 	Check (int id, bool check)
 	Checks or unchecks a menu item. More...
 
void 	Enable (int id, bool enable)
 	Enables or disables (greys out) a menu item. More...
 
bool 	IsEnabledTop (size_t pos) const
 	Returns true if the menu with the given index is enabled. More...
 
virtual void 	EnableTop (size_t pos, bool enable)
 	Enables or disables a whole menu. More...
 
virtual wxMenuItem * 	FindItem (int id, wxMenu **menu=NULL) const
 	Finds the menu item object associated with the given menu item identifier. More...
 
int 	FindMenu (const wxString &title) const
 	Returns the index of the menu with the given title or wxNOT_FOUND if no such menu exists in this menubar. More...
 
virtual int 	FindMenuItem (const wxString &menuString, const wxString &itemString) const
 	Finds the menu item id for a menu name/menu item string pair. More...
 
wxString 	GetHelpString (int id) const
 	Gets the help string associated with the menu item identifier. More...
 
wxString 	GetLabel (int id) const
 	Gets the label associated with a menu item. More...
 
wxString 	GetLabelTop (size_t pos) const
 	Returns the label of a top-level menu. More...
 
wxMenu * 	GetMenu (size_t menuIndex) const
 	Returns the menu at menuIndex (zero-based). More...
 
size_t 	GetMenuCount () const
 	Returns the number of menus in this menubar. More...
 
virtual wxString 	GetMenuLabel (size_t pos) const
 	Returns the label of a top-level menu. More...
 
virtual wxString 	GetMenuLabelText (size_t pos) const
 	Returns the label of a top-level menu. More...
 
virtual bool 	Insert (size_t pos, wxMenu *menu, const wxString &title)
 	Inserts the menu at the given position into the menu bar. More...
 
bool 	IsChecked (int id) const
 	Determines whether an item is checked. More...
 
bool 	IsEnabled (int id) const
 	Determines whether an item is enabled. More...
 
virtual void 	Refresh (bool eraseBackground=true, const wxRect *rect=NULL)
 	Redraw the menu bar. More...
 
virtual wxMenu * 	Remove (size_t pos)
 	Removes the menu from the menu bar and returns the menu object - the caller is responsible for deleting it. More...
 
virtual wxMenu * 	Replace (size_t pos, wxMenu *menu, const wxString &title)
 	Replaces the menu at the given position with another one. More...
 
void 	SetHelpString (int id, const wxString &helpString)
 	Sets the help string associated with a menu item. More...
 
void 	SetLabel (int id, const wxString &label)
 	Sets the label of a menu item. More...
 
void 	SetLabelTop (size_t pos, const wxString &label)
 	Sets the label of a top-level menu. More...
 
virtual void 	SetMenuLabel (size_t pos, const wxString &label)
 	Sets the label of a top-level menu. More...
 
wxMenu * 	OSXGetAppleMenu () const
 	Returns the Apple menu. More...
 
wxFrame * 	GetFrame () const
 
bool 	IsAttached () const
 
virtual void 	Attach (wxFrame *frame)
 
virtual void 	Detach ()
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
