import(re)

//------------------------------------------------------------------------------
txt = R'''
bool 	Create (wxWindow *parent, wxWindowID id, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxSB_HORIZONTAL, const wxValidator &validator=wxDefaultValidator, const wxString &name=wxScrollBarNameStr)
 	Scrollbar creation function called by the scrollbar constructor. More...
 
virtual int 	GetPageSize () const
 	Returns the page size of the scrollbar. More...
 
virtual int 	GetRange () const
 	Returns the length of the scrollbar. More...
 
virtual int 	GetThumbPosition () const
 	Returns the current position of the scrollbar thumb. More...
 
virtual int 	GetThumbSize () const
 	Returns the thumb or 'view' size. More...
 
virtual void 	SetScrollbar (int position, int thumbSize, int range, int pageSize, bool refresh=true)
 	Sets the scrollbar properties. More...
 
virtual void 	SetThumbPosition (int viewStart)
 	Sets the position of the scrollbar. More...
 
bool 	IsVertical () const
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
