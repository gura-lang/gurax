import(re)

//------------------------------------------------------------------------------
txt = R'''
static void 	AddHandler (wxBitmapHandler *handler)
 	Adds a handler to the end of the static list of format handlers. More...
 
static void 	CleanUpHandlers ()
 	Deletes all bitmap handlers. More...
 
static wxBitmapHandler * 	FindHandler (const wxString &name)
 	Finds the handler with the given name. More...
 
static wxBitmapHandler * 	FindHandler (const wxString &extension, wxBitmapType bitmapType)
 	Finds the handler associated with the given extension and type. More...
 
static wxBitmapHandler * 	FindHandler (wxBitmapType bitmapType)
 	Finds the handler associated with the given bitmap type. More...
 
static wxList & 	GetHandlers ()
 	Returns the static list of bitmap format handlers. More...
 
static void 	InitStandardHandlers ()
 	Adds the standard bitmap format handlers, which, depending on wxWidgets configuration, can be handlers for Windows bitmap, Windows bitmap resource, and XPM. More...
 
static void 	InsertHandler (wxBitmapHandler *handler)
 	Adds a handler at the start of the static list of format handlers. More...
 
static wxBitmap 	NewFromPNGData (const void *data, size_t size)
 	Loads a bitmap from the memory containing image data in PNG format. More...
 
static bool 	RemoveHandler (const wxString &name)
 	Finds the handler with the given name, and removes it. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
