import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxHyperlinkCtrl (wxWindow *parent, wxWindowID id, const wxString &label, const wxString &url, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxHL_DEFAULT_STYLE, const wxString &name=wxHyperlinkCtrlNameStr)
 	Constructor. More...
 
bool 	Create (wxWindow *parent, wxWindowID id, const wxString &label, const wxString &url, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=wxHL_DEFAULT_STYLE, const wxString &name=wxHyperlinkCtrlNameStr)
 	Creates the hyperlink control. More...
 
virtual wxColour 	GetHoverColour () const
 	Returns the colour used to print the label of the hyperlink when the mouse is over the control. More...
 
virtual wxColour 	GetNormalColour () const
 	Returns the colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control. More...
 
virtual wxString 	GetURL () const
 	Returns the URL associated with the hyperlink. More...
 
virtual bool 	GetVisited () const =0
 	Returns true if the hyperlink has already been clicked by the user at least one time. More...
 
virtual wxColour 	GetVisitedColour () const
 	Returns the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited). More...
 
virtual void 	SetHoverColour (const wxColour &colour)
 	Sets the colour used to print the label of the hyperlink when the mouse is over the control. More...
 
virtual void 	SetNormalColour (const wxColour &colour)
 	Sets the colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control. More...
 
virtual void 	SetURL (const wxString &url)
 	Sets the URL associated with the hyperlink. More...
 
virtual void 	SetVisited (bool visited=true)=0
 	Marks the hyperlink as visited (see wxHyperlinkCtrl::SetVisitedColour). More...
 
virtual void 	SetVisitedColour (const wxColour &colour)
 	Sets the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited). More...'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
