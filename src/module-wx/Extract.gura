import(re)

//------------------------------------------------------------------------------
txt = R'''
const wxColour & 	GetBackgroundColour () const
 	Returns the background colour set for the calendar date. More...
 
wxCalendarDateBorder 	GetBorder () const
 	Returns the border set for the calendar date. More...
 
const wxColour & 	GetBorderColour () const
 	Returns the border colour set for the calendar date. More...
 
const wxFont & 	GetFont () const
 	Returns the font set for the calendar date. More...
 
const wxColour & 	GetTextColour () const
 	Returns the text colour set for the calendar date. More...
 
bool 	HasBackgroundColour () const
 	Returns true if a non-default text background colour is set. More...
 
bool 	HasBorder () const
 	Returns true if a non-default (i.e. any) border is set. More...
 
bool 	HasBorderColour () const
 	Returns true if a non-default border colour is set. More...
 
bool 	HasFont () const
 	Returns true if a non-default font is set. More...
 
bool 	HasTextColour () const
 	Returns true if a non-default text foreground colour is set. More...
 
bool 	IsHoliday () const
 	Returns true if this calendar day is displayed as a holiday. More...
 
void 	SetBackgroundColour (const wxColour &colBack)
 	Sets the text background colour to use. More...
 
void 	SetBorder (wxCalendarDateBorder border)
 	Sets the border to use. More...
 
void 	SetBorderColour (const wxColour &col)
 	Sets the border colour to use. More...
 
void 	SetFont (const wxFont &font)
 	Sets the font to use. More...
 
void 	SetHoliday (bool holiday)
 	If holiday is true, this calendar day will be displayed as a holiday. More...
 
void 	SetTextColour (const wxColour &colText)
 	Sets the text (foreground) colour to use. More...
s
tatic const wxCalendarDateAttr & 	GetMark ()
 	Used (internally) by the generic wxCalendarCtrl::Mark(). More...
 
static void 	SetMark (const wxCalendarDateAttr &m)
 	Set the attributes that will be used to Mark() days on the generic wxCalendarCtrl. More...
  '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
