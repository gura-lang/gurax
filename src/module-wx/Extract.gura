import(re)

//------------------------------------------------------------------------------
txt = R'''
wxLayoutAlignment 	GetAlignment () const
 	Specifies the alignment of the window (which side of the remaining parent client area the window sticks to). More...
 
int 	GetFlags () const
 	Returns the flags associated with this event. More...
 
wxLayoutOrientation 	GetOrientation () const
 	Returns the orientation that the event handler specified to the event object. More...
 
int 	GetRequestedLength () const
 	Returns the requested length of the window in the direction of the window orientation. More...
 
wxSize 	GetSize () const
 	Returns the size that the event handler specified to the event object as being the requested size of the window. More...
 
void 	SetAlignment (wxLayoutAlignment alignment)
 	Call this to specify the alignment of the window (which side of the remaining parent client area the window sticks to). More...
 
void 	SetFlags (int flags)
 	Sets the flags associated with this event. More...
 
void 	SetOrientation (wxLayoutOrientation orientation)
 	Call this to specify the orientation of the window. More...
 
void 	SetRequestedLength (int length)
 	Sets the requested length of the window in the direction of the window orientation. More...
 
void 	SetSize (const wxSize &size)
 	Call this to let the calling code know what the size of the window is. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
