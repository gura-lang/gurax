import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxHtmlHelpWindow (wxHtmlHelpData *data=NULL)
 
a 	wxHtmlHelpWindow (wxWindow *parent, int wxWindowID, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, int style=wxTAB_TRAVERSAL|wxBORDER_NONE, int helpStyle=wxHF_DEFAULT_STYLE, wxHtmlHelpData *data=NULL)
 	Constructor. More...
 
bool 	Create (wxWindow *parent, wxWindowID id, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, int style=wxTAB_TRAVERSAL|wxBORDER_NONE, int helpStyle=wxHF_DEFAULT_STYLE)
 	Creates the help window. More...
 
bool 	Display (const wxString &x)
 	Displays page x. More...
 
bool 	Display (const int id)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.This form takes numeric ID as the parameter (uses an extension to MS format, param name="ID" value=id). More...
 
bool 	DisplayContents ()
 	Displays contents panel. More...
 
bool 	DisplayIndex ()
 	Displays index panel. More...
 
wxHtmlHelpData * 	GetData ()
 	Returns the wxHtmlHelpData object, which is usually a pointer to the controller's data. More...
 
bool 	KeywordSearch (const wxString &keyword, wxHelpSearchMode mode=wxHELP_SEARCH_ALL)
 	Search for given keyword. More...
 
void 	ReadCustomization (wxConfigBase *cfg, const wxString &path=wxEmptyString)
 	Reads the user's settings for this window. More...
 
void 	UseConfig (wxConfigBase *config, const wxString &rootpath=wxEmptyString)
 	Associates a wxConfig object with the help window. More...
 
void 	WriteCustomization (wxConfigBase *cfg, const wxString &path=wxEmptyString)
 	Saves the user's settings for this window. More...
 
void 	RefreshLists ()
 	Refresh all panels. More...
 
wxHtmlHelpController * 	GetController () const
 
void 	SetController (wxHtmlHelpController *controller)
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
