import(re)

//------------------------------------------------------------------------------
txt = R'''
void 	DecTo (const wxSize &size)
 	Decrements this object so that both of its dimensions are not greater than the corresponding dimensions of the size. More...
 
void 	DecToIfSpecified (const wxSize &size)
 	Decrements this object to be not bigger than the given size ignoring non-specified components. More...
 
int 	GetHeight () const
 	Gets the height member. More...
 
int 	GetWidth () const
 	Gets the width member. More...
 
void 	IncTo (const wxSize &size)
 	Increments this object so that both of its dimensions are not less than the corresponding dimensions of the size. More...
 
bool 	IsFullySpecified () const
 	Returns true if neither of the size object components is equal to -1, which is used as default for the size values in wxWidgets (hence the predefined wxDefaultSize has both of its components equal to -1). More...
 
wxSize & 	Scale (float xscale, float yscale)
 	Scales the dimensions of this object by the given factors. More...
 
void 	Set (int width, int height)
 	Sets the width and height members. More...
 
void 	SetDefaults (const wxSize &sizeDefault)
 	Combine this size object with another one replacing the default (i.e. equal to -1) components of this object with those of the other. More...
 
void 	SetHeight (int height)
 	Sets the height. More...
 
void 	SetWidth (int width)
 	Sets the width. More...
 
void 	DecBy (const wxPoint &pt)
 	Decreases the size in both x and y directions. More...
 
void 	DecBy (const wxSize &size)
 	Decreases the size in both x and y directions. More...
 
void 	DecBy (int dx, int dy)
 	Decreases the size in both x and y directions. More...
 
void 	DecBy (int d)
 	Decreases the size in both x and y directions. More...
 
void 	IncBy (const wxPoint &pt)
 	Increases the size in both x and y directions. More...
 
void 	IncBy (const wxSize &size)
 	Increases the size in both x and y directions. More...
 
void 	IncBy (int dx, int dy)
 	Increases the size in both x and y directions. More...
 
void 	IncBy (int d)
 	Increases the size in both x and y directions. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
