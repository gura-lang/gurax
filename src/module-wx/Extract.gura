import(re)

//------------------------------------------------------------------------------
txt = R'''
void 	AddGrowableCol (size_t idx, int proportion=0)
 	Specifies that column idx (starting from zero) should be grown if there is extra space available to the sizer. More...
 
void 	AddGrowableRow (size_t idx, int proportion=0)
 	Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer. More...
 
int 	GetFlexibleDirection () const
 	Returns a wxOrientation value that specifies whether the sizer flexibly resizes its columns, rows, or both (default). More...
 
wxFlexSizerGrowMode 	GetNonFlexibleGrowMode () const
 	Returns the value that specifies how the sizer grows in the "non-flexible" direction if there is one. More...
 
bool 	IsColGrowable (size_t idx)
 	Returns true if column idx is growable. More...
 
bool 	IsRowGrowable (size_t idx)
 	Returns true if row idx is growable. More...
 
void 	RemoveGrowableCol (size_t idx)
 	Specifies that the idx column index is no longer growable. More...
 
void 	RemoveGrowableRow (size_t idx)
 	Specifies that the idx row index is no longer growable. More...
 
void 	SetFlexibleDirection (int direction)
 	Specifies whether the sizer should flexibly resize its columns, rows, or both. More...
 
void 	SetNonFlexibleGrowMode (wxFlexSizerGrowMode mode)
 	Specifies how the sizer should grow in the non-flexible direction if there is one (so SetFlexibleDirection() must have been called previously). More...
 
const wxArrayInt & 	GetRowHeights () const
 	Returns a read-only array containing the heights of the rows in the sizer. More...
 
const wxArrayInt & 	GetColWidths () const
 	Returns a read-only array containing the widths of the columns in the sizer. More...
 
virtual void 	RecalcSizes ()
 	This method is abstract and has to be overwritten by any derived class. More...
 
virtual wxSize 	CalcMin ()
 	This method is abstract and has to be overwritten by any derived class. More...
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
