import(re)

//------------------------------------------------------------------------------
txt = R'''
 int 	GetBezelFace () const
 	Returns the width of the 3D bezel face. More...
 
int 	GetRange () const
 	Returns the maximum position of the gauge. More...
 
int 	GetShadowWidth () const
 	Returns the 3D shadow margin width. More...
 
int 	GetValue () const
 	Returns the current position of the gauge. More...
 
bool 	IsVertical () const
 	Returns true if the gauge is vertical (has wxGA_VERTICAL style) and false otherwise. More...
 
virtual void 	Pulse ()
 	Switch the gauge to indeterminate mode (if required) and makes the gauge move a bit to indicate the user that some progress has been made. More...
 
void 	SetBezelFace (int width)
 	Sets the 3D bezel face width. More...
 
void 	SetRange (int range)
 	Sets the range (maximum value) of the gauge. More...
 
void 	SetShadowWidth (int width)
 	Sets the 3D shadow width. More...
 
void 	SetValue (int pos)
 	Sets the position of the gauge. More...
 
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
