import(re)

//------------------------------------------------------------------------------
txt = R'''
bool 	IsEarlierThan (const wxDateTime &datetime) const
 	Returns true if this date precedes the given one. More...
 
bool 	IsEqualTo (const wxDateTime &datetime) const
 	Returns true if the two dates are strictly identical. More...
 
bool 	IsEqualUpTo (const wxDateTime &dt, const wxTimeSpan &ts) const
 	Returns true if the date is equal to another one up to the given time interval, i.e. if the absolute difference between the two dates is less than this interval. More...
 
bool 	IsLaterThan (const wxDateTime &datetime) const
 	Returns true if this date is later than the given one. More...
 
bool 	IsSameDate (const wxDateTime &dt) const
 	Returns true if the date is the same without comparing the time parts. More...
 
bool 	IsSameTime (const wxDateTime &dt) const
 	Returns true if the time is the same (although dates may differ). More...
 
bool 	IsStrictlyBetween (const wxDateTime &t1, const wxDateTime &t2) const
 	Returns true if this date lies strictly between the two given dates. More...
 
bool 	IsBetween (const wxDateTime &t1, const wxDateTime &t2) const
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
