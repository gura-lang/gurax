import(re)

//------------------------------------------------------------------------------
txt = R'''
 
int 	GetKeyCode () const
 	Returns the key code of the key that generated this event. More...
 
bool 	IsKeyInCategory (int category) const
 	Returns true if the key is in the given key category. More...
 
wxUint32 	GetRawKeyC
w key code for this event. More...
 
wxUint32 	GetRawKeyFlags () const
 	Returns the low level key flags for this event. More...
 
wxChar 	GetUnicodeKey () const
 	Returns the Unicode character corresponding to this key event. More...
 
wxCoord 	GetX () const
 	Returns the X position (in client coordinates) of the event. More...
 
wxCoord 	GetY () const
 	Returns the Y position (in client coordinates) of the event. More...
 
void 	DoAllowNextEvent ()
 	Allow normal key events generation. More...
 
bool 	IsNextEventAllowed () const
 	Returns true if DoAllowNextEvent() had been called, false by default. More...
 
wxPoint 	GetPosition () const
 	Obtains the position (in client coordinates) at which the key was pressed. More...
 
void 	GetPosition (wxCoord *x, wxCoord *y) const
 	Obtains the position (in client coordinates) at which the key was pressed. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
