import(re)

//------------------------------------------------------------------------------
txt = R'''
wxFontInfo & 	Family (wxFontFamily family)
 	Set the font family. More...
 
wxFontInfo & 	FaceName (const wxString &faceName)
 	Set the font face name to use. More...
 
wxFontInfo & 	Bold (bool bold=true)
 	Use a bold version of the font. More...
 
wxFontInfo & 	Light (bool light=true)
 	Use a lighter version of the font. More...
 
wxFontInfo & 	Italic (bool italic=true)
 	Use an italic version of the font. More...
 
wxFontInfo & 	Slant (bool slant=true)
 	Use a slanted version of the font. More...
 
wxFontInfo & 	AntiAliased (bool antiAliased=true)
 	Set anti-aliasing flag. More...
 
wxFontInfo & 	Underlined (bool underlined=true)
 	Use an underlined version of the font. More...
 
wxFontInfo & 	Strikethrough (bool strikethrough=true)
 	Use a strike-through version of the font. More...
 
wxFontInfo & 	Encoding (wxFontEncoding encoding)
 	Set the font encoding to use. More...
 
wxFontInfo & 	AllFlags (int flags)
 	Set all the font attributes at once. More...
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
