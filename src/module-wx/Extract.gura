import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual void 	DiscardEdits ()
 	Resets the internal modified flag as if the current changes had been saved. More...
 
virtual bool 	EmulateKeyPress (const wxKeyEvent &event)
 	This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control. More...
 
virtual const wxTextAttr & 	GetDefaultStyle () const
 	Returns the style currently used for the new text. More...
 
virtual int 	GetLineLength (long lineNo) const
 	Gets the length of the specified line, not including any trailing newline character(s). More...
 
virtual wxString 	GetLineText (long lineNo) const
 	Returns the contents of a given line in the text control, not including any trailing newline character(s). More...
 
virtual int 	GetNumberOfLines () const
 	Returns the number of lines in the text control buffer. More...
 
virtual bool 	GetStyle (long position, wxTextAttr &style)
 	Returns the style at this position in the text control. More...
 
wxTextCtrlHitTestResult 	HitTest (const wxPoint &pt, long *pos) const
 	Finds the position of the character at the specified point. More...
 
wxTextCtrlHitTestResult 	HitTest (const wxPoint &pt, wxTextCoord *col, wxTextCoord *row) const
 	Finds the row and column of the character at the specified point. More...
 
virtual bool 	IsModified () const
 	Returns true if the text has been modified by user. More...
 
bool 	IsMultiLine () const
 	Returns true if this is a multi line edit control and false otherwise. More...
 
bool 	IsSingleLine () const
 	Returns true if this is a single line edit control and false otherwise. More...
 
bool 	LoadFile (const wxString &filename, int fileType=wxTEXT_TYPE_ANY)
 	Loads and displays the named file, if it exists. More...
 
virtual void 	MarkDirty ()
 	Mark text as modified (dirty). More...
 
void 	OnDropFiles (wxDropFilesEvent &event)
 	This event handler function implements default drag and drop behaviour, which is to load the first dropped file into the control. More...
 
virtual bool 	PositionToXY (long pos, long *x, long *y) const
 	Converts given position to a zero-based column, line number pair. More...
 
wxPoint 	PositionToCoords (long pos) const
 	Converts given text position to client coordinates in pixels. More...
 
bool 	SaveFile (const wxString &filename=wxEmptyString, int fileType=wxTEXT_TYPE_ANY)
 	Saves the contents of the control in a text file. More...
 
virtual bool 	SetDefaultStyle (const wxTextAttr &style)
 	Changes the default style to use for the new text which is going to be added to the control using WriteText() or AppendText(). More...
 
void 	SetModified (bool modified)
 	Marks the control as being modified by the user or not. More...
 
virtual bool 	SetStyle (long start, long end, const wxTextAttr &style)
 	Changes the style of the given range. More...
 
virtual void 	ShowPosition (long pos)
 	Makes the line containing the given position visible. More...
 
virtual long 	XYToPosition (long x, long y) const
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
