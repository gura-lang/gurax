import(re)

//------------------------------------------------------------------------------
txt = R'''
wxSize 	ComputeFittingClientSize (wxWindow *window)
 	Computes client area size for window so that it matches the sizer's minimal size. More...
 
wxSize 	ComputeFittingWindowSize (wxWindow *window)
 	Like ComputeFittingClientSize(), but converts the result into window size. More...
 
virtual bool 	Detach (wxWindow *window)
 	Detach the child window from the sizer without destroying it. More...
 
virtual bool 	Detach (wxSizer *sizer)
 	Detach the child sizer from the sizer without destroying it. More...
 
virtual bool 	Detach (int index)
 	Detach a item at position index from the sizer without destroying it. More...
 
wxSize 	Fit (wxWindow *window)
 	Tell the sizer to resize the window so that its client area matches the sizer's minimal size (ComputeFittingClientSize() is called to determine it). More...
 
void 	FitInside (wxWindow *window)
 	Tell the sizer to resize the virtual size of the window to match the sizer's minimal size. More...
 
virtual bool 	InformFirstDirection (int direction, int size, int availableOtherDir)
 	Inform sizer about the first direction that has been decided (by parent item). More...
 
wxWindow * 	GetContainingWindow () const
 	Returns the window this sizer is used in or NULL if none. More...
 
void 	SetContainingWindow (wxWindow *window)
 	Set the window this sizer is used in. More...
 
size_t 	GetItemCount () const
 	Returns the number of items in the sizer. More...
 
wxSizerItem * 	GetItem (wxWindow *window, bool recursive=false)
 	Finds wxSizerItem which holds the given window. More...
 
wxSizerItem * 	GetItem (wxSizer *sizer, bool recursive=false)
 	Finds wxSizerItem which holds the given sizer. More...
 
wxSizerItem * 	GetItem (size_t index)
 	Finds wxSizerItem which is located in the sizer at position index. More...
 
wxSizerItem * 	GetItemById (int id, bool recursive=false)
 	Finds item of the sizer which has the given id. More...
 
wxSize 	GetMinSize ()
 	Returns the minimal size of the sizer. More...
 
wxPoint 	GetPosition () const
 	Returns the current position of the sizer. More...
 
wxSize 	GetSize () const
 	Returns the current size of the sizer. More...
 
bool 	Hide (wxWindow *window, bool recursive=false)
 	Hides the child window. More...
 
bool 	Hide (wxSizer *sizer, bool recursive=false)
 	Hides the child sizer. More...
 
bool 	Hide (size_t index)
 	Hides the item at position index. More...
 
wxSizerItem * 	Insert (size_t index, wxWindow *window, const wxSizerFlags &flags)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, wxWindow *window, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, wxSizer *sizer, const wxSizerFlags &flags)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, wxSizer *sizer, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, int width, int height, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, int width, int height, const wxSizerFlags &flags)
 	Insert a child into the sizer before any existing item at index. More...
 
wxSizerItem * 	Insert (size_t index, wxSizerItem *item)
 
wxSizerItem * 	InsertSpacer (size_t index, int size)
 	Inserts non-stretchable space to the sizer. More...
 
wxSizerItem * 	InsertStretchSpacer (size_t index, int prop=1)
 	Inserts stretchable space to the sizer. More...
 
bool 	IsEmpty () const
 	Return true if the sizer has no elements. More...
 
bool 	IsShown (wxWindow *window) const
 	Returns true if the window is shown. More...
 
bool 	IsShown (wxSizer *sizer) const
 	Returns true if the sizer is shown. More...
 
bool 	IsShown (size_t index) const
 	Returns true if the item at index is shown. More...
 
virtual void 	Layout ()
 	Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension. More...
 
wxSizerItem * 	Prepend (wxWindow *window, const wxSizerFlags &flags)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (wxWindow *window, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (wxSizer *sizer, const wxSizerFlags &flags)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (wxSizer *sizer, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (int width, int height, int proportion=0, int flag=0, int border=0, wxObject *userData=NULL)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (int width, int height, const wxSizerFlags &flags)
 	Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. More...
 
wxSizerItem * 	Prepend (wxSizerItem *item)
 
wxSizerItem * 	PrependSpacer (int size)
 	Prepends non-stretchable space to the sizer. More...
 
wxSizerItem * 	PrependStretchSpacer (int prop=1)
 	Prepends stretchable space to the sizer. More...
 
virtual void 	RecalcSizes ()=0
 	This method is abstract and has to be overwritten by any derived class. More...
 
virtual bool 	Remove (wxWindow *window)
 	Removes a child window from the sizer, but does not destroy it (because windows are owned by their parent window, not the sizer). More...
 
virtual bool 	Remove (wxSizer *sizer)
 	Removes a sizer child from the sizer and destroys it. More...
 
virtual bool 	Remove (int index)
 	Removes a child from the sizer and destroys it if it is a sizer or a spacer, but not if it is a window (because windows are owned by their parent window, not the sizer). More...
 
virtual bool 	Replace (wxWindow *oldwin, wxWindow *newwin, bool recursive=false)
 	Detaches the given oldwin from the sizer and replaces it with the given newwin. More...
 
virtual bool 	Replace (wxSizer *oldsz, wxSizer *newsz, bool recursive=false)
 	Detaches the given oldsz from the sizer and replaces it with the given newsz. More...
 
virtual bool 	Replace (size_t index, wxSizerItem *newitem)
 	Detaches the given item at position index from the sizer and replaces it with the given wxSizerItem newitem. More...
 
void 	SetDimension (int x, int y, int width, int height)
 	Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the Add() and Prepend() methods. More...
 
void 	SetDimension (const wxPoint &pos, const wxSize &size)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	SetMinSize (const wxSize &size)
 	Call this to give the sizer a minimal size. More...
 
void 	SetMinSize (int width, int height)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	SetSizeHints (wxWindow *window)
 	This method first calls Fit() and then wxTopLevelWindow::SetSizeHints() on the window passed to it. More...
 
void 	SetVirtualSizeHints (wxWindow *window)
 	Tell the sizer to set the minimal size of the window virtual area to match the sizer's minimal size. More...
 
bool 	Show (wxWindow *window, bool show=true, bool recursive=false)
 	Shows or hides the window. More...
 
bool 	Show (wxSizer *sizer, bool show=true, bool recursive=false)
 	Shows or hides sizer. More...
 
bool 	Show (size_t index, bool show=true)
 	Shows the item at index. More...
 
virtual void 	ShowItems (bool show)
 	Show or hide all items managed by the sizer. More...
 
wxSizerItemList & 	GetChildren ()
 	Returns the list of the items in this sizer. More...
 
const wxSizerItemList & 	GetChildren () const
 	Returns the list of the items in this sizer. More...
 
bool 	SetItemMinSize (wxWindow *window, int width, int height)
 	Set an item's minimum size by window, sizer, or position. More...
 
bool 	SetItemMinSize (wxWindow *window, const wxSize &size)
 	Set an item's minimum size by window, sizer, or position. More...
 
bool 	SetItemMinSize (wxSizer *sizer, int width, int height)
 	Set an item's minimum size by window, sizer, or position. More...
 
bool 	SetItemMinSize (wxSizer *sizer, const wxSize &size)
 	Set an item's minimum size by window, sizer, or position. More...
 
bool 	SetItemMinSize (size_t index, int width, int height)
 	Set an item's minimum size by window, sizer, or position. More...
 
bool 	SetItemMinSize (size_t index, const wxSize &size)
 	Set an item's minimum size by window, sizer, or position. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
