import(re)

//------------------------------------------------------------------------------
txt = R'''
a 	wxVListBox (wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name=wxVListBoxNameStr)
 	Normal constructor which calls Create() internally. More...
 
void 	Clear ()
 	Deletes all items from the control. More...
 
bool 	Create (wxWindow *parent, wxWindowID id=wxID_ANY, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name=wxVListBoxNameStr)
 	Creates the control. More...
 
bool 	DeselectAll ()
 	Deselects all the items in the listbox. More...
 
int 	GetFirstSelected (unsigned long &cookie) const
 	Returns the index of the first selected item in the listbox or wxNOT_FOUND if no items are currently selected. More...
 
size_t 	GetItemCount () const
 	Get the number of items in the control. More...
 
wxPoint 	GetMargins () const
 	Returns the margins used by the control. More...
 
wxRect 	GetItemRect (size_t item) const
 	Returns the rectangle occupied by this item in physical coordinates. More...
 
int 	GetNextSelected (unsigned long &cookie) const
 	Returns the index of the next selected item or wxNOT_FOUND if there are no more. More...
 
size_t 	GetSelectedCount () const
 	Returns the number of the items currently selected. More...
 
int 	GetSelection () const
 	Get the currently selected item or wxNOT_FOUND if there is no selection. More...
 
const wxColour & 	GetSelectionBackground () const
 	Returns the background colour used for the selected cells. More...
 
bool 	HasMultipleSelection () const
 	Returns true if the listbox was created with wxLB_MULTIPLE style and so supports multiple selection or false if it is a single selection listbox. More...
 
bool 	IsCurrent (size_t item) const
 	Returns true if this item is the current one, false otherwise. More...
 
bool 	IsSelected (size_t item) const
 	Returns true if this item is selected, false otherwise. More...
 
bool 	Select (size_t item, bool select=true)
 	Selects or deselects the specified item which must be valid (i.e. not equal to wxNOT_FOUND). More...
 
bool 	SelectAll ()
 	Selects all the items in the listbox. More...
 
bool 	SelectRange (size_t from, size_t to)
 	Selects all items in the specified range which may be given in any order. More...
 
virtual void 	SetItemCount (size_t count)
 	Set the number of items to be shown in the control. More...
 
void 	SetSelection (int selection)
 	Set the selection to the specified item, if it is -1 the selection is unset. More...
 
void 	SetSelectionBackground (const wxColour &col)
 	Sets the colour to be used for the selected cells background. More...
 
void 	Toggle (size_t item)
 	Toggles the state of the specified item, i.e. selects it if it was unselected and deselects it if it was selected. More...
 
void 	SetMargins (const wxPoint &pt)
 	Set the margins: horizontal margin is the distance between the window border and the item contents while vertical margin is half of the distance between items. More...
 
void 	SetMargins (wxCoord x, wxCoord y)
 	Set the margins: horizontal margin is the distance between the window border and the item contents while vertical margin is half of the distance between items. More...
 
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
