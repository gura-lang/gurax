import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual unsigned char 	Alpha () const
 	Returns the alpha value, on platforms where alpha is not yet supported, this always returns wxALPHA_OPAQUE. More...
 
virtual unsigned char 	Blue () const
 	Returns the blue intensity. More...
 
virtual wxString 	GetAsString (long flags=wxC2S_NAME|wxC2S_CSS_SYNTAX) const
 	Converts this colour to a wxString using the given flags. More...
 
wxIntPtr 	GetPixel () const
 	Returns a pixel value which is platform-dependent. More...
 
virtual unsigned char 	Green () const
 	Returns the green intensity. More...
 
virtual bool 	IsOk () const
 	Returns true if the colour object is valid (the colour has been initialised with RGB values). More...
 
virtual unsigned char 	Red () const
 	Returns the red intensity. More...
wxColour & 	MakeDisabled (unsigned char brightness=255)
 	Make a disabled version of this colour. More...
 
wxColour 	ChangeLightness (int ialpha) const
 	wxColour wrapper for ChangeLightness(r,g,b,ialpha). More...
 
void 	SetRGB (wxUint32 colRGB)
 	Sets the RGB or RGBA colour values from a single 32 bit value. More...
 
void 	SetRGBA (wxUint32 colRGBA)
 	Sets the RGB or RGBA colour values from a single 32 bit value. More...
 
wxUint32 	GetRGB () const
 	Gets the RGB or RGBA colour values as a single 32 bit value. More...
 
wxUint32 	GetRGBA () const
 	Gets the RGB or RGBA colour values as a single 32 bit value. More...
 
void 	Set (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=wxALPHA_OPAQUE)
 	Sets the RGB intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overload). More...
 
void 	Set (unsigned long RGB)
 	Sets the RGB intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overload). More...
 
bool 	Set (const wxString &str)
 
	Sets the RGB intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overload). More...
 
static void 	MakeMono (unsigned char *r, unsigned char *g, unsigned char *b, bool on)
 	Assign 0 or 255 to rgb out parameters. More...
 
static void 	MakeDisabled (unsigned char *r, unsigned char *g, unsigned char *b, unsigned char brightness=255)
 	Create a disabled (dimmed) colour from (in/out) rgb parameters. More...
 
static void 	MakeGrey (unsigned char *r, unsigned char *g, unsigned char *b)
 	Create a grey colour from (in/out) rgb parameters using integer arithmetic. More...
 
static void 	MakeGrey (unsigned char *r, unsigned char *g, unsigned char *b, double weight_r, double weight_g, double weight_b)
 	Create a grey colour from (in/out) rgb parameters using floating point arithmetic. More...
 
static unsigned char 	AlphaBlend (unsigned char fg, unsigned char bg, double alpha)
 	Blend colour, taking alpha into account. More...
 
static void 	ChangeLightness (unsigned char *r, unsigned char *g, unsigned char *b, int ialpha)
 	ChangeLightness() is a utility function that simply darkens or lightens a color, based on the specified percentage ialpha of 0 would be completely black, 200 completely white an ialpha of 100 returns the same colour. More...
  
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
