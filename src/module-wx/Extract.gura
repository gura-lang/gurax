import(re)

//------------------------------------------------------------------------------
txt = R'''
wxImage 	Copy () const
 	Returns an identical copy of this image. More...
 
bool 	Create (int width, int height, bool clear=true)
 	Creates a fresh image. More...
 
bool 	Create (const wxSize &sz, bool clear=true)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
bool 	Create (int width, int height, unsigned char *data, bool static_data=false)
 	Creates a fresh image. More...
 
bool 	Create (const wxSize &sz, unsigned char *data, bool static_data=false)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
bool 	Create (int width, int height, unsigned char *data, unsigned char *alpha, bool static_data=false)
 	Creates a fresh image. More...
 
bool 	Create (const wxSize &sz, unsigned char *data, unsigned char *alpha, bool static_data=false)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	Clear (unsigned char value=0)
 	Initialize the image data with zeroes (the default) or with the byte value given as value. More...
 
void 	Destroy ()
 	Destroys the image data. More...
 
void 	InitAlpha ()
 wxImage 	Blur (int blurRadius) const
 	Blurs the image in both horizontal and vertical directions by the specified pixel blurRadius. More...
 
wxImage 	BlurHorizontal (int blurRadius) const
 	Blurs the image in the horizontal direction only. More...
 
wxImage 	BlurVertical (int blurRadius) const
 	Blurs the image in the vertical direction only. More...
 
wxImage 	Mirror (bool horizontally=true) const
 	Returns a mirrored copy of the image. More...
 
void 	Paste (const wxImage &image, int x, int y)
 	Copy the data of the given image to the specified position in this image. More...
 
void 	Replace (unsigned char r1, unsigned char g1, unsigned char b1, unsigned char r2, unsigned char g2, unsigned char b2)
 	Replaces the colour specified by r1,g1,b1 by the colour r2,g2,b2. More...
 
wxImage & 	Rescale (int width, int height, wxImageResizeQuality quality=wxIMAGE_QUALITY_NORMAL)
 	Changes the size of the image in-place by scaling it: after a call to this function,the image will have the given width and height. More...
 
wxImage & 	Resize (const wxSize &size, const wxPoint &pos, int red=-1, int green=-1, int blue=-1)
 	Changes the size of the image in-place without scaling it by adding either a border with the given colour or cropping as necessary. More...
 
wxImage 	Rotate (double angle, const wxPoint &rotationCentre, bool interpolating=true, wxPoint *offsetAfterRotation=NULL) const
 	Rotates the image about the given point, by angle radians. More...
 
wxImage 	Rotate90 (bool clockwise=true) const
 	Returns a copy of the image rotated 90 degrees in the direction indicated by clockwise. More...
 
wxImage 	Rotate180 () const
 	Returns a copy of the image rotated by 180 degrees. More...
 
void 	RotateHue (double angle)
 	Rotates the hue of each pixel in the image by angle, which is a double in the range of -1.0 to +1.0, where -1.0 corresponds to -360 degrees and +1.0 corresponds to +360 degrees. More...
 
wxImage 	Scale (int width, int height, wxImageResizeQuality quality=wxIMAGE_QUALITY_NORMAL) const
 	Returns a scaled version of the image. More...
 
wxImage 	Size (const wxSize &size, const wxPoint &pos, int red=-1, int green=-1, int blue=-1) const
 	Returns a resized version of this image without scaling it by adding either a border with the given colour or cropping as necessary. More...
bool 	ConvertAlphaToMask (unsigned char threshold=wxIMAGE_ALPHA_THRESHOLD)
 	If the image has alpha channel, this method converts it to mask. More...
 
bool 	ConvertAlphaToMask (unsigned char mr, unsigned char mg, unsigned char mb, unsigned char threshold=wxIMAGE_ALPHA_THRESHOLD)
 	If the image has alpha channel, this method converts it to mask using the specified colour as the mask colour. More...
 
wxImage 	ConvertToGreyscale (double weight_r, double weight_g, double weight_b) const
 	Returns a greyscale version of the image. More...
 
wxImage 	ConvertToGreyscale () const
 	Returns a greyscale version of the image. More...
 
wxImage 	ConvertToMono (unsigned char r, unsigned char g, unsigned char b) const
 	Returns monochromatic version of the image. More...
 
wxImage 	ConvertToDisabled (unsigned char brightness=255) const
 	Returns disabled (dimmed) version of the image. More...
unsigned long 	ComputeHistogram (wxImageHistogram &histogram) const
 	Computes the histogram of the image. More...
 
bool 	FindFirstUnusedColour (unsigned char *r, unsigned char *g, unsigned char *b, unsigned char startR=1, unsigned char startG=0, unsigned char startB=0) const
 	Finds the first colour that is never used in the image. More...
unsigned char * 	GetAlpha () const
 	Returns pointer to the array storing the alpha values for this image. More...
 
unsigned char * 	GetData () const
 	Returns the image data as an array. More...
 
unsigned char 	GetAlpha (int x, int y) const
 	Return alpha value at given pixel location. More...
 
unsigned char 	GetRed (int x, int y) const
 	Returns the red intensity at the given coordinate. More...
 
unsigned char 	GetGreen (int x, int y) const
 	Returns the green intensity at the given coordinate. More...
 
unsigned char 	GetBlue (int x, int y) const
 	Returns the blue intensity at the given coordinate. More...
 
unsigned char 	GetMaskRed () const
 	Gets the red value of the mask colour. More...
 
unsigned char 	GetMaskGreen () const
 	Gets the green value of the mask colour. More...
 
unsigned char 	GetMaskBlue () const
 	Gets the blue value of the mask colour. More...
 
int 	GetWidth () const
 	Gets the width of the image in pixels. More...
 
int 	GetHeight () const
 	Gets the height of the image in pixels. More...
 
wxSize 	GetSize () const
 	Returns the size of the image in pixels. More...
 
wxString 	GetOption (const wxString &name) const
 	Gets a user-defined string-valued option. More...
 
int 	GetOptionInt (const wxString &name) const
 	Gets a user-defined integer-valued option. More...
 
bool 	GetOrFindMaskColour (unsigned char *r, unsigned char *g, unsigned char *b) const
 	Get the current mask colour or find a suitable unused colour that could be used as a mask colour. More...
 
const wxPalette & 	GetPalette () const
 	Returns the palette associated with the image. More...
 
wxImage 	GetSubImage (const wxRect &rect) const
 	Returns a sub image of the current one as long as the rect belongs entirely to the image. More...
 
wxBitmapType 	GetType () const
 	Gets the type of image found by LoadFile() or specified with SaveFile(). More...
 
bool 	HasAlpha () const
 	Returns true if this image has alpha channel, false otherwise. More...
 
bool 	HasMask () const
 	Returns true if there is a mask active, false otherwise. More...
 
bool 	HasOption (const wxString &name) const
 	Returns true if the given option is present. More...
 
bool 	IsOk () const
 	Returns true if image data is present. More...
 
bool 	IsTransparent (int x, int y, unsigned char threshold=wxIMAGE_ALPHA_THRESHOLD) const
 	Returns true if the given pixel is transparent, i.e. either has the mask colour if this image has a mask or if this image has alpha channel and alpha value of this pixel is strictly less than threshold. More...
virtual bool 	LoadFile (wxInputStream &stream, wxBitmapType type=wxBITMAP_TYPE_ANY, int index=-1)
 	Loads an image from an input stream. More...
 
virtual bool 	LoadFile (const wxString &name, wxBitmapType type=wxBITMAP_TYPE_ANY, int index=-1)
 	Loads an image from a file. More...
 
virtual bool 	LoadFile (const wxString &name, const wxString &mimetype, int index=-1)
 	Loads an image from a file. More...
 
virtual bool 	LoadFile (wxInputStream &stream, const wxString &mimetype, int index=-1)
 	Loads an image from an input stream. More...
 
virtual bool 	SaveFile (wxOutputStream &stream, const wxString &mimetype) const
 	Saves an image in the given stream. More...
 
virtual bool 	SaveFile (const wxString &name, wxBitmapType type) const
 	Saves an image in the named file. More...
 
virtual bool 	SaveFile (const wxString &name, const wxString &mimetype) const
 	Saves an image in the named file. More...
 
virtual bool 	SaveFile (const wxString &name) const
 	Saves an image in the named file. More...
 
virtual bool 	SaveFile (wxOutputStream &stream, wxBitmapType type) const
 	Saves an image in the given stream. More...
void 	SetAlpha (unsigned char *alpha=NULL, bool static_data=false)
 	This function is similar to SetData() and has similar restrictions. More...
 
void 	SetAlpha (int x, int y, unsigned char alpha)
 	Sets the alpha value for the given pixel. More...
 
void 	ClearAlpha ()
 	Removes the alpha channel from the image. More...
 
void 	SetData (unsigned char *data, bool static_data=false)
 	Sets the image data without performing checks. More...
 
void 	SetData (unsigned char *data, int new_width, int new_height, bool static_data=false)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	SetMask (bool hasMask=true)
 	Specifies whether there is a mask or not. More...
 
void 	SetMaskColour (unsigned char red, unsigned char green, unsigned char blue)
 	Sets the mask colour for this image (and tells the image to use the mask). More...
 
bool 	SetMaskFromImage (const wxImage &mask, unsigned char mr, unsigned char mg, unsigned char mb)
 	Sets image's mask so that the pixels that have RGB value of mr,mg,mb in mask will be masked in the image. More...
 
void 	SetOption (const wxString &name, const wxString &value)
 	Sets a user-defined option. More...
 
void 	SetOption (const wxString &name, int value)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	SetPalette (const wxPalette &palette)
 	Associates a palette with the image. More...
 
void 	SetRGB (int x, int y, unsigned char r, unsigned char g, unsigned char b)
 	Set the color of the pixel at the given x and y coordinate. More...
 
void 	SetRGB (const wxRect &rect, unsigned char red, unsigned char green, unsigned char blue)
 	Sets the colour of the pixels within the given rectangle. More...
 
void 	SetType (wxBitmapType type)
 	Set the type of image returned by GetType(). More...
static bool 	CanRead (const wxString &filename)
 	Returns true if at least one of the available image handlers can read the file with the given name. More...
 
static bool 	CanRead (wxInputStream &stream)
 	Returns true if at least one of the available image handlers can read the data in the given stream. More...
 
static wxString 	GetImageExtWildcard ()
 	Iterates all registered wxImageHandler objects, and returns a string containing file extension masks suitable for passing to file open/save dialog boxes. More...
 
static wxImage::HSVValue 	RGBtoHSV (const wxImage::RGBValue &rgb)
 	Converts a color in RGB color space to HSV color space. More...
 
static wxImage::RGBValue 	HSVtoRGB (const wxImage::HSVValue &hsv)
 	Converts a color in HSV color space to RGB color space. More...
static void 	AddHandler (wxImageHandler *handler)
 	Register an image handler. More...
 
static void 	CleanUpHandlers ()
 	Deletes all image handlers. More...
 
static wxImageHandler * 	FindHandler (const wxString &name)
 	Finds the handler with the given name. More...
 
static wxImageHandler * 	FindHandler (const wxString &extension, wxBitmapType imageType)
 	Finds the handler associated with the given extension and type. More...
 
static wxImageHandler * 	FindHandler (wxBitmapType imageType)
 	Finds the handler associated with the given image type. More...
 
static wxImageHandler * 	FindHandlerMime (const wxString &mimetype)
 	Finds the handler associated with the given MIME type. More...
 
static wxList & 	GetHandlers ()
 	Returns the static list of image format handlers. More...
 
static void 	InitStandardHandlers ()
 	Internal use only. More...
 
static void 	InsertHandler (wxImageHandler *handler)
 	Adds a handler at the start of the static list of format handlers. More...
 
static bool 	RemoveHandler (const wxString &name)
 	Finds the handler with the given name, and removes it. More...
 
static int 	GetImageCount (const wxString &filename, wxBitmapType type=wxBITMAP_TYPE_ANY)
 	If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images. More...
 
static int 	GetImageCount (wxInputStream &stream, wxBitmapType type=wxBITMAP_TYPE_ANY)
 	If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images. More...
        
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
