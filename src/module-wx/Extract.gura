import(re)

//------------------------------------------------------------------------------
txt = R'''
bool 	CreateFromHICON (WXHICON icon)
 	Attach a Windows icon handle. More...
 
wxIcon 	ConvertToDisabled (unsigned char brightness=255) const
 	Returns disabled (dimmed) version of the icon. More...
 
void 	CopyFromBitmap (const wxBitmap &bmp)
 	Copies bmp bitmap to this icon. More...
 
int 	GetDepth () const
 	Gets the colour depth of the icon. More...
 
int 	GetHeight () const
 	Gets the height of the icon in pixels. More...
 
int 	GetWidth () const
 	Gets the width of the icon in pixels. More...
 
virtual bool 	IsOk () const
 	Returns true if icon data is present. More...
 
bool 	LoadFile (const wxString &name, wxBitmapType type=wxICON_DEFAULT_TYPE, int desiredWidth=-1, int desiredHeight=-1)
 	Loads an icon from a file or resource. More...
 
void 	SetDepth (int depth)
 	Sets the depth member (does not affect the icon data). More...
 
void 	SetHeight (int height)
 	Sets the height member (does not affect the icon data). More...
 
void 	SetWidth (int width)
 	Sets the width member (does not affect the icon data). More...
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
