import(re)

//------------------------------------------------------------------------------
txt = R'''
virtual void 	Command (wxCommandEvent &event)
 	Simulates the effect of the user issuing a command to the item. More...
 
wxString 	GetLabel () const
 	Returns the control's label, as it was passed to SetLabel(). More...
 
wxString 	GetLabelText () const
 	Returns the control's label without mnemonics. More...
 
wxSize 	GetSizeFromTextSize (int xlen, int ylen=-1) const
 	Determine the size needed by the control to leave the given area for its text. More...
 
wxSize 	GetSizeFromTextSize (const wxSize &tsize) const
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. More...
 
void 	SetLabel (const wxString &label)
 	Sets the control's label. More...
 
void 	SetLabelText (const wxString &text)
 	Sets the control's label to exactly the given string. More...
 
bool 	SetLabelMarkup (const wxString &markup)
 	Sets the controls label to a string using markup. More...
 '''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Printf('// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		typeRtn = m[1].Strip().Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('%s(%s) as %s\n', funcName, argsMod, typeRtn)
	}
}
