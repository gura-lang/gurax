import(re)

//------------------------------------------------------------------------------
txt = R'''
void 	Clear ()
 	Resets the item state to the default. More...
 
wxListColumnFormat 	GetAlign () const
 	Returns the alignment for this item. More...
 
wxColour 	GetBackgroundColour () const
 	Returns the background colour for this item. More...
 
int 	GetColumn () const
 	Returns the zero-based column; meaningful only in report mode. More...
 
wxUIntPtr 	GetData () const
 	Returns client data associated with the control. More...
 
wxFont 	GetFont () const
 	Returns the font used to display the item. More...
 
long 	GetId () const
 	Returns the zero-based item position. More...
 
int 	GetImage () const
 	Returns the zero-based index of the image associated with the item into the image list. More...
 
long 	GetMask () const
 	Returns a bit mask indicating which fields of the structure are valid. More...
 
long 	GetState () const
 	Returns a bit field representing the state of the item. More...
 
const wxString & 	GetText () const
 	Returns the label/header text. More...
 
wxColour 	GetTextColour () const
 	Returns the text colour. More...
 
int 	GetWidth () const
 	Meaningful only for column headers in report mode. More...
 
void 	SetAlign (wxListColumnFormat align)
 	Sets the alignment for the item. More...
 
void 	SetBackgroundColour (const wxColour &colBack)
 	Sets the background colour for the item. More...
 
void 	SetColumn (int col)
 	Sets the zero-based column. More...
 
void 	SetFont (const wxFont &font)
 	Sets the font for the item. More...
 
void 	SetId (long id)
 	Sets the zero-based item position. More...
 
void 	SetImage (int image)
 	Sets the zero-based index of the image associated with the item into the image list. More...
 
void 	SetMask (long mask)
 	Sets the mask of valid fields. More...
 
void 	SetState (long state)
 	Sets the item state flags (note that the valid state flags are influenced by the value of the state mask, see wxListItem::SetStateMask). More...
 
void 	SetStateMask (long stateMask)
 	Sets the bitmask that is used to determine which of the state flags are to be set. More...
 
void 	SetText (const wxString &text)
 	Sets the text label for the item. More...
 
void 	SetTextColour (const wxColour &colText)
 	Sets the text colour for the item. More...
 
void 	SetWidth (int width)
 	Meaningful only for column headers in report mode. More...
 
void 	SetData (long data)
 	Sets client data for the item. More...
 
void 	SetData (void *data)
 	Sets client data for the item. More...
'''
//------------------------------------------------------------------------------

txt.EachLine {|line, iLine|
	iLine += 1
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^//')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			if (!m) {
				Printf('Error:%d: %s\n', iLine, line.Chop())
				sys.Exit(1)
			}
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
