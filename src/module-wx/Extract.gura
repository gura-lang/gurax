import(re)

//------------------------------------------------------------------------------
txt = R'''
int 	GetCols () const
 	Returns the number of columns that has been specified for the sizer. More...
 
int 	GetRows () const
 	Returns the number of rows that has been specified for the sizer. More...
 
int 	GetEffectiveColsCount () const
 	Returns the number of columns currently used by the sizer. More...
 
int 	GetEffectiveRowsCount () const
 	Returns the number of rows currently used by the sizer. More...
 
int 	GetHGap () const
 	Returns the horizontal gap (in pixels) between cells in the sizer. More...
 
int 	GetVGap () const
 	Returns the vertical gap (in pixels) between the cells in the sizer. More...
 
void 	SetCols (int cols)
 	Sets the number of columns in the sizer. More...
 
void 	SetHGap (int gap)
 	Sets the horizontal gap (in pixels) between cells in the sizer. More...
 
void 	SetRows (int rows)
 	Sets the number of rows in the sizer. More...
 
void 	SetVGap (int gap)
 	Sets the vertical gap (in pixels) between the cells in the sizer. More...
 
virtual wxSize 	CalcMin ()
 	This method is abstract and has to be overwritten by any derived class. More...
 
virtual void 	RecalcSizes ()
 	This method is abstract and has to be overwritten by any derived class. More...
 
'''
//------------------------------------------------------------------------------

txt.EachLine {|line|
	if (m = line.Match('^@(.+)')) {
		Println('\t//--------------------------------------------------------------------------')
		Printf('\t// %s\n', m[1])
	} elsif (m = line.Match(r'^\s')) {
		// nothing to do
	} elsif (m = line.Match(r'^(.+[^\w])(\w+)\s*\(([^)]*)\)')) {
		attrs = ''
		typeRtn = m[1].Strip()
		funcName = m[2]
		args = m[3].SplitReg(r',\s*'):list
		if (m = typeRtn.Match(r'^static\s+(.+)')) {
			attrs += ':static'
			typeRtn = m[1]
		}
		typeRtn = typeRtn.Sub(r'^virtual\s+', '').Sub(r'^const\s+', '').Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
		argsMod = args.Each():xiter {|arg|
			arg.IsEmpty() && continue
			fields = arg.Split('='):list
			m = fields[0].Strip().Match(r'^(.+[^\w])(\w+)$')
			typeArg = m[1].Strip().Sub(r'^wx', '').Sub(r'([ &\*])wx', r'\1').Sub(r'\s*&', '_r').Sub(r'\s*\*', '_p').Sub(r'\s+', '_')
			argName = m[2]
			str = Format('%s as %s', argName, typeArg)
			if (fields.len == 2) {
				str += Format(' = %s', fields[1].Strip())
			}
			str
		}.Join(', ')
		Printf('\t%s(%s)%s as %s\n', funcName, argsMod, attrs, typeRtn)
	}
}
