//==============================================================================
// VType_wxRegion.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

# Property

# Operator

# Cast Operation

# Constructor

# Method
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.Region#Clear()
Gurax_DeclareMethodAlias(wxRegion, Clear_gurax, "Clear")
{
	Declare(VTYPE_Nil, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Clear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->Clear();
	return Gurax::Value::nil();
}

// wx.Region#Contains(args* as Any)
Gurax_DeclareMethodAlias(wxRegion, Contains_gurax, "Contains")
{
	Declare(VTYPE_Number, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Contains_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// Contains(x as Coord, y as Coord) as RegionContain
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxRegionContain rtn = pEntity_gurax->Contains(x, y);
		return new Value_Number(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Contains(pt as const_Point_r) as RegionContain
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
		wxRegionContain rtn = pEntity_gurax->Contains(pt);
		return new Value_Number(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Contains(x as Coord, y as Coord, width as Coord, height as Coord) as RegionContain
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		wxRegionContain rtn = pEntity_gurax->Contains(x, y, width, height);
		return new Value_Number(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Contains(rect as const_Rect_r) as RegionContain
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		wxRegionContain rtn = pEntity_gurax->Contains(rect);
		return new Value_Number(rtn);
	} while (0);
	return Value::nil();
}

// wx.Region#ConvertToBitmap() {block?}
Gurax_DeclareMethodAlias(wxRegion, ConvertToBitmap_gurax, "ConvertToBitmap")
{
	Declare(VTYPE_wxBitmap, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, ConvertToBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxBitmap(
		pEntity_gurax->ConvertToBitmap()));
}

// wx.Region#Intersect(args* as Any)
Gurax_DeclareMethodAlias(wxRegion, Intersect_gurax, "Intersect")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Intersect_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// Intersect(x as Coord, y as Coord, width as Coord, height as Coord) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		bool rtn = pEntity_gurax->Intersect(x, y, width, height);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Intersect(rect as const_Rect_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		bool rtn = pEntity_gurax->Intersect(rect);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Intersect(region as const_Region_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("region", VTYPE_wxRegion);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRegion& region = args.Pick<Value_wxRegion>().GetEntity();
		bool rtn = pEntity_gurax->Intersect(region);
		return new Value_Bool(rtn);
	} while (0);
	return Value::nil();
}

// wx.Region#IsEmpty()
Gurax_DeclareMethodAlias(wxRegion, IsEmpty_gurax, "IsEmpty")
{
	Declare(VTYPE_Bool, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, IsEmpty_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->IsEmpty();
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#IsEqual(region as wx.Region)
Gurax_DeclareMethodAlias(wxRegion, IsEqual_gurax, "IsEqual")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("region", VTYPE_wxRegion, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, IsEqual_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRegion& value_region = args_gurax.Pick<Value_wxRegion>();
	const wxRegion& region = value_region.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->IsEqual(region);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#SubtractRect(rect as wx.Rect)
Gurax_DeclareMethodAlias(wxRegion, SubtractRect_gurax, "SubtractRect")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("rect", VTYPE_wxRect, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, SubtractRect_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRect& value_rect = args_gurax.Pick<Value_wxRect>();
	const wxRect& rect = value_rect.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->Subtract(rect);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#Subtract(region as wx.Region)
Gurax_DeclareMethodAlias(wxRegion, Subtract_gurax, "Subtract")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("region", VTYPE_wxRegion, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Subtract_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxRegion& value_region = args_gurax.Pick<Value_wxRegion>();
	const wxRegion& region = value_region.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->Subtract(region);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#Union(args* as Any)
Gurax_DeclareMethodAlias(wxRegion, Union_gurax, "Union")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Union_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// Union(x as Coord, y as Coord, width as Coord, height as Coord) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		bool rtn = pEntity_gurax->Union(x, y, width, height);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Union(rect as const_Rect_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		bool rtn = pEntity_gurax->Union(rect);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Union(region as const_Region_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("region", VTYPE_wxRegion);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRegion& region = args.Pick<Value_wxRegion>().GetEntity();
		bool rtn = pEntity_gurax->Union(region);
		return new Value_Bool(rtn);
	} while (0);
	return Value::nil();
}

// wx.Region#UnionBitmap(bmp as wx.Bitmap)
Gurax_DeclareMethodAlias(wxRegion, UnionBitmap_gurax, "UnionBitmap")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("bmp", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, UnionBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxBitmap& value_bmp = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bmp = value_bmp.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->Union(bmp);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#UnionBitmapTrans(bmp as wx.Bitmap, transColour as wx.Colour, tolerance? as Number)
Gurax_DeclareMethodAlias(wxRegion, UnionBitmapTrans_gurax, "UnionBitmapTrans")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("bmp", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
	DeclareArg("transColour", VTYPE_wxColour, ArgOccur::Once, ArgFlag::None);
	DeclareArg("tolerance", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, UnionBitmapTrans_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxBitmap& value_bmp = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bmp = value_bmp.GetEntity();
	Value_wxColour& value_transColour = args_gurax.Pick<Value_wxColour>();
	const wxColour& transColour = value_transColour.GetEntity();
	bool tolerance_validFlag = args_gurax.IsValid();
	int tolerance = tolerance_validFlag? args_gurax.PickNumber<int>() : 0;
	// Function body
	bool rtn = pEntity_gurax->Union(bmp, transColour, tolerance);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#Xor(args* as Any)
Gurax_DeclareMethodAlias(wxRegion, Xor_gurax, "Xor")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, Xor_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// Xor(x as Coord, y as Coord, width as Coord, height as Coord) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxCoord x = args.PickNumber<wxCoord>();
		wxCoord y = args.PickNumber<wxCoord>();
		wxCoord width = args.PickNumber<wxCoord>();
		wxCoord height = args.PickNumber<wxCoord>();
		bool rtn = pEntity_gurax->Xor(x, y, width, height);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Xor(rect as const_Rect_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
		bool rtn = pEntity_gurax->Xor(rect);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// Xor(region as const_Region_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("region", VTYPE_wxRegion);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRegion& region = args.Pick<Value_wxRegion>().GetEntity();
		bool rtn = pEntity_gurax->Xor(region);
		return new Value_Bool(rtn);
	} while (0);
	return Value::nil();
}

// wx.Region#GetBoxXYWH()
Gurax_DeclareMethodAlias(wxRegion, GetBoxXYWH_gurax, "GetBoxXYWH")
{
	Declare(VTYPE_Any, Flag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, GetBoxXYWH_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	wxCoord x, y, width, height;
	pEntity_gurax->GetBox(x, y, width, height);
	return Value_Tuple::Create(new Value_Number(x), new Value_Number(y), new Value_Number(width), new Value_Number(height));
}

// wx.Region#GetBoxRect() {block?}
Gurax_DeclareMethodAlias(wxRegion, GetBoxRect_gurax, "GetBoxRect")
{
	Declare(VTYPE_wxRect, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, GetBoxRect_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxRect(
		pEntity_gurax->GetBox()));
}

// wx.Region#OffsetXY(x as Number, y as Number)
Gurax_DeclareMethodAlias(wxRegion, OffsetXY_gurax, "OffsetXY")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, OffsetXY_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	bool rtn = pEntity_gurax->Offset(x, y);
	return new Gurax::Value_Bool(rtn);
}

// wx.Region#OffsetPoint(pt as wx.Point)
Gurax_DeclareMethodAlias(wxRegion, OffsetPoint_gurax, "OffsetPoint")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("pt", VTYPE_wxPoint, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxRegion, OffsetPoint_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxPoint& value_pt = args_gurax.Pick<Value_wxPoint>();
	const wxPoint& pt = value_pt.GetEntity();
	// Function body
	bool rtn = pEntity_gurax->Offset(pt);
	return new Gurax::Value_Bool(rtn);
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxRegion
//------------------------------------------------------------------------------
VType_wxRegion VTYPE_wxRegion("Region");

void VType_wxRegion::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelpTmpl(Gurax_Symbol(en), g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_wxGDIObject, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxRegion, Clear_gurax));
	Assign(Gurax_CreateMethod(wxRegion, Contains_gurax));
	Assign(Gurax_CreateMethod(wxRegion, ConvertToBitmap_gurax));
	Assign(Gurax_CreateMethod(wxRegion, Intersect_gurax));
	Assign(Gurax_CreateMethod(wxRegion, IsEmpty_gurax));
	Assign(Gurax_CreateMethod(wxRegion, IsEqual_gurax));
	Assign(Gurax_CreateMethod(wxRegion, SubtractRect_gurax));
	Assign(Gurax_CreateMethod(wxRegion, Subtract_gurax));
	Assign(Gurax_CreateMethod(wxRegion, Union_gurax));
	Assign(Gurax_CreateMethod(wxRegion, UnionBitmap_gurax));
	Assign(Gurax_CreateMethod(wxRegion, UnionBitmapTrans_gurax));
	Assign(Gurax_CreateMethod(wxRegion, Xor_gurax));
	Assign(Gurax_CreateMethod(wxRegion, GetBoxXYWH_gurax));
	Assign(Gurax_CreateMethod(wxRegion, GetBoxRect_gurax));
	Assign(Gurax_CreateMethod(wxRegion, OffsetXY_gurax));
	Assign(Gurax_CreateMethod(wxRegion, OffsetPoint_gurax));
}

//------------------------------------------------------------------------------
// Value_wxRegion
//------------------------------------------------------------------------------
VType& Value_wxRegion::vtype = VTYPE_wxRegion;

String Value_wxRegion::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.Region");
}

Gurax_EndModuleScope(wx)
