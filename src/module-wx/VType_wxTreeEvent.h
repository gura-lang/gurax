//==============================================================================
// VType_wxTreeEvent.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXTREEEVENT_H
#define GURAX_MODULE_WX_VTYPE_WXTREEEVENT_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/treectrl.h>
#include "Util.h"
#include "VType_wxNotifyEvent.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxTreeEvent
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxTreeEvent : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxTreeEvent VTYPE_wxTreeEvent;

//------------------------------------------------------------------------------
// Value_wxTreeEvent
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxTreeEvent : public Value_wxNotifyEvent {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxTreeEvent);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxTreeEvent");
public:
	static VType& vtype;
	static EventValueFactoryDeriv<Value_wxTreeEvent> eventValueFactory;
public:
	// Constructor
	Value_wxTreeEvent() = delete;
	Value_wxTreeEvent(const wxEvent& entity, Value* pValueUserData, VType& vtype = VTYPE_wxTreeEvent) :
		Value_wxNotifyEvent(entity, pValueUserData, vtype) {}
	// Copy constructor/operator
	Value_wxTreeEvent(const Value_wxTreeEvent& src) = delete;
	Value_wxTreeEvent& operator=(const Value_wxTreeEvent& src) = delete;
	// Move constructor/operator
	Value_wxTreeEvent(Value_wxTreeEvent&& src) noexcept = delete;
	Value_wxTreeEvent& operator=(Value_wxTreeEvent&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxTreeEvent() = default;
public:
	wxTreeEvent& GetEntity() {
		return reinterpret_cast<wxTreeEvent&>(Value_wxEvent::GetEntity());
	}
	const wxTreeEvent& GetEntity() const {
		return reinterpret_cast<const wxTreeEvent&>(Value_wxEvent::GetEntity());
	}
	wxTreeEvent* GetEntityPtr() {
		return reinterpret_cast<wxTreeEvent*>(Value_wxEvent::GetEntityPtr());
	}
	const wxTreeEvent* GetEntityPtr() const {
		return reinterpret_cast<const wxTreeEvent*>(Value_wxEvent::GetEntityPtr());
	}
public:
	static wxTreeEvent& GetEntity(Value& value) {
		return dynamic_cast<Value_wxTreeEvent&>(value).GetEntity();
	}
	static const wxTreeEvent& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxTreeEvent&>(value).GetEntity();
	}
	static wxTreeEvent* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxTreeEvent&>(value).GetEntityPtr();
	}
	static const wxTreeEvent* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxTreeEvent&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
