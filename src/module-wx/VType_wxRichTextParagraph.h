//==============================================================================
// VType_wxRichTextParagraph.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXRICHTEXTPARAGRAPH_H
#define GURAX_MODULE_WX_VTYPE_WXRICHTEXTPARAGRAPH_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/richtext/richtextbuffer.h>
#include "Util.h"
#include "VType_wxRichTextCompositeObject.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxRichTextParagraph
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxRichTextParagraph : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxRichTextParagraph VTYPE_wxRichTextParagraph;

//------------------------------------------------------------------------------
// Value_wxRichTextParagraph
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxRichTextParagraph : public Value_wxRichTextCompositeObject {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxRichTextParagraph);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxRichTextParagraph");
protected:
	wxRichTextParagraph* _pEntity;
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxRichTextParagraph() = delete;
	explicit Value_wxRichTextParagraph(wxRichTextParagraph* pEntity, VType& vtype = VTYPE_wxRichTextParagraph) :
		Value_wxRichTextCompositeObject(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxRichTextParagraph(const Value_wxRichTextParagraph& src) = delete;
	Value_wxRichTextParagraph& operator=(const Value_wxRichTextParagraph& src) = delete;
	// Move constructor/operator
	Value_wxRichTextParagraph(Value_wxRichTextParagraph&& src) noexcept = delete;
	Value_wxRichTextParagraph& operator=(Value_wxRichTextParagraph&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxRichTextParagraph() = default;
public:
	wxRichTextParagraph& GetEntity() { return *_pEntity; }
	const wxRichTextParagraph& GetEntity() const { return *_pEntity; }
	wxRichTextParagraph* GetEntityPtr() { return _pEntity; }
	const wxRichTextParagraph* GetEntityPtr() const { return _pEntity; }
public:
	static wxRichTextParagraph& GetEntity(Value& value) {
		return dynamic_cast<Value_wxRichTextParagraph&>(value).GetEntity();
	}
	static const wxRichTextParagraph& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxRichTextParagraph&>(value).GetEntity();
	}
	static wxRichTextParagraph* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxRichTextParagraph&>(value).GetEntityPtr();
	}
	static const wxRichTextParagraph* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxRichTextParagraph&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
