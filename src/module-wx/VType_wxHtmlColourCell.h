//==============================================================================
// VType_wxHtmlColourCell.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXHTMLCOLOURCELL_H
#define GURAX_MODULE_WX_VTYPE_WXHTMLCOLOURCELL_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/html/htmlcell.h>
#include "Util.h"
#include "VType_wxHtmlCell.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxHtmlColourCell
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxHtmlColourCell : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxHtmlColourCell VTYPE_wxHtmlColourCell;

//------------------------------------------------------------------------------
// Value_wxHtmlColourCell
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxHtmlColourCell : public Value_wxHtmlCell {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxHtmlColourCell);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxHtmlColourCell");
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxHtmlColourCell() = delete;
	explicit Value_wxHtmlColourCell(const wxHtmlColourCell& entity, VType& vtype = VTYPE_wxHtmlColourCell) :
		Value_wxHtmlCell(entity, vtype) {}
	// Copy constructor/operator
	Value_wxHtmlColourCell(const Value_wxHtmlColourCell& src) = delete;
	Value_wxHtmlColourCell& operator=(const Value_wxHtmlColourCell& src) = delete;
	// Move constructor/operator
	Value_wxHtmlColourCell(Value_wxHtmlColourCell&& src) noexcept = delete;
	Value_wxHtmlColourCell& operator=(Value_wxHtmlColourCell&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxHtmlColourCell() = default;
public:
	wxHtmlColourCell& GetEntity() { return reinterpret_cast<wxHtmlColourCell&>(Value_wxHtmlCell::GetEntity()); }
	const wxHtmlColourCell& GetEntity() const { return reinterpret_cast<const wxHtmlColourCell&>(Value_wxHtmlCell::GetEntity()); }
	wxHtmlColourCell* GetEntityPtr() { return reinterpret_cast<wxHtmlColourCell*>(Value_wxHtmlCell::GetEntityPtr()); }\
	const wxHtmlColourCell* GetEntityPtr() const { return reinterpret_cast<const wxHtmlColourCell*>(Value_wxHtmlCell::GetEntityPtr()); }
public:
	static wxHtmlColourCell& GetEntity(Value& value) {
		return dynamic_cast<Value_wxHtmlColourCell&>(value).GetEntity();
	}
	static const wxHtmlColourCell& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxHtmlColourCell&>(value).GetEntity();
	}
	static wxHtmlColourCell* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxHtmlColourCell&>(value).GetEntityPtr();
	}
	static const wxHtmlColourCell* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxHtmlColourCell&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
