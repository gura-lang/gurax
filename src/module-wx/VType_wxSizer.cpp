//==============================================================================
// VType_wxSizer.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

# Property

# Operator

# Cast Operation

# Constructor

# Method
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.Sizer#Add(args* as Any) {block?}
Gurax_DeclareMethodAlias(wxSizer, Add_gurax, "Add")
{
	Declare(VTYPE_wxSizerItem, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, Add_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Add(window, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::Clear();
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Add(sizer, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::Clear();
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		int width = args.PickNumber<int>();
		int height = args.PickNumber<int>();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Add(width, height, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	return Value::nil();
}

// wx.Sizer#AddSpacer(size as Number) {block?}
Gurax_DeclareMethodAlias(wxSizer, AddSpacer_gurax, "AddSpacer")
{
	Declare(VTYPE_wxSizerItem, Flag::None);
	DeclareArg("size", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, AddSpacer_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int size = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(
		*pEntity_gurax->AddSpacer(size)));
}

// wx.Sizer#AddStretchSpacer(prop as Number) {block?}
Gurax_DeclareMethodAlias(wxSizer, AddStretchSpacer_gurax, "AddStretchSpacer")
{
	Declare(VTYPE_wxSizerItem, Flag::None);
	DeclareArg("prop", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, AddStretchSpacer_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int prop = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(
		*pEntity_gurax->AddStretchSpacer(prop)));
}

// wx.Sizer#CalcMin() {block?}
Gurax_DeclareMethodAlias(wxSizer, CalcMin_gurax, "CalcMin")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, CalcMin_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->CalcMin()));
}

// wx.Sizer#Clear(delete_windows? as Bool)
Gurax_DeclareMethodAlias(wxSizer, Clear_gurax, "Clear")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("delete_windows", VTYPE_Bool, ArgOccur::ZeroOrOnce, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, Clear_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	bool delete_windows = args_gurax.IsValid()? args_gurax.PickBool() : false;
	// Function body
	pEntity_gurax->Clear(delete_windows);
	return Gurax::Value::nil();
}

// wx.Sizer#Insert(index as Number, args* as Any) {block?}
Gurax_DeclareMethodAlias(wxSizer, Insert_gurax, "Insert")
{
	Declare(VTYPE_wxSizerItem, Flag::None);
	DeclareArg("index", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementMethodEx(wxSizer, Insert_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	size_t index = args_gurax.PickNumber<size_t>();
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Insert(index, window, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::Clear();
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Insert(index, sizer, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	Error::Clear();
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable->DeclareArg("width", VTYPE_Number);
			pDeclCallable->DeclareArg("height", VTYPE_Number);
			pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		ArgPicker args(*pArgument);
		int width = args.PickNumber<int>();
		int height = args.PickNumber<int>();
		wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
		wxSizerItem* rtn = pEntity_gurax->Insert(index, width, height, flags);
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
	} while (0);
	return Value::nil();
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxSizer
//------------------------------------------------------------------------------
VType_wxSizer VTYPE_wxSizer("Sizer");

void VType_wxSizer::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelpTmpl(Gurax_Symbol(en), g_docHelp_en);
	// Declaration of VType
	Declare(VTYPE_Object, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxSizer, Add_gurax));
	Assign(Gurax_CreateMethod(wxSizer, AddSpacer_gurax));
	Assign(Gurax_CreateMethod(wxSizer, AddStretchSpacer_gurax));
	Assign(Gurax_CreateMethod(wxSizer, CalcMin_gurax));
	Assign(Gurax_CreateMethod(wxSizer, Clear_gurax));
	Assign(Gurax_CreateMethod(wxSizer, Insert_gurax));
}

//------------------------------------------------------------------------------
// Value_wxSizer
//------------------------------------------------------------------------------
VType& Value_wxSizer::vtype = VTYPE_wxSizer;

String Value_wxSizer::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.Sizer");
}

Gurax_EndModuleScope(wx)
