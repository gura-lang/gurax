//==============================================================================
// VType_wxNonOwnedWindow.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"**(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.NonOwnedWindow, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.NonOwnedWindow, `en)}

${help.ComposeMethodHelp(wx.NonOwnedWindow, `en)}
)**";

static const char* g_docHelp_ja = u8R"**(
# 概要

# 定数

${help.ComposePropertyHelp(wx.NonOwnedWindow, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.NonOwnedWindow, `ja)}

${help.ComposeMethodHelp(wx.NonOwnedWindow, `ja)}
)**";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.NonOwnedWindow#SetShape(args* as Any)
Gurax_DeclareMethodAlias(wxNonOwnedWindow, SetShape_gurax, "SetShape")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxNonOwnedWindow, SetShape_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	// SetShape(region as const_Region_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("region", VTYPE_wxRegion);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxRegion& region = args.Pick<Value_wxRegion>().GetEntity();
		bool rtn = pEntity_gurax->SetShape(region);
		return new Value_Bool(rtn);
	} while (0);
	Error::ClearIssuedFlag();
	// SetShape(path as const_GraphicsPath_r) as bool
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("path", VTYPE_wxRegion);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxGraphicsPath& path = args.Pick<Value_wxGraphicsPath>().GetEntity();
		bool rtn = pEntity_gurax->SetShape(path);
		return new Value_Bool(rtn);
	} while (0);
	return Value::nil();
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxNonOwnedWindow
//------------------------------------------------------------------------------
VType_wxNonOwnedWindow VTYPE_wxNonOwnedWindow("NonOwnedWindow");

void VType_wxNonOwnedWindow::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp(Gurax_Symbol(en), g_docHelp_en);
	AddHelp(Gurax_Symbol(ja), g_docHelp_ja);
	// Declaration of VType
	Declare(VTYPE_wxWindow, Flag::Mutable);
	// Assignment of method
	Assign(Gurax_CreateMethod(wxNonOwnedWindow, SetShape_gurax));
}

//------------------------------------------------------------------------------
// Value_wxNonOwnedWindow
//------------------------------------------------------------------------------
VType& Value_wxNonOwnedWindow::vtype = VTYPE_wxNonOwnedWindow;

String Value_wxNonOwnedWindow::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.NonOwnedWindow");
}

//------------------------------------------------------------------------------
// Value_wxNonOwnedWindow::EntityT
//------------------------------------------------------------------------------

Gurax_EndModuleScope(wx)
