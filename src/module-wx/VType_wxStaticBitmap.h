//==============================================================================
// VType_wxStaticBitmap.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXSTATICBITMAP_H
#define GURAX_MODULE_WX_VTYPE_WXSTATICBITMAP_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/statbmp.h>
#include "Util.h"
#include "VType_wxControl.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxStaticBitmap
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxStaticBitmap : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxStaticBitmap VTYPE_wxStaticBitmap;

//------------------------------------------------------------------------------
// Value_wxStaticBitmap
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxStaticBitmap : public Value_wxControl {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxStaticBitmap);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxStaticBitmap");
protected:
	wxWeakRef<wxStaticBitmap> _pEntity;
public:
	class EntityT : public wxStaticBitmap {
	public:
		using wxStaticBitmap::wxStaticBitmap;
	public:
		EntityCore core_gurax;
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxStaticBitmap() = delete;
	explicit Value_wxStaticBitmap(wxStaticBitmap* pEntity, VType& vtype = VTYPE_wxStaticBitmap) :
		Value_wxControl(pEntity, vtype), _pEntity(pEntity) {}
	// Copy constructor/operator
	Value_wxStaticBitmap(const Value_wxStaticBitmap& src) = delete;
	Value_wxStaticBitmap& operator=(const Value_wxStaticBitmap& src) = delete;
	// Move constructor/operator
	Value_wxStaticBitmap(Value_wxStaticBitmap&& src) noexcept = delete;
	Value_wxStaticBitmap& operator=(Value_wxStaticBitmap&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxStaticBitmap() = default;
public:
	wxStaticBitmap& GetEntity() { return *_pEntity; }
	const wxStaticBitmap& GetEntity() const { return *_pEntity; }
	wxStaticBitmap* GetEntityPtr() { return _pEntity.get(); }
	const wxStaticBitmap* GetEntityPtr() const { return _pEntity.get(); }
public:
	static wxStaticBitmap& GetEntity(Value& value) {
		return dynamic_cast<Value_wxStaticBitmap&>(value).GetEntity();
	}
	static const wxStaticBitmap& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxStaticBitmap&>(value).GetEntity();
	}
	static wxStaticBitmap* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxStaticBitmap&>(value).GetEntityPtr();
	}
	static const wxStaticBitmap* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxStaticBitmap&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
