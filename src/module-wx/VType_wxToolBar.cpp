//==============================================================================
// VType_wxToolBar.cpp
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// Help
//------------------------------------------------------------------------------
static const char* g_docHelp_en = u8R"""(
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.ToolBar, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.ToolBar, `en)}

${help.ComposeMethodHelp(wx.ToolBar, `en)}
)""";

static const char* g_docHelp_ja = u8R"""(
# 概要

# 定数

${help.ComposePropertyHelp(wx.ToolBar, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.ToolBar, `ja)}

${help.ComposeMethodHelp(wx.ToolBar, `ja)}
)""";

//------------------------------------------------------------------------------
// Implementation of constructor
//------------------------------------------------------------------------------
// wx.ToolBar(parent as wx.Window, id as Number, pos? as wx.Point, size? as wx.Size, style? as Number, name? as String) {block?}
Gurax_DeclareConstructorAlias(ToolBar_gurax, "ToolBar")
{
	Declare(VTYPE_wxToolBar, Flag::None);
	DeclareArg("parent", VTYPE_wxWindow, ArgOccur::Once, ArgFlag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("pos", VTYPE_wxPoint, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("size", VTYPE_wxSize, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("style", VTYPE_Number, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("name", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementConstructorEx(ToolBar_gurax, processor_gurax, argument_gurax)
{
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxWindow& value_parent = args_gurax.Pick<Value_wxWindow>();
	wxWindow* parent = value_parent.GetEntityPtr();
	wxWindowID id = args_gurax.PickNumber<wxWindowID>();
	const wxPoint& pos = args_gurax.IsValid()? args_gurax.Pick<Value_wxPoint>().GetEntity() : wxDefaultPosition;
	const wxSize& size = args_gurax.IsValid()? args_gurax.Pick<Value_wxSize>().GetEntity() : wxDefaultSize;
	bool style_validFlag = args_gurax.IsValid();
	long style = style_validFlag? args_gurax.PickNumber<long>() : wxTB_HORIZONTAL;
	const char* name = args_gurax.IsValid()? args_gurax.PickString() : wxToolBarNameStr;
	// Function body
	auto pEntity_gurax = new Value_wxToolBar::EntityT(parent, id, pos, size, style, name);
	RefPtr<Value_wxToolBar> pValue_gurax(new Value_wxToolBar(pEntity_gurax));
	pEntity_gurax->core_gurax.SetInfo(processor_gurax.Reference(), *pValue_gurax);
	return argument_gurax.ReturnValue(processor_gurax, pValue_gurax.release());
}

//-----------------------------------------------------------------------------
// Implementation of method
//-----------------------------------------------------------------------------
// wx.ToolBar#AddCheckTool(toolId as Number, label as String, bitmap1 as wx.Bitmap, bmpDisabled? as wx.Bitmap, shortHelp? as String, longHelp? as String, clientData? as wx.Object) {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddCheckTool_gurax, "AddCheckTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("label", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bitmap1", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bmpDisabled", VTYPE_wxBitmap, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("longHelp", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("clientData", VTYPE_wxObject, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddCheckTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	const char* label = args_gurax.PickString();
	Value_wxBitmap& value_bitmap1 = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bitmap1 = value_bitmap1.GetEntity();
	const wxBitmap& bmpDisabled = args_gurax.IsValid()? args_gurax.Pick<Value_wxBitmap>().GetEntity() : wxNullBitmap;
	const char* shortHelp = args_gurax.IsValid()? args_gurax.PickString() : "";
	const char* longHelp = args_gurax.IsValid()? args_gurax.PickString() : "";
	wxObject* clientData = args_gurax.IsValid()? args_gurax.Pick<Value_wxObject>().GetEntityPtr() : nullptr;
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->AddCheckTool(toolId, label, bitmap1, bmpDisabled, shortHelp, longHelp, clientData)));
}

// wx.ToolBar#AddControl(control as wx.Control, label? as String) {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddControl_gurax, "AddControl")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("control", VTYPE_wxControl, ArgOccur::Once, ArgFlag::None);
	DeclareArg("label", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddControl_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxControl& value_control = args_gurax.Pick<Value_wxControl>();
	wxControl* control = value_control.GetEntityPtr();
	const char* label = args_gurax.IsValid()? args_gurax.PickString() : "";
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->AddControl(control, label)));
}

// wx.ToolBar#AddRadioTool(toolId as Number, label as String, bitmap1 as wx.Bitmap, bmpDisabled? as wx.Bitmap, shortHelp? as String, longHelp? as String, clientData? as wx.Object) {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddRadioTool_gurax, "AddRadioTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("label", VTYPE_String, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bitmap1", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bmpDisabled", VTYPE_wxBitmap, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("longHelp", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareArg("clientData", VTYPE_wxObject, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddRadioTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	const char* label = args_gurax.PickString();
	Value_wxBitmap& value_bitmap1 = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bitmap1 = value_bitmap1.GetEntity();
	const wxBitmap& bmpDisabled = args_gurax.IsValid()? args_gurax.Pick<Value_wxBitmap>().GetEntity() : wxNullBitmap;
	const char* shortHelp = args_gurax.IsValid()? args_gurax.PickString() : "";
	const char* longHelp = args_gurax.IsValid()? args_gurax.PickString() : "";
	wxObject* clientData = args_gurax.IsValid()? args_gurax.Pick<Value_wxObject>().GetEntityPtr() : nullptr;
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->AddRadioTool(toolId, label, bitmap1, bmpDisabled, shortHelp, longHelp, clientData)));
}

// wx.ToolBar#AddSeparator() {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddSeparator_gurax, "AddSeparator")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddSeparator_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->AddSeparator()));
}

// wx.ToolBar#AddStretchableSpace() {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddStretchableSpace_gurax, "AddStretchableSpace")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddStretchableSpace_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->AddStretchableSpace()));
}

// wx.ToolBar#ClearTools()
Gurax_DeclareMethodAlias(wxToolBar, ClearTools_gurax, "ClearTools")
{
	Declare(VTYPE_Nil, Flag::None);
}

Gurax_ImplementMethodEx(wxToolBar, ClearTools_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	pEntity_gurax->ClearTools();
	return Gurax::Value::nil();
}

// wx.ToolBar#DeleteTool(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, DeleteTool_gurax, "DeleteTool")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, DeleteTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	bool rtn = pEntity_gurax->DeleteTool(toolId);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#DeleteToolByPos(pos as Number)
Gurax_DeclareMethodAlias(wxToolBar, DeleteToolByPos_gurax, "DeleteToolByPos")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("pos", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, DeleteToolByPos_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	size_t pos = args_gurax.PickNumber<size_t>();
	// Function body
	bool rtn = pEntity_gurax->DeleteToolByPos(pos);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#EnableTool(toolId as Number, enable as Bool)
Gurax_DeclareMethodAlias(wxToolBar, EnableTool_gurax, "EnableTool")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("enable", VTYPE_Bool, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, EnableTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	bool enable = args_gurax.PickBool();
	// Function body
	pEntity_gurax->EnableTool(toolId, enable);
	return Gurax::Value::nil();
}

// wx.ToolBar#FindById(id as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, FindById_gurax, "FindById")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, FindById_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->FindById(id)));
}

// wx.ToolBar#FindControl(id as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, FindControl_gurax, "FindControl")
{
	Declare(VTYPE_wxControl, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, FindControl_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxControl(
		pEntity_gurax->FindControl(id)));
}

// wx.ToolBar#FindToolForPosition(x as Number, y as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, FindToolForPosition_gurax, "FindToolForPosition")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, FindToolForPosition_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	wxCoord x = args_gurax.PickNumber<wxCoord>();
	wxCoord y = args_gurax.PickNumber<wxCoord>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->FindToolForPosition(x, y)));
}

// wx.ToolBar#GetMargins() {block?}
Gurax_DeclareMethodAlias(wxToolBar, GetMargins_gurax, "GetMargins")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, GetMargins_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetMargins()));
}

// wx.ToolBar#GetToolBitmapSize() {block?}
Gurax_DeclareMethodAlias(wxToolBar, GetToolBitmapSize_gurax, "GetToolBitmapSize")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolBitmapSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetToolBitmapSize()));
}

// wx.ToolBar#GetToolByPos(pos as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, GetToolByPos_gurax, "GetToolByPos")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("pos", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolByPos_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int pos = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->GetToolByPos(pos)));
}

// wx.ToolBar#GetToolClientData(toolId as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, GetToolClientData_gurax, "GetToolClientData")
{
	Declare(VTYPE_wxObject, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolClientData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxObject(
		*pEntity_gurax->GetToolClientData(toolId)));
}

// wx.ToolBar#GetToolEnabled(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, GetToolEnabled_gurax, "GetToolEnabled")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolEnabled_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	bool rtn = pEntity_gurax->GetToolEnabled(toolId);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#GetToolLongHelp(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, GetToolLongHelp_gurax, "GetToolLongHelp")
{
	Declare(VTYPE_String, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolLongHelp_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	wxString rtn = pEntity_gurax->GetToolLongHelp(toolId);
	//return new Gurax::Value_String(static_cast<const char*>(rtn.c_str()));
	return new Gurax::Value_String(rtn.utf8_str().data());
}

// wx.ToolBar#GetToolPacking()
Gurax_DeclareMethodAlias(wxToolBar, GetToolPacking_gurax, "GetToolPacking")
{
	Declare(VTYPE_Number, Flag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolPacking_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	int rtn = pEntity_gurax->GetToolPacking();
	return new Gurax::Value_Number(rtn);
}

// wx.ToolBar#GetToolPos(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, GetToolPos_gurax, "GetToolPos")
{
	Declare(VTYPE_Number, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolPos_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	int rtn = pEntity_gurax->GetToolPos(toolId);
	return new Gurax::Value_Number(rtn);
}

// wx.ToolBar#GetToolSeparation()
Gurax_DeclareMethodAlias(wxToolBar, GetToolSeparation_gurax, "GetToolSeparation")
{
	Declare(VTYPE_Number, Flag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolSeparation_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	int rtn = pEntity_gurax->GetToolSeparation();
	return new Gurax::Value_Number(rtn);
}

// wx.ToolBar#GetToolShortHelp(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, GetToolShortHelp_gurax, "GetToolShortHelp")
{
	Declare(VTYPE_String, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolShortHelp_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	wxString rtn = pEntity_gurax->GetToolShortHelp(toolId);
	//return new Gurax::Value_String(static_cast<const char*>(rtn.c_str()));
	return new Gurax::Value_String(rtn.utf8_str().data());
}

// wx.ToolBar#GetToolSize() {block?}
Gurax_DeclareMethodAlias(wxToolBar, GetToolSize_gurax, "GetToolSize")
{
	Declare(VTYPE_wxSize, Flag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxSize(
		pEntity_gurax->GetToolSize()));
}

// wx.ToolBar#GetToolState(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, GetToolState_gurax, "GetToolState")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolState_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	bool rtn = pEntity_gurax->GetToolState(toolId);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#GetToolsCount()
Gurax_DeclareMethodAlias(wxToolBar, GetToolsCount_gurax, "GetToolsCount")
{
	Declare(VTYPE_Number, Flag::None);
}

Gurax_ImplementMethodEx(wxToolBar, GetToolsCount_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	size_t rtn = pEntity_gurax->GetToolsCount();
	return new Gurax::Value_Number(rtn);
}

// wx.ToolBar#InsertControl(pos as Number, control as wx.Control, label? as String) {block?}
Gurax_DeclareMethodAlias(wxToolBar, InsertControl_gurax, "InsertControl")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("pos", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("control", VTYPE_wxControl, ArgOccur::Once, ArgFlag::None);
	DeclareArg("label", VTYPE_String, ArgOccur::ZeroOrOnce, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, InsertControl_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	size_t pos = args_gurax.PickNumber<size_t>();
	Value_wxControl& value_control = args_gurax.Pick<Value_wxControl>();
	wxControl* control = value_control.GetEntityPtr();
	const char* label = args_gurax.IsValid()? args_gurax.PickString() : "";
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->InsertControl(pos, control, label)));
}

// wx.ToolBar#InsertSeparator(pos as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, InsertSeparator_gurax, "InsertSeparator")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("pos", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, InsertSeparator_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	size_t pos = args_gurax.PickNumber<size_t>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->InsertSeparator(pos)));
}

// wx.ToolBar#InsertStretchableSpace(pos as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, InsertStretchableSpace_gurax, "InsertStretchableSpace")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("pos", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, InsertStretchableSpace_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	size_t pos = args_gurax.PickNumber<size_t>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->InsertStretchableSpace(pos)));
}

// wx.ToolBar#OnLeftClick(toolId as Number, toggleDown as Bool)
Gurax_DeclareMethodAlias(wxToolBar, OnLeftClick_gurax, "OnLeftClick")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("toggleDown", VTYPE_Bool, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, OnLeftClick_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	bool toggleDown = args_gurax.PickBool();
	// Function body
	bool rtn = pEntity_gurax->OnLeftClick(toolId, toggleDown);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#OnMouseEnter(toolId as Number)
Gurax_DeclareMethodAlias(wxToolBar, OnMouseEnter_gurax, "OnMouseEnter")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, OnMouseEnter_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	// Function body
	pEntity_gurax->OnMouseEnter(toolId);
	return Gurax::Value::nil();
}

// wx.ToolBar#OnRightClick(toolId as Number, x as Number, y as Number)
Gurax_DeclareMethodAlias(wxToolBar, OnRightClick_gurax, "OnRightClick")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("x", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("y", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, OnRightClick_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	long x = args_gurax.PickNumber<long>();
	long y = args_gurax.PickNumber<long>();
	// Function body
	pEntity_gurax->OnRightClick(toolId, x, y);
	return Gurax::Value::nil();
}

// wx.ToolBar#Realize()
Gurax_DeclareMethodAlias(wxToolBar, Realize_gurax, "Realize")
{
	Declare(VTYPE_Bool, Flag::None);
}

Gurax_ImplementMethodEx(wxToolBar, Realize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Function body
	bool rtn = pEntity_gurax->Realize();
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#RemoveTool(id as Number) {block?}
Gurax_DeclareMethodAlias(wxToolBar, RemoveTool_gurax, "RemoveTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, RemoveTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	// Function body
	return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
		*pEntity_gurax->RemoveTool(id)));
}

// wx.ToolBar#SetDropdownMenu(id as Number, menu as wx.Menu)
Gurax_DeclareMethodAlias(wxToolBar, SetDropdownMenu_gurax, "SetDropdownMenu")
{
	Declare(VTYPE_Bool, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("menu", VTYPE_wxMenu, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetDropdownMenu_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	Value_wxMenu& value_menu = args_gurax.Pick<Value_wxMenu>();
	wxMenu* menu = value_menu.GetEntityPtr();
	// Function body
	bool rtn = pEntity_gurax->SetDropdownMenu(id, menu);
	return new Gurax::Value_Bool(rtn);
}

// wx.ToolBar#SetToolBitmapSize(size as wx.Size)
Gurax_DeclareMethodAlias(wxToolBar, SetToolBitmapSize_gurax, "SetToolBitmapSize")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("size", VTYPE_wxSize, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolBitmapSize_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	Value_wxSize& value_size = args_gurax.Pick<Value_wxSize>();
	const wxSize& size = value_size.GetEntity();
	// Function body
	pEntity_gurax->SetToolBitmapSize(size);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolClientData(id as Number, clientData as wx.Object)
Gurax_DeclareMethodAlias(wxToolBar, SetToolClientData_gurax, "SetToolClientData")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("clientData", VTYPE_wxObject, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolClientData_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	Value_wxObject& value_clientData = args_gurax.Pick<Value_wxObject>();
	wxObject* clientData = value_clientData.GetEntityPtr();
	// Function body
	pEntity_gurax->SetToolClientData(id, clientData);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolDisabledBitmap(id as Number, bitmap as wx.Bitmap)
Gurax_DeclareMethodAlias(wxToolBar, SetToolDisabledBitmap_gurax, "SetToolDisabledBitmap")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bitmap", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolDisabledBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	Value_wxBitmap& value_bitmap = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bitmap = value_bitmap.GetEntity();
	// Function body
	pEntity_gurax->SetToolDisabledBitmap(id, bitmap);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolLongHelp(toolId as Number, helpString as String)
Gurax_DeclareMethodAlias(wxToolBar, SetToolLongHelp_gurax, "SetToolLongHelp")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("helpString", VTYPE_String, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolLongHelp_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	const char* helpString = args_gurax.PickString();
	// Function body
	pEntity_gurax->SetToolLongHelp(toolId, helpString);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolNormalBitmap(id as Number, bitmap as wx.Bitmap)
Gurax_DeclareMethodAlias(wxToolBar, SetToolNormalBitmap_gurax, "SetToolNormalBitmap")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("id", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("bitmap", VTYPE_wxBitmap, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolNormalBitmap_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int id = args_gurax.PickNumber<int>();
	Value_wxBitmap& value_bitmap = args_gurax.Pick<Value_wxBitmap>();
	const wxBitmap& bitmap = value_bitmap.GetEntity();
	// Function body
	pEntity_gurax->SetToolNormalBitmap(id, bitmap);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolPacking(packing as Number)
Gurax_DeclareMethodAlias(wxToolBar, SetToolPacking_gurax, "SetToolPacking")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("packing", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolPacking_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int packing = args_gurax.PickNumber<int>();
	// Function body
	pEntity_gurax->SetToolPacking(packing);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolSeparation(separation as Number)
Gurax_DeclareMethodAlias(wxToolBar, SetToolSeparation_gurax, "SetToolSeparation")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("separation", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolSeparation_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int separation = args_gurax.PickNumber<int>();
	// Function body
	pEntity_gurax->SetToolSeparation(separation);
	return Gurax::Value::nil();
}

// wx.ToolBar#SetToolShortHelp(toolId as Number, helpString as String)
Gurax_DeclareMethodAlias(wxToolBar, SetToolShortHelp_gurax, "SetToolShortHelp")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("helpString", VTYPE_String, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetToolShortHelp_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	const char* helpString = args_gurax.PickString();
	// Function body
	pEntity_gurax->SetToolShortHelp(toolId, helpString);
	return Gurax::Value::nil();
}

// wx.ToolBar#ToggleTool(toolId as Number, toggle as Bool)
Gurax_DeclareMethodAlias(wxToolBar, ToggleTool_gurax, "ToggleTool")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("toolId", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	DeclareArg("toggle", VTYPE_Bool, ArgOccur::Once, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, ToggleTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	int toolId = args_gurax.PickNumber<int>();
	bool toggle = args_gurax.PickBool();
	// Function body
	pEntity_gurax->ToggleTool(toolId, toggle);
	return Gurax::Value::nil();
}

// wx.ToolBar#CreateTool(args* as Any) {block?}
Gurax_DeclareMethodAlias(wxToolBar, CreateTool_gurax, "CreateTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, CreateTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//CreateTool(toolId as int, label as const_String_r, bmpNormal as const_Bitmap_r, bmpDisabled as const_Bitmap_r = wxNullBitmap, kind as ItemKind = wxITEM_NORMAL, clientData as any = NULL, shortHelp as const_String_r = '', longHelp as const_String_r = '') as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("toolId", VTYPE_Number);
			pDeclCallable->DeclareArg("label", VTYPE_String);
			pDeclCallable->DeclareArg("bmpNormal", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("bmpDisabled", VTYPE_wxBitmap, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("kind", VTYPE_Number, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("clientData", VTYPE_Any, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("longHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		int toolId = args.PickNumber<int>();
		const char* label = args.PickString();
		const wxBitmap& bmpNormal = args.Pick<Value_wxBitmap>().GetEntity();
		const wxBitmap& bmpDisabled = args.IsValid()? args.Pick<Value_wxBitmap>().GetEntity() : wxNullBitmap;
		wxItemKind kind = args.IsValid()? args.PickNumber<wxItemKind>() : wxITEM_NORMAL;
		const Value& clientData = args.IsValid()? args.PickValue() : Value::C_nil();
		const char* shortHelp = args.IsValid()? args.PickString() : "";
		const char* longHelp = args.IsValid()? args.PickString() : "";
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
			*pEntity_gurax->CreateTool(toolId, label, bmpNormal, bmpDisabled, kind, ClientObject::Create(clientData), shortHelp, longHelp)));
	} while (0);
	Error::ClearIssuedFlag();
	//CreateTool(control as Control_p, label as const_String_r) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("control", VTYPE_wxControl);
			pDeclCallable->DeclareArg("label", VTYPE_String);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxControl* control = args.Pick<Value_wxControl>().GetEntityPtr();
		const char* label = args.PickString();
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(*pEntity_gurax->CreateTool(control, label)));
	} while (0);
	return Value::nil();
}

// wx.ToolBar#AddTool(args* as Any) {block?}
Gurax_DeclareMethodAlias(wxToolBar, AddTool_gurax, "AddTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, AddTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//AddTool(tool as ToolBarToolBase_p) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("tool", VTYPE_wxToolBarToolBase);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		wxToolBarToolBase* tool = args.Pick<Value_wxToolBarToolBase>().GetEntityPtr();
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(*pEntity_gurax->AddTool(tool)));
	} while (0);
	Error::ClearIssuedFlag();
	//AddTool(toolId as int, label as const_String_r, bitmap as const_Bitmap_r, shortHelp as const_String_r = '', kind as ItemKind = wxITEM_NORMAL) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("toolId", VTYPE_Number);
			pDeclCallable->DeclareArg("label", VTYPE_String);
			pDeclCallable->DeclareArg("bitmap", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("kind", VTYPE_Number, ArgOccur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		int toolId = args.PickNumber<int>();
		const char* label = args.PickString();
		const wxBitmap& bitmap = args.Pick<Value_wxBitmap>().GetEntity();
		const char* shortHelp = args.IsValid()? args.PickString() : "";
		wxItemKind kind = args.IsValid()? args.PickNumber<wxItemKind>() : wxITEM_NORMAL;
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(*pEntity_gurax->AddTool(toolId, label, bitmap, shortHelp, kind)));
	} while (0);
	Error::ClearIssuedFlag();
	//AddTool(toolId as int, label as const_String_r, bmpNormal as const_Bitmap_r, bmpDisabled as const_Bitmap_r, kind as ItemKind = wxITEM_NORMAL, shortHelpString as const_String_r = '', longHelpString as const_String_r = '', clientData as any = NULL) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("toolId", VTYPE_Number);
			pDeclCallable->DeclareArg("label", VTYPE_String);
			pDeclCallable->DeclareArg("bmpNormal", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("bmpDisabled", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("kind", VTYPE_Number, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("longHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("clientData", VTYPE_Any, ArgOccur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		int toolId = args.PickNumber<int>();
		const char* label = args.PickString();
		const wxBitmap& bmpNormal = args.Pick<Value_wxBitmap>().GetEntity();
		const wxBitmap& bmpDisabled = args.Pick<Value_wxBitmap>().GetEntity();
		wxItemKind kind = args.IsValid()? args.PickNumber<wxItemKind>() : wxITEM_NORMAL;
		const char* shortHelp = args.IsValid()? args.PickString() : "";
		const char* longHelp = args.IsValid()? args.PickString() : "";
		const Value& clientData = args.IsValid()? args.PickValue() : Value::C_nil();
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(*pEntity_gurax->AddTool(
				toolId, label, bmpNormal, bmpDisabled, kind, shortHelp, longHelp, ClientObject::Create(clientData))));
	} while (0);
	return Value::nil();
}

// wx.ToolBar#InsertTool(args* as Any) {block?}
Gurax_DeclareMethodAlias(wxToolBar, InsertTool_gurax, "InsertTool")
{
	Declare(VTYPE_wxToolBarToolBase, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
	DeclareBlock(BlkOccur::ZeroOrOnce);
}

Gurax_ImplementMethodEx(wxToolBar, InsertTool_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//InsertTool(pos as size_t, toolId as int, label as const_String_r, bitmap as const_Bitmap_r, bmpDisabled as const_Bitmap_r = wxNullBitmap, kind as ItemKind = wxITEM_NORMAL, shortHelp as const_String_r = '', longHelp as const_String_r = '', clientData as any = NULL) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pos", VTYPE_Number);
			pDeclCallable->DeclareArg("toolId", VTYPE_Number);
			pDeclCallable->DeclareArg("label", VTYPE_String);
			pDeclCallable->DeclareArg("bmpNormal", VTYPE_wxBitmap);
			pDeclCallable->DeclareArg("bmpDisabled", VTYPE_wxBitmap, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("kind", VTYPE_Number, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("shortHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("longHelp", VTYPE_String, ArgOccur::ZeroOrOnce);
			pDeclCallable->DeclareArg("clientData", VTYPE_Any, ArgOccur::ZeroOrOnce);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		size_t pos = args.PickNumber<size_t>();
		int toolId = args.PickNumber<int>();
		const char* label = args.PickString();
		const wxBitmap& bmpNormal = args.Pick<Value_wxBitmap>().GetEntity();
		const wxBitmap& bmpDisabled = args.IsValid()? args.Pick<Value_wxBitmap>().GetEntity() : wxNullBitmap;
		wxItemKind kind = args.IsValid()? args.PickNumber<wxItemKind>() : wxITEM_NORMAL;
		const char* shortHelp = args.IsValid()? args.PickString() : "";
		const char* longHelp = args.IsValid()? args.PickString() : "";
		const Value& clientData = args.IsValid()? args.PickValue() : Value::C_nil();
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(
			*pEntity_gurax->InsertTool(pos, toolId, label, bmpNormal, bmpDisabled, kind, shortHelp, longHelp, ClientObject::Create(clientData))));
	} while (0);
	Error::ClearIssuedFlag();
	//InsertTool(pos as size_t, tool as ToolBarToolBase_p) as ToolBarToolBase_p
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("pos", VTYPE_Number);
			pDeclCallable->DeclareArg("tool", VTYPE_wxToolBarToolBase);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		size_t pos = args.PickNumber<size_t>();
		wxToolBarToolBase* tool = args.Pick<Value_wxToolBarToolBase>().GetEntityPtr();
		return argument_gurax.ReturnValue(processor_gurax, new Value_wxToolBarToolBase(*pEntity_gurax->InsertTool(pos, tool)));
	} while (0);
	return Value::nil();
}

// wx.ToolBar#SetMargins(args* as Any)
Gurax_DeclareMethodAlias(wxToolBar, SetMargins_gurax, "SetMargins")
{
	Declare(VTYPE_Nil, Flag::None);
	DeclareArg("args", VTYPE_Any, ArgOccur::ZeroOrMore, ArgFlag::None);
}

Gurax_ImplementMethodEx(wxToolBar, SetMargins_gurax, processor_gurax, argument_gurax)
{
	// Target
	auto& valueThis_gurax = GetValueThis(argument_gurax);
	auto pEntity_gurax = valueThis_gurax.GetEntityPtr();
	if (!pEntity_gurax) return Value::nil();
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	const Gurax::ValueList& args = args_gurax.PickList();
	// Function body
	//SetMargins(x as int, y as int) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("x", VTYPE_Number);
			pDeclCallable->DeclareArg("y", VTYPE_Number);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		int x = args.PickNumber<int>();
		int y = args.PickNumber<int>();
		pEntity_gurax->SetMargins(x, y);
		return Value::nil();
	} while (0);
	Error::ClearIssuedFlag();
	//SetMargins(size as const_Size_r) as void
	do {
		static DeclCallable* pDeclCallable = nullptr;
		if (!pDeclCallable) {
			pDeclCallable = new DeclCallable();
			pDeclCallable->DeclareArg("size", VTYPE_wxSize);
		}
		RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
		if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
		Error::Clear();
		ArgPicker args(*pArgument);
		const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
		pEntity_gurax->SetMargins(size);
		return Value::nil();
	} while (0);
	return Value::nil();
}

//-----------------------------------------------------------------------------
// Implementation of property
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// VType_wxToolBar
//------------------------------------------------------------------------------
VType_wxToolBar VTYPE_wxToolBar("ToolBar");

void VType_wxToolBar::DoPrepare(Frame& frameOuter)
{
	// Add help
	AddHelp(Gurax_Symbol(en), g_docHelp_en);
	AddHelp(Gurax_Symbol(ja), g_docHelp_ja);
	// Declaration of VType
	Declare(VTYPE_wxControl, Flag::Mutable, Gurax_CreateConstructor(ToolBar_gurax));
	// Assignment of method
	Assign(Gurax_CreateMethod(wxToolBar, AddCheckTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, AddControl_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, AddRadioTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, AddSeparator_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, AddStretchableSpace_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, ClearTools_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, DeleteTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, DeleteToolByPos_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, EnableTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, FindById_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, FindControl_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, FindToolForPosition_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetMargins_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolBitmapSize_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolByPos_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolClientData_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolEnabled_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolLongHelp_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolPacking_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolPos_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolSeparation_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolShortHelp_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolSize_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolState_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, GetToolsCount_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, InsertControl_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, InsertSeparator_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, InsertStretchableSpace_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, OnLeftClick_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, OnMouseEnter_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, OnRightClick_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, Realize_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, RemoveTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetDropdownMenu_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolBitmapSize_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolClientData_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolDisabledBitmap_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolLongHelp_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolNormalBitmap_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolPacking_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolSeparation_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetToolShortHelp_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, ToggleTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, CreateTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, AddTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, InsertTool_gurax));
	Assign(Gurax_CreateMethod(wxToolBar, SetMargins_gurax));
}

//------------------------------------------------------------------------------
// Value_wxToolBar
//------------------------------------------------------------------------------
VType& Value_wxToolBar::vtype = VTYPE_wxToolBar;

String Value_wxToolBar::ToString(const StringStyle& ss) const
{
	return ToStringGeneric(ss, "wx.ToolBar");
}

//------------------------------------------------------------------------------
// Value_wxToolBar::EntityT
//------------------------------------------------------------------------------

Gurax_EndModuleScope(wx)
