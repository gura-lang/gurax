//==============================================================================
// VType_wxHtmlCell.h
// Don't edit this file since it's been generated by Generate.gura.
//==============================================================================
#ifndef GURAX_MODULE_WX_VTYPE_WXHTMLCELL_H
#define GURAX_MODULE_WX_VTYPE_WXHTMLCELL_H
#include <gurax.h>
#include <wx/wx.h>
#include <wx/html/htmlwin.h>
#include "Util.h"
#include "VType_wxObject.h"

Gurax_BeginModuleScope(wx)

//------------------------------------------------------------------------------
// VType_wxHtmlCell
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE VType_wxHtmlCell : public VType {
public:
	using VType::VType;
	virtual void DoPrepare(Frame& frameOuter) override;
};

extern GURAX_DLLDECLARE VType_wxHtmlCell VTYPE_wxHtmlCell;

//------------------------------------------------------------------------------
// Value_wxHtmlCell
//------------------------------------------------------------------------------
class GURAX_DLLDECLARE Value_wxHtmlCell : public Value_wxObject {
public:
	// Referable declaration
	Gurax_DeclareReferable(Value_wxHtmlCell);
	// Uses MemoryPool allocator
	Gurax_MemoryPoolAllocator("Value_wxHtmlCell");
public:
	class EntityT : public wxHtmlCell {
	public:
		using wxHtmlCell::wxHtmlCell;
	public:
		EntityCore core_gurax;
		virtual void Layout(int w) override;
		virtual void SetPos(int x, int y) override;
		void public_Layout(int w) { wxHtmlCell::Layout(w); }
		void public_SetPos(int x, int y) { wxHtmlCell::SetPos(x, y); }
	};
public:
	static VType& vtype;
public:
	// Constructor
	Value_wxHtmlCell() = delete;
	explicit Value_wxHtmlCell(const wxHtmlCell& entity, VType& vtype = VTYPE_wxHtmlCell) :
		Value_wxObject(entity, vtype) {}
	// Copy constructor/operator
	Value_wxHtmlCell(const Value_wxHtmlCell& src) = delete;
	Value_wxHtmlCell& operator=(const Value_wxHtmlCell& src) = delete;
	// Move constructor/operator
	Value_wxHtmlCell(Value_wxHtmlCell&& src) noexcept = delete;
	Value_wxHtmlCell& operator=(Value_wxHtmlCell&& src) noexcept = delete;
protected:
	// Destructor
	~Value_wxHtmlCell() = default;
public:
	wxHtmlCell& GetEntity() { return reinterpret_cast<wxHtmlCell&>(Value_wxObject::GetEntity()); }
	const wxHtmlCell& GetEntity() const { return reinterpret_cast<const wxHtmlCell&>(Value_wxObject::GetEntity()); }
	wxHtmlCell* GetEntityPtr() { return reinterpret_cast<wxHtmlCell*>(Value_wxObject::GetEntityPtr()); }\
	const wxHtmlCell* GetEntityPtr() const { return reinterpret_cast<const wxHtmlCell*>(Value_wxObject::GetEntityPtr()); }
public:
	static wxHtmlCell& GetEntity(Value& value) {
		return dynamic_cast<Value_wxHtmlCell&>(value).GetEntity();
	}
	static const wxHtmlCell& GetEntity(const Value& value) {
		return dynamic_cast<const Value_wxHtmlCell&>(value).GetEntity();
	}
	static wxHtmlCell* GetEntityPtr(Value& value) {
		return dynamic_cast<Value_wxHtmlCell&>(value).GetEntityPtr();
	}
	static const wxHtmlCell* GetEntityPtr(const Value& value) {
		return dynamic_cast<const Value_wxHtmlCell&>(value).GetEntityPtr();
	}
public:
	// Virtual functions of Value
	virtual Value* Clone() const override { return Reference(); }
	virtual size_t DoCalcHash() const override {
		return reinterpret_cast<size_t>(GetEntityPtr(*this));
	}
	virtual bool IsEqualTo(const Value& value) const override {
		return IsSameType(value) && GetEntityPtr(*this) == GetEntityPtr(value);
	}
	virtual bool IsLessThan(const Value& value) const override {
		return IsSameType(value)?
			(GetEntityPtr(*this) < GetEntityPtr(value)) :
			GetVTypeCustom().IsLessThan(value.GetVTypeCustom());
	}
	virtual String ToString(const StringStyle& ss) const override;
};

Gurax_EndModuleScope(wx)

#endif
