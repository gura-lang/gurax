//==============================================================================
// VType_wxItemContainer.gura
//==============================================================================
ItemContainer = Class():mixin {
	Clear() as void
	Delete(n as unsigned_int) as void
	//DetachClientObject(n as unsigned_int) as ClientData_p
	HasClientData() as bool
	HasClientObjectData() as bool
	HasClientUntypedData() as bool
	Append(item as any, clientData? as any) as int = \
		R'''
		int rtn = 0;
		if (item.IsType(VTYPE_String)) {
			if (clientData.IsValid()) {
				rtn = pEntity_gurax->Append(Value_String::GetString(item), ClientData::Create(clientData));
			} else {
				rtn = pEntity_gurax->Append(Value_String::GetString(item));
			}
		} else if (item.IsType(VTYPE_List)) {
			const ValueOwner& items = Value_List::GetValueOwner(item);
			if (!items.IsElemInstanceOf(VTYPE_String)) {
				Error::Issue(ErrorType::TypeError, "The list must contain items of String");
				return Value::nil();
			}
			if (!clientData.IsValid()) {
				rtn = pEntity_gurax->Append(Util::CreateArrayString(items));
			} else if (clientData.IsType(VTYPE_List)) {
				const ValueOwner& clientDataTbl = Value_List::GetValueOwner(clientData);
				if (items.size() != clientDataTbl.size()) {
					Error::Issue(ErrorType::ValueError, "The lists for item and clientData must have the same length");
					return Value::nil();
				}
				rtn = pEntity_gurax->Append(Util::CreateArrayString(items), ClientData::Create(clientDataTbl).data());
			} else {
				Error::Issue(ErrorType::TypeError, "The argument clientData must be a List");
				return Value::nil();
			}
		} else {
			Error::Issue(ErrorType::TypeError, "String or List of String can be accepted");
			return Value::nil();
		}
		return new Value_Number(rtn);
		'''
	//Append(item as const_String_r) as int
	//Append(item as const_String_r, clientData as void_p) as int
	//Append(item as const_String_r, clientData as ClientData_p) as int
	//Append(items as const_ArrayString_r) as int
	//Append(items as const_ArrayString_r, clientData as void_p_p) as int
	//Append(items as const_ArrayString_r, clientData as ClientData_p_p) as int
	//Append(n as unsigned_int, items as const_String_p) as int
	//Append(n as unsigned_int, items as const_String_p, clientData as void_p_p) as int
	//Append(n as unsigned_int, items as const_String_p, clientData as ClientData_p_p) as int
	//GetClientData(n as unsigned_int) as void_p
	//GetClientObject(n as unsigned_int) as ClientData_p
	SetClientData(n as unsigned_int, data as void_p) as void
	//SetClientObject(n as unsigned_int, data as ClientData_p) as void
	Insert(item as const_String_r, pos as unsigned_int) as int
	//Insert(item as const_String_r, pos as unsigned_int, clientData as void_p) as int
	//Insert(item as const_String_r, pos as unsigned_int, clientData as ClientData_p) as int
	//Insert(items as const_ArrayString_r, pos as unsigned_int) as int
	//Insert(items as const_ArrayString_r, pos as unsigned_int, clientData as void_p_p) as int
	//Insert(items as const_ArrayString_r, pos as unsigned_int, clientData as ClientData_p_p) as int
	//Insert(n as unsigned_int, items as const_String_p, pos as unsigned_int) as int
	//Insert(n as unsigned_int, items as const_String_p, pos as unsigned_int, clientData as void_p_p) as int
	//Insert(n as unsigned_int, items as const_String_p, pos as unsigned_int, clientData as ClientData_p_p) as int
	Set(items as const_ArrayString_r) as void
	//Set(items as const_ArrayString_r, clientData as void_p_p) as void
	//Set(items as const_ArrayString_r, clientData as ClientData_p_p) as void
	//Set(n as unsigned_int, items as const_String_p) as void
	//Set(n as unsigned_int, items as const_String_p, clientData as void_p_p) as void
	//Set(n as unsigned_int, items as const_String_p, clientData as ClientData_p_p) as void
}
