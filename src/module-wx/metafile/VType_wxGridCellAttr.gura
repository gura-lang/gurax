//==============================================================================
// VType_wxGridCellAttr.gura
//==============================================================================
GridCellAttr = Class(ClientDataContainer) {
	@include['wx/grid.h']
	//__init__(colText as const_Colour_r, colBack as const_Colour_r, font as const_Font_r, hAlign as int, vAlign as int)
	Clone() as GridCellAttr_p
	DecRef() as void
	//GetAlignment(hAlign as int_p, vAlign as int_p) as void
	GetAlignment() as Tuple@gurax = \
		R'''
		int hAlign, vAlign;
		pEntity_gurax->GetAlignment(&hAlign, &vAlign);
		return Value_Tuple::Create(new Value_Number(hAlign), new Value_Number(vAlign));
		'''
	GetBackgroundColour() as Colour
	GetEditor(grid as const_Grid_p, row as int, col as int) as GridCellEditor_p
	GetFont() as Font
	//GetNonDefaultAlignment(hAlign as int_p, vAlign as int_p) as void
	GetNonDefaultAlignment() as Tuple@gurax = \
		R'''
		int hAlign, vAlign;
		pEntity_gurax->GetNonDefaultAlignment(&hAlign, &vAlign);
		return Value_Tuple::Create(new Value_Number(hAlign), new Value_Number(vAlign));
		'''
	GetRenderer(grid as const_Grid_p, row as int, col as int) as GridCellRenderer_p
	GetTextColour() as Colour
	HasAlignment() as bool
	HasBackgroundColour() as bool
	HasEditor() as bool
	HasFont() as bool
	HasRenderer() as bool
	HasTextColour() as bool
	IncRef() as void
	IsReadOnly() as bool
	SetAlignment(hAlign as int, vAlign as int) as void
	SetBackgroundColour(colBack as const_Colour_r) as void
	SetDefAttr(defAttr as GridCellAttr_p) as void
	SetEditor(editor as GridCellEditor_p) as void
	SetFont(font as const_Font_r) as void
	SetReadOnly(isReadOnly as bool = true) as void
	SetRenderer(renderer as GridCellRenderer_p) as void
	SetTextColour(colText as const_Colour_r) as void
	MergeWith(mergefrom as GridCellAttr_p) as void
	SetSize(num_rows as int, num_cols as int) as void
	SetOverflow(allow as bool = true) as void
	//SetKind(kind as AttrKind) as void
	HasReadWriteMode() as bool
	HasOverflowMode() as bool
	HasSize() as bool
	//GetSize(num_rows as int_p, num_cols as int_p) as void
	GetSize() as Tuple@gurax = \
		R'''
		int num_rows, num_cols;
		pEntity_gurax->GetNonDefaultAlignment(&num_rows, &num_cols);
		return Value_Tuple::Create(new Value_Number(num_rows), new Value_Number(num_cols));
		'''
	GetOverflow() as bool
	//GetKind() as AttrKind
}
