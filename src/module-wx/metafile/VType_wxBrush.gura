//==============================================================================
// VType_wxBrush.gura
//==============================================================================
Brush = Class(GDIObject):holdEntity {
	@include['wx/brush.h']
	__init__(args* as any) = \
		R'''
		// wx.Brush(colour as const_Colour_r, style as BrushStyle = wxBRUSHSTYLE_SOLID)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("colour", VTYPE_wxColour);
				pDeclCallable->DeclareArg("style", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxColour& colour = args.Pick<Value_wxColour>().GetEntity();
			wxBrushStyle style = args.IsValid()? args.PickNumber<wxBrushStyle>() : wxBRUSHSTYLE_SOLID;
			return new Value_wxBrush(wxBrush(colour, style));
		} while (0);
		Error::ClearIssuedFlag();
		// wx.Brush(stippleBitmap as const_Bitmap_r)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("stippleBitmap", VTYPE_wxBitmap);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxBitmap& stippleBitmap = args.Pick<Value_wxBitmap>().GetEntity();
			return new Value_wxBrush(wxBrush(stippleBitmap));
		} while (0);
		return Value::nil();
		'''
	GetColour() as Colour
	GetStipple() as Bitmap_p
	GetStyle() as BrushStyle
	IsHatch() as bool
	IsOk() as bool
	IsNonTransparent() as bool
	IsTransparent() as bool
	SetStipple(bitmap as const_Bitmap_r) as void
	SetStyle(style as BrushStyle) as void
	SetColour(colour as const_Colour_r) as void
	SetColourRGB(red as unsigned_char, green as unsigned_char, blue as unsigned_char) as void = SetColour
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Brush, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Brush, `en)}

${help.ComposeMethodHelp(wx.Brush, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.Brush, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.Brush, `ja)}

${help.ComposeMethodHelp(wx.Brush, `ja)}
'''ja

@enum {
	BrushStyle {
		BRUSHSTYLE_INVALID 	
		BRUSHSTYLE_SOLID 	
		BRUSHSTYLE_TRANSPARENT 	
		BRUSHSTYLE_STIPPLE_MASK_OPAQUE 	
		BRUSHSTYLE_STIPPLE_MASK 	
		BRUSHSTYLE_STIPPLE 	
		BRUSHSTYLE_BDIAGONAL_HATCH 	
		BRUSHSTYLE_CROSSDIAG_HATCH 	
		BRUSHSTYLE_FDIAGONAL_HATCH 	
		BRUSHSTYLE_CROSS_HATCH 	
		BRUSHSTYLE_HORIZONTAL_HATCH 	
		BRUSHSTYLE_VERTICAL_HATCH 	
		BRUSHSTYLE_FIRST_HATCH 	
		BRUSHSTYLE_LAST_HATCH 	
	}
}
