//==============================================================================
// VType_wxAcceleratorTable.gura
//==============================================================================
AcceleratorTable = Class {
	@include['wx/accel.h']
	__init__(args* as any) = \
		R'''
		// wxAcceleratorTable(resource as String)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("resource", VTYPE_String);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const char* resource = args.PickString();
			return new Value_wxAcceleratorTable(wxAcceleratorTable(resource));
		} while (0);
		Error::ClearIssuedFlag();
		// wxAcceleratorTable(entries[] as AcceleratorEntry)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("entries", VTYPE_wxAcceleratorEntry, DeclArg::Occur::Once, DeclArg::Flag::ListVar);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const ValueList& values = args.PickList();
			std::unique_ptr<wxAcceleratorEntry> entries(new wxAcceleratorEntry[values.size()]);
			size_t i = 0;
			for (const Value* pValue : values) entries.get()[i++] = Value_wxAcceleratorEntry::GetEntity(*pValue);
			return new Value_wxAcceleratorTable(wxAcceleratorTable(values.size(), entries.get()));
		} while (0);
		return Value::nil();
		'''
	IsOk() as bool
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.AcceleratorTable, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.AcceleratorTable, `en)}

${help.ComposeMethodHelp(wx.AcceleratorTable, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.AcceleratorTable, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.AcceleratorTable, `ja)}

${help.ComposeMethodHelp(wx.AcceleratorTable, `ja)}
'''ja
