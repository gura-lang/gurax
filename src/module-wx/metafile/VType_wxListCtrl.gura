//==============================================================================
// VType_wxListCtrl.gura
//==============================================================================
ListCtrl = Class(Control) {
	@include['wx/listctrl.h']
	__init__(parent as Window_p, id as WindowID, pos as Point = wxDefaultPosition, size as Size = wxDefaultSize,
		style as long = wxLC_ICON, validator as Validator = wxDefaultValidator, name as String = wxListCtrlNameStr)
	AppendColumn(heading as const_String_r, format as ListColumnFormat = wxLIST_FORMAT_LEFT, width as int = -1) as long
	Arrange(flag as int = wxLIST_ALIGN_DEFAULT) as bool
	AssignImageList(imageList as ImageList_p, which as int) as void
	ClearAll() as void
	Create(parent as Window_p, id as WindowID, pos as const_Point_r = wxDefaultPosition, size as const_Size_r = wxDefaultSize, style as long = wxLC_ICON, validator as const_Validator_r = wxDefaultValidator, name as const_String_r = wxListCtrlNameStr) as bool
	DeleteAllColumns() as bool
	DeleteAllItems() as bool
	DeleteColumn(col as int) as bool
	DeleteItem(item as long) as bool
	EnableAlternateRowColours(enable as bool = true) as void
	EnableBellOnNoMatch(on as bool = true) as void
	EndEditLabel(cancel as bool) as bool
	EnsureVisible(item as long) as bool
	FindItem(args* as any) as long = \
		R'''
		// FindItem(start as long, str as const_String_r, partial as bool = false) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("start", VTYPE_Number);
				pDeclCallable->DeclareArg("str", VTYPE_String);
				pDeclCallable->DeclareArg("partial", VTYPE_Bool, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long start = args.PickNumber<long>();
			const char* str = args.PickString();
			bool partial = args.PickBool();
			int rtn = pEntity_gurax->FindItem(start, str, partial);
			return new Value_Number(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// FindItem(start as long, data as UIntPtr) as long
		// FindItem(start as long, pt as const_Point_r, direction as int) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("start", VTYPE_Number);
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
				pDeclCallable->DeclareArg("direction", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long start = args.PickNumber<long>();
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			int direction = args.PickNumber<int>();
			int rtn = pEntity_gurax->FindItem(start, pt, direction);
			return new Value_Number(rtn);
		} while (0);
		return Value::nil();
		'''
	GetColumn(col as int, item as ListItem_r) as bool
	GetColumnCount() as int
	GetColumnIndexFromOrder(pos as int) as int
	GetColumnOrder(col as int) as int
	GetColumnWidth(col as int) as int
	GetColumnsOrder() as ArrayInt
	GetCountPerPage() as int
	GetEditControl() as TextCtrl_p
	GetImageList(which as int) as ImageList_p
	GetItem(info as ListItem_r) as bool
	GetItemBackgroundColour(item as long) as Colour
	GetItemCount() as int
	//GetItemData(item as long) as UIntPtr
	GetItemFont(item as long) as Font
	GetItemPosition(item as long, pos as Point_r) as bool
	GetItemRect(item as long, rect as Rect_r, code as int = wxLIST_RECT_BOUNDS) as bool
	GetItemSpacing() as Size
	GetItemState(item as long, stateMask as long) as int
	GetItemText(item as long, col as int = 0) as String
	GetItemTextColour(item as long) as Colour
	GetNextItem(item as long, geometry as int = wxLIST_NEXT_ALL, state as int = wxLIST_STATE_DONTCARE) as long
	GetSelectedItemCount() as int
	GetSubItemRect(item as long, subItem as long, rect as Rect_r, code as int = wxLIST_RECT_BOUNDS) as bool
	GetTextColour() as Colour
	GetTopItem() as long
	GetViewRect() as Rect
	SetAlternateRowColour(colour as const_Colour_r) as void
	HitTest(point as const_Point_r, &flags:nilRef as int, &ptrSubItem:nilRef as long) as long = \
		R'''
		int flags_;
		long ptrSubItem_;
		long rtn = pEntity_gurax->HitTest(point, flags_, &ptrSubItem_);
		flags->SetValue(new Value_Number(flags_));
		ptrSubItem->SetValue(new Value_Number(ptrSubItem_));
		return new Value_Number(rtn);
		'''
	InReportView() as bool
	InsertColumn(args* as any) = \
		R'''
		// InsertColumn(col as long, info as const_ListItem_r) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("col", VTYPE_Number);
				pDeclCallable->DeclareArg("info", VTYPE_wxListItem);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long col = args.PickNumber<long>();
			const wxListItem& info = args.Pick<Value_wxListItem>().GetEntity();
			long rtn = pEntity_gurax->InsertColumn(col, info);
			return new Value_Number(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// InsertColumn(col as long, heading as const_String_r, format as int = wxLIST_FORMAT_LEFT, width as int = wxLIST_AUTOSIZE) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("col", VTYPE_Number);
				pDeclCallable->DeclareArg("heading", VTYPE_String);
				pDeclCallable->DeclareArg("format", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("width", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long col = args.PickNumber<long>();
			const char* heading = args.PickString();
			int format = args.IsValid()? args.PickNumber<int>() : wxLIST_FORMAT_LEFT;
			int width = args.IsValid()? args.PickNumber<int>() : wxLIST_AUTOSIZE;
			long rtn = pEntity_gurax->InsertColumn(col, heading, format, width);
			return new Value_Number(rtn);
		} while (0);
		return Value::nil();
		'''
	InsertItem(args* as any) {block?} = \
		R'''
		// InsertItem(info as ListItem_r) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("info", VTYPE_wxListItem);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxListItem& info = args.Pick<Value_wxListItem>().GetEntity();
			long rtn = pEntity_gurax->InsertItem(info);
			return new Value_Number(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// InsertItem(index as long, label as const_String_r) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("index", VTYPE_Number);
				pDeclCallable->DeclareArg("label", VTYPE_String);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long index = args.PickNumber<long>();
			const char* label = args.PickString();
			long rtn = pEntity_gurax->InsertItem(index, label);
			return new Value_Number(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// InsertItem(index as long, imageIndex as int) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("index", VTYPE_Number);
				pDeclCallable->DeclareArg("imageIndex", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long index = args.PickNumber<long>();
			int imageIndex = args.PickNumber<int>();
			long rtn = pEntity_gurax->InsertItem(index, imageIndex);
			return new Value_Number(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// InsertItem(index as long, label as const_String_r, imageIndex as int) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("index", VTYPE_Number);
				pDeclCallable->DeclareArg("label", VTYPE_String);
				pDeclCallable->DeclareArg("imageIndex", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long index = args.PickNumber<long>();
			const char* label = args.PickString();
			int imageIndex = args.PickNumber<int>();
			long rtn = pEntity_gurax->InsertItem(index, label, imageIndex);
			return new Value_Number(rtn);
		} while (0);
		return Value::nil();
		'''
	IsVirtual() as bool
	RefreshItem(item as long) as void
	RefreshItems(itemFrom as long, itemTo as long) as void
	ScrollList(dx as int, dy as int) as bool
	SetBackgroundColour(col as const_Colour_r) as bool
	SetColumn(col as int, item as ListItem_r) as bool
	SetColumnWidth(col as int, width as int) as bool
	SetColumnsOrder(orders as const_ArrayInt_r) as bool
	SetImageList(imageList as ImageList_p, which as int) as void
	SetItem(args* as any) = \
		R'''
		// SetItem(info as ListItem_r) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("info", VTYPE_wxListItem);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxListItem& info = args.Pick<Value_wxListItem>().GetEntity();
			bool rtn = pEntity_gurax->SetItem(info);
			return new Value_Bool(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// SetItem(index as long, column as int, label as const_String_r, imageId as int = -1) as long
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("index", VTYPE_Number);
				pDeclCallable->DeclareArg("column", VTYPE_Number);
				pDeclCallable->DeclareArg("label", VTYPE_String);
				pDeclCallable->DeclareArg("imageId", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			long index = args.PickNumber<long>();
			int column = args.PickNumber<int>();
			const char* label = args.PickString();
			int imageId = args.IsValid()? args.PickNumber<int>() : -1;
			long rtn = pEntity_gurax->SetItem(index, column, label, imageId);
			return new Value_Number(rtn);
		} while (0);
		return Value::nil();
		'''
	SetItemBackgroundColour(item as long, col as const_Colour_r) as void
	SetItemColumnImage(item as long, column as long, image as int) as bool
	SetItemCount(count as long) as void
	SetItemData(item as long, data as any) as bool = \
		R'''
		bool rtn = pEntity_gurax->SetItemPtrData(item, reinterpret_cast<wxUIntPtr>(data.Reference()));
		return new Value_Bool(rtn);
		'''
	SetItemFont(item as long, font as const_Font_r) as void
	SetItemImage(item as long, image as int, selImage as int = -1) as bool
	SetItemPosition(item as long, pos as const_Point_r) as bool
	//SetItemPtrData(item as long, data as UIntPtr) as bool
	SetItemState(item as long, state as long, stateMask as long) as bool
	SetItemText(item as long, text as const_String_r) as void
	SetItemTextColour(item as long, col as const_Colour_r) as void
	SetSingleStyle(style as long, add as bool = true) as void
	SetTextColour(col as const_Colour_r) as void
	SetWindowStyleFlag(style as long) as void
	SortItems(fnSortCallBack as any, data as any) as bool = \
		R'''
		ListCtrlSortItems listCtrlSortItems(fnSortCallBack.Reference(), processor_gurax.Reference(), data.Reference());
		bool rtn = pEntity_gurax->SortItems(ListCtrlSortItems::CompareFunction, reinterpret_cast<wxIntPtr>(&listCtrlSortItems));
		return new Value_Bool(rtn);
		'''
	OnGetItemAttr(item as long):virtual:const:returnNil as ListItemAttr_p
	OnGetItemColumnAttr(item as long, column as long):virtual:const:returnNil as ListItemAttr_p
	OnGetItemColumnImage(item as long, column as long):virtual:const as int
	OnGetItemImage(item as long):virtual:const as int
	OnGetItemText(item as long, column as long):virtual:const as String
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.ListCtrl, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.ListCtrl, `en)}

${help.ComposeMethodHelp(wx.ListCtrl, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.ListCtrl, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.ListCtrl, `ja)}

${help.ComposeMethodHelp(wx.ListCtrl, `ja)}
'''ja

@const { // Styles
	LC_LIST
	LC_REPORT
	LC_VIRTUAL
	LC_ICON
	LC_SMALL_ICON
	LC_ALIGN_TOP
	LC_ALIGN_LEFT
	LC_AUTOARRANGE
	LC_EDIT_LABELS
	LC_NO_HEADER
	LC_SINGLE_SEL
	LC_SORT_ASCENDING
	LC_SORT_DESCENDING
	LC_HRULES
	LC_VRULES
}

@const { // Geometry
	LIST_NEXT_ABOVE
	LIST_NEXT_ALL
	LIST_NEXT_BELOW
	LIST_NEXT_LEFT
	LIST_NEXT_RIGHT
}

@const {
	IMAGE_LIST_NORMAL
	IMAGE_LIST_SMALL
	IMAGE_LIST_STATE
}
