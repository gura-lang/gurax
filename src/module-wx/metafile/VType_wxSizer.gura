//==============================================================================
// VType_wxSizer.gura
//==============================================================================
Sizer = Class():loosePointer {
	//__init__()
	Add(args* as any) as SizerItem_p = \
		R'''
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(window, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(window, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(sizer, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(sizer, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(width, height, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(width, height, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		return Value::nil();
		'''
	AddSpacer(size as int) as SizerItem_p
	AddStretchSpacer(prop as int = 1) as SizerItem_p
	CalcMin() as Size
	Clear(delete_windows as bool = false) as void
	ComputeFittingClientSize(window as Window_p) as Size
	ComputeFittingWindowSize(window as Window_p) as Size
	Detach(window as Window_p) as bool
	//Detach(sizer as Sizer_p) as bool
	//Detach(index as int) as bool
	Fit(window as Window_p) as Size
	FitInside(window as Window_p) as void
	InformFirstDirection(direction as int, size as int, availableOtherDir as int) as bool
	GetContainingWindow() as Window_p
	SetContainingWindow(window as Window_p) as void
	GetItemCount() as size_t
	GetItem(window as Window_p, recursive as bool = false) as SizerItem_p
	//GetItem(sizer as Sizer_p, recursive as bool = false) as SizerItem_p
	//GetItem(index as size_t) as SizerItem_p
	GetItemById(id as int, recursive as bool = false) as SizerItem_p
	GetMinSize() as Size
	GetPosition() as Point
	GetSize() as Size
	Hide(window as Window_p, recursive as bool = false) as bool
	//Hide(sizer as Sizer_p, recursive as bool = false) as bool
	//Hide(index as size_t) as bool
	//Insert(index as size_t, window as Window_p, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Insert(index as size_t, sizer as Sizer_p, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Insert(index as size_t, width as int, height as int, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Insert(index as size_t, item as SizerItem_p) as SizerItem_p
	Insert(index as size_t, args* as any) as SizerItem_p = \
		R'''
		//Insert(index as size_t, window as Window_p, flags as const_SizerFlags_r) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, window, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		//Insert(index as size_t, sizer as Sizer_p, flags as const_SizerFlags_r) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, sizer, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		//Insert(index as size_t, width as int, height as int, flags as const_SizerFlags_r) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, width, height, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		return Value::nil();
		'''
	InsertSpacer(index as size_t, size as int) as SizerItem_p
	InsertStretchSpacer(index as size_t, prop as int = 1) as SizerItem_p
	IsEmpty() as bool
	IsShown(window as Window_p) as bool
	//IsShown(sizer as Sizer_p) as bool
	//IsShown(index as size_t) as bool
	Layout() as void
	Prepend(window as Window_p, flags as const_SizerFlags_r) as SizerItem_p
	//Prepend(window as Window_p, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Prepend(sizer as Sizer_p, flags as const_SizerFlags_r) as SizerItem_p
	//Prepend(sizer as Sizer_p, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Prepend(width as int, height as int, proportion as int = 0, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
	//Prepend(width as int, height as int, flags as const_SizerFlags_r) as SizerItem_p
	//Prepend(item as SizerItem_p) as SizerItem_p
	PrependSpacer(size as int) as SizerItem_p
	PrependStretchSpacer(prop as int = 1) as SizerItem_p
	RecalcSizes() as void
	//Remove(window as Window_p) as bool
	//Remove(sizer as Sizer_p) as bool
	//Remove(index as int) as bool
	Replace(oldwin as Window_p, newwin as Window_p, recursive as bool = false) as bool
	//Replace(oldsz as Sizer_p, newsz as Sizer_p, recursive as bool = false) as bool
	//Replace(index as size_t, newitem as SizerItem_p) as bool
	SetDimension(x as int, y as int, width as int, height as int) as void
	//SetDimension(pos as const_Point_r, size as const_Size_r) as void
	SetMinSize(size as const_Size_r) as void
	//SetMinSize(width as int, height as int) as void
	SetSizeHints(window as Window_p) as void
	//SetVirtualSizeHints(window as Window_p) as void
	Show(window as Window_p, show as bool = true, recursive as bool = false) as bool
	//Show(sizer as Sizer_p, show as bool = true, recursive as bool = false) as bool
	//Show(index as size_t, show as bool = true) as bool
	ShowItems(show as bool) as void
	//GetChildren() as SizerItemList
	//GetChildren() as SizerItemList
	SetItemMinSize(window as Window_p, width as int, height as int) as bool
	//SetItemMinSize(window as Window_p, size as const_Size_r) as bool
	//SetItemMinSize(sizer as Sizer_p, width as int, height as int) as bool
	//SetItemMinSize(sizer as Sizer_p, size as const_Size_r) as bool
	//SetItemMinSize(index as size_t, width as int, height as int) as bool
	//SetItemMinSize(index as size_t, size as const_Size_r) as bool
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Sizer, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Sizer, `en)}

${help.ComposeMethodHelp(wx.Sizer, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.Sizer, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.Sizer, `ja)}

${help.ComposeMethodHelp(wx.Sizer, `ja)}
'''ja

@const { // Flags
	TOP
	BOTTOM
	LEFT
	RIGHT
	ALL
	EXPAND
	SHAPED
	FIXED_MINSIZE
	RESERVE_SPACE_EVEN_IF_HIDDEN
	ALIGN_CENTER
	ALIGN_CENTRE
	ALIGN_LEFT
	ALIGN_RIGHT
	ALIGN_TOP
	ALIGN_BOTTOM
	ALIGN_CENTER_VERTICAL
	ALIGN_CENTRE_VERTICAL
	ALIGN_CENTER_HORIZONTAL
	ALIGN_CENTRE_HORIZONTAL
}
