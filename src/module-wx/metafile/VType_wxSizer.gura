//==============================================================================
// VType_wxSizer.gura
//==============================================================================
Sizer = Class():loosePointer {
	//__init__()
	Add(args* as any) as SizerItem_p = \
		R'''
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(window, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(window, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(sizer, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(sizer, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("proportion", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			int proportion = args.IsValid()? args.PickNumber<int>() : 0;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxSizerItem* rtn = pEntity_gurax->Add(width, height, proportion, flag, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Add(width, height, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		return Value::nil();
		'''
	AddSpacer(size as int) as SizerItem_p
	AddStretchSpacer(prop as int) as SizerItem_p
	CalcMin() as Size
	Clear(delete_windows as bool = false) as void
	Insert(index as size_t, args* as any) as SizerItem_p = \
		R'''
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, window, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, sizer, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::Clear();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("flags", VTYPE_wxSizerFlags);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			wxSizerFlags& flags = args.Pick<Value_wxSizerFlags>().GetEntity();
			wxSizerItem* rtn = pEntity_gurax->Insert(index, width, height, flags);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		return Value::nil();
		'''
}

@const { // Flags
	TOP
	BOTTOM
	LEFT
	RIGHT
	ALL
	EXPAND
	SHAPED
	FIXED_MINSIZE
	RESERVE_SPACE_EVEN_IF_HIDDEN
	ALIGN_CENTER
	ALIGN_CENTRE
	ALIGN_LEFT
	ALIGN_RIGHT
	ALIGN_TOP
	ALIGN_BOTTOM
	ALIGN_CENTER_VERTICAL
	ALIGN_CENTRE_VERTICAL
	ALIGN_CENTER_HORIZONTAL
	ALIGN_CENTRE_HORIZONTAL
}
