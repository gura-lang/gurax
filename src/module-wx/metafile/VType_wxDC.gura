//==============================================================================
// VType_wxDC.gura
//==============================================================================
DC = Class {
	CopyAttributes(dc as const_DC_r) as void
	GetDepth() as int
	GetDeviceOrigin() as Point
	GetLogicalFunction() as RasterOperationMode
	GetMapMode() as MappingMode
	GetPixel(x as Coord, y as Coord) as Colour = \
		R'''
		wxColour colour;
		bool rtn = pEntity_gurax->GetPixel(x, y, &colour);
		if (!rtn) return Value::nil();
		return new Value_wxColour(colour);
		'''
	GetPPI() as Size
	GetSize() as Size
	GetSizeMM() as Size
	GetUserScale() as Tuple@gurax = \
		R'''
		double x, y;
		pEntity_gurax->GetUserScale(&x, &y);
		return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
		'''
	IsOk() as bool
	SetAxisOrientation(xLeftRight as bool, yBottomUp as bool) as void
	SetDeviceOrigin(x as Coord, y as Coord) as void
	SetLogicalFunction(function as RasterOperationMode) as void
	SetMapMode(mode as MappingMode) as void
	SetPalette(palette as const_Palette_r) as void
	SetUserScale(xScale as double, yScale as double) as void
	//GetHandle()
	GetAsBitmap(subrect as const_Rect_p = nullptr) as Bitmap
	SetLogicalScale(x as double, y as double) as void
	GetLogicalScale() as Tuple@gurax = \
		R'''
		double x, y;
		pEntity_gurax->GetLogicalScale(&x, &y);
		return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
		'''
	SetLogicalOrigin(x as Coord, y as Coord) as void
	// Coordinate conversion functions
	DeviceToLogicalX(x as Coord) as Coord
	DeviceToLogicalXRel(x as Coord) as Coord
	DeviceToLogicalY(y as Coord) as Coord
	DeviceToLogicalYRel(y as Coord) as Coord
	LogicalToDeviceX(x as Coord) as Coord
	LogicalToDeviceXRel(x as Coord) as Coord
	LogicalToDeviceY(y as Coord) as Coord
	LogicalToDeviceYRel(y as Coord) as Coord
	// Drawing function
	Clear() as void
	DrawArcXY(xStart as Coord, yStart as Coord, xEnd as Coord, yEnd as Coord, xc as Coord, yc as Coord) as void = DrawArc
	DrawArc(ptStart as const_Point_r, ptEnd as const_Point_r, centre as const_Point_r) as void
	DrawBitmapXY(bitmap as const_Bitmap_r, x as Coord, y as Coord, useMask as bool = false) as void = DrawBitmap
	DrawBitmap(bmp as const_Bitmap_r, pt as const_Point_r, useMask as bool = false) as void
	DrawCheckMarkXY(x as Coord, y as Coord, width as Coord, height as Coord) as void = DrawCheckMark
	DrawCheckMark(rect as const_Rect_r) as void
	DrawCircleXY(x as Coord, y as Coord, radius as Coord) as void = DrawCircle
	DrawCircle(pt as const_Point_r, radius as Coord) as void
	DrawEllipseXY(x as Coord, y as Coord, width as Coord, height as Coord) as void = DrawEllipse
	DrawEllipse(pt as const_Point_r, size as const_Size_r) as void
	DrawEllipseRect(rect as const_Rect_r) as void = DrawEllipse
	DrawEllipticArcXY(x as Coord, y as Coord, width as Coord, height as Coord, start as double, end as double) as void = DrawEllipticArc
	DrawEllipticArc(pt as const_Point_r, sz as const_Size_r, sa as double, ea as double) as void
	DrawIconXY(icon as const_Icon_r, x as Coord, y as Coord) as void = DrawIcon
	DrawIcon(icon as const_Icon_r, pt as const_Point_r) as void
	//DrawLabel(text as String, bitmap as const_Bitmap_r, rect as const_Rect_r, alignment as int = wxALIGN_LEFT | wxALIGN_TOP,  indexAccel as int = -1, rectBounding as Rect_r = nullptr) as void
	DrawLabel(text as String, rect as const_Rect_r, alignment as int = wxALIGN_LEFT | wxALIGN_TOP, indexAccel as int = -1) as void
	DrawLineXY(x1 as Coord, y1 as Coord, x2 as Coord, y2 as Coord) as void = DrawLine
	DrawLine(pt1 as const_Point_r, pt2 as const_Point_r) as void
	//DrawLines(const wxPointList *points, xoffset as Coord=0, yoffset as Coord=0) as void
	DrawPointXY(x as Coord, y as Coord) as void = DrawPoint
	DrawPoint(pt as const_Point_r) as void
	//DrawPolygon(const wxPointList *points, xoffset as Coord=0, yoffset as Coord=0, wxPolygonFillMode fill_style=wxODDEVEN_RULE) as void
	//DrawPolyPolygon(int n, const int count[], const wxPoint points[], xoffset as Coord=0, yoffset as Coord=0, wxPolygonFillMode fill_style=wxODDEVEN_RULE) as void
	DrawRectangleXY(x as Coord, y as Coord, width as Coord, height as Coord) as void = DrawRectangle
	DrawRectangle(pt as const_Point_r, sz as const_Size_r) as void
	DrawRectangleRect(rect as const_Rect_r) as void = DrawRectangle
	DrawRotatedTextXY(text as String, x as Coord, y as Coord, angle as double) as void = DrawRotatedText
	DrawRotatedText(text as String, point as const_Point_r, angle as double) as void
	DrawRoundedRectangleXY(x as Coord, y as Coord, width as Coord, height as Coord, radius as double) as void = DrawRoundedRectangle
	DrawRoundedRectangle(pt as const_Point_r, sz as const_Size_r, radius as double) as void
	DrawRoundedRectangleRect(rect as const_Rect_r, radius as double) as void = DrawRoundedRectangle
	//DrawSpline(const wxPointList *points) as void
	DrawSpline(x1 as Coord, y1 as Coord, x2 as Coord, y2 as Coord, x3 as Coord, y3 as Coord) as void
	DrawTextXY(text as String, x as Coord, y as Coord) as void = DrawText
	DrawText(text as String, pt as const_Point_r) as void
	GradientFillConcentric(rect as const_Rect_r, initialColour as const_Colour_r, destColour as const_Colour_r, circleCenter? as const_Point_p) as void = \
		R'''
		if (circleCenter) {
			pEntity_gurax->GradientFillConcentric(rect, initialColour, destColour, *circleCenter);
		} else {
			pEntity_gurax->GradientFillConcentric(rect, initialColour, destColour);
		}
		return Value::nil();
		'''
	GradientFillLinear(rect as const_Rect_r, initialColour as const_Colour_r, destColour as const_Colour_r, nDirection as Direction = wxRIGHT) as void
	FloodFillXY(x as Coord, y as Coord, colour as const_Colour_r, style as FloodFillStyle = wxFLOOD_SURFACE) as void = FloodFill
	FloodFill(pt as const_Point_r, col as const_Colour_r, style as FloodFillStyle = wxFLOOD_SURFACE) as void
	CrossHairXY(x as Coord, y as Coord) as void = CrossHair
	CrossHair(pt as const_Point_r) as void
	// Clipping region functions
	DestroyClippingRegion() as void
	GetClippingBox() as Tuple@gurax = \
		R'''
		wxCoord x, y, width, height;
		pEntity_gurax->GetClippingBox(&x, &y, &width, &height);
		return Value_Tuple::Create(new Value_Number(x), new Value_Number(y), new Value_Number(width), new Value_Number(height));
		'''
	SetClippingRegionXY(x as Coord, y as Coord, width as Coord, height as Coord) as void = SetClippingRegion
	SetClippingRegion(pt as const_Point_r, sz as const_Size_r) as void
	SetClippingRegionRect(rect as const_Rect_r) as void = SetClippingRegion
	SetDeviceClippingRegion(region as const_Region_r) as void
	// Text/character extent functions
	GetCharHeight() as Coord
	GetCharWidth() as Coord
	GetFontMetrics() as FontMetrics
	//GetMultiLineTextExtent(string as String, wxCoord *w, wxCoord *h, wxCoord *heightLine=NULL, const wxFont *font=NULL) as void
	GetMultiLineTextExtent(string as String) as Size
	//GetPartialTextExtents(text as String, wxArrayInt &widths) as bool
	//GetTextExtent(const wxString &string, wxCoord *w, wxCoord *h, wxCoord *descent=NULL, wxCoord *externalLeading=NULL, const wxFont *font=NULL) as void
	GetTextExtent(string as String) as Size
	// Text properties functions
	GetBackgroundMode() as int
	GetFont() as Font
	GetLayoutDirection() as LayoutDirection
	GetTextBackground() as Colour
	GetTextForeground() as Colour
	SetBackgroundMode(mode as int) as void
	SetFont(font as const_Font_r) as void
	SetTextBackground(colour as const_Colour_r) as void
	SetTextForeground(colour as const_Colour_r) as void
	SetLayoutDirection(dir as LayoutDirection) as void
	// Bounding box functions
	CalcBoundingBox(x as Coord, y as Coord) as void
	MaxX() as Coord
	MaxY() as Coord
	MinX() as Coord
	MinY() as Coord
	ResetBoundingBox() as void
	// Page and document start/end functions
	StartDoc(message as const_String_r) as bool
	StartPage() as void
	EndDoc() as void
	EndPage() as void
	// Bit-Block Transfer operations (blit)
	Blit(xdest as Coord, ydest as Coord, width as Coord, height as Coord, source as DC_p, xsrc as Coord, ysrc as Coord, logicalFunc as RasterOperationMode = wxCOPY, useMask as bool = false, xsrcMask as Coord = wxDefaultCoord, ysrcMask as Coord = wxDefaultCoord) as bool
	StretchBlit(xdest as Coord, ydest as Coord, dstWidth as Coord, dstHeight as Coord, source as DC_p, xsrc as Coord, ysrc as Coord, srcWidth as Coord, srcHeight as Coord, logicalFunc as RasterOperationMode = wxCOPY, useMask as bool = false, xsrcMask as Coord = wxDefaultCoord, ysrcMask as Coord = wxDefaultCoord) as bool
	// Background/foreground brush and pen
	GetBackground() as Brush
	GetBrush() as Brush
	GetPen() as Pen
	SetBackground(brush as const_Brush_r) as void
	SetBrush(brush as const_Brush_r) as void
	SetPen(pen as const_Pen_r) as void
	// Transformation matrix
	CanUseTransformMatrix() as bool
	SetTransformMatrix(matrix as const_AffineMatrix2D_r) as bool
	GetTransformMatrix() as AffineMatrix2D
	ResetTransformMatrix() as void
	// query capabilities
	CanDrawBitmap() as bool
	CanGetTextExtent() as bool
	GetLogicalOriginXY() as Tuple@gurax = \
		R'''
		wxCoord x, y;
		pEntity_gurax->GetLogicalOrigin(&x, &y);
		return Value_Tuple::Create(new Value_Number(x), new Value_Number(y));
		'''
	GetLogicalOrigin() as Point
}
