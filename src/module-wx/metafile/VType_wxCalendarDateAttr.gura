//==============================================================================
// VType_wxCalendarDateAttr.gura
//==============================================================================
CalendarDateAttr = Class {
	@include['wx/calctrl.h']
	__init__(args* as any) = \
		R'''
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("border", VTYPE_Number);
				pDeclCallable->DeclareArg("colBorder", VTYPE_wxColour, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCalendarDateBorder border = args.PickNumber<wxCalendarDateBorder>();
			const wxColour& colBorder = args.IsValid()? args.Pick<Value_wxColour>().GetEntity() : wxNullColour;
			wxCalendarDateAttr rtn(border, colBorder);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxCalendarDateAttr(rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("colText", VTYPE_wxColour, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("colBack", VTYPE_wxColour, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("colBorder", VTYPE_wxColour, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("font", VTYPE_wxFont, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxColour& colText = args.IsValid()? args.Pick<Value_wxColour>().GetEntity() : wxNullColour;
			const wxColour& colBack = args.IsValid()? args.Pick<Value_wxColour>().GetEntity() : wxNullColour;
			const wxColour& colBorder = args.IsValid()? args.Pick<Value_wxColour>().GetEntity() : wxNullColour;
			const wxFont& font = args.IsValid()? args.Pick<Value_wxFont>().GetEntity() : wxNullFont;
			wxCalendarDateBorder border = args.IsValid()? args.PickNumber<wxCalendarDateBorder>() : wxCAL_BORDER_NONE;
			wxCalendarDateAttr rtn(colText, colBack, colBorder, font, border);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxCalendarDateAttr(rtn));
		} while (0);
		return Value::nil();
		'''
	GetBackgroundColour() as Colour
	GetBorder() as CalendarDateBorder
	GetBorderColour() as Colour
	GetFont() as Font
	GetTextColour() as Colour
	HasBackgroundColour() as bool
	HasBorder() as bool
	HasBorderColour() as bool
	HasFont() as bool
	HasTextColour() as bool
	IsHoliday() as bool
	SetBackgroundColour(colBack as const_Colour_r) as void
	SetBorder(border as CalendarDateBorder) as void
	SetBorderColour(col as const_Colour_r) as void
	SetFont(font as const_Font_r) as void
	SetHoliday(holiday as bool) as void
	SetTextColour(colText as const_Colour_r) as void
	GetMark():static as CalendarDateAttr
	SetMark(m as const_CalendarDateAttr_r):static as void
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.CalendarDateAttr, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.CalendarDateAttr, `en)}

${help.ComposeMethodHelp(wx.CalendarDateAttr, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.CalendarDateAttr, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.CalendarDateAttr, `ja)}

${help.ComposeMethodHelp(wx.CalendarDateAttr, `ja)}
'''ja

@enum {
	CalendarDateBorder {
		CAL_BORDER_NONE
		CAL_BORDER_SQUARE
		CAL_BORDER_ROUND
	}
}
