//==============================================================================
// VType_wxRect.gura
//==============================================================================
Rect = Class {
	__init__(x as int = 0, y as int = 0, width as int = 0, height as int = 0):map
	Contains(args* as any) as void = \
		R'''
		// Contains(x as int, y as int) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("x", VTYPE_Number);
				pDeclCallable->DeclareArg("y", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int x = args.PickNumber<int>();
			int y = args.PickNumber<int>();
			bool rtn = pEntity_gurax->Contains(x, y);
			return new Value_Bool(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// Contains(pt as const_Point_r) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			bool rtn = pEntity_gurax->Contains(pt);
			return new Value_Bool(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// Contains(rect as const_Rect_r) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("rect", VTYPE_wxRect);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxRect& rect = args.Pick<Value_wxRect>().GetEntity();
			bool rtn = pEntity_gurax->Contains(rect);
			return new Value_Bool(rtn);
		} while (0);
		return Value::nil();
		'''
	GetBottom() as int
	GetBottomLeft() as Point
	GetBottomRight() as Point
	GetHeight() as int
	GetLeft() as int
	GetPosition() as Point
	GetRight() as int
	GetSize() as Size
	GetTop() as int
	GetTopLeft() as Point
	GetTopRight() as Point
	GetWidth() as int
	GetX() as int
	GetY() as int
	Intersect(rect as const_Rect_r) as Rect
	//Intersects(rect as const_Rect_r) as bool
	IsEmpty() as bool
	SetHeight(height as int) as void
	SetPosition(pos as const_Point_r) as void
	SetSize(s as const_Size_r) as void
	SetWidth(width as int) as void
	SetX(x as int) as void
	SetY(y as int) as void
	SetLeft(left as int) as void
	SetRight(right as int) as void
	SetTop(top as int) as void
	SetBottom(bottom as int) as void
	SetTopLeft(p as const_Point_r) as void
	SetBottomRight(p as const_Point_r) as void
	SetTopRight(p as const_Point_r) as void
	SetBottomLeft(p as const_Point_r) as void
	CentreIn(r as const_Rect_r, dir as int = wxBOTH) as Rect
	CenterIn(r as const_Rect_r, dir as int = wxBOTH) as Rect
	Deflate(args* as any):returnThis = \
		R'''
		// Deflate(dx as Coord, dy as Coord):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("dx", VTYPE_Number);
				pDeclCallable->DeclareArg("dy", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord dx = args.PickNumber<wxCoord>();
			wxCoord dy = args.PickNumber<wxCoord>();
			pEntity_gurax->Deflate(dx, dy);
			return valueThis_gurax.Reference();
		} while (0);
		Error::ClearIssuedFlag();
		// Deflate(diff as const_Size_r):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("diff", VTYPE_wxSize);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxSize& diff = args.Pick<Value_wxSize>().GetEntity();
			pEntity_gurax->Deflate(diff);
			return valueThis_gurax.Reference();
		} while (0);
		Error::ClearIssuedFlag();
		// Deflate(diff as Coord):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("diff", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord diff = args.PickNumber<wxCoord>();
			pEntity_gurax->Deflate(diff);
			return valueThis_gurax.Reference();
		} while (0);
		return Value::nil();
		'''
	Inflate(args* as any):returnThis = \
		R'''
		// Inflate(dx as Coord, dy as Coord):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("dx", VTYPE_Number);
				pDeclCallable->DeclareArg("dy", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord dx = args.PickNumber<wxCoord>();
			wxCoord dy = args.PickNumber<wxCoord>();
			pEntity_gurax->Inflate(dx, dy);
			return valueThis_gurax.Reference();
		} while (0);
		Error::ClearIssuedFlag();
		// Inflate(diff as const_Size_r):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("diff", VTYPE_wxSize);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxSize& diff = args.Pick<Value_wxSize>().GetEntity();
			pEntity_gurax->Inflate(diff);
			return valueThis_gurax.Reference();
		} while (0);
		Error::ClearIssuedFlag();
		// Inflate(diff as Coord):returnThis
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("diff", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord diff = args.PickNumber<wxCoord>();
			pEntity_gurax->Inflate(diff);
			return valueThis_gurax.Reference();
		} while (0);
		return Value::nil();
		'''
	Offset(args* as any) as void = \
		R'''
		// Offset(dx as Coord, dy as Coord) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("dx", VTYPE_Number);
				pDeclCallable->DeclareArg("dy", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord dx = args.PickNumber<wxCoord>();
			wxCoord dy = args.PickNumber<wxCoord>();
			pEntity_gurax->Offset(dx, dy);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// Offset(pt as const_Point_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			pEntity_gurax->Offset(pt);
			return Value::nil();
		} while (0);
		return Value::nil();
		'''
	Union(rect as const_Rect_r):returnThis
	//Union(rect as const_Rect_r):returnThis
	width.getter as int = \
		R'''
		return new Value_Number(valueThis_gurax.GetEntity().width);
		'''
	width.setter as int = \
		R'''
		int width = Value_Number::GetNumber<int>(value_gurax);
		valueThis_gurax.GetEntity().width = width;
		'''
	height.getter as int = \
		R'''
		return new Value_Number(valueThis_gurax.GetEntity().height);
		'''
	height.setter as int = \
		R'''
		int height = Value_Number::GetNumber<int>(value_gurax);
		valueThis_gurax.GetEntity().height = height;
		'''
	x.getter as int = \
		R'''
		return new Value_Number(valueThis_gurax.GetEntity().x);
		'''
	x.setter as int = \
		R'''
		int x = Value_Number::GetNumber<int>(value_gurax);
		valueThis_gurax.GetEntity().x = x;
		'''
	y.getter as int = \
		R'''
		return new Value_Number(valueThis_gurax.GetEntity().y);
		'''
	y.setter as int = \
		R'''
		int y = Value_Number::GetNumber<int>(value_gurax);
		valueThis_gurax.GetEntity().y = y;
		'''
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Rect, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Rect, `en)}

${help.ComposeMethodHelp(wx.Rect, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.Rect, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.Rect, `ja)}

${help.ComposeMethodHelp(wx.Rect, `ja)}
'''ja

(const_Rect_r != const_Rect_r) as bool
(const_Rect_r == const_Rect_r) as bool
(const_Rect_r + const_Rect_r) as Rect
(const_Rect_r * const_Rect_r) as Rect
