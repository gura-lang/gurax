//==============================================================================
// VType_wxDateTime.gura
//==============================================================================
DateTime = Class {
	@enum {
		TZ {
			Local
			GMT_12
			GMT_11
		}
		Calendar {
			Gregorian
			Julian
		}
		Country {
			Country_Unknown
			Country_Default
			Country_WesternEurope_Start
			Country_EEC
			France
			Germany
			UK
			Country_WesternEurope_End
			Russia
			USA
		}
		Month {
			Jan
			Feb
			Mar
			Apr
			May
			Jun
			Jul
			Aug
			Sep
			Oct
			Nov
			Dec
			Inv_Month
		}
		WeekDay {
			Sun
			Mon
			Tue
			Wed
			Thu
			Fri
			Sat
			Inv_WeekDay
		}
		Year {
			Inv_Year
		}
		NameFlags {
			Name_Full
			Name_Abbr
		}
		WeekFlags {
			Default_First
			Monday_First
			Sunday_First
		}
	}
	__init__()
	// Setters
	ResetTime():returnThis
	//Set(timet as time_t):returnThis
	//Set(tm as const_struct_tm_r):returnThis
	//Set(tm as const_Tm_r):returnThis
	//Set(jdn as double):returnThis
	//Set(hour as DateTime_t, minute as DateTime_t = 0, second as DateTime_t = 0, millisec as DateTime_t = 0):returnThis
	//Set(day as DateTime_t, month as Month, year as int = Inv_Year, hour as DateTime_t = 0, minute as DateTime_t = 0, second as DateTime_t = 0, millisec as DateTime_t = 0):returnThis
	SetDay(day as unsigned_short):returnThis
	SetFromDOS(ddt as unsigned_long):returnThis
	SetHour(hour as unsigned_short):returnThis
	SetMillisecond(millisecond as unsigned_short):returnThis
	SetMinute(minute as unsigned_short):returnThis
	SetMonth(month as DateTime.Month):returnThis
	SetSecond(second as unsigned_short):returnThis
	SetToCurrent():returnThis
	SetYear(year as int):returnThis
	// Accessors
	GetAsDOS() as unsigned_long
	//SetFromMSWSysTime(st as const_struct__SYSTEMTIME_r) as DateTime
	//GetAsMSWSysTime(st as struct__SYSTEMTIME_p) as void
/*
	GetCentury(tz as const_TimeZone_r = Local) as int
	GetDateOnly() as DateTime
	GetDay(tz as const_TimeZone_r = Local) as unsigned_short
	GetDayOfYear(tz as const_TimeZone_r = Local) as unsigned_short
	GetHour(tz as const_TimeZone_r = Local) as unsigned_short
	GetMillisecond(tz as const_TimeZone_r = Local) as unsigned_short
	GetMinute(tz as const_TimeZone_r = Local) as unsigned_short
	GetMonth(tz as const_TimeZone_r = Local) as Month
	GetSecond(tz as const_TimeZone_r = Local) as unsigned_short
	GetTicks() as time_t
	GetTm(tz as const_TimeZone_r = Local) as Tm
	GetWeekDay(tz as const_TimeZone_r = Local) as WeekDay
	GetWeekOfMonth(flags as WeekFlags = Monday_First, tz as const_TimeZone_r = Local) as DateTime_t
	GetWeekOfYear(flags as WeekFlags = Monday_First, tz as const_TimeZone_r = Local) as DateTime_t
	GetYear(tz as const_TimeZone_r = Local) as int
*/
	IsValid() as bool
	IsWorkDay(country as DateTime.Country = wxDateTime::Country_Default) as bool
	// Date Comparision
	IsEarlierThan(datetime as const_DateTime_r) as bool
	IsEqualTo(datetime as const_DateTime_r) as bool
	//IsEqualUpTo(dt as const_DateTime_r, ts as const_TimeSpan_r) as bool
	IsLaterThan(datetime as const_DateTime_r) as bool
	IsSameDate(dt as const_DateTime_r) as bool
	IsSameTime(dt as const_DateTime_r) as bool
	IsStrictlyBetween(t1 as const_DateTime_r, t2 as const_DateTime_r) as bool
	IsBetween(t1 as const_DateTime_r, t2 as const_DateTime_r) as bool
}

(const_DateTime_r + const_DateSpan_r) as DateTime
(const_DateTime_r + const_TimeSpan_r) as DateTime
(const_DateTime_r - const_DateSpan_r) as DateTime
(const_DateTime_r - const_TimeSpan_r) as DateTime
(const_DateTime_r - const_DateTime_r) as TimeSpan
