//==============================================================================
// VType_wxFont.gura
//==============================================================================
Font = Class(GDIObject):holdEntity {
	__init__(args* as any) = \
		R'''
		// wxFont()
		if (args.empty()) {
			return new Value_wxFont(wxFont());
		}
		// wxFont(fontInfo as wx.FontInfo)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("fontInfo", VTYPE_wxFontInfo);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxFontInfo& fontInfo = args.Pick<Value_wxFontInfo>().GetEntity();
			return new Value_wxFont(wxFont(fontInfo));
		} while (0);
		Error::ClearIssuedFlag();
		// wxFont(pointSize as Number, family as Number, style as Number, weight as Number,
		//	underline? as Bool, faceName? as String, encoding? as Number)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pointSize", VTYPE_Number);
				pDeclCallable->DeclareArg("family", VTYPE_Number);
				pDeclCallable->DeclareArg("style", VTYPE_Number);
				pDeclCallable->DeclareArg("weight", VTYPE_Number);
				pDeclCallable->DeclareArg("underline", VTYPE_Bool, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("faceName", VTYPE_String, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("encoding", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int pointSize = args.PickNumber<int>();
			wxFontFamily family = args.PickNumber<wxFontFamily>();
			wxFontStyle style = args.PickNumber<wxFontStyle>();
			wxFontWeight weight = args.PickNumber<wxFontWeight>();
			bool underline = args.IsValid()? args.PickBool() : false;
			const char* faceName = args.IsValid()? args.PickString(): "";
			wxFontEncoding encoding = args.IsValid()? args.PickNumber<wxFontEncoding>() : wxFONTENCODING_DEFAULT;
			return new Value_wxFont(wxFont(pointSize, family, style, weight, underline, faceName, encoding));
		} while (0);
		Error::ClearIssuedFlag();
		// wxFont(pixelSize as wx.Size, family as Number, style as Number, weight as Number,
		//	underline? as Bool, faceName? as String, encoding? as Number)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pixelSize", VTYPE_wxSize);
				pDeclCallable->DeclareArg("family", VTYPE_Number);
				pDeclCallable->DeclareArg("style", VTYPE_Number);
				pDeclCallable->DeclareArg("weight", VTYPE_Number);
				pDeclCallable->DeclareArg("underline", VTYPE_Bool, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("faceName", VTYPE_String, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("encoding", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxSize& pixelSize = args.Pick<Value_wxSize>().GetEntity();
			wxFontFamily family = args.PickNumber<wxFontFamily>();
			wxFontStyle style = args.PickNumber<wxFontStyle>();
			wxFontWeight weight = args.PickNumber<wxFontWeight>();
			bool underline = args.IsValid()? args.PickBool() : false;
			const char* faceName = args.IsValid()? args.PickString(): "";
			wxFontEncoding encoding = args.IsValid()? args.PickNumber<wxFontEncoding>() : wxFONTENCODING_DEFAULT;
			return new Value_wxFont(wxFont(pixelSize, family, style, weight, underline, faceName, encoding));
		} while (0);
		Error::ClearIssuedFlag();
		// wxFont(nativeInfoString as String)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("nativeInfoString", VTYPE_String);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const char* nativeInfoString = args.PickString();
			return new Value_wxFont(wxFont(nativeInfoString));
		} while (0);
		return Value::nil();
		'''
	GetEncoding() as FontEncoding
	GetFaceName() as String
	GetFamily() as FontFamily
	GetNativeFontInfoDesc() as String
	GetNativeFontInfoUserDesc() as String
	//GetNativeFontInfo() as NativeFontInfo_p
	GetPointSize() as int
	GetPixelSize() as Size
	GetStyle() as FontStyle
	GetUnderlined() as bool
	GetStrikethrough() as bool
	GetWeight() as FontWeight
	IsFixedWidth() as bool
	IsOk() as bool
	Bold() as Font
	Italic() as Font
	Larger() as Font
	Smaller() as Font
	Underlined() as Font
	Strikethrough() as Font
	MakeBold():returnThis
	MakeItalic():returnThis
	MakeLarger():returnThis
	MakeSmaller():returnThis
	MakeUnderlined():returnThis
	MakeStrikethrough():returnThis
	Scale(x as float) as Font
	Scaled(x as float) as Font
	SetEncoding(encoding as FontEncoding) as void
	SetFaceName(faceName as const_String_r) as bool
	SetFamily(family as FontFamily) as void
	SetNativeFontInfo(info as const_String_r) as bool
	SetNativeFontInfoUserDesc(info as const_String_r) as bool
	//SetNativeFontInfo(info as const_NativeFontInfo_r) as void
	SetPointSize(pointSize as int) as void
	SetPixelSize(pixelSize as const_Size_r) as void
	SetStyle(style as FontStyle) as void
	SetSymbolicSize(size as FontSymbolicSize) as void
	SetSymbolicSizeRelativeTo(size as FontSymbolicSize, base as int) as void
	SetUnderlined(underlined as bool) as void
	SetStrikethrough(strikethrough as bool) as void
	SetWeight(weight as FontWeight) as void
}
