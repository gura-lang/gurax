//==============================================================================
// VType_wxIcon.gura
//==============================================================================
Icon = Class(GDIObject):holdEntity {
	__init__(args* as any) = \
		R'''
		// wx.Icon()
		if (args.empty()) {
			return new Value_wxIcon(wxIcon());
		}
		// wx.Icon(bits[] as String)
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("bits", VTYPE_String, DeclArg::Occur::Once, DeclArg::Flag::ListVar);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const ValueList& values = args.PickList();
			std::unique_ptr<const char*> bits(new (const char*[values.size()]));
			size_t i = 0;
			for (const Value* pValue : values) bits.get()[i++] = Value_String::GetString(*pValue);
			RefPtr<Value> pValueRtn(new Value_wxIcon(wxIcon(bits.get())));
			return pValueRtn.release();
		} while (0);
		return Value::nil();
		'''
	//CreateFromHICON(icon as WXHICON) as bool
	//ConvertToDisabled(brightness as unsigned_char = 255) as Icon
	CopyFromBitmap(bmp as const_Bitmap_r) as void
	GetDepth() as int
	GetHeight() as int
	GetWidth() as int
	IsOk() as bool
	LoadFile(name as const_String_r, type as BitmapType = wxICON_DEFAULT_TYPE, desiredWidth as int = -1, desiredHeight as int = -1) as bool
	SetDepth(depth as int) as void
	SetHeight(height as int) as void
	SetWidth(width as int) as void
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Icon, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Icon, `en)}

${help.ComposeMethodHelp(wx.Icon, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.Icon, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.Icon, `ja)}

${help.ComposeMethodHelp(wx.Icon, `ja)}
'''ja
