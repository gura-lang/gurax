//==============================================================================
// VType_wxFlexGridSizer.gura
//==============================================================================
FlexGridSizer = Class(GridSizer) {
	__init__(args* as any) = \
		R'''
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("cols", VTYPE_Number);
				pDeclCallable->DeclareArg("vgap", VTYPE_Number);
				pDeclCallable->DeclareArg("hgap", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int cols = args.PickNumber<int>();
			int vgap = args.PickNumber<int>();
			int hgap = args.PickNumber<int>();
			wxFlexGridSizer* rtn = new wxFlexGridSizer(cols, vgap, hgap);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxFlexGridSizer(rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("cols", VTYPE_Number);
				pDeclCallable->DeclareArg("gap", VTYPE_wxSize, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int cols = args.PickNumber<int>();
			const wxSize& gap = args.IsValid()? args.Pick<Value_wxSize>().GetEntity() : wxSize(0, 0);
			wxFlexGridSizer* rtn = new wxFlexGridSizer(cols, gap);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxFlexGridSizer(rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("rows", VTYPE_Number);
				pDeclCallable->DeclareArg("cols", VTYPE_Number);
				pDeclCallable->DeclareArg("vgap", VTYPE_Number);
				pDeclCallable->DeclareArg("hgap", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int rows = args.PickNumber<int>();
			int cols = args.PickNumber<int>();
			int vgap = args.PickNumber<int>();
			int hgap = args.PickNumber<int>();
			wxFlexGridSizer* rtn = new wxFlexGridSizer(rows, cols, vgap, hgap);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxFlexGridSizer(rtn));
		} while (0);
		Error::ClearIssuedFlag();
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("rows", VTYPE_Number);
				pDeclCallable->DeclareArg("cols", VTYPE_Number);
				pDeclCallable->DeclareArg("gap", VTYPE_wxSize, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int rows = args.PickNumber<int>();
			int cols = args.PickNumber<int>();
			const wxSize& gap = args.IsValid()? args.Pick<Value_wxSize>().GetEntity() : wxSize(0, 0);
			wxFlexGridSizer* rtn = new wxFlexGridSizer(rows, cols, gap);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxFlexGridSizer(rtn));
		} while (0);
		return Value::nil();
		'''
	AddGrowableCol(idx as size_t, proportion as int = 0) as void
	AddGrowableRow(idx as size_t, proportion as int = 0) as void
	GetFlexibleDirection() as int
	GetNonFlexibleGrowMode() as FlexSizerGrowMode
	IsColGrowable(idx as size_t) as bool
	IsRowGrowable(idx as size_t) as bool
	RemoveGrowableCol(idx as size_t) as void
	RemoveGrowableRow(idx as size_t) as void
	SetFlexibleDirection(direction as int) as void
	SetNonFlexibleGrowMode(mode as FlexSizerGrowMode) as void
	GetRowHeights() as List@gurax = \
		R'''
		auto rtn = pEntity_gurax->GetRowHeights();
		RefPtr<ValueOwner> pValueOwner(new ValueOwner());
		pValueOwner->reserve(rtn.GetCount());
		for (int n : rtn) pValueOwner->push_back(new Value_Number(n));
		return new Value_List(pValueOwner.release());
		'''
	GetColWidths() as List@gurax = \
		R'''
		auto rtn = pEntity_gurax->GetColWidths();
		RefPtr<ValueOwner> pValueOwner(new ValueOwner());
		pValueOwner->reserve(rtn.GetCount());
		for (int n : rtn) pValueOwner->push_back(new Value_Number(n));
		return new Value_List(pValueOwner.release());
		'''
	RecalcSizes() as void
	CalcMin() as Size
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.FlexGridSizer, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.FlexGridSizer, `en)}

${help.ComposeMethodHelp(wx.FlexGridSizer, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.FlexGridSizer, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.FlexGridSizer, `ja)}

${help.ComposeMethodHelp(wx.FlexGridSizer, `ja)}
'''ja
