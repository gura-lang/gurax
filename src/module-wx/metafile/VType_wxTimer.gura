//==============================================================================
// VType_wxTimer.gura
//==============================================================================
Timer = Class(EvtHandler) {
	__init__(owner? as EvtHandler_p, id as int = -1) = \
		R'''
		auto pEntity_gurax = owner? new Value_wxTimer::EntityT(owner, id) : new Value_wxTimer::EntityT();
		RefPtr<Value_wxTimer> pValue_gurax(new Value_wxTimer(pEntity_gurax));
		pEntity_gurax->core_gurax.SetInfo(processor_gurax.Reference(), *pValue_gurax);
		return argument_gurax.ReturnValue(processor_gurax, pValue_gurax.release());
		'''
	GetId() as int
	GetInterval() as int
	GetOwner() as EvtHandler_p
	IsOneShot() as bool
	IsRunning() as bool
	Notify():virtual as void
	SetOwner(owner as EvtHandler_p, id as int = -1) as void
	Start(milliseconds as int = -1, oneShot as bool = wxTIMER_CONTINUOUS):virtual as bool
	StartOnce(milliseconds as int = -1) as bool
	Stop():virtual as void
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Timer, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Timer, `en)}

${help.ComposeMethodHelp(wx.Timer, `en)}
'''
