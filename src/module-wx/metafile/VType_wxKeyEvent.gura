//==============================================================================
// VType_wxKeyEvent.gura
//==============================================================================
KeyEvent = Class(Event) {
	@mixin[KeyboardState]
	GetKeyCode() as int
	IsKeyInCategory(category as int) as bool
	GetRawKeyFlags() as UInt32
	GetUnicodeKey() as char
	GetX() as Coord
	GetY() as Coord
	DoAllowNextEvent() as void
	IsNextEventAllowed() as bool
	GetPosition() as Point
	GetPositionXY(&x:nilRef as Coord, &y:nilRef as Coord) as void = \
		R'''
		wxCoord x_, y_;
		pEntity_gurax->GetPosition(&x_, &y_);
		x->SetValue(processor_gurax, new Value_Number(x_));
		y->SetValue(processor_gurax, new Value_Number(y_));
		return Value::nil();
		'''
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.KeyEvent, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.KeyEvent, `en)}

${help.ComposeMethodHelp(wx.KeyEvent, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.KeyEvent, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.KeyEvent, `ja)}

${help.ComposeMethodHelp(wx.KeyEvent, `ja)}
'''ja

@event {
	EVT_KEY_DOWN	>> KeyEvent
	EVT_KEY_UP		>> KeyEvent
	EVT_CHAR		>> KeyEvent
	EVT_CHAR_HOOK	>> KeyEvent
}
