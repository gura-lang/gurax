//==============================================================================
// VType_wxTextEntry.gura
//==============================================================================
TextEntry = Class():mixin {
	AppendText(text as const_String_r) as void
	AutoComplete(choices as const_ArrayString_r) as bool
	//AutoComplete(completer as TextCompleter_p) as bool
	AutoCompleteFileNames() as bool
	AutoCompleteDirectories() as bool
	CanCopy() as bool
	CanCut() as bool
	CanPaste() as bool
	CanRedo() as bool
	CanUndo() as bool
	ChangeValue(value as const_String_r) as void
	Clear() as void
	Copy() as void
	Cut() as void
	GetInsertionPoint() as long
	GetLastPosition() as long
	GetRange(from as long, to as long) as String
	GetSelection() as Tuple@gurax = \
		R'''
		long from, to;
		pEntity_gurax->GetSelection(&from, &to);
		return Value_Tuple::Create(new Value_Number(from), new Value_Number(to));
		'''
	GetStringSelection() as String
	GetValue() as String
	IsEditable() as bool
	IsEmpty() as bool
	Paste() as void
	Redo() as void
	Remove(from as long, to as long) as void
	Replace(from as long, to as long, value as const_String_r) as void
	SetEditable(editable as bool) as void
	SetInsertionPoint(pos as long) as void
	SetInsertionPointEnd() as void
	SetMaxLength(len as unsigned_long) as void
	SetSelection(from as long, to as long) as void
	SelectAll() as void
	SelectNone() as void
	SetHint(hint as const_String_r) as bool
	GetHint() as String
	GetMargins() as Point
	SetValue(value as const_String_r) as void
	Undo() as void
	WriteText(text as const_String_r) as void
	SetMargins(args* as any) as bool = \
		R'''
		// SetMargins(pt as const_Point_r) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			bool rtn = pEntity_gurax->SetMargins(pt);
			return new Value_Bool(rtn);
		} while (0);
		Error::ClearIssuedFlag();
		// SetMargins(left as Coord, top as Coord = -1) as bool
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("left", VTYPE_Number);
				pDeclCallable->DeclareArg("top", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord left = args.PickNumber<wxCoord>();
			wxCoord top = args.IsValid()? args.PickNumber<wxCoord>() : -1;
			bool rtn = pEntity_gurax->SetMargins(left, top);
			return new Value_Bool(rtn);
		} while (0);
		return Value::nil();
		'''
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.TextEntry, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.TextEntry, `en)}

${help.ComposeMethodHelp(wx.TextEntry, `en)}
'''
