//==============================================================================
// VType_wxTextCtrl.gura
//==============================================================================
TextCtrl = Class(Control) {
	@mixin[TextEntry]
	__init__(parent as Window_p, id as WindowID, value as String = '', pos as Point = wxDefaultPosition, size as Size = wxDefaultSize,
		style as long = 0, validator as Validator = wxDefaultValidator, name as String = wxTextCtrlNameStr)
	DiscardEdits() as void
	EmulateKeyPress(event as const_KeyEvent_r) as bool
	GetDefaultStyle() as TextAttr
	GetLineLength(lineNo as long) as int
	GetLineText(lineNo as long) as String
	GetNumberOfLines() as int
	GetStyle(position as long, style as TextAttr_r) as bool
	HitTestPos(pt as const_Point_r, &pos:nilRef as long) as TextCtrlHitTestResult = \
		R'''
		long pos_;
		wxTextCtrlHitTestResult rtn = pEntity_gurax->HitTest(pt, &pos_);
		pos->SetValue(new Value_Number(pos_));
		return new Value_Number(rtn);
		'''
	HitTestCoord(pt as const_Point_r, &col:nilRef as TextCoord, &row:nilRef as TextCoord) as TextCtrlHitTestResult = \
		R'''
		wxTextCoord col_, row_;
		wxTextCtrlHitTestResult rtn = pEntity_gurax->HitTest(pt, &col_, &row_);
		col->SetValue(new Value_Number(col_));
		row->SetValue(new Value_Number(row_));
		return new Value_Number(rtn);
		'''
	IsModified() as bool
	IsMultiLine() as bool
	IsSingleLine() as bool
	LoadFile(filename as const_String_r, fileType as int = wxTEXT_TYPE_ANY) as bool
	MarkDirty() as void
	OnDropFiles(event as DropFilesEvent_r) as void
	PositionToXY(pos as long, &x:nilRef as long, &y:nilRef as long) as bool = \
		R'''
		long x_, y_;
		bool rtn = pEntity_gurax->PositionToXY(pos, &x_, &y_);
		x->SetValue(new Value_Number(x_));
		y->SetValue(new Value_Number(y_));
		return new Value_Bool(rtn);
		'''
	PositionToCoords(pos as long) as Point
	SaveFile(filename as const_String_r = '', fileType as int = wxTEXT_TYPE_ANY) as bool
	SetDefaultStyle(style as const_TextAttr_r) as bool
	SetModified(modified as bool) as void
	SetStyle(start as long, end as long, style as const_TextAttr_r) as bool
	ShowPosition(pos as long) as void
	XYToPosition(x as long, y as long) as long
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.TextCtrl, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.TextCtrl, `en)}

${help.ComposeMethodHelp(wx.TextCtrl, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.TextCtrl, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.TextCtrl, `ja)}

${help.ComposeMethodHelp(wx.TextCtrl, `ja)}
'''ja

@const { // Styles
	TE_PROCESS_ENTER
	TE_PROCESS_TAB
	TE_MULTILINE
	TE_PASSWORD
	TE_READONLY
	TE_RICH
	TE_RICH2
	TE_AUTO_URL
	TE_NOHIDESEL
	TE_NO_VSCROLL
	TE_LEFT
	TE_CENTRE
	TE_RIGHT
	TE_DONTWRAP
	TE_CHARWRAP
	TE_WORDWRAP
	TE_BESTWRAP
	TE_CAPITALIZE
}
