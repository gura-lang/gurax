//==============================================================================
// VType_wxVListBox.gura
//==============================================================================
VListBox = Class(VScrolledWindow) {
	@include['wx/vlbox.h']
	__init__(parent as Window_p, id as WindowID = wxID_ANY, pos as const_Point_r = wxDefaultPosition, size as const_Size_r = wxDefaultSize, style as long = 0, name as const_String_r = wxVListBoxNameStr)
	Clear() as void
	Create(parent as Window_p, id as WindowID = wxID_ANY, pos as const_Point_r = wxDefaultPosition, size as const_Size_r = wxDefaultSize, style as long = 0, name as const_String_r = wxVListBoxNameStr) as bool
	DeselectAll() as bool
	GetFirstSelected(&cookie:nilRef as unsigned_long) as int = \
		R'''
		unsigned long cookie_ = cookie->Get<Value_Number>().GetNumber<unsigned long>();
		int rtn = pEntity_gurax->GetFirstSelected(cookie_);
		cookie->SetValue(processor_gurax, new Value_Number(cookie_));
		return new Value_Number(rtn);
		'''
	GetItemCount() as size_t
	GetMargins() as Point
	GetItemRect(item as size_t) as Rect
	GetNextSelected(&cookie:nilRef as unsigned_long) as int = \
		R'''
		unsigned long cookie_ = cookie->Get<Value_Number>().GetNumber<unsigned long>();
		int rtn = pEntity_gurax->GetNextSelected(cookie_);
		cookie->SetValue(processor_gurax, new Value_Number(cookie_));
		return new Value_Number(rtn);
		'''
	GetSelectedCount() as size_t
	GetSelection() as int
	GetSelectionBackground() as Colour
	HasMultipleSelection() as bool
	IsCurrent(item as size_t) as bool
	IsSelected(item as size_t) as bool
	Select(item as size_t, select as bool = true) as bool
	SelectAll() as bool
	SelectRange(from as size_t, to as size_t) as bool
	SetItemCount(count as size_t) as void
	SetSelection(selection as int) as void
	SetSelectionBackground(col as const_Colour_r) as void
	Toggle(item as size_t) as void
	SetMargins(args* as any) as void = \
		R'''
		//SetMargins(pt as const_Point_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			pEntity_gurax->SetMargins(pt);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		//SetMargins(x as Coord, y as Coord) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("x", VTYPE_Number);
				pDeclCallable->DeclareArg("y", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxCoord x = args.PickNumber<wxCoord>();
			wxCoord y = args.PickNumber<wxCoord>();
			pEntity_gurax->SetMargins(x, y);
			return Value::nil();
		} while (0);
		return Value::nil();
		'''
	OnDrawItem(dc as DC_r, rect as const_Rect_r, n as size_t):virtual:const:pure as void
	OnDrawBackground(dc as DC_r, rect as const_Rect_r, n as size_t):virtual:const as void
	OnDrawSeparator(dc as DC_r, rect as Rect_r, n as size_t):virtual:const as void
	OnMeasureItem(n as size_t):virtual:const:pure as Coord = 'return 0;'
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.VListBox, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.VListBox, `en)}

${help.ComposeMethodHelp(wx.VListBox, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.VListBox, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.VListBox, `ja)}

${help.ComposeMethodHelp(wx.VListBox, `ja)}
'''ja
