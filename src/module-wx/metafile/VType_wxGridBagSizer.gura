//==============================================================================
// VType_wxGridBagSizer.gura
//==============================================================================
GridBagSizer = Class(FlexGridSizer) {
	@include['wx/gbsizer.h']
	CalcMin() as Size
	FindItemAtPoint(pt as const_Point_r) as GBSizerItem_p
	FindItemAtPosition(pos as const_GBPosition_r) as GBSizerItem_p
	FindItemWithData(userData as const_Object_p) as GBSizerItem_p
	GetCellSize(row as int, col as int) as Size
	GetEmptyCellSize() as Size
	RecalcSizes() as void
	SetEmptyCellSize(sz as const_Size_r) as void
	Add(args* as any) as SizerItem_p = \
		R'''
		//Add(window as Window_p, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("window", VTYPE_wxWindow);
				pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
				pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxWindow* window = args.Pick<Value_wxWindow>().GetEntityPtr();
			const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
			const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxObject* userData = nullptr;
			wxSizerItem* rtn = pEntity_gurax->Add(window, pos, span, flag, border, userData);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		//Add(sizer as Sizer_p, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("sizer", VTYPE_wxSizer);
				pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
				pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxSizer* sizer = args.Pick<Value_wxSizer>().GetEntityPtr();
			const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
			const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxObject* userData = nullptr;
			wxSizerItem* rtn = pEntity_gurax->Add(sizer, pos, span, flag, border, userData);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		//Add(item as GBSizerItem_p) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("item", VTYPE_wxGBSizerItem);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			wxGBSizerItem* item = args.Pick<Value_wxGBSizerItem>().GetEntityPtr();
			wxSizerItem* rtn = pEntity_gurax->Add(item);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		Error::ClearIssuedFlag();
		//Add(width as int, height as int, pos as const_GBPosition_r, span as const_GBSpan_r = wxDefaultSpan, flag as int = 0, border as int = 0, userData as Object_p = NULL) as SizerItem_p
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("width", VTYPE_Number);
				pDeclCallable->DeclareArg("height", VTYPE_Number);
				pDeclCallable->DeclareArg("pos", VTYPE_wxGBPosition);
				pDeclCallable->DeclareArg("span", VTYPE_wxGBSpan, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("flag", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("border", VTYPE_Number, DeclArg::Occur::ZeroOrOnce);
				pDeclCallable->DeclareArg("userData", VTYPE_Any, DeclArg::Occur::ZeroOrOnce);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int width = args.PickNumber<int>();
			int height = args.PickNumber<int>();
			const wxGBPosition& pos = args.Pick<Value_wxGBPosition>().GetEntity();
			const wxGBSpan& span = args.IsValid()? args.Pick<Value_wxGBSpan>().GetEntity() : wxDefaultSpan;
			int flag = args.IsValid()? args.PickNumber<int>() : 0;
			int border = args.IsValid()? args.PickNumber<int>() : 0;
			wxObject* userData = nullptr;
			wxSizerItem* rtn = pEntity_gurax->Add(width, height, pos, span, flag, border, userData);
			return argument_gurax.ReturnValue(processor_gurax, new Value_wxSizerItem(*rtn));
		} while (0);
		return Value::nil();
		'''
	CheckForIntersection(item as GBSizerItem_p, excludeItem as GBSizerItem_p = NULL) as bool
	//CheckForIntersection(pos as const_GBPosition_r, span as const_GBSpan_r, excludeItem as GBSizerItem_p = NULL) as bool
	FindItem(window as Window_p) as GBSizerItem_p
	//FindItem(sizer as Sizer_p) as GBSizerItem_p
	GetItemPosition(window as Window_p) as GBPosition
	//GetItemPosition(sizer as Sizer_p) as GBPosition
	//GetItemPosition(index as size_t) as GBPosition
	GetItemSpan(window as Window_p) as GBSpan
	//GetItemSpan(sizer as Sizer_p) as GBSpan
	//GetItemSpan(index as size_t) as GBSpan
	SetItemPosition(window as Window_p, pos as const_GBPosition_r) as bool
	//SetItemPosition(sizer as Sizer_p, pos as const_GBPosition_r) as bool
	//SetItemPosition(index as size_t, pos as const_GBPosition_r) as bool
	SetItemSpan(window as Window_p, span as const_GBSpan_r) as bool
	//SetItemSpan(sizer as Sizer_p, span as const_GBSpan_r) as bool
	//SetItemSpan(index as size_t, span as const_GBSpan_r) as bool
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.GridBagSizer, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.GridBagSizer, `en)}

${help.ComposeMethodHelp(wx.GridBagSizer, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.GridBagSizer, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.GridBagSizer, `ja)}

${help.ComposeMethodHelp(wx.GridBagSizer, `ja)}
'''ja
