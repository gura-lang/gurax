//==============================================================================
// VType_wxSize.gura
//==============================================================================
Size = Class {
	__init__(width as int = 0, height as int = 0):map
	DecTo(size as const_Size_r) as void
	DecToIfSpecified(size as const_Size_r) as void
	GetHeight() as int
	GetWidth() as int
	IncTo(size as const_Size_r) as void
	IsFullySpecified() as bool
	Scale(xscale as float, yscale as float):returnThis
	Set(width as int, height as int) as void
	SetDefaults(sizeDefault as const_Size_r) as void
	SetHeight(height as int) as void
	SetWidth(width as int) as void
	DecBy(args* as any) as void = \
		R'''
		// DecBy(pt as const_Point_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			pEntity_gurax->DecBy(pt);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// DecBy(size as const_Size_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxSize);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
			pEntity_gurax->DecBy(size);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// DecBy(dx as int, dy as int) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("dx", VTYPE_Number);
				pDeclCallable->DeclareArg("dy", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int dx = args.PickNumber<int>();
			int dy = args.PickNumber<int>();
			pEntity_gurax->DecBy(dx, dy);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// DecBy(d as int) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("d", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int d = args.PickNumber<int>();
			pEntity_gurax->DecBy(d);
			return Value::nil();
		} while (0);
		return Value::nil();
		'''
	IncBy(args* as any) as void = \
		R'''
		// IncBy(pt as const_Point_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxPoint);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxPoint& pt = args.Pick<Value_wxPoint>().GetEntity();
			pEntity_gurax->IncBy(pt);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// IncBy(size as const_Size_r) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("pt", VTYPE_wxSize);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			const wxSize& size = args.Pick<Value_wxSize>().GetEntity();
			pEntity_gurax->IncBy(size);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// IncBy(dx as int, dy as int) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("dx", VTYPE_Number);
				pDeclCallable->DeclareArg("dy", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int dx = args.PickNumber<int>();
			int dy = args.PickNumber<int>();
			pEntity_gurax->IncBy(dx, dy);
			return Value::nil();
		} while (0);
		Error::ClearIssuedFlag();
		// IncBy(d as int) as void
		do {
			static DeclCallable* pDeclCallable = nullptr;
			if (!pDeclCallable) {
				pDeclCallable = new DeclCallable();
				pDeclCallable->DeclareArg("d", VTYPE_Number);
			}
			RefPtr<Argument> pArgument(new Argument(processor_gurax, pDeclCallable->Reference()));
			if (!pArgument->FeedValuesAndComplete(processor_gurax, args)) break;
			Error::Clear();
			ArgPicker args(*pArgument);
			int d = args.PickNumber<int>();
			pEntity_gurax->IncBy(d);
			return Value::nil();
		} while (0);
		return Value::nil();
		'''
} %% R'''
# Overview

# Predefined Variable

${help.ComposePropertyHelp(wx.Size, `en)}

# Operator

# Cast Operation

${help.ComposeConstructorHelp(wx.Size, `en)}

${help.ComposeMethodHelp(wx.Size, `en)}
''' %% R'''
# 概要

# 定数

${help.ComposePropertyHelp(wx.Size, `ja)}

# オペレータ

# キャスト

${help.ComposeConstructorHelp(wx.Size, `ja)}

${help.ComposeMethodHelp(wx.Size, `ja)}
'''ja

(const_Size_r == const_Size_r) as bool
(const_Size_r != const_Size_r) as bool
(const_Size_r + const_Size_r) as Size
(const_Size_r - const_Size_r) as Size
(const_Size_r / int) as Size
(const_Size_r * int) as Size
(int * const_Size_r) as Size
