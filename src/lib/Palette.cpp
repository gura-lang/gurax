//==============================================================================
// Palette.cpp
//==============================================================================
#include "stdafx.h"
#include <gurax/VType_Palette.h>

namespace Gurax {

//------------------------------------------------------------------------------
// Palette
//------------------------------------------------------------------------------
void Palette::Bootup()
{
}

Palette::Palette(size_t n) : _packedTbl(new UInt32[n]), _n(n)
{
}

Palette::Palette(const UInt32* packedTbl, size_t n) : _packedTbl(new UInt32[n]), _n(n)
{
	::memcpy(_packedTbl.get(), packedTbl, sizeof(UInt32) * n);
}

Palette* Palette::Mono()
{
	static const UInt32 packedTbl[] = {
		PackRGB(0x00, 0x00, 0x00),	// 0: black
		PackRGB(0xff, 0xff, 0xff),	// 1: white
	};
	return new Palette(packedTbl, 2);
}

Palette* Palette::Basic()
{
	static const UInt32 packedTbl[] = {
		PackRGB(0x00, 0x00, 0x00),	// 0: black
		PackRGB(0x80, 0x00, 0x00),	// 1: maroon
		PackRGB(0x00, 0x80, 0x00),	// 2: green
		PackRGB(0x80, 0x80, 0x00),	// 3: olive
		PackRGB(0x00, 0x00, 0x80),	// 4: navy
		PackRGB(0x80, 0x00, 0x80),	// 5: purple
		PackRGB(0x00, 0x80, 0x80),	// 6: teal
		PackRGB(0x80, 0x80, 0x80),	// 7: gray
		PackRGB(0xc0, 0xc0, 0xc0),	// 8: silver
		PackRGB(0xff, 0x00, 0x00),	// 9: red
		PackRGB(0x00, 0xff, 0x00),	// 10: lime
		PackRGB(0xff, 0xff, 0x00),	// 11: yellow
		PackRGB(0x00, 0x00, 0xff),	// 12: blue
		PackRGB(0xff, 0x00, 0xff),	// 13: fuchsia
		PackRGB(0x00, 0xff, 0xff),	// 14: aqua
		PackRGB(0xff, 0xff, 0xff),	// 15: white
	};
	return new Palette(packedTbl, 16);
}

Palette* Palette::WebSafe()
{
	static const UInt32 packedTbl[] = {
		PackRGB(0x00, 0x00, 0x00),	// 0
		PackRGB(0x33, 0x00, 0x00),	// 1
		PackRGB(0x66, 0x00, 0x00),	// 2
		PackRGB(0x99, 0x00, 0x00),	// 3
		PackRGB(0xcc, 0x00, 0x00),	// 4
		PackRGB(0xff, 0x00, 0x00),	// 5
		PackRGB(0x00, 0x33, 0x00),	// 6
		PackRGB(0x33, 0x33, 0x00),	// 7
		PackRGB(0x66, 0x33, 0x00),	// 8
		PackRGB(0x99, 0x33, 0x00),	// 9
		PackRGB(0xcc, 0x33, 0x00),	// 10
		PackRGB(0xff, 0x33, 0x00),	// 11
		PackRGB(0x00, 0x66, 0x00),	// 12
		PackRGB(0x33, 0x66, 0x00),	// 13
		PackRGB(0x66, 0x66, 0x00),	// 14
		PackRGB(0x99, 0x66, 0x00),	// 15
		PackRGB(0xcc, 0x66, 0x00),	// 16
		PackRGB(0xff, 0x66, 0x00),	// 17
		PackRGB(0x00, 0x99, 0x00),	// 18
		PackRGB(0x33, 0x99, 0x00),	// 19
		PackRGB(0x66, 0x99, 0x00),	// 20
		PackRGB(0x99, 0x99, 0x00),	// 21
		PackRGB(0xcc, 0x99, 0x00),	// 22
		PackRGB(0xff, 0x99, 0x00),	// 23
		PackRGB(0x00, 0xcc, 0x00),	// 24
		PackRGB(0x33, 0xcc, 0x00),	// 25
		PackRGB(0x66, 0xcc, 0x00),	// 26
		PackRGB(0x99, 0xcc, 0x00),	// 27
		PackRGB(0xcc, 0xcc, 0x00),	// 28
		PackRGB(0xff, 0xcc, 0x00),	// 29
		PackRGB(0x00, 0xff, 0x00),	// 30
		PackRGB(0x33, 0xff, 0x00),	// 31
		PackRGB(0x66, 0xff, 0x00),	// 32
		PackRGB(0x99, 0xff, 0x00),	// 33
		PackRGB(0xcc, 0xff, 0x00),	// 34
		PackRGB(0xff, 0xff, 0x00),	// 35
		PackRGB(0x00, 0x00, 0x33),	// 36
		PackRGB(0x33, 0x00, 0x33),	// 37
		PackRGB(0x66, 0x00, 0x33),	// 38
		PackRGB(0x99, 0x00, 0x33),	// 39
		PackRGB(0xcc, 0x00, 0x33),	// 40
		PackRGB(0xff, 0x00, 0x33),	// 41
		PackRGB(0x00, 0x33, 0x33),	// 42
		PackRGB(0x33, 0x33, 0x33),	// 43
		PackRGB(0x66, 0x33, 0x33),	// 44
		PackRGB(0x99, 0x33, 0x33),	// 45
		PackRGB(0xcc, 0x33, 0x33),	// 46
		PackRGB(0xff, 0x33, 0x33),	// 47
		PackRGB(0x00, 0x66, 0x33),	// 48
		PackRGB(0x33, 0x66, 0x33),	// 49
		PackRGB(0x66, 0x66, 0x33),	// 50
		PackRGB(0x99, 0x66, 0x33),	// 51
		PackRGB(0xcc, 0x66, 0x33),	// 52
		PackRGB(0xff, 0x66, 0x33),	// 53
		PackRGB(0x00, 0x99, 0x33),	// 54
		PackRGB(0x33, 0x99, 0x33),	// 55
		PackRGB(0x66, 0x99, 0x33),	// 56
		PackRGB(0x99, 0x99, 0x33),	// 57
		PackRGB(0xcc, 0x99, 0x33),	// 58
		PackRGB(0xff, 0x99, 0x33),	// 59
		PackRGB(0x00, 0xcc, 0x33),	// 60
		PackRGB(0x33, 0xcc, 0x33),	// 61
		PackRGB(0x66, 0xcc, 0x33),	// 62
		PackRGB(0x99, 0xcc, 0x33),	// 63
		PackRGB(0xcc, 0xcc, 0x33),	// 64
		PackRGB(0xff, 0xcc, 0x33),	// 65
		PackRGB(0x00, 0xff, 0x33),	// 66
		PackRGB(0x33, 0xff, 0x33),	// 67
		PackRGB(0x66, 0xff, 0x33),	// 68
		PackRGB(0x99, 0xff, 0x33),	// 69
		PackRGB(0xcc, 0xff, 0x33),	// 70
		PackRGB(0xff, 0xff, 0x33),	// 71
		PackRGB(0x00, 0x00, 0x66),	// 72
		PackRGB(0x33, 0x00, 0x66),	// 73
		PackRGB(0x66, 0x00, 0x66),	// 74
		PackRGB(0x99, 0x00, 0x66),	// 75
		PackRGB(0xcc, 0x00, 0x66),	// 76
		PackRGB(0xff, 0x00, 0x66),	// 77
		PackRGB(0x00, 0x33, 0x66),	// 78
		PackRGB(0x33, 0x33, 0x66),	// 79
		PackRGB(0x66, 0x33, 0x66),	// 80
		PackRGB(0x99, 0x33, 0x66),	// 81
		PackRGB(0xcc, 0x33, 0x66),	// 82
		PackRGB(0xff, 0x33, 0x66),	// 83
		PackRGB(0x00, 0x66, 0x66),	// 84
		PackRGB(0x33, 0x66, 0x66),	// 85
		PackRGB(0x66, 0x66, 0x66),	// 86
		PackRGB(0x99, 0x66, 0x66),	// 87
		PackRGB(0xcc, 0x66, 0x66),	// 88
		PackRGB(0xff, 0x66, 0x66),	// 89
		PackRGB(0x00, 0x99, 0x66),	// 90
		PackRGB(0x33, 0x99, 0x66),	// 91
		PackRGB(0x66, 0x99, 0x66),	// 92
		PackRGB(0x99, 0x99, 0x66),	// 93
		PackRGB(0xcc, 0x99, 0x66),	// 94
		PackRGB(0xff, 0x99, 0x66),	// 95
		PackRGB(0x00, 0xcc, 0x66),	// 96
		PackRGB(0x33, 0xcc, 0x66),	// 97
		PackRGB(0x66, 0xcc, 0x66),	// 98
		PackRGB(0x99, 0xcc, 0x66),	// 99
		PackRGB(0xcc, 0xcc, 0x66),	// 100
		PackRGB(0xff, 0xcc, 0x66),	// 101
		PackRGB(0x00, 0xff, 0x66),	// 102
		PackRGB(0x33, 0xff, 0x66),	// 103
		PackRGB(0x66, 0xff, 0x66),	// 104
		PackRGB(0x99, 0xff, 0x66),	// 105
		PackRGB(0xcc, 0xff, 0x66),	// 106
		PackRGB(0xff, 0xff, 0x66),	// 107
		PackRGB(0x00, 0x00, 0x99),	// 108
		PackRGB(0x33, 0x00, 0x99),	// 109
		PackRGB(0x66, 0x00, 0x99),	// 110
		PackRGB(0x99, 0x00, 0x99),	// 111
		PackRGB(0xcc, 0x00, 0x99),	// 112
		PackRGB(0xff, 0x00, 0x99),	// 113
		PackRGB(0x00, 0x33, 0x99),	// 114
		PackRGB(0x33, 0x33, 0x99),	// 115
		PackRGB(0x66, 0x33, 0x99),	// 116
		PackRGB(0x99, 0x33, 0x99),	// 117
		PackRGB(0xcc, 0x33, 0x99),	// 118
		PackRGB(0xff, 0x33, 0x99),	// 119
		PackRGB(0x00, 0x66, 0x99),	// 120
		PackRGB(0x33, 0x66, 0x99),	// 121
		PackRGB(0x66, 0x66, 0x99),	// 122
		PackRGB(0x99, 0x66, 0x99),	// 123
		PackRGB(0xcc, 0x66, 0x99),	// 124
		PackRGB(0xff, 0x66, 0x99),	// 125
		PackRGB(0x00, 0x99, 0x99),	// 126
		PackRGB(0x33, 0x99, 0x99),	// 127
		PackRGB(0x66, 0x99, 0x99),	// 128
		PackRGB(0x99, 0x99, 0x99),	// 129
		PackRGB(0xcc, 0x99, 0x99),	// 130
		PackRGB(0xff, 0x99, 0x99),	// 131
		PackRGB(0x00, 0xcc, 0x99),	// 132
		PackRGB(0x33, 0xcc, 0x99),	// 133
		PackRGB(0x66, 0xcc, 0x99),	// 134
		PackRGB(0x99, 0xcc, 0x99),	// 135
		PackRGB(0xcc, 0xcc, 0x99),	// 136
		PackRGB(0xff, 0xcc, 0x99),	// 137
		PackRGB(0x00, 0xff, 0x99),	// 138
		PackRGB(0x33, 0xff, 0x99),	// 139
		PackRGB(0x66, 0xff, 0x99),	// 140
		PackRGB(0x99, 0xff, 0x99),	// 141
		PackRGB(0xcc, 0xff, 0x99),	// 142
		PackRGB(0xff, 0xff, 0x99),	// 143
		PackRGB(0x00, 0x00, 0xcc),	// 144
		PackRGB(0x33, 0x00, 0xcc),	// 145
		PackRGB(0x66, 0x00, 0xcc),	// 146
		PackRGB(0x99, 0x00, 0xcc),	// 147
		PackRGB(0xcc, 0x00, 0xcc),	// 148
		PackRGB(0xff, 0x00, 0xcc),	// 149
		PackRGB(0x00, 0x33, 0xcc),	// 150
		PackRGB(0x33, 0x33, 0xcc),	// 151
		PackRGB(0x66, 0x33, 0xcc),	// 152
		PackRGB(0x99, 0x33, 0xcc),	// 153
		PackRGB(0xcc, 0x33, 0xcc),	// 154
		PackRGB(0xff, 0x33, 0xcc),	// 155
		PackRGB(0x00, 0x66, 0xcc),	// 156
		PackRGB(0x33, 0x66, 0xcc),	// 157
		PackRGB(0x66, 0x66, 0xcc),	// 158
		PackRGB(0x99, 0x66, 0xcc),	// 159
		PackRGB(0xcc, 0x66, 0xcc),	// 160
		PackRGB(0xff, 0x66, 0xcc),	// 161
		PackRGB(0x00, 0x99, 0xcc),	// 162
		PackRGB(0x33, 0x99, 0xcc),	// 163
		PackRGB(0x66, 0x99, 0xcc),	// 164
		PackRGB(0x99, 0x99, 0xcc),	// 165
		PackRGB(0xcc, 0x99, 0xcc),	// 166
		PackRGB(0xff, 0x99, 0xcc),	// 167
		PackRGB(0x00, 0xcc, 0xcc),	// 168
		PackRGB(0x33, 0xcc, 0xcc),	// 169
		PackRGB(0x66, 0xcc, 0xcc),	// 170
		PackRGB(0x99, 0xcc, 0xcc),	// 171
		PackRGB(0xcc, 0xcc, 0xcc),	// 172
		PackRGB(0xff, 0xcc, 0xcc),	// 173
		PackRGB(0x00, 0xff, 0xcc),	// 174
		PackRGB(0x33, 0xff, 0xcc),	// 175
		PackRGB(0x66, 0xff, 0xcc),	// 176
		PackRGB(0x99, 0xff, 0xcc),	// 177
		PackRGB(0xcc, 0xff, 0xcc),	// 178
		PackRGB(0xff, 0xff, 0xcc),	// 179
		PackRGB(0x00, 0x00, 0xff),	// 180
		PackRGB(0x33, 0x00, 0xff),	// 181
		PackRGB(0x66, 0x00, 0xff),	// 182
		PackRGB(0x99, 0x00, 0xff),	// 183
		PackRGB(0xcc, 0x00, 0xff),	// 184
		PackRGB(0xff, 0x00, 0xff),	// 185
		PackRGB(0x00, 0x33, 0xff),	// 186
		PackRGB(0x33, 0x33, 0xff),	// 187
		PackRGB(0x66, 0x33, 0xff),	// 188
		PackRGB(0x99, 0x33, 0xff),	// 189
		PackRGB(0xcc, 0x33, 0xff),	// 190
		PackRGB(0xff, 0x33, 0xff),	// 191
		PackRGB(0x00, 0x66, 0xff),	// 192
		PackRGB(0x33, 0x66, 0xff),	// 193
		PackRGB(0x66, 0x66, 0xff),	// 194
		PackRGB(0x99, 0x66, 0xff),	// 195
		PackRGB(0xcc, 0x66, 0xff),	// 196
		PackRGB(0xff, 0x66, 0xff),	// 197
		PackRGB(0x00, 0x99, 0xff),	// 198
		PackRGB(0x33, 0x99, 0xff),	// 199
		PackRGB(0x66, 0x99, 0xff),	// 200
		PackRGB(0x99, 0x99, 0xff),	// 201
		PackRGB(0xcc, 0x99, 0xff),	// 202
		PackRGB(0xff, 0x99, 0xff),	// 203
		PackRGB(0x00, 0xcc, 0xff),	// 204
		PackRGB(0x33, 0xcc, 0xff),	// 205
		PackRGB(0x66, 0xcc, 0xff),	// 206
		PackRGB(0x99, 0xcc, 0xff),	// 207
		PackRGB(0xcc, 0xcc, 0xff),	// 208
		PackRGB(0xff, 0xcc, 0xff),	// 209
		PackRGB(0x00, 0xff, 0xff),	// 210
		PackRGB(0x33, 0xff, 0xff),	// 211
		PackRGB(0x66, 0xff, 0xff),	// 212
		PackRGB(0x99, 0xff, 0xff),	// 213
		PackRGB(0xcc, 0xff, 0xff),	// 214
		PackRGB(0xff, 0xff, 0xff),	// 215
		PackRGB(0x00, 0x00, 0x00),	// 216
		PackRGB(0x00, 0x00, 0x00),	// 217
		PackRGB(0x00, 0x00, 0x00),	// 218
		PackRGB(0x00, 0x00, 0x00),	// 219
		PackRGB(0x00, 0x00, 0x00),	// 220
		PackRGB(0x00, 0x00, 0x00),	// 221
		PackRGB(0x00, 0x00, 0x00),	// 222
		PackRGB(0x00, 0x00, 0x00),	// 223
		PackRGB(0x00, 0x00, 0x00),	// 224
		PackRGB(0x00, 0x00, 0x00),	// 225
		PackRGB(0x00, 0x00, 0x00),	// 226
		PackRGB(0x00, 0x00, 0x00),	// 227
		PackRGB(0x00, 0x00, 0x00),	// 228
		PackRGB(0x00, 0x00, 0x00),	// 229
		PackRGB(0x00, 0x00, 0x00),	// 230
		PackRGB(0x00, 0x00, 0x00),	// 231
		PackRGB(0x00, 0x00, 0x00),	// 232
		PackRGB(0x00, 0x00, 0x00),	// 233
		PackRGB(0x00, 0x00, 0x00),	// 234
		PackRGB(0x00, 0x00, 0x00),	// 235
		PackRGB(0x00, 0x00, 0x00),	// 236
		PackRGB(0x00, 0x00, 0x00),	// 237
		PackRGB(0x00, 0x00, 0x00),	// 238
		PackRGB(0x00, 0x00, 0x00),	// 239
		PackRGB(0x00, 0x00, 0x00),	// 240
		PackRGB(0x00, 0x00, 0x00),	// 241
		PackRGB(0x00, 0x00, 0x00),	// 242
		PackRGB(0x00, 0x00, 0x00),	// 243
		PackRGB(0x00, 0x00, 0x00),	// 244
		PackRGB(0x00, 0x00, 0x00),	// 245
		PackRGB(0x00, 0x00, 0x00),	// 246
		PackRGB(0x00, 0x00, 0x00),	// 247
		PackRGB(0x00, 0x00, 0x00),	// 248
		PackRGB(0x00, 0x00, 0x00),	// 249
		PackRGB(0x00, 0x00, 0x00),	// 250
		PackRGB(0x00, 0x00, 0x00),	// 251
		PackRGB(0x00, 0x00, 0x00),	// 252
		PackRGB(0x00, 0x00, 0x00),	// 253
		PackRGB(0x00, 0x00, 0x00),	// 254
		PackRGB(0x00, 0x00, 0x00),	// 255
	};
	return new Palette(packedTbl, 256);
}

Palette* Palette::Win256()
{
	static const UInt32 packedTbl[] = {
		PackRGB(0x00, 0x00, 0x00),	// 0
		PackRGB(0x80, 0x00, 0x00),	// 1
		PackRGB(0x00, 0x80, 0x00),	// 2
		PackRGB(0x80, 0x80, 0x00),	// 3
		PackRGB(0x00, 0x00, 0x80),	// 4
		PackRGB(0x80, 0x00, 0x80),	// 5
		PackRGB(0x00, 0x80, 0x80),	// 6
		PackRGB(0xc0, 0xc0, 0xc0),	// 7
		PackRGB(0xc0, 0xdc, 0xc0),	// 8
		PackRGB(0xa6, 0xca, 0xf0),	// 9
		PackRGB(0x40, 0x20, 0x00),	// 10
		PackRGB(0x60, 0x20, 0x00),	// 11
		PackRGB(0x80, 0x20, 0x00),	// 12
		PackRGB(0xa0, 0x20, 0x00),	// 13
		PackRGB(0xc0, 0x20, 0x00),	// 14
		PackRGB(0xe0, 0x20, 0x00),	// 15
		PackRGB(0x00, 0x40, 0x00),	// 16
		PackRGB(0x20, 0x40, 0x00),	// 17
		PackRGB(0x40, 0x40, 0x00),	// 18
		PackRGB(0x60, 0x40, 0x00),	// 19
		PackRGB(0x80, 0x40, 0x00),	// 20
		PackRGB(0xa0, 0x40, 0x00),	// 21
		PackRGB(0xc0, 0x40, 0x00),	// 22
		PackRGB(0xe0, 0x40, 0x00),	// 23
		PackRGB(0x00, 0x60, 0x00),	// 24
		PackRGB(0x20, 0x60, 0x00),	// 25
		PackRGB(0x40, 0x60, 0x00),	// 26
		PackRGB(0x60, 0x60, 0x00),	// 27
		PackRGB(0x80, 0x60, 0x00),	// 28
		PackRGB(0xa0, 0x60, 0x00),	// 29
		PackRGB(0xc0, 0x60, 0x00),	// 30
		PackRGB(0xe0, 0x60, 0x00),	// 31
		PackRGB(0x00, 0x80, 0x00),	// 32
		PackRGB(0x20, 0x80, 0x00),	// 33
		PackRGB(0x40, 0x80, 0x00),	// 34
		PackRGB(0x60, 0x80, 0x00),	// 35
		PackRGB(0x80, 0x80, 0x00),	// 36
		PackRGB(0xa0, 0x80, 0x00),	// 37
		PackRGB(0xc0, 0x80, 0x00),	// 38
		PackRGB(0xe0, 0x80, 0x00),	// 39
		PackRGB(0x00, 0xa0, 0x00),	// 40
		PackRGB(0x20, 0xa0, 0x00),	// 41
		PackRGB(0x40, 0xa0, 0x00),	// 42
		PackRGB(0x60, 0xa0, 0x00),	// 43
		PackRGB(0x80, 0xa0, 0x00),	// 44
		PackRGB(0xa0, 0xa0, 0x00),	// 45
		PackRGB(0xc0, 0xa0, 0x00),	// 46
		PackRGB(0xe0, 0xa0, 0x00),	// 47
		PackRGB(0x00, 0xc0, 0x00),	// 48
		PackRGB(0x20, 0xc0, 0x00),	// 49
		PackRGB(0x40, 0xc0, 0x00),	// 50
		PackRGB(0x60, 0xc0, 0x00),	// 51
		PackRGB(0x80, 0xc0, 0x00),	// 52
		PackRGB(0xa0, 0xc0, 0x00),	// 53
		PackRGB(0xc0, 0xc0, 0x00),	// 54
		PackRGB(0xe0, 0xc0, 0x00),	// 55
		PackRGB(0x00, 0xe0, 0x00),	// 56
		PackRGB(0x20, 0xe0, 0x00),	// 57
		PackRGB(0x40, 0xe0, 0x00),	// 58
		PackRGB(0x60, 0xe0, 0x00),	// 59
		PackRGB(0x80, 0xe0, 0x00),	// 60
		PackRGB(0xa0, 0xe0, 0x00),	// 61
		PackRGB(0xc0, 0xe0, 0x00),	// 62
		PackRGB(0xe0, 0xe0, 0x00),	// 63
		PackRGB(0x00, 0x00, 0x40),	// 64
		PackRGB(0x20, 0x00, 0x40),	// 65
		PackRGB(0x40, 0x00, 0x40),	// 66
		PackRGB(0x60, 0x00, 0x40),	// 67
		PackRGB(0x80, 0x00, 0x40),	// 68
		PackRGB(0xa0, 0x00, 0x40),	// 69
		PackRGB(0xc0, 0x00, 0x40),	// 70
		PackRGB(0xe0, 0x00, 0x40),	// 71
		PackRGB(0x00, 0x20, 0x40),	// 72
		PackRGB(0x20, 0x20, 0x40),	// 73
		PackRGB(0x40, 0x20, 0x40),	// 74
		PackRGB(0x60, 0x20, 0x40),	// 75
		PackRGB(0x80, 0x20, 0x40),	// 76
		PackRGB(0xa0, 0x20, 0x40),	// 77
		PackRGB(0xc0, 0x20, 0x40),	// 78
		PackRGB(0xe0, 0x20, 0x40),	// 79
		PackRGB(0x00, 0x40, 0x40),	// 80
		PackRGB(0x20, 0x40, 0x40),	// 81
		PackRGB(0x40, 0x40, 0x40),	// 82
		PackRGB(0x60, 0x40, 0x40),	// 83
		PackRGB(0x80, 0x40, 0x40),	// 84
		PackRGB(0xa0, 0x40, 0x40),	// 85
		PackRGB(0xc0, 0x40, 0x40),	// 86
		PackRGB(0xe0, 0x40, 0x40),	// 87
		PackRGB(0x00, 0x60, 0x40),	// 88
		PackRGB(0x20, 0x60, 0x40),	// 89
		PackRGB(0x40, 0x60, 0x40),	// 90
		PackRGB(0x60, 0x60, 0x40),	// 91
		PackRGB(0x80, 0x60, 0x40),	// 92
		PackRGB(0xa0, 0x60, 0x40),	// 93
		PackRGB(0xc0, 0x60, 0x40),	// 94
		PackRGB(0xe0, 0x60, 0x40),	// 95
		PackRGB(0x00, 0x80, 0x40),	// 96
		PackRGB(0x20, 0x80, 0x40),	// 97
		PackRGB(0x40, 0x80, 0x40),	// 98
		PackRGB(0x60, 0x80, 0x40),	// 99
		PackRGB(0x80, 0x80, 0x40),	// 100
		PackRGB(0xa0, 0x80, 0x40),	// 101
		PackRGB(0xc0, 0x80, 0x40),	// 102
		PackRGB(0xe0, 0x80, 0x40),	// 103
		PackRGB(0x00, 0xa0, 0x40),	// 104
		PackRGB(0x20, 0xa0, 0x40),	// 105
		PackRGB(0x40, 0xa0, 0x40),	// 106
		PackRGB(0x60, 0xa0, 0x40),	// 107
		PackRGB(0x80, 0xa0, 0x40),	// 108
		PackRGB(0xa0, 0xa0, 0x40),	// 109
		PackRGB(0xc0, 0xa0, 0x40),	// 110
		PackRGB(0xe0, 0xa0, 0x40),	// 111
		PackRGB(0x00, 0xc0, 0x40),	// 112
		PackRGB(0x20, 0xc0, 0x40),	// 113
		PackRGB(0x40, 0xc0, 0x40),	// 114
		PackRGB(0x60, 0xc0, 0x40),	// 115
		PackRGB(0x80, 0xc0, 0x40),	// 116
		PackRGB(0xa0, 0xc0, 0x40),	// 117
		PackRGB(0xc0, 0xc0, 0x40),	// 118
		PackRGB(0xe0, 0xc0, 0x40),	// 119
		PackRGB(0x00, 0xe0, 0x40),	// 120
		PackRGB(0x20, 0xe0, 0x40),	// 121
		PackRGB(0x40, 0xe0, 0x40),	// 122
		PackRGB(0x60, 0xe0, 0x40),	// 123
		PackRGB(0x80, 0xe0, 0x40),	// 124
		PackRGB(0xa0, 0xe0, 0x40),	// 125
		PackRGB(0xc0, 0xe0, 0x40),	// 126
		PackRGB(0xe0, 0xe0, 0x40),	// 127
		PackRGB(0x00, 0x00, 0x80),	// 128
		PackRGB(0x20, 0x00, 0x80),	// 129
		PackRGB(0x40, 0x00, 0x80),	// 130
		PackRGB(0x60, 0x00, 0x80),	// 131
		PackRGB(0x80, 0x00, 0x80),	// 132
		PackRGB(0xa0, 0x00, 0x80),	// 133
		PackRGB(0xc0, 0x00, 0x80),	// 134
		PackRGB(0xe0, 0x00, 0x80),	// 135
		PackRGB(0x00, 0x20, 0x80),	// 136
		PackRGB(0x20, 0x20, 0x80),	// 137
		PackRGB(0x40, 0x20, 0x80),	// 138
		PackRGB(0x60, 0x20, 0x80),	// 139
		PackRGB(0x80, 0x20, 0x80),	// 140
		PackRGB(0xa0, 0x20, 0x80),	// 141
		PackRGB(0xc0, 0x20, 0x80),	// 142
		PackRGB(0xe0, 0x20, 0x80),	// 143
		PackRGB(0x00, 0x40, 0x80),	// 144
		PackRGB(0x20, 0x40, 0x80),	// 145
		PackRGB(0x40, 0x40, 0x80),	// 146
		PackRGB(0x60, 0x40, 0x80),	// 147
		PackRGB(0x80, 0x40, 0x80),	// 148
		PackRGB(0xa0, 0x40, 0x80),	// 149
		PackRGB(0xc0, 0x40, 0x80),	// 150
		PackRGB(0xe0, 0x40, 0x80),	// 151
		PackRGB(0x00, 0x60, 0x80),	// 152
		PackRGB(0x20, 0x60, 0x80),	// 153
		PackRGB(0x40, 0x60, 0x80),	// 154
		PackRGB(0x60, 0x60, 0x80),	// 155
		PackRGB(0x80, 0x60, 0x80),	// 156
		PackRGB(0xa0, 0x60, 0x80),	// 157
		PackRGB(0xc0, 0x60, 0x80),	// 158
		PackRGB(0xe0, 0x60, 0x80),	// 159
		PackRGB(0x00, 0x80, 0x80),	// 160
		PackRGB(0x20, 0x80, 0x80),	// 161
		PackRGB(0x40, 0x80, 0x80),	// 162
		PackRGB(0x60, 0x80, 0x80),	// 163
		PackRGB(0x80, 0x80, 0x80),	// 164
		PackRGB(0xa0, 0x80, 0x80),	// 165
		PackRGB(0xc0, 0x80, 0x80),	// 166
		PackRGB(0xe0, 0x80, 0x80),	// 167
		PackRGB(0x00, 0xa0, 0x80),	// 168
		PackRGB(0x20, 0xa0, 0x80),	// 169
		PackRGB(0x40, 0xa0, 0x80),	// 170
		PackRGB(0x60, 0xa0, 0x80),	// 171
		PackRGB(0x80, 0xa0, 0x80),	// 172
		PackRGB(0xa0, 0xa0, 0x80),	// 173
		PackRGB(0xc0, 0xa0, 0x80),	// 174
		PackRGB(0xe0, 0xa0, 0x80),	// 175
		PackRGB(0x00, 0xc0, 0x80),	// 176
		PackRGB(0x20, 0xc0, 0x80),	// 177
		PackRGB(0x40, 0xc0, 0x80),	// 178
		PackRGB(0x60, 0xc0, 0x80),	// 179
		PackRGB(0x80, 0xc0, 0x80),	// 180
		PackRGB(0xa0, 0xc0, 0x80),	// 181
		PackRGB(0xc0, 0xc0, 0x80),	// 182
		PackRGB(0xe0, 0xc0, 0x80),	// 183
		PackRGB(0x00, 0xe0, 0x80),	// 184
		PackRGB(0x20, 0xe0, 0x80),	// 185
		PackRGB(0x40, 0xe0, 0x80),	// 186
		PackRGB(0x60, 0xe0, 0x80),	// 187
		PackRGB(0x80, 0xe0, 0x80),	// 188
		PackRGB(0xa0, 0xe0, 0x80),	// 189
		PackRGB(0xc0, 0xe0, 0x80),	// 190
		PackRGB(0xe0, 0xe0, 0x80),	// 191
		PackRGB(0x00, 0x00, 0xc0),	// 192
		PackRGB(0x20, 0x00, 0xc0),	// 193
		PackRGB(0x40, 0x00, 0xc0),	// 194
		PackRGB(0x60, 0x00, 0xc0),	// 195
		PackRGB(0x80, 0x00, 0xc0),	// 196
		PackRGB(0xa0, 0x00, 0xc0),	// 197
		PackRGB(0xc0, 0x00, 0xc0),	// 198
		PackRGB(0xe0, 0x00, 0xc0),	// 199
		PackRGB(0x00, 0x20, 0xc0),	// 200
		PackRGB(0x20, 0x20, 0xc0),	// 201
		PackRGB(0x40, 0x20, 0xc0),	// 202
		PackRGB(0x60, 0x20, 0xc0),	// 203
		PackRGB(0x80, 0x20, 0xc0),	// 204
		PackRGB(0xa0, 0x20, 0xc0),	// 205
		PackRGB(0xc0, 0x20, 0xc0),	// 206
		PackRGB(0xe0, 0x20, 0xc0),	// 207
		PackRGB(0x00, 0x40, 0xc0),	// 208
		PackRGB(0x20, 0x40, 0xc0),	// 209
		PackRGB(0x40, 0x40, 0xc0),	// 210
		PackRGB(0x60, 0x40, 0xc0),	// 211
		PackRGB(0x80, 0x40, 0xc0),	// 212
		PackRGB(0xa0, 0x40, 0xc0),	// 213
		PackRGB(0xc0, 0x40, 0xc0),	// 214
		PackRGB(0xe0, 0x40, 0xc0),	// 215
		PackRGB(0x00, 0x60, 0xc0),	// 216
		PackRGB(0x20, 0x60, 0xc0),	// 217
		PackRGB(0x40, 0x60, 0xc0),	// 218
		PackRGB(0x60, 0x60, 0xc0),	// 219
		PackRGB(0x80, 0x60, 0xc0),	// 220
		PackRGB(0xa0, 0x60, 0xc0),	// 221
		PackRGB(0xc0, 0x60, 0xc0),	// 222
		PackRGB(0xe0, 0x60, 0xc0),	// 223
		PackRGB(0x00, 0x80, 0xc0),	// 224
		PackRGB(0x20, 0x80, 0xc0),	// 225
		PackRGB(0x40, 0x80, 0xc0),	// 226
		PackRGB(0x60, 0x80, 0xc0),	// 227
		PackRGB(0x80, 0x80, 0xc0),	// 228
		PackRGB(0xa0, 0x80, 0xc0),	// 229
		PackRGB(0xc0, 0x80, 0xc0),	// 230
		PackRGB(0xe0, 0x80, 0xc0),	// 231
		PackRGB(0x00, 0xa0, 0xc0),	// 232
		PackRGB(0x20, 0xa0, 0xc0),	// 233
		PackRGB(0x40, 0xa0, 0xc0),	// 234
		PackRGB(0x60, 0xa0, 0xc0),	// 235
		PackRGB(0x80, 0xa0, 0xc0),	// 236
		PackRGB(0xa0, 0xa0, 0xc0),	// 237
		PackRGB(0xc0, 0xa0, 0xc0),	// 238
		PackRGB(0xe0, 0xa0, 0xc0),	// 239
		PackRGB(0x00, 0xc0, 0xc0),	// 240
		PackRGB(0x20, 0xc0, 0xc0),	// 241
		PackRGB(0x40, 0xc0, 0xc0),	// 242
		PackRGB(0x60, 0xc0, 0xc0),	// 243
		PackRGB(0x80, 0xc0, 0xc0),	// 244
		PackRGB(0xa0, 0xc0, 0xc0),	// 245
		PackRGB(0xff, 0xfb, 0xf0),	// 246
		PackRGB(0xa0, 0xa0, 0xa4),	// 247
		PackRGB(0x80, 0x80, 0x80),	// 248
		PackRGB(0xff, 0x00, 0x00),	// 249
		PackRGB(0x00, 0xff, 0x00),	// 250
		PackRGB(0xff, 0xff, 0x00),	// 251
		PackRGB(0x00, 0x00, 0xff),	// 252
		PackRGB(0xff, 0x00, 0xff),	// 253
		PackRGB(0x00, 0xff, 0xff),	// 254
		PackRGB(0xff, 0xff, 0xff),	// 255
	};
	return new Palette(packedTbl, 256);
}

size_t Palette::LookupNearest(UInt8 r, UInt8 g, UInt8 b) const
{
	size_t idxMin = 0;
	Color color(r, g, b);
	size_t distMin = color.CalcDistSqu(GetColor(idxMin));
	if (distMin == 0) return idxMin;
	for (size_t idx = 1; idx < _n; idx++) {
		size_t dist = color.CalcDistSqu(GetColor(idx));
		if (distMin > dist) {
			if (dist == 0) return idx;
			idxMin = idx, distMin = dist;
		}
	}
	return idxMin;
}

bool Palette::UpdateByImage(const Image& image, ShrinkMode shrinkMode)
{
	return false;
}

bool Palette::UpdateByPalette(const Palette& palette, ShrinkMode shrinkMode)
{
	return false;
}

void Palette::Shrink(size_t nEntries, bool alignFlag)
{
}

size_t Palette::NextBlankIndex() const
{
	return 0;
}

String Palette::ToString(const StringStyle& ss) const
{
	return "Palette";
}

//------------------------------------------------------------------------------
// PaletteList
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// PaletteOwner
//------------------------------------------------------------------------------
void PaletteOwner::Clear()
{
	for (Palette* pPalette : *this) Palette::Delete(pPalette);
	clear();
}

}
