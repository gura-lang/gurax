#!/usr/bin/env gura
import(gzip)
import(ml):binary {*}

Trainer.SaveAsModule(moduleName as String, variables* as Expr):dynamicScope = {
	fileName = moduleName + '.gura'
	out = Open(fileName, 'w')
	tR'''
	#!/usr/bin/env gurax
	import(ml)
	import(gzip)

	timeStamp = '${DateTime.Now().__str__()}'

	Eval(${(this.EachInputSymbol() + ' as Array').Join(', ')}) = {
		${if (this.model.type == `Block)}
		${this.model.EachElem():*__str__() + '\n'}
		${else}
		${this.model}
		${end}
	}
	'''.Render(out)
	variables.Each {|variable|
		tR"""
		
		${variable} = b'''
		""".Render(out)
		out.Writer@base64().Writer@gzip().Serialize(variable.Eval())
		tR"""
		'''base64.Reader().Reader@gzip().Deserialize()
		""".Render(out)
	}
	this.EachNode(`variable, `gear) {|node|
		(node.expr.type != `Identifier) && continue
		tR"""
		
		${node.expr.symbol} = b'''
		""".Render(out)
		if (node.type == `variable) {
				out.Writer@base64().Writer@gzip().Serialize(node.output)
		} else { // node.type == `gear
			out.Writer@base64().Writer@gzip().Serialize(node.gear)
		}
		tR"""
		'''base64.Reader().Reader@gzip().Deserialize()
		""".Render(out)
	}
	out = nil
	sys.cerr.Printf('%s was created\n', fileName)
}
