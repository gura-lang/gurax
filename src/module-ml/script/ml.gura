#!/usr/bin/env gura
import(gzip)
import(ml):binary {*}

Trainer.WriteProduct(moduleName as String) = {
	out = Open(moduleName + '.gura', 'w')
	eR'''
	#!/usr/bin/env gurax
	import(ml)
	import(gzip)

	Eval(${(this.EachInputSymbol() + ' as Array').Join(', ')}) = {
		${if (this.model.type == `Block)}
		${this.model.EachElem():*__str__() + '\n'}
		${else}
		${this.model}
		${end}
	}
	'''.Render(out)
	tmplPre = tR"""

	//------------------------------------------------------------------------------
	${node.expr.symbol} = b'''
	"""
	tmplPost = tR"""
	'''base64.Reader().Reader@gzip().Deserialize()
	"""
	this.EachNode(`variable, `gear) {|node|
		(node.expr.type != `Identifier) && continue
		tmplPre.Render(out)
		if (node.type == `variable) {
			out.Writer@base64().Writer@gzip().Serialize(node.output)
		} else { // node.type == `gear
			out.Writer@base64().Writer@gzip().Serialize(node.gear)
		}
		tmplPost.Render(out)
	}
}
