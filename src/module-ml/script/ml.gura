#!/usr/bin/env gura
import(gzip)
import(ml):binary {*}
import(conio)

KeyAbort(msg? as String, keyCodes* as Number) = {
	if (conio.ReadKey() in keyCodes) {
		conio.Clear(`line)
		Print(msg || 'Are you sure to abort? [y/N]')
		key = conio.WaitKey()
		Println()
		return(key == Ord('y'))
	}
	return(false)
}

Trainer.DoTraining(iteratorGenerator as Function, nSamplesWhole as Number, nEpochs as Number,
				batchSize as Number, nIterations? as Number, moduleNameProduct as String = 'recog') = {
	nSamples = cond(!nIterations || nSamplesWhole < batchSize * nIterations, nSamplesWhole, batchSize * nIterations)
	Printf('Training with %d samples for %d epochs -- Press Q to abort the process\n', nSamples, nEpochs)
	abortFlag = false
	nColsEpoch = Format('%d', nEpochs).len
	repeat (nEpochs) {|iEpoch|
		strHead = Format('%*d/%d ', nColsEpoch, iEpoch + 1, nEpochs)
		conio.progress.ProgressBar(strHead, 30, nSamples) {|progressBar|
			iteratorGenerator().Head(nIterations) {|sample, iIteration|
				result = sample.result
				this.Train(result, sample.input)
				if (progressBar.SetValue(iIteration * batchSize) && KeyAbort(nil, Ord('q'))) {
					abortFlag = true
					break
				}
			}
			progressBar.Clear()
		}
		abortFlag && break
		Printf('%serror=%g\n', strHead, this.CalcMeanSquaredError(result))
	}
	this.CreateModule(moduleNameProduct)
}

Trainer.CreateModule(moduleName as String, variables* as Expr):dynamicScope = {
	fileName = moduleName + '.gura'
	out = Open(fileName, 'w')
	tR'''
	#!/usr/bin/env gurax
	import(ml)
	import(gzip)

	timeStamp = '${DateTime.Now().__str__()}'

	Eval(${(this.EachInputSymbol() + ' as Array').Join(', ')}) = {
		${if (this.model.type == `Block)}
		${this.model.EachElem():*__str__() + '\n'}
		${else}
		${this.model}
		${end}
	}
	'''.Render(out)
	variables.Each {|variable|
		tR"""
		
		${variable} = b'''
		""".Render(out)
		out.Writer@base64().Writer@gzip().Serialize(variable.Eval())
		tR"""
		'''base64.Reader().Reader@gzip().Deserialize()
		""".Render(out)
	}
	this.EachNode(`variable, `gear) {|node|
		(node.expr.type != `Identifier) && continue
		tR"""
		
		${node.expr.symbol} = b'''
		""".Render(out)
		if (node.type == `variable) {
				out.Writer@base64().Writer@gzip().Serialize(node.output)
		} else { // node.type == `gear
			out.Writer@base64().Writer@gzip().Serialize(node.gear)
		}
		tR"""
		'''base64.Reader().Reader@gzip().Deserialize()
		""".Render(out)
	}
	out = nil
	sys.cerr.Printf('%s was created\n', fileName)
}
