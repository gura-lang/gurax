#!/usr/bin/env gurax
import(ml.mnist)

db = ml.mnist.Database('../../sample/resource/mnist')

if (true) {
	//model = `(x |.| weight |*| ml.Softmax())
	weight = @float(28 * 28, 10)
	weight.Inject(Random.NormalSeq(0, ml.Xavier(28 * 28)))
	bias = @float(1, 10)
	bias.Inject(Random.NormalSeq(0, ml.Xavier(10)))
	model = `((x |.| weight + bias) |*| ml.Softmax())
} elsif (false) {
	weight1 = @float(28 * 28, 100)
	weight2 = @float(100, 10)
	bias1 = @float(1, 100)
	bias2 = @float(1, 10)
	weight1.Inject(Random.NormalSeq(0, ml.Xavier(28 * 28)))
	weight2.Inject(Random.NormalSeq(0, ml.Xavier(100)))
	bias1.Inject(Random.NormalSeq(0, ml.Xavier(100)))
	bias1.Inject(Random.NormalSeq(0, ml.Xavier(10)))
	model = `(((x |.| weight1 + bias1) |*| ml.Sigmoid() |.| weight2 + bias2) |*| ml.Softmax())
} else {
	nFilters = 30
	filters = @float(nFilters, 1, 5, 5)
	conv = ml.Conv2d(filters, stride = 1, padding = 0)
	convSize = conv.CalcSizeOut(28, 28)
	maxPool = ml.MaxPool2d(2, 2, stride = 2)
	maxPoolSize = maxPool.CalcSizeOut(convSize*)
	bias1 = @float(nFilters)

	model = `((((x |*| conv + bias1) |*| ml.ReLU() |*| maxPool \
				|.| weight1 + bias2) |*| ml.ReLU() \
				|.| weight2 + bias3) |*| ml.Softmax())
}

scope {
	nTraining = 100
	arrayImage = db.train.imageSet.ToArray(`float, flatten = true, numMax = 1)
	arrayLabel = db.train.labelSet.ToArray(`float, oneHot = true)
	optimizer = ml.Optimizer.GradientDescent(0.01)
	ml.Trainer(model, optimizer, `x) {|trainer|
		repeat (nTraining) {|iRepeat|
			repeat (1000) {|i|
				x = arrayImage[i].Reshape(1, nil)
				correct = arrayLabel[i].Reshape(1, nil)
				trainer.Train(correct, x)
			}
			Printf('#%d error=%g\n', iRepeat + 1, trainer.CalcMeanSquaredError(correct))
		}
	}
}
pattern = [' ', '.', ':', '#', '#']
scope {
	// evaluation
	arrayImage = db.test.imageSet.ToArray(`float, flatten = true, numMax = 1)
	arrayLabel = db.test.labelSet.ToArray(`float, oneHot = true)
	nCorrects = 0
	nTests = arrayImage.shape[0]
	repeat (nTests) {|i|
		x = arrayImage[i].Reshape(1, nil)
		t = arrayLabel[i].Reshape(1, nil)
		y = model.Eval()
		idxResult = y.ArgMax(-1, 0)
		idxCorrect = t.ArgMax(-1, 0)
		if (idxResult == idxCorrect) {
			//Printf(' "%d" .. correct with likelihood %.1f%%\n', idxResult, y[0, idxResult] * 100)
			nCorrects += 1
		} else {
			//arrayImage[i].ToList().Fold(db.test.imageSet.nCols) {|row| Printf('%s\n', pattern.Get(row * 4).Join())}
			//Printf(' "%d" .. wrong. correct is "%d"\n', idxResult, idxCorrect)
		}
	}
	Printf('accuracy: %d/%d (%.1f%%)\n', nCorrects, nTests, nCorrects / nTests * 100)
}
