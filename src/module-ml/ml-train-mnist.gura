#!/usr/bin/env gurax
import(ml.mnist)

nTraining = 10
db = ml.mnist.Database('../../sample/resource/mnist')
if (false) {
	model = `((x |.| affineWeight + affineBias) |*| ml.Softmax())
	shapeImage = (1, db.nRows * db.nCols)
	affineWeight = @float(db.nRows * db.nCols, db.nClasses)
	affineWeight.Inject(Random.NormalSeq(0, ml.Xavier(affineWeight.shape[0])))
	affineBias = @float(1, db.nClasses)
	affineBias.Inject(Random.NormalSeq(0, ml.Xavier(affineBias.shape[-1])))
} elsif (true) {
	//model = `((((x |.| affineWeight1 + affineBias1) |*| ml.ReLU()) |.| affineWeight2 + affineBias2) |*| ml.Softmax())
	model = `{
		t1 = (x |.| affineWeight1 + affineBias1) |*| ml.ReLU()
		t2 = t1 |.| affineWeight2 + affineBias2
		t3 = t2 |*| ml.Softmax()
	}
	shapeImage = (1, db.nRows * db.nCols)
	nHidden = 100
	affineWeight1 = @float(db.nRows * db.nCols, nHidden)
	affineWeight2 = @float(nHidden, db.nClasses)
	affineBias1 = @float(1, nHidden)
	affineBias2 = @float(1, db.nClasses)
	affineWeight1.Inject(Random.NormalSeq(0, ml.Xavier(affineWeight1.shape[0])))
	affineWeight2.Inject(Random.NormalSeq(0, ml.Xavier(affineWeight2.shape[0])))
	affineBias1.Inject(Random.NormalSeq(0, ml.Xavier(affineBias1.shape[-1])))
	affineBias2.Inject(Random.NormalSeq(0, ml.Xavier(affineBias2.shape[-1])))
} else {
	model = `{
		t1 = (x |*| conv + convBias1) |*| ml.ReLU() |*| maxPool |*| flatten
		t2 = (t1 |.| affineWeight1 + affineBias1) |*| ml.ReLU()
		t3 = (t2 |.| affineWeight2 + affineBias2)
		t4 = t3 |*| ml.Softmax()
	}
	shapeImage = (1, 1, db.nRows, db.nCols)
	nFilters = 30
	nHidden = 100
	convFilter = @float(nFilters, 1, 5, 5)
	conv = ml.Conv2d(convFilter, stride = 1, padding = 0)
	[nRowsConv, nColsConv] = conv.CalcSizeOut(db.nRows, db.nCols)
	maxPool = ml.MaxPool2d(2, 2, stride = 2)
	[nRowsPool, nColsPool] = maxPool.CalcSizeOut(nRowsConv, nColsConv)
	flatten = ml.Reshape(1, nFilters * nRowsPool * nColsPool)
	convBias1 = @float(1, nFilters, nRowsConv, nColsConv)
	affineWeight1 = @float(nFilters * nRowsPool * nColsPool, nHidden)
	affineBias1 = @float(1, nHidden)
	affineWeight2 = @float(nHidden, db.nClasses)
	affineBias2 = @float(1, db.nClasses)
	convFilter.Inject(Random.NormalSeq(0, ml.Xavier(convFilter.shape[0])))
	affineWeight1.Inject(Random.NormalSeq(0, ml.Xavier(affineWeight1.shape[0])))
	affineWeight2.Inject(Random.NormalSeq(0, ml.Xavier(affineWeight2.shape[0])))
	convBias1.Inject(Random.NormalSeq(0, ml.Xavier(convBias1.shape[-1])))
	affineBias1.Inject(Random.NormalSeq(0, ml.Xavier(affineBias1.shape[-1])))
	affineBias2.Inject(Random.NormalSeq(0, ml.Xavier(affineBias2.shape[-1])))
}
scope {
	arrayImage = db.train.imageSet.ToArray(`float, flatten = true, numMax = 1)	// (nSamples, db.nRows * db.nCols)
	arrayLabel = db.train.labelSet.ToArray(`float, oneHot = true)				// (nSamples, db.nClasses)
	optimizer = ml.Optimizer.GradientDescent(0.01)
	//nSamples = arrayImage.shape[0]
	//nSamples = 10000
	nSamples = 1000
	Printf('Training with %d samples [Image Size: %dx%d, Label Size: %d]\n', nSamples, db.nRows, db.nCols, db.nClasses)
	ml.Trainer(model, optimizer, `x) {|trainer|
		repeat (nTraining) {|iRepeat|
			repeat (nSamples) {|i|
				x = arrayImage[i].Reshape(shapeImage*)
				correct = arrayLabel[i].Reshape(1, nil)
				trainer.Train(correct, x)
			}
			Printf('#%d error=%g\n', iRepeat + 1, trainer.CalcMeanSquaredError(correct))
		}
	}
}
pattern = [' ', '.', ':', '#', '#']
scope {
	// evaluation
	arrayImage = db.test.imageSet.ToArray(`float, flatten = true, numMax = 1)	// (nSamples, db.nRows * db.nCols)
	arrayLabel = db.test.labelSet.ToArray(`float, oneHot = true)				// (nSamples, db.nClasses)
	nCorrects = 0
	nSamples = arrayImage.shape[0]
	Printf('Test with %d samples\n', nSamples)
	repeat (nSamples) {|i|
		x = arrayImage[i].Reshape(shapeImage*)
		t = arrayLabel[i].Reshape(1, nil)
		y = model.Eval()
		idxResult = y.ArgMax(-1, 0)
		idxCorrect = t.ArgMax(-1, 0)
		if (idxResult == idxCorrect) {
			//Printf(' "%d" .. correct with likelihood %.1f%%\n', idxResult, y[0, idxResult] * 100)
			nCorrects += 1
		} else {
			//arrayImage[i].ToList().Fold(db.test.imageSet.nCols) {|row| Printf('%s\n', pattern.Get(row * 4).Join())}
			//Printf(' "%d" .. wrong. correct is "%d"\n', idxResult, idxCorrect)
		}
	}
	Printf('accuracy: %d/%d (%.1f%%)\n', nCorrects, nSamples, nCorrects / nSamples * 100)
}
