#!/usr/bin/env gurax
//==============================================================================
// test-gmp.gura
//==============================================================================
import(util.tester) {*}
import(gmp)

TestCase('Property') {
	gmp.Int.PrintPropSlots()
	gmp.Rational.PrintPropSlots()
	gmp.Float.PrintPropSlots()
	gmp.Random.PrintPropSlots()
}

TestCase('gmp.Int') {
	Tester(`Format('%d', 0L))
	Tester(`Format('%d', 1L))
	Tester(`Format('%d', 1234567890123456789012345678901234567890123456789012345678901234567890L))
	Tester(`Format('%x', 0x0L))
	Tester(`Format('%x', 0x1L))
	Tester(`Format('%x', 0x1234567890123456789012345678901234567890123456789012345678901234567890L))
}

TestCase('gmp.Rational') {
	Tester(`(0Lr))
	Tester(`(1Lr))
	Tester(`(3Lr))
	Tester(`(1 / 2Lr))
	Tester(`(-1Lr))
	Tester(`(-1Lr / 3))
}

TestCase('gmp.Float') {
	prec = gmp.Float.default_prec
	Tester(`Format('%f', 0.L))
	Tester(`Format('%f', 1.L))
	gmp.Float.default_prec = 64
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 128
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 256
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = 512
	Printf('prec = %d\n', gmp.Float.default_prec)
	Tester(`Format('%.f', 1234567890123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890123456789L))
	gmp.Float.default_prec = prec
}

TestCase('!a') {
	
}

TestCase('~a') {
}

TestCase('-a') {
}

TestCase('a + b') {
}

TestCase('a - b') {
}

TestCase('a * b') {
}

TestCase('a / b') {
}

TestCase('math.Abs()') {
	Tester(`(math.Abs(0L)))
	Tester(`(math.Abs(0Lr)))
	Tester(`(math.Abs(0.L)))
	Tester(`(math.Abs(3L)))
	Tester(`(math.Abs(3Lr)))
	Tester(`(math.Abs(2/3Lr)))
	Tester(`(math.Abs(3.L)))
	Tester(`(math.Abs(3.14L)))
	Tester(`(math.Abs(-3L)))
	Tester(`(math.Abs(-3Lr)))
	Tester(`(math.Abs(-2/3Lr)))
	Tester(`(math.Abs(-3.L)))
	Tester(`(math.Abs(-3.14L)))
}

TestCase('math.Ceil()') {
	Tester(`(math.Ceil(0L)))
	Tester(`(math.Ceil(0Lr)))
	Tester(`(math.Ceil(0.L)))
	Tester(`(math.Ceil(3L)))
	Tester(`(math.Ceil(3Lr)))
	Tester(`(math.Ceil(2/3Lr)))
	Tester(`(math.Ceil(3.L)))
	Tester(`(math.Ceil(3.14L)))
	Tester(`(math.Ceil(-3L)))
	Tester(`(math.Ceil(-3Lr)))
	Tester(`(math.Ceil(-2/3Lr)))
	Tester(`(math.Ceil(-3.L)))
	Tester(`(math.Ceil(-3.14L)))
}

TestCase('math.Floor()') {
	Tester(`(math.Floor(0L)))
	Tester(`(math.Floor(0Lr)))
	Tester(`(math.Floor(0.L)))
	Tester(`(math.Floor(3L)))
	Tester(`(math.Floor(3Lr)))
	Tester(`(math.Floor(2/3Lr)))
	Tester(`(math.Floor(3.L)))
	Tester(`(math.Floor(3.14L)))
	Tester(`(math.Floor(-3L)))
	Tester(`(math.Floor(-3Lr)))
	Tester(`(math.Floor(-2/3Lr)))
	Tester(`(math.Floor(-3.L)))
	Tester(`(math.Floor(-3.14L)))
}

TestCase('math.Sqrt()') {
	Tester(`(math.Sqrt(0L)))
	Tester(`(math.Sqrt(0Lr)))
	Tester(`(math.Sqrt(0.L)))
	Tester(`(math.Sqrt(1L)))
	Tester(`(math.Sqrt(1Lr)))
	Tester(`(math.Sqrt(1.L)))
	Tester(`(math.Sqrt(2L)))
	Tester(`(math.Sqrt(2.L)))
	Tester(`(math.Sqrt(3L)))
	Tester(`(math.Sqrt(3.L)))
	Tester(`(math.Sqrt(9L)))
	Tester(`(math.Sqrt(9.L)))
	Tester(`(math.Sqrt(12345L)))
	Tester(`(math.Sqrt(12345.L)))
}

TestCase('gmp.Random') {
}
