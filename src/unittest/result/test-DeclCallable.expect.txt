[DeclCallable]
f(a:[]) = {} .. (a:Any)
f() = {} .. ()
f(`v) = {} .. (`v)
f(v) = {} .. (v:Any)
f(v1, v2, v3) = {} .. (v1:Any, v2:Any, v3:Any)
f(v:Type) = {} .. (v:Type)
f(v1:g1.Type, v2:g1.g2.Type, v3:g1.g2.g3.Type) = {} .. (v1:g1.Type, v2:g1.g2.Type, v3:g1.g2.g3.Type)
f(v1:Type, v2:String, v3:Array) = {} .. (v1:Type, v2:String, v3:Array)
f(v1:map, v2:noMap, v3:nil, v4:r, v5:w) = {} .. (v1:Any:map, v2:Any:noMap, v3:Any:nil, v4:Any:r, v5:Any:w)
f(v:map:nil:r:w) = {} .. (v:Any:nil:r:w:map)
f():map:attr1:attr2:[a,b] = {} .. ():map:attr1:attr2:[a,b]
f(v[]) = {} .. (v[]:Any)
f(v[]:Type) = {} .. (v[]:Type)
f(v[]:Type:map:w) = {} .. (v[]:Type:w:map)
f(v?) = {} .. (v?:Any)
f(v+) = {} .. (v+:Any)
f(v*) = {} .. (v*:Any)
f(v?:Type) = {} .. (v?:Type)
f(v+:Type) = {} .. (v+:Type)
f(v*:Type) = {} .. (v*:Type)
f(v?:g1.Type) = {} .. (v?:g1.Type)
f(v+:g1.Type) = {} .. (v+:g1.Type)
f(v*:g1.Type) = {} .. (v*:g1.Type)
f(v?:g1.b2.g3.Type) = {} .. (v?:g1.b2.g3.Type)
f(v+:g1.g2.g3.Type) = {} .. (v+:g1.g2.g3.Type)
f(v*:g1.g3.g3.Type) = {} .. (v*:g1.g3.g3.Type)
f(v?:Type:map:w) = {} .. (v?:Type:w:map)
f(v+:Type:map:w) = {} .. (v+:Type:w:map)
f(v*:Type:map:w) = {} .. (v*:Type:w:map)
f(v?:g1.Type:map:w) = {} .. (v?:g1.Type:w:map)
f(v+:g1.Type:map:w) = {} .. (v+:g1.Type:w:map)
f(v*:g1.Type:map:w) = {} .. (v*:g1.Type:w:map)
f(v?:g1.b2.g3.Type:map:w) = {} .. (v?:g1.b2.g3.Type:w:map)
f(v+:g1.g2.g3.Type:map:w) = {} .. (v+:g1.g2.g3.Type:w:map)
f(v*:g1.g3.g3.Type:map:w) = {} .. (v*:g1.g3.g3.Type:w:map)
f(v[]?) = {} .. (v[]?:Any)
f(v[]+) = {} .. (v[]+:Any)
f(v[]*) = {} .. (v[]*:Any)
f(v[]?:Type) = {} .. (v[]?:Type)
f(v[]+:Type) = {} .. (v[]+:Type)
f(v[]*:Type) = {} .. (v[]*:Type)
f(v[]?:g1.Type) = {} .. (v[]?:g1.Type)
f(v[]+:g1.Type) = {} .. (v[]+:g1.Type)
f(v[]*:g1.Type) = {} .. (v[]*:g1.Type)
f(v[]?:g1.b2.g3.Type) = {} .. (v[]?:g1.b2.g3.Type)
f(v[]+:g1.g2.g3.Type) = {} .. (v[]+:g1.g2.g3.Type)
f(v[]*:g1.g3.g3.Type) = {} .. (v[]*:g1.g3.g3.Type)
f(v[]?:Type:map:w) = {} .. (v[]?:Type:w:map)
f(v[]+:Type:map:w) = {} .. (v[]+:Type:w:map)
f(v[]*:Type:map:w) = {} .. (v[]*:Type:w:map)
f(v[]?:g1.Type:map:w) = {} .. (v[]?:g1.Type:w:map)
f(v[]+:g1.Type:map:w) = {} .. (v[]+:g1.Type:w:map)
f(v[]*:g1.Type:map:w) = {} .. (v[]*:g1.Type:w:map)
f(v[]?:g1.b2.g3.Type:map:w) = {} .. (v[]?:g1.b2.g3.Type:w:map)
f(v[]+:g1.g2.g3.Type:map:w) = {} .. (v[]+:g1.g2.g3.Type:w:map)
f(v[]*:g1.g3.g3.Type:map:w) = {} .. (v[]*:g1.g3.g3.Type:w:map)
f() {block} = {} .. () {block}
f() {`block} = {} .. () {`block}
f() {block?} = {} .. () {block?}
f() {`block?} = {} .. () {`block?}
f() {foo} = {} .. () {foo}
f() {`foo} = {} .. () {`foo}
f() {foo?} = {} .. () {foo?}
f() {`foo?} = {} .. () {`foo?}
f() {foo+} = {} .. error: invalid format of block declaration
f() {foo*} = {} .. error: invalid format of block declaration
f() {foo, bar} = {} .. error: invalid format of block declaration
f() {|a| block} = {} .. error: invalid format of block declaration
f() {foo + bar} = {} .. error: invalid format of block declaration
f() {'hello'} = {} .. error: invalid format of block declaration
f(v1:Type1, v2:Type2) {block} = {} .. (v1:Type1, v2:Type2) {block}
f(v1:Type1, v2:Type2) {`block} = {} .. (v1:Type1, v2:Type2) {`block}
f(v1:Type1, v2:Type2) {block?} = {} .. (v1:Type1, v2:Type2) {block?}
f(v1:Type1, v2:Type2) {`block?} = {} .. (v1:Type1, v2:Type2) {`block?}
f(v1:Type1, v2:Type2) {foo} = {} .. (v1:Type1, v2:Type2) {foo}
f(v1:Type1, v2:Type2) {`foo} = {} .. (v1:Type1, v2:Type2) {`foo}
f(v1:Type1, v2:Type2) {foo?} = {} .. (v1:Type1, v2:Type2) {foo?}
f(v1:Type1, v2:Type2) {`foo?} = {} .. (v1:Type1, v2:Type2) {`foo?}
f(v1:Type1, v2:Type2):map:attr1:attr2 {block} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {block}
f(v1:Type1, v2:Type2):map:attr1:attr2 {`block} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {`block}
f(v1:Type1, v2:Type2):map:attr1:attr2 {block?} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {block?}
f(v1:Type1, v2:Type2):map:attr1:attr2 {`block?} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {`block?}
f(v1:Type1, v2:Type2):map:attr1:attr2 {foo} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {foo}
f(v1:Type1, v2:Type2):map:attr1:attr2 {`foo} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {`foo}
f(v1:Type1, v2:Type2):map:attr1:attr2 {foo?} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {foo?}
f(v1:Type1, v2:Type2):map:attr1:attr2 {`foo?} = {} .. (v1:Type1, v2:Type2):map:attr1:attr2 {`foo?}
f(dict%) = {} .. (dict%)
f(dict:attr%) = {} .. error: dictionary argument cannot have attributes
f(v1, v2, v3, dict%) = {} .. (v1:Any, v2:Any, v3:Any, dict%)
f(dict%, v1, v2, v3) = {} .. (v1:Any, v2:Any, v3:Any, dict%)
f(v1, dict%, v2, v3) = {} .. (v1:Any, v2:Any, v3:Any, dict%)
f(dict%, dict2%) = {} .. error: duplicated declaration of dictionary argument
f(arg%%) = {} .. (arg%%)
f(arg:attr%%) = {} .. error: argument accessor cannot have attributes
f(v1, v2, v3, arg%%) = {} .. (v1:Any, v2:Any, v3:Any, arg%%)
f(arg%%, v1, v2, v3) = {} .. (v1:Any, v2:Any, v3:Any, arg%%)
f(v1, arg%%, v2, v3) = {} .. (v1:Any, v2:Any, v3:Any, arg%%)
f(arg%%, arg2%%) = {} .. error: duplicated declaration of argument accessor
f(v1, v2, v3, dict%, arg%%) = {} .. (v1:Any, v2:Any, v3:Any, dict%, arg%%)
f(v1, v2, v3, v1) = {} .. error: duplicated symbol declaration: v1
f(v1, v2, v3, v1%) = {} .. error: duplicated symbol declaration: v1
f(v1, v2, v3, v1%%) = {} .. error: duplicated symbol declaration: v1
f() {block} = {} .. () {block}
f() {`block} = {} .. () {`block}
f(v1, v2, v3) {block} = {} .. (v1:Any, v2:Any, v3:Any) {block}
f(v1, v2, v3) {`block} = {} .. (v1:Any, v2:Any, v3:Any) {`block}
f(v1, v2, v3, block) {block} = {} .. error: duplicated symbol declaration: block
f(v1, v2, v3, block) {`block} = {} .. error: duplicated symbol declaration: block
