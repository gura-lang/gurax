[Parser]
======== ReduceOneToken ========
123456
'foo'
b'\x124V'
e'<html></html>'
foo
+
*
?
-
123456S
'foo'S
======== ReduceTwoTokens ========
()
[]
{}
{|a| elem1, elem2, elem3}
~123456
-123456
!123456
+123456
`123456

% {}
% {elem1, elem2, elem3}
% {|a| elem1, elem2, elem3}
% {|a, b, c| elem1, elem2, elem3}
%% {}
%% {elem1, elem2, elem3}
%% {|a| elem1, elem2, elem3}
%% {|a, b, c| elem1, elem2, elem3}
& {}
& {elem1, elem2, elem3}
& {|a| elem1, elem2, elem3}
& {|a, b, c| elem1, elem2, elem3}
123456+
123456*
123456?
123456%
123456..
======== ReduceThreeTokens ========
a + b
a - b
a * b
a / b
a % b
a %% b
a |.| b
a |^| b
a |*| b
a |+| b
a |-| b
a |&| b
a ||| b
a ** b
a == b
a != b
a < b
a > b
a <= b
a >= b
a <=> b
a in b
a => b
a || b
a && b
a | b
a & b
a ^ b
a << b
a >> b
a .. b
a = b
a += b
a -= b
a *= b
a /= b
a %= b
a **= b
a |= b
a &= b
a ^= b
a <<= b
a >>= b
a.b
a::b
a:*b
a:&b
a:b
a:b:c:d
a:b.c.d:e:f
a:[b,c,d]
a:e:f:g:[b,c,d]
a:e:f:g:[b,c,d]
a:e:f:g:[b,c,d,h,i,k]
()
a
a
a
(a,)
(a, b, c)
[]
[a]
[a, b, c]
f()
f(a)
f(a, b, c)
f {}
f(a) {}
f(a, b, c) {}
f {}
f(a) {}
f(a, b, c) {}
f {}
f {elem1, elem2, elem3}
f {|a| elem1, elem2, elem3}
f {|a, b, c| elem1, elem2, elem3}
f {}
f {elem1, elem2, elem3}
f {|a| elem1, elem2, elem3}
f {|a, b, c| elem1, elem2, elem3}
f(a, b, c) {}
f(a, b, c) {elem1, elem2, elem3}
f(a, b, c) {elem1, elem2, elem3}
f(a, b, c) {elem1, elem2, elem3}
f(a, b, c) {|a| elem1, elem2, elem3}
f(a, b, c) {|a| elem1, elem2, elem3}
f(a, b, c) {|a, b, c| elem1, elem2, elem3}
f(a, b, c) {|a, b, c| elem1, elem2, elem3}
f[]
f[elem1]
f[elem1, elem2, elem3]
f[]
f[elem1]
f[elem1, elem2, elem3]
======== ReduceFourAndFiveTokens ========
f() g()
f() g() h() k() l() m()
f() g(a)
f() g(a, b, c)
f(a, b, c) g()
f(a, b, c) g(a, b, c)
f(a, b, c) {elem1, elem2} g(a, b, c) {}
f(a, b, c) {elem1, elem2} g(a, b, c) {elem1, elem2}
f(a, b, c) {|a, b, c| elem1, elem2, elem3} g(a, b, c) {|a, b, c| elem1, elem2, elem3}
f(a, b, c) {|a, b, c| elem1, elem2, elem3} g(a, b, c) {|a, b, c| elem1, elem2, elem3} h(a, b, c) {|a, b, c| elem1, elem2, elem3} k(a, b, c) {|a, b, c| elem1, elem2, elem3}
if (a == b) {foo}
f(a:number, b:string, c:symbol) = {}
======== Attribute ========
a:b
a:b:c:d
a:b.c.d:e:f
a:[b,c,d]
a:e:f:g:[b,c,d]
a:e:f:g:[b,c,d]
a:e:f:g:[b,c,d,h,i,k]
f(elem1, elem2, elem3):b
f(elem1, elem2, elem3):b:c:d
f(elem1, elem2, elem3):b.c.d:e:f
f(elem1, elem2, elem3):[b,c,d]
f(elem1, elem2, elem3):e:f:g:[b,c,d]
f(elem1, elem2, elem3):e:f:g:[b,c,d]
f(elem1, elem2, elem3):e:f:g:[b,c,d,h,i,k]
f:B(elem1, elem2, elem3):b
f:B:C:D(elem1, elem2, elem3):b:c:d
f:B.C.D:E:F(elem1, elem2, elem3):b.c.d:e:f
f:[B,C,D](elem1, elem2, elem3):[b,c,d]
f:E:F:G:[B,C,D](elem1, elem2, elem3):e:f:g:[b,c,d]
f:E:F:G:[B,C,D](elem1, elem2, elem3):e:f:g:[b,c,d]
f:E:F:G:[B,C,D,H,I,K](elem1, elem2, elem3):e:f:g:[b,c,d,h,i,k]
v[elem1, elem2, elem3]:b
v[elem1, elem2, elem3]:b:c:d
v[elem1, elem2, elem3]:b.c.d:e:f
v[elem1, elem2, elem3]:[b,c,d]
v[elem1, elem2, elem3]:e:f:g:[b,c,d]
v[elem1, elem2, elem3]:e:f:g:[b,c,d]
v[elem1, elem2, elem3]:e:f:g:[b,c,d,h,i,k]
