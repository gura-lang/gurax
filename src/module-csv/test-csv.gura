#!/usr/bin/env gurax
//==============================================================================
// test-csv.gura
//==============================================================================
import(util.tester) {*}
import(csv)

TestCase('Property') {
	csv.Writer.PrintPropSlots()
	csv.Reader.PrintPropSlots()
}

TestCase('csv.Writer') {
	w = csv.Writer(sys.cout)
	w.WriteLine('field1')
	w.WriteLine('field1', 'field2')
	w.WriteLine('field1', 'field2', 'field3')
	w.WriteLine('field1', 'field2', 'field3', 'field4')
	w.WriteLine * ('field1', 'field2', 'field3', 'field4', 'field5')
	w.WriteLine()
	w.WriteLine(0).WriteLine(0, 1).WriteLine(0, 1, 2)
	w.WriteLine(0, 1, 2, 3.1415)
	w.formatForNumber = '%08d'
	w.WriteLine(0, 1, 2, 3.1415)
	w.formatForNumber = '%08x'
	w.WriteLine(0x12345678, 0xffffffff, 0xa8a8a8a8)
	w.ResetFormatForNumber().WriteLine(0, 1, 2, 3.1415)
	csv.Writer(sys.cout) {|w|
		Tester(`w.formatForNumber)
	}
}

TestCase('csv.Reader') {
	testText = R'''
	field1
	field1,field2
	field1,field2,field3
	field1,field2,field3,field4
	field1, field2,field3 , field4 ,field5
	"field1"
	 "field1"
	 "field1" 
	"field1","field2"
	"field1" ,"field2"
	 "field1", field2
	 "field1", ""field2
	 "field1" "trail",field2,field3,field4
	 "field1" ,field2
	"field1" trail,field2,field3,field4
	"field1" "trail"
	"field1" "trail,field2,field3
	
	A
	,
	,,
	,,,,,,,,
	,,field3,,,,field7,,
	"Hello ""world"", aaa",field2,field3
	"multiline
	test
	third line here",field2,field3
	"multiline again
	test
	third line here",field2,field3
	'''
	csv.Reader(testText.ToReader()).ReadLines {|row|
		Println('----')
		if (row.IsEmpty()) {
			Println('(empty)')
		} else {
			Println(('[' + row + ']').Join(','))
		}
	}
}
