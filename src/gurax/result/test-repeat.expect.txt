======== PUnit ========
`repeat {}
  ##0 GenCounterIterator()
  ##1 Value(<Nil>)
  ##2 EvalIterator(offsetToIterator=1,branchdest=##6), DiscardValue()
  ##3 PopValue()
  ##4 Value(<Nil>)
  ##5 Jump(##2)
  ##6 RemoveValue(offset=1)
  ##7 Return()
`repeat {|n| nil}
  ##0 PushFrame_Block()
  ##1 GenCounterIterator()
  ##2 Value(<Nil>)
  ##3 EvalIterator(offsetToIterator=1,branchdest=##8)
  ##4 AssignToDeclArg(`n), DiscardValue()
  ##5 PopValue()
  ##6 Lookup(`nil)
  ##7 Jump(##3)
  ##8 RemoveValue(offset=1)
  ##9 PopFrame()
  ##10 Return()
`repeat (3) {}
  ##0 Value(<Number:3>)
  ##1 Cast(Number)
  ##2 GenRangeIterator()
  ##3 Value(<Nil>)
  ##4 EvalIterator(offsetToIterator=1,branchdest=##8), DiscardValue()
  ##5 PopValue()
  ##6 Value(<Nil>)
  ##7 Jump(##4)
  ##8 RemoveValue(offset=1)
  ##9 Return()
`repeat (3) {|n| nil}
  ##0 PushFrame_Block()
  ##1 Value(<Number:3>)
  ##2 Cast(Number)
  ##3 GenRangeIterator()
  ##4 Value(<Nil>)
  ##5 EvalIterator(offsetToIterator=1,branchdest=##10)
  ##6 AssignToDeclArg(`n), DiscardValue()
  ##7 PopValue()
  ##8 Lookup(`nil)
  ##9 Jump(##5)
  ##10 RemoveValue(offset=1)
  ##11 PopFrame()
  ##12 Return()
`repeat ():list {}
  ##0 GenCounterIterator()
  ##1 CreateList()
  ##2 Jump(##4)
  ##3 ListElem(offsetToList=0)
  ##4 EvalIterator(offsetToIterator=1,branchdest=##7), DiscardValue()
  ##5 Value(<Nil>)
  ##6 Jump(##3)
  ##7 RemoveValue(offset=1)
  ##8 Return()
`repeat ():list {|n| nil}
  ##0 PushFrame_Block()
  ##1 GenCounterIterator()
  ##2 CreateList()
  ##3 Jump(##5)
  ##4 ListElem(offsetToList=0)
  ##5 EvalIterator(offsetToIterator=1,branchdest=##9)
  ##6 AssignToDeclArg(`n), DiscardValue()
  ##7 Lookup(`nil)
  ##8 Jump(##4)
  ##9 RemoveValue(offset=1)
  ##10 PopFrame()
  ##11 Return()
`repeat (3):list {}
  ##0 Value(<Number:3>)
  ##1 Cast(Number)
  ##2 GenRangeIterator()
  ##3 CreateList()
  ##4 Jump(##6)
  ##5 ListElem(offsetToList=0)
  ##6 EvalIterator(offsetToIterator=1,branchdest=##9), DiscardValue()
  ##7 Value(<Nil>)
  ##8 Jump(##5)
  ##9 RemoveValue(offset=1)
  ##10 Return()
`repeat (3):list {|n| nil}
  ##0 PushFrame_Block()
  ##1 Value(<Number:3>)
  ##2 Cast(Number)
  ##3 GenRangeIterator()
  ##4 CreateList()
  ##5 Jump(##7)
  ##6 ListElem(offsetToList=0)
  ##7 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##8 AssignToDeclArg(`n), DiscardValue()
  ##9 Lookup(`nil)
  ##10 Jump(##6)
  ##11 RemoveValue(offset=1)
  ##12 PopFrame()
  ##13 Return()
`repeat ():xlist {}
  ##0 GenCounterIterator()
  ##1 CreateList()
  ##2 Jump(##4)
  ##3 ListElem(offsetToList=0):xlist
  ##4 EvalIterator(offsetToIterator=1,branchdest=##7), DiscardValue()
  ##5 Value(<Nil>)
  ##6 Jump(##3)
  ##7 RemoveValue(offset=1)
  ##8 Return()
`repeat ():xlist {|n| nil}
  ##0 PushFrame_Block()
  ##1 GenCounterIterator()
  ##2 CreateList()
  ##3 Jump(##5)
  ##4 ListElem(offsetToList=0):xlist
  ##5 EvalIterator(offsetToIterator=1,branchdest=##9)
  ##6 AssignToDeclArg(`n), DiscardValue()
  ##7 Lookup(`nil)
  ##8 Jump(##4)
  ##9 RemoveValue(offset=1)
  ##10 PopFrame()
  ##11 Return()
`repeat (3):xlist {}
  ##0 Value(<Number:3>)
  ##1 Cast(Number)
  ##2 GenRangeIterator()
  ##3 CreateList()
  ##4 Jump(##6)
  ##5 ListElem(offsetToList=0):xlist
  ##6 EvalIterator(offsetToIterator=1,branchdest=##9), DiscardValue()
  ##7 Value(<Nil>)
  ##8 Jump(##5)
  ##9 RemoveValue(offset=1)
  ##10 Return()
`repeat (3):xlist {|n| nil}
  ##0 PushFrame_Block()
  ##1 Value(<Number:3>)
  ##2 Cast(Number)
  ##3 GenRangeIterator()
  ##4 CreateList()
  ##5 Jump(##7)
  ##6 ListElem(offsetToList=0):xlist
  ##7 EvalIterator(offsetToIterator=1,branchdest=##11)
  ##8 AssignToDeclArg(`n), DiscardValue()
  ##9 Lookup(`nil)
  ##10 Jump(##6)
  ##11 RemoveValue(offset=1)
  ##12 PopFrame()
  ##13 Return()
======== Create list ========
['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']
[1, 3, 5, 7, 9]
