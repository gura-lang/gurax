--------
f(`(a))
  ##0 Lookup(`a)
--------
f(`(a = 3))
  ##0 Value(<Number:3>)
  ##1 AssignToSymbol(`a)
--------
f(`(a + b))
  ##0 Lookup(`a)
  ##1 Lookup(`b)
  ##2 BinaryOp(+)
--------
`{foo}
  ##0 Lookup(`foo)
--------
`{foo; bar}
  ##0 Lookup(`foo), DiscardValue()
  ##1 Lookup(`bar)
--------
`{foo = 2; bar = 'hello'}
  ##0 Value(<Number:2>)
  ##1 AssignToSymbol(`foo), DiscardValue()
  ##2 Value(<String:'hello'>)
  ##3 AssignToSymbol(`bar)
--------
`{-foo}
  ##0 Lookup(`foo)
  ##1 UnaryOp(-)
--------
`{foo + bar}
  ##0 Lookup(`foo)
  ##1 Lookup(`bar)
  ##2 BinaryOp(+)
--------
`{foo.bar}
  ##0 Lookup(`foo)
  ##1 Member(`bar)
--------
`{foo.bar = 3}
  ##0 Lookup(`foo)
  ##1 Value(<Number:3>)
  ##2 PropSet(`bar)
--------
`{[1, 2, 3]}
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
--------
`{foo = [1, 2, 3]}
  ##0 CreateList()
  ##1 Value(<Number:1>)
  ##2 ListElem(offsetToList=0)
  ##3 Value(<Number:2>)
  ##4 ListElem(offsetToList=0)
  ##5 Value(<Number:3>)
  ##6 ListElem(offsetToList=0)
  ##7 AssignToSymbol(`foo)
--------
`{foo[]}
  ##0 Lookup(`foo)
  ##1 CreateIndex()
  ##2 IndexGet()
--------
`{foo[2] = 3}
  ##0 Value(<Nil>)
--------
`{f(3)}
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot(`(3):##3,cont=##4,branchdest=##6)
  ##3 BeginSequence(sentinel=##5)
  ##4 Value(<Number:3>)
  ##5 FeedArgSlot()
  ##6 Call(cont=##7)
--------
`{f(3, 4, 5)}
  ##0 Lookup(`f)
  ##1 Argument()
  ##2 ArgSlot(`(3):##3,cont=##4,branchdest=##6)
  ##3 BeginSequence(sentinel=##5)
  ##4 Value(<Number:3>)
  ##5 FeedArgSlot()
  ##6 ArgSlot(`(4):##7,cont=##8,branchdest=##10)
  ##7 BeginSequence(sentinel=##9)
  ##8 Value(<Number:4>)
  ##9 FeedArgSlot()
  ##10 ArgSlot(`(5):##11,cont=##12,branchdest=##14)
  ##11 BeginSequence(sentinel=##13)
  ##12 Value(<Number:5>)
  ##13 FeedArgSlot()
  ##14 Call(cont=##15)
--------
`{f(3, 4, 5):attr1:attr2}
  ##0 Lookup(`f)
  ##1 Argument():attr1:attr2
  ##2 ArgSlot(`(3):##3,cont=##4,branchdest=##6)
  ##3 BeginSequence(sentinel=##5)
  ##4 Value(<Number:3>)
  ##5 FeedArgSlot()
  ##6 ArgSlot(`(4):##7,cont=##8,branchdest=##10)
  ##7 BeginSequence(sentinel=##9)
  ##8 Value(<Number:4>)
  ##9 FeedArgSlot()
  ##10 ArgSlot(`(5):##11,cont=##12,branchdest=##14)
  ##11 BeginSequence(sentinel=##13)
  ##12 Value(<Number:5>)
  ##13 FeedArgSlot()
  ##14 Call(cont=##15)
--------
`{f(3, 4, 5) {f1(); f2()}}
  ##0 Lookup(`f)
  ##1 Argument(block=##15)
  ##2 ArgSlot(`(3):##3,cont=##4,branchdest=##6)
  ##3 BeginSequence(sentinel=##5)
  ##4 Value(<Number:3>)
  ##5 FeedArgSlot()
  ##6 ArgSlot(`(4):##7,cont=##8,branchdest=##10)
  ##7 BeginSequence(sentinel=##9)
  ##8 Value(<Number:4>)
  ##9 FeedArgSlot()
  ##10 ArgSlot(`(5):##11,cont=##12,branchdest=##14)
  ##11 BeginSequence(sentinel=##13)
  ##12 Value(<Number:5>)
  ##13 FeedArgSlot()
  ##14 Jump(##23)
  ##15 BeginSequence(sentinel=##22)
  ##16 Lookup(`f1)
  ##17 Argument()
  ##18 Call(cont=##19), DiscardValue()
  ##19 Lookup(`f2)
  ##20 Argument()
  ##21 Call(cont=##22)
  ##22 EndSequence()
  ##23 Call(cont=##24)
--------
`{for (a in b) {}}
  ##0 Lookup(`b)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 Value(<Nil>)
  ##4 ForEach(offsetToIterator=1,branchdest=##8, decls=[a])
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Jump(##4)
  ##8 RemoveValues(offset=1,count=1)
  ##9 PopFrame()
--------
`{for (a in b) {|i| f(i)}}
  ##0 Lookup(`b)
  ##1 GenIterator()
  ##2 PushFrame<Block>()
  ##3 GenCounterIterator()
  ##4 Value(<Nil>)
  ##5 ForEach(offsetToIterator=2,branchdest=##17, decls=[a])
  ##6 DiscardValue()
  ##7 EvalIterator(offsetToIterator=0,branchdest=##8)
  ##8 AssignToDeclArg(`i), DiscardValue()
  ##9 Lookup(`f)
  ##10 Argument()
  ##11 ArgSlot(`(i):##12,cont=##13,branchdest=##15)
  ##12 BeginSequence(sentinel=##14)
  ##13 Lookup(`i)
  ##14 FeedArgSlot()
  ##15 Call(cont=##16)
  ##16 Jump(##5)
  ##17 RemoveValues(offset=1,count=2)
  ##18 PopFrame()
--------
`{while (a < 3) {}}
  ##0 Value(<Nil>)
  ##1 Lookup(`a)
  ##2 Value(<Number:3>)
  ##3 BinaryOp(<)
  ##4 JumpIfNot(branchdest=##8)
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Jump(##1)
  ##8 NoOperation()
--------
`{while (a < 3) {|i| f(i)}}
  ##0 PushFrame<Block>()
  ##1 GenCounterIterator()
  ##2 Value(<Nil>)
  ##3 Lookup(`a)
  ##4 Value(<Number:3>)
  ##5 BinaryOp(<)
  ##6 JumpIfNot(branchdest=##18)
  ##7 DiscardValue()
  ##8 EvalIterator(offsetToIterator=0,branchdest=##9)
  ##9 AssignToDeclArg(`i), DiscardValue()
  ##10 Lookup(`f)
  ##11 Argument()
  ##12 ArgSlot(`(i):##13,cont=##14,branchdest=##16)
  ##13 BeginSequence(sentinel=##15)
  ##14 Lookup(`i)
  ##15 FeedArgSlot()
  ##16 Call(cont=##17)
  ##17 Jump(##3)
  ##18 RemoveValue(offset=1)
  ##19 PopFrame()
--------
`{repeat (10) {}}
  ##0 Value(<Number:10>)
  ##1 Cast(Number)
  ##2 GenRangeIterator()
  ##3 Value(<Nil>)
  ##4 EvalIterator(offsetToIterator=1,branchdest=##8), DiscardValue()
  ##5 DiscardValue()
  ##6 Value(<Nil>)
  ##7 Jump(##4)
  ##8 RemoveValue(offset=1)
--------
`{repeat (10) {|i| f(i)}}
  ##0 PushFrame<Block>()
  ##1 Value(<Number:10>)
  ##2 Cast(Number)
  ##3 GenRangeIterator()
  ##4 Value(<Nil>)
  ##5 EvalIterator(offsetToIterator=1,branchdest=##16)
  ##6 AssignToDeclArg(`i), DiscardValue()
  ##7 DiscardValue()
  ##8 Lookup(`f)
  ##9 Argument()
  ##10 ArgSlot(`(i):##11,cont=##12,branchdest=##14)
  ##11 BeginSequence(sentinel=##13)
  ##12 Lookup(`i)
  ##13 FeedArgSlot()
  ##14 Call(cont=##15)
  ##15 Jump(##5)
  ##16 RemoveValue(offset=1)
  ##17 PopFrame()
