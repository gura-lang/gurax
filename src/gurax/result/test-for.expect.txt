======== PUnit ========
`for (v in tbl) {nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 Value(<Nil>)
  ##4 ForEach(offsetToIterator=1,branchdest=##8, decls=[v])
  ##5 PopValue()
  ##6 Lookup(`nil)
  ##7 Jump(##4)
  ##8 RemoveValues(offset=1,count=1)
  ##9 PopFrame()
  ##10 Return()
`for (v in tbl):list {nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 CreateList()
  ##4 Jump(##6)
  ##5 ListElem(offsetToList=0)
  ##6 ForEach(offsetToIterator=1,branchdest=##9, decls=[v])
  ##7 Lookup(`nil)
  ##8 Jump(##5)
  ##9 RemoveValues(offset=1,count=1)
  ##10 PopFrame()
  ##11 Return()
`for (v in tbl):xlist {nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 CreateList()
  ##4 Jump(##6)
  ##5 ListElem(offsetToList=0):xlist
  ##6 ForEach(offsetToIterator=1,branchdest=##9, decls=[v])
  ##7 Lookup(`nil)
  ##8 Jump(##5)
  ##9 RemoveValues(offset=1,count=1)
  ##10 PopFrame()
  ##11 Return()
`for (v in tbl) {|n| nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 GenCounterIterator()
  ##4 Value(<Nil>)
  ##5 ForEach(offsetToIterator=2,branchdest=##11, decls=[v])
  ##6 PopValue()
  ##7 EvalIterator(offsetToIterator=0,branchdest=##8)
  ##8 AssignToDeclArg(`n), DiscardValue()
  ##9 Lookup(`nil)
  ##10 Jump(##5)
  ##11 RemoveValues(offset=1,count=2)
  ##12 PopFrame()
  ##13 Return()
`for (v in tbl):list {|n| nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(##7)
  ##6 ListElem(offsetToList=0)
  ##7 ForEach(offsetToIterator=2,branchdest=##12, decls=[v])
  ##8 EvalIterator(offsetToIterator=1,branchdest=##9)
  ##9 AssignToDeclArg(`n), DiscardValue()
  ##10 Lookup(`nil)
  ##11 Jump(##6)
  ##12 RemoveValues(offset=1,count=2)
  ##13 PopFrame()
  ##14 Return()
`for (v in tbl):xlist {|n| nil}
  ##0 Lookup(`tbl)
  ##1 GenIterator()
  ##2 PushFrame_Block()
  ##3 GenCounterIterator()
  ##4 CreateList()
  ##5 Jump(##7)
  ##6 ListElem(offsetToList=0):xlist
  ##7 ForEach(offsetToIterator=2,branchdest=##12, decls=[v])
  ##8 EvalIterator(offsetToIterator=1,branchdest=##9)
  ##9 AssignToDeclArg(`n), DiscardValue()
  ##10 Lookup(`nil)
  ##11 Jump(##6)
  ##12 RemoveValues(offset=1,count=2)
  ##13 PopFrame()
  ##14 Return()
`for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {nil}
  ##0 Lookup(`tbl1)
  ##1 GenIterator()
  ##2 Lookup(`tbl2)
  ##3 GenIterator()
  ##4 Lookup(`tbl3)
  ##5 GenIterator()
  ##6 PushFrame_Block()
  ##7 Value(<Nil>)
  ##8 ForEach(offsetToIterator=1,branchdest=##12, decls=[v1,v2,v3])
  ##9 PopValue()
  ##10 Lookup(`nil)
  ##11 Jump(##8)
  ##12 RemoveValues(offset=1,count=3)
  ##13 PopFrame()
  ##14 Return()
======== Create list ========
[6, 2, nil, 2, 10, 18, nil, nil, 10, 6, 10, nil]
