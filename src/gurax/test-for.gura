#!./gurax
import(util) {*}

PrintTitle('PUnit')
exprs = [
	`for (v in tbl) {}
	`for (v in tbl):list {}
	`for (v in tbl):xlist {}
	`for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {}
	`for (v in tbl) {|n|}
	`for (v in tbl):list {|n|}
	`for (v in tbl):xlist {|n|}
	`for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n|}
	`for (v in tbl) { 1 }
	`for (v in tbl):list { 1 }
	`for (v in tbl):xlist { 1 }
	`for (v1 in tbl1, v2 in tbl2, v3 in tbl3) { 1 }
	`for (v in tbl) {|n| 1 }
	`for (v in tbl):list {|n| 1 }
	`for (v in tbl):xlist {|n| 1 }
	`for (v1 in tbl1, v2 in tbl2, v3 in tbl3) {|n| 1 }

	`for (v in tbl) { break, 1 }
	`for (v in tbl):list { break, 1 }
]
for (expr in exprs) {
	Printf('`%s\n', expr)
	PrintPUnit(expr)
}

PrintTitle('Create list')
tbl = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8]
Tester(`tbl)
Tester(`(for (n in tbl):list { n }))
Tester(`(for (n in tbl):list {|i| n + i}))
Tester(`(for (n in tbl):list { if (n % 2 == 0) { continue }; n }))
Tester(`(for (n in tbl):list { (n % 2 == 0) && continue; n }))
Tester(`(for (n in tbl):list { if (n % 2 == 0) { continue }; n }))
Tester(`(for (n in tbl):list { (n % 2 == 0) && continue; n }))
Tester(`(for (n in tbl):xlist { if (n % 2 == 0) { continue }; n }))
Tester(`(for (n in tbl):xlist { (n % 2 == 0) && continue; n }))
Tester(`(for (n in tbl):list { if (n % 2 == 0) { continue('x') }; n }))
Tester(`(for (n in tbl):list { (n % 2 == 0) && continue('x'); n }))
Tester(`(for (n in tbl):list { if (n > 8) { break }; n }))
Tester(`(for (n in tbl):list { (n > 8) && break; n }))
Tester(`(for (n in tbl):list { if (n > 8) { break('end') }; n }))
Tester(`(for (n in tbl):list { (n > 8) && break('end'); n }))
Tester(`(for (n in tbl):list { if (n > 8) { break(nil) }; n }))
Tester(`(for (n in tbl):list { (n > 8) && break(nil); n }))
Tester(`(for (n in tbl):xlist { if (n > 8) { break }; n }))
Tester(`(for (n in tbl):xlist { (n > 8) && break ; n }))
Tester(`(for (n in tbl):xlist { if (n > 8) { break('end') }; n }))
Tester(`(for (n in tbl):xlist { (n > 8) && break('end') ; n }))
Tester(`(for (n in tbl):xlist { if (n > 8) { break(nil) }; n }))
Tester(`(for (n in tbl):xlist { (n > 8) && break(nil) ; n }))
/*
for (n in []) {
	Printf('%d\n', n)
}
for (n in [3, 1, 4, 1, 5]) {
	Printf('%d\n', n)
}
for (n in [3, 1, 4, 1, 5]) {|i|
	Printf('#%d %d\n', i, n)
}
for (n1 in [3, 1, 4, 1, 5], n2 in [1, 4, 1, 4, 2]) {|i|
	Printf('#%d %d %d\n', i, n1, n2)
}
for (n1 in [3, 1, 4, 1, 5], n2 in [1, 4, 1, 4, 2], n3 in [1, 7, 3, 2, 0]) {|i|
	Printf('#%d %d %d %d\n', i, n1, n2, n3)
}
for (n1 in [3, 1, 4, 1, 5], n2 in [1, 4, 1]) {|i|
	Printf('#%d %d %d\n', i, n1, n2)
}
for (n1 in [3, 1, 4, 1, 5], n2 in [1, 4, 1, 4, 2], n3 in [1, 7, 3]) {|i|
	Printf('#%d %d %d %d\n', i, n1, n2, n3)
}
*/
