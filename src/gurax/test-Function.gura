#!./gurax
import(util) {*}

TestCase('PUnit') {
	exprs = [
		`f()
		`f(1)
		`f(1, 2)
		`f(1, 2, 3, 4, 5)
		`f(1, 2, 3, 4, 5):attr1:attr2
		`f(1, 2) { f1(), f2() }
		`f(a)
		`f(a, b)
		`f(a, b, c, d, e)
		`f(a => 1)
		`f(a => 1, b => 2)
		`f(a => 1, b => 2, c => 3, d => 4, e => 5)
	]
	PrintPUnitWithLabel(exprs)
}

TestCase('return') {
	f() = return
	g() = return(3)
	Tester(`f())
	Tester(`g())
}

TestCase('Recursion') {
	Fact(n:Number) = if (n <= 1) { 1 } else { n * Fact(n - 1) }
	n = 20
	Printf('%d! = %d\n', n, Fact(n))
}

TestCase('dynamic_scope') {
	f_static() = Println('[static]  a = ', a)
	f_dynamic():dynamic_scope = Println('[dynamic] a = ', a)
	g_static() {`block} = block.Eval()
	g_dynamic():dynamic_scope {`block} = block.Eval()
	a = 'external'
	f_static()
	f_dynamic()
	g_static { Println('[static, block]  a = ', a) }
	g_dynamic { Println('[dynamic, block] a = ', a) }
	scope {
		a = 'local'
		f_static()
		f_dynamic()
		g_static { Println('[static, block]  a = ', a) }
		g_dynamic { Println('[dynamic, block] a = ', a) }
	}
}

TestCase('Named argument') {
	f1(dict%, arg%%) = {
		Println(dict)
		Println(arg)
	}
	f2(a, b, c, dict%, arg%%) = {
		Println(dict)
		Println(arg)
	}
	f1(d1 => 1, d2 => 2, d3 => 3)
	f2(10, 20, 30, d1 => 1, d2 => 2, d3 => 3)
	f2(a => 10, b => 20, c => 30, d1 => 1, d2 => 2, d3 => 3)
	f2(b => 10, c => 20, a => 30, d1 => 1, d2 => 2, d3 => 3)
}

TestCase('Cast of List Value') {
	f(a[]:Number) = Println(a):nomap
	g(a[]:String) = Println(a):nomap
	f([1, 2, 3])
	g([1, 2, 3])
}

TestCase('Quoted Value') {
	f(`x) = {
		Println(x)
		PrintPUnit(x)
	}
	f(3)
	f('str')
	f(v)
	f(v = 2)
	f(g(a, b, c))
}
