#!/usr/bin/env gurax
//==============================================================================
// test-conio.gura
//==============================================================================
import(util.tester) {*}
import(conio)

PushAnyKey(str = ' push any key ') = {
	[w, h] = conio.GetWinSize()
	conio.MoveTo((w - str.width) / 2, h / 2 - 3)
	conio.SetColor(`black, `white) { Print(str) }
	conio.WaitKey():raise
}

//------------------------------------------------------------------------------
// conio.Clear()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	strFill = Chr(0x30 + [0..9].Cycle(w - 4)).Join()
	for (region in [`left, `right, `line]) {
		conio.Clear()
		Range(h) {|y| conio.MoveTo(0, y) { Printf('%s%4d', strFill, y) }}
		str = ('Clear ' + region.ToString()).Center(20)
		[x, y] = [Int(w / 2), Int(h / 2)]
		conio.MoveTo(x - str.width / 2, 0) {
			conio.SetColor(`black, `white) { Print(str) }
		}
		conio.WaitKey():raise
		repeat(h - 1) {|i|
			conio.MoveTo(x, i + 1)
			conio.Clear(region)
			conio.Flush()
			os.Sleep(.01)
		}
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.SetColor() with blocks
//------------------------------------------------------------------------------
scope {
	[w, h] = conio.GetWinSize()
	PrintFormatted(str:String) = Println(str.Center(w, '='))
	bg = `white
	conio.Clear()
	conio.SetColor(`red, bg) {
		PrintFormatted('red')
		conio.SetColor(`blue, bg) {
			PrintFormatted('blue')
			conio.SetColor(`green, bg) {
				PrintFormatted('green')
				conio.SetColor(`yellow, bg) {
					PrintFormatted('yellow')
				}
				PrintFormatted('green again')
				conio.SetColor(`bright_red, bg)
				PrintFormatted('bright_red')
				conio.SetColor(`bright_blue, bg)
				PrintFormatted('bright_blue')
				conio.SetColor(`bright_green, bg)
				PrintFormatted('bright_green')
			}
			PrintFormatted('blue again')
		}
		PrintFormatted('red again')
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.MoveTo()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	conio.MoveTo(0, 0) {
		Print('left-top')
	}
	conio.MoveTo(0, h - 1) {
		Print('left-bottom')
	}
	conio.MoveTo(w - 12, h - 1) {
		Print('right-bottom')
	}
	conio.MoveTo(w - 9, 0) {
		Print('right-top')
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// Animation with conio.MoveTo()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	conio.MoveTo(0, 0) {
		Print('*' * w)
	}
	conio.MoveTo(0, 1 .. (h - 2)) {
		Print('*', ' ' * (w - 2), '*')
	}
	conio.MoveTo(0, h - 1) {
		Print('*' * w)
	}
	[x, y] = [Int(w / 2), Int(h / 2)]
	[xDir, yDir] = [1, 1]
	repeat(300) {
		conio.MoveTo(x, y) { Print('#') }
		conio.Flush()
		if (x + xDir == 0) {
			xDir = 1
		} elsif (x + xDir == w - 1) {
			xDir = -1
		}
		if (y + yDir == 0) {
			yDir = 1
		} elsif (y + yDir == h - 1) {
			yDir = -1
		}
		os.Sleep(.01)
		conio.MoveTo(x, y) { Print('.') }
		x += xDir, y += yDir
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.SetColor()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	colors = [
		`black, `blue, `green, `cyan, `red, `magenta, `yellow, `white
		`gray, `bright_blue, `bright_green, `bright_cyan,
		`bright_red, `bright_magenta, `bright_yellow, `bright_white
	]
	for (fg in colors) {
		for (bg in colors) {
			conio.SetColor(fg, bg) {
				Print('####')
			}
		}
		Println()
	}
	conio.MoveTo(3..20, 1..) {
		Print('hello')
	}
	PushAnyKey()
}

conio.Clear()
