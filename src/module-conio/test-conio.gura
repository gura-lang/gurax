#!/usr/bin/env gurax
//==============================================================================
// test-conio.gura
//==============================================================================
import(util.tester) {*}
import(conio)

//------------------------------------------------------------------------------
// Utilities
//------------------------------------------------------------------------------
PushAnyKey(str = ' push any key ') = {
	[w, h] = conio.GetWinSize()
	conio.MoveTo((w - str.width) / 2, h / 2 - 3)
	conio.SetColor(`black, `white) { Print(str) }
	conio.WaitKey():raise
}

//------------------------------------------------------------------------------
// conio.SetColor()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	keyDict = %{
		conio.K_CTRL_A		=> 'CTRL-A'
		conio.K_CTRL_B		=> 'CTRL-B'
		conio.K_CTRL_C		=> 'CTRL-C'
		conio.K_CTRL_D		=> 'CTRL-D'
		conio.K_CTRL_E		=> 'CTRL-E'
		conio.K_CTRL_F		=> 'CTRL-F'
		conio.K_CTRL_G		=> 'CTRL-G'
		//conio.K_CTRL_H	=> 'CTRL-H'
		//conio.K_CTRL_I	=> 'CTRL-I'
		//conio.K_CTRL_J	=> 'CTRL-J'
		conio.K_CTRL_K		=> 'CTRL-K'
		conio.K_CTRL_L		=> 'CTRL-L'
		conio.K_CTRL_M		=> 'CTRL-M'
		conio.K_CTRL_N		=> 'CTRL-N'
		conio.K_CTRL_O		=> 'CTRL-O'
		conio.K_CTRL_P		=> 'CTRL-P'
		conio.K_CTRL_Q		=> 'CTRL-Q'
		conio.K_CTRL_R		=> 'CTRL-R'
		conio.K_CTRL_S		=> 'CTRL-S'
		conio.K_CTRL_T		=> 'CTRL-T'
		conio.K_CTRL_U		=> 'CTRL-U'
		conio.K_CTRL_V		=> 'CTRL-V'
		conio.K_CTRL_W		=> 'CTRL-W'
		conio.K_CTRL_X		=> 'CTRL-X'
		conio.K_CTRL_Y		=> 'CTRL-Y'
		conio.K_CTRL_Z		=> 'CTRL-Z'
		conio.K_BACKSPACE	=> 'BACKSPACE'
		conio.K_TAB			=> 'TAB'
		conio.K_RETURN		=> 'RETURN'
		conio.K_ESCAPE		=> 'ESCAPE'
		conio.K_SPACE		=> 'SPACE'
		conio.K_UP			=> 'UP'
		conio.K_DOWN		=> 'DOWN'
		conio.K_RIGHT		=> 'RIGHT'
		conio.K_LEFT		=> 'LEFT'
		conio.K_INSERT		=> 'INSERT'
		conio.K_HOME		=> 'HOME'
		conio.K_END			=> 'END'
		conio.K_PAGEUP		=> 'PAGEUP'
		conio.K_PAGEDOWN	=> 'PAGEDOWN'
		conio.K_DELETE		=> 'DELETE'
	}
	repeat {
		Printf('Hit any key (Ctrl-C to quit): ')
		ch = conio.WaitKey()
		keyName = keyDict.Get(ch)
		if (keyName) {
			Printf('0x%02x %s\n', ch, keyName)
		} elsif (!(str = Chr(ch)).IsEmpty()) {
			Printf('0x%02x \'%s\'\n', ch, str)
		} else {
			Printf('0x%02x\n', ch)
		}
		(ch == conio.K_CTRL_C) && break
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.Clear()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	strFill = Chr(0x30 + [0..9].Cycle(w - 4)).Join()
	for (region in [`left, `right, `line]) {
		conio.Clear()
		Range(h) {|y| conio.MoveTo(0, y) { Printf('%s%4d', strFill, y) }}
		str = ('Clear ' + region.__str__()).Center(20)
		[x, y] = [Int(w / 2), Int(h / 2)]
		conio.MoveTo(x - str.width / 2, 0) {
			conio.SetColor(`black, `white) { Print(str) }
		}
		conio.WaitKey():raise
		repeat(h - 1) {|i|
			conio.MoveTo(x, i + 1)
			conio.Clear(region)
			conio.Flush()
			os.Sleep(.01)
		}
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.SetColor() with blocks
//------------------------------------------------------------------------------
scope {
	[w, h] = conio.GetWinSize()
	PrintFormatted(str:String) = Println(str.Center(w, '='))
	bg = `white
	conio.Clear()
	conio.SetColor(`red, bg) {
		PrintFormatted('red')
		conio.SetColor(`blue, bg) {
			PrintFormatted('blue')
			conio.SetColor(`green, bg) {
				PrintFormatted('green')
				conio.SetColor(`yellow, bg) {
					PrintFormatted('yellow')
				}
				PrintFormatted('green again')
				conio.SetColor(`brightRed, bg)
				PrintFormatted('brightRed')
				conio.SetColor(`brightBlue, bg)
				PrintFormatted('brightBlue')
				conio.SetColor(`brightGreen, bg)
				PrintFormatted('brightGreen')
			}
			PrintFormatted('blue again')
		}
		PrintFormatted('red again')
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.MoveTo()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	conio.MoveTo(0, 0) {
		Print('left-top')
	}
	conio.MoveTo(0, h - 1) {
		Print('left-bottom')
	}
	conio.MoveTo(w - 12, h - 1) {
		Print('right-bottom')
	}
	conio.MoveTo(w - 9, 0) {
		Print('right-top')
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// Animation with conio.MoveTo()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	[w, h] = conio.GetWinSize()
	conio.MoveTo(0, 0) {
		Print('*' * w)
	}
	conio.MoveTo(0, 1 .. (h - 2)) {
		Print('*', ' ' * (w - 2), '*')
	}
	conio.MoveTo(0, h - 1) {
		Print('*' * w)
	}
	[x, y] = [Int(w / 2), Int(h / 2)]
	[xDir, yDir] = [1, 1]
	repeat(300) {
		conio.MoveTo(x, y) { Print('#') }
		conio.Flush()
		if (x + xDir == 0) {
			xDir = 1
		} elsif (x + xDir == w - 1) {
			xDir = -1
		}
		if (y + yDir == 0) {
			yDir = 1
		} elsif (y + yDir == h - 1) {
			yDir = -1
		}
		os.Sleep(.01)
		conio.MoveTo(x, y) { Print('.') }
		x += xDir, y += yDir
	}
	PushAnyKey()
}

//------------------------------------------------------------------------------
// conio.SetColor()
//------------------------------------------------------------------------------
scope {
	conio.Clear()
	colors = [
		`black, `blue, `green, `cyan, `red, `magenta, `yellow, `white
		`gray, `brightBlue, `brightGreen, `brightCyan,
		`brightRed, `brightMagenta, `brightYellow, `brightWhite
	]
	for (fg in colors) {
		for (bg in colors) {
			conio.SetColor(fg, bg) {
				Print('####')
			}
		}
		Println()
	}
	conio.MoveTo(3..20, 1..) {
		Print('hello')
	}
	PushAnyKey()
}



conio.Clear()
