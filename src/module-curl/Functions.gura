#!/usr/bin/env gurax
import(cbridge)

r = cbridge.Renderer()

//------------------------------------------------------------------------------
// Type Information
//------------------------------------------------------------------------------
cbridge.Renderer.DeclareType_Entity(decl:String, cType:String, vtypeFullName:String) = \
this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	auto& value_${varName} = args_gurax.Pick<Value_${this.vtype}>();
	${this.cType}& ${varName} = value_${varName}.GetEntity();
	'''
	codePickerVec = R'''
	auto ${varName} = args_gurax.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	return new Value_${this.vtype}(rtn);
	''')

cbridge.Renderer.DeclareType_EntityPtr(decl:String, cType:String, vtypeFullName:String) = \
this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	auto& value_${varName} = args_gurax.Pick<Value_${this.vtype}>();
	${this.cType} ${varName} = value_${varName}.GetEntityPtr();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Value_${this.vtype}>().GetEntityPtr() : nullptr;
	'''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	if (!rtn) return Value::nil();
	return new Value_${this.vtype}(rtn);
	''')

cbridge.Renderer.DeclareType_EntityPtrEx(decl:String, cType:String, vtypeFullName:String) = \
this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	auto& value_${varName} = args_gurax.Pick<Value_${this.vtype}>();
	${this.cType} ${varName} = value_${varName}.GetEntityPtr();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Value_${this.vtype}>().GetEntityPtr() : nullptr;
	'''
	codeFunctionBody = R'''
	${this.cType} rtn = ${caller};
	if (!rtn) return Value::nil();
	return new Value_${this.vtype}(processor_gurax.Reference(), rtn);
	''')

r.DeclareType_Number('CURLcode')
r.DeclareType_Number('CURLUcode')
r.DeclareType_Number('CURLSHcode')
r.DeclareType_Number('CURLFORMcode')
r.DeclareType_Number('CURLoption')
r.DeclareType_Number('CURLINFO')
r.DeclareType_Number('CURLUPart')
r.DeclareType_Pointer('const_char_p_data', 'const char*')

r.DeclareType_EntityPtrEx('CURL_p', 'CURL*', 'CURL')
r.DeclareType_EntityPtr('CURLU_p', 'CURLU*', 'CURLU')
r.DeclareType_EntityPtr('curl_mime_p', 'curl_mime*', 'curl_mime')
r.DeclareType_EntityPtr('curl_mimepart_p', 'curl_mimepart*', 'curl_mimepart')
r.DeclareType_EntityPtr('curl_slist_p', 'curl_slist*', 'curl_slist')

//------------------------------------------------------------------------------
// Function Registration
//------------------------------------------------------------------------------
// easy.h
r.Register('curl') {

curl_easy_init():CURL_p

curl_easy_setopt(curl:CURL_p, option:CURLoption, value:any) = \
	R'''
	CURLcode code = CURLE_OK;
	if (!value_curl.GetOpt().SetItem(option, value, &code)) return Value::nil();
	return new Value_Number(code);
	'''

curl_easy_perform(curl:CURL_p):CURLcode

curl_easy_cleanup(curl:CURL_p):void

curl_easy_getinfo(curl:CURL_p, info:CURLINFO) = \
	R'''
	return value_curl.GetInfo().GetItem(info);
	'''

curl_easy_duphandle(curl:CURL_p):CURL_p

curl_easy_reset(curl:CURL_p):void

//CURLcode curl_easy_recv(curl:CURL_p, void *buffer, size_t buflen, size_t *n);

//CURLcode curl_easy_send(curl:CURL_p, const void *buffer, size_t buflen, size_t *n);

curl_easy_upkeep(curl:CURL_p):CURLcode;

}

// curl.h
r.Register('curl') {

//curl_strequal(s1:const_char_p, s2:const_char_p):int;

//curl_strnequal(s1:const_char_p, s2:const_char_p, size_t n):int;

curl_mime_init(easy:CURL_p):curl_mime_p;

curl_mime_free(mime:curl_mime_p):void;

curl_mime_addpart(mime:curl_mime_p):curl_mimepart_p;

curl_mime_name(part:curl_mimepart_p, name:const_char_p):CURLcode

curl_mime_filename(part:curl_mimepart_p, filename:const_char_p):CURLcode

curl_mime_type(part:curl_mimepart_p, mimetype:const_char_p):CURLcode

curl_mime_encoder(part:curl_mimepart_p, encoding:const_char_p):CURLcode

curl_mime_data(part:curl_mimepart_p, data:const_char_p_data, datasize:size_t):CURLcode

curl_mime_filedata(part:curl_mimepart_p, filename:const_char_p):CURLcode

//curl_mime_data_cb(part:curl_mimepart_p, curl_off_t datasize, curl_read_callback readfunc, curl_seek_callback seekfunc, curl_free_callback freefunc, void *arg):CURLcode

curl_mime_subparts(part:curl_mimepart_p, subparts:curl_mime_p):CURLcode

curl_mime_headers(part:curl_mimepart_p, headers:curl_slist_p, take_ownership:int):CURLcode

/*
curl_formadd(struct curl_httppost **httppost, struct curl_httppost **last_post, ...):CURLFORMcode

curl_formget(form:curl_httppost_p, void *arg, curl_formget_callback append):int

curl_formfree(form:curl_httppost_p):void
*/

/*
char *curl_getenv(variable:const_char_p);

char *curl_version(void);

char *curl_easy_escape(handle:CURL_p, string:const_char_p, int length);

char *curl_escape(string:const_char_p, string:const_char_p, int length);

char *curl_easy_unescape(handle:CURL_p, string:const_char_p, int length, int *outlength);

char *curl_unescape(string:const_char_p, int length);
*/

curl_free(value:any):void = \
	R'''
	return Value::nil();
	'''

/*
curl_global_init(long flags):CURLcode

curl_global_init_mem(long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c):CURLcode

curl_global_cleanup(void):void

CURLsslset curl_global_sslset(curl_sslbackend id, const char *name, const curl_ssl_backend ***avail);
*/

curl_slist_append(slist:curl_slist_p:nil, str:const_char_p):curl_slist_p

curl_slist_free_all(slist:curl_slist_p):void

/*
time_t curl_getdate(p:const_char_p, const time_t *unused);

CURLSH *curl_share_init(void);

CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);

CURLSHcode curl_share_cleanup(CURLSH *);

curl_version_info_data *curl_version_info(CURLversion);
*/

curl_easy_strerror(code:CURLcode):const_char_p

curl_share_strerror(code:CURLSHcode):const_char_p

curl_easy_pause(handle:CURL_p, bitmask:int):CURLcode

curl_url():CURLU_p

curl_url_cleanup(handle:CURLU_p):void

curl_url_dup(inhandle:CURLU_p):CURLU_p

curl_url_get(url:CURLU_p, what:CURLUPart, flags:unsigned_int) = \
	R'''
	char* part;
	CURLUcode code = curl_url_get(url, what, &part, flags);
	if (code != CURLE_OK) {
		Error::Issue(ErrorType::GuestError, "error in handling URL");
		return Value::nil();
	}
	RefPtr<Value> pValueRtn(new Value_String(part));
	curl_free(part);
	return pValueRtn.release();
	'''

curl_url_set(url:CURLU_p, part:CURLUPart, content:const_char_p, flags:unsigned_int):CURLUcode

}

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(curl)

${r.ComposeImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeAssignment('frame.')}
}

Gurax_EndModuleScope(curl)
'''.Render('Functions.cpp')
