#!/usr/bin/env gurax
//==============================================================================
// test-ml_cifar.gura
//==============================================================================
import(util.tester) {*}
import(tar)
import(png)
import(ml.cifar)
import(ml.cifar10)
import(ml.cifar100)

Println('Reading Cifar10')
db10 = ml.cifar10.Database('.')
Println('Reading Cifar100')
db100 = ml.cifar100.Database('.')

TestCase('Basic test') {
	Printf('Cifar10: nChannels=%d, nRows=%d, nCols=%d, nClasses=%d\n', db10.nChannels, db10.nRows, db10.nCols, db10.nClasses)
	Printf('Cifar100: nChannels=%d, nRows=%d, nCols=%d, nClasses=%d\n', db100.nChannels, db100.nRows, db100.nCols, db100.nClasses)
	//Printf('%s\n', db10.train.imageSet)
	//Printf('%s\n', db10.train.labelSet)
	//Printf('%s\n', db10.test.imageSet)
	//Printf('%s\n', db10.test.labelSet)
	//Printf('%s\n', db100.train.imageSet)
	//Printf('%s\n', db100.train.labelSet)
	//Printf('%s\n', db100.test.imageSet)
	//Printf('%s\n', db100.test.labelSet)
}

TestCase('ml.cifar.SampleSet#Each()') {
	[db10, db100].Each {|db|
		db.train.Each(`float).Head(8 * 3) {|sample|
			if (sample.hasSuperClass) {
				Printf('%s : %s\n', sample.labelName:fine, sample.labelName:super)
			} else {
				Printf('%s\n', sample.labelName)
			}
			ml.cifar.PrintImage(sample.input, guideFlag = false)
		}
		db.train.Each(`float):fine.Head(8) {|sample|
			Printf('Fine: label=%d, labelName=%s, result=%s\n', sample.label, sample.labelName, sample.result)
		}
		try {
			db.train.Each(`float):super.Head(8) {|sample|
				Printf('Super: label=%d, labelName=%s, result=%s\n', sample.label, sample.labelName, sample.result)
			}
		} catch {|e| Println(e.text)}
	}
}

TestCase('ml.cifar.SampleSet#EachBatch()') {
	[db10, db100].Each {|db|
		db.train.EachBatch(8, `float).Head(3) {|sample|
			repeat (sample.input.shape[0]) {|i|
				if (sample.hasSuperClass) {
					Printf('%s : %s\n', sample.labelNames[i]:fine, sample.labelNames[i]:super)
				} else {
					Printf('%s\n', sample.labelNames[i])
				}
				ml.cifar.PrintImage(sample.input[i], guideFlag = false)
			}
		}
		db.train.EachBatch(8, `float):fine.Head(1) {|sample|
			repeat (8) {|i|
				Printf('Fine: label=%d, labelName=%s, result=%s\n', sample.labels[i], sample.labelNames[i], sample.result[i])
			}
		}
		try {
			db.train.EachBatch(8, `float):super.Head(1) {|sample|
				repeat (8) {|i|
					Printf('Super: label=%d, labelName=%s, result=%s\n', sample.labels[i], sample.labelNames[i], sample.result[i])
				}
			}
		} catch {|e| Println(e.text)}
	}
}

TestCase('ml.cifar.SampleSet#Get()') {
	[db10, db100].Each {|db|
		repeat (8 * 3) {|i|
			sample = db.train.Get(i, `float)
			if (sample.hasSuperClass) {
				Printf('%s : %s\n', sample.labelName:fine, sample.labelName:super)
			} else {
				Printf('%s\n', sample.labelName)
			}
			ml.cifar.PrintImage(sample.input, guideFlag = false)
		}
		repeat (8) {|i|
			sample = db.train.Get(i, `float):fine
			Printf('Fine: label=%d, labelName=%s, result=%s\n', sample.label, sample.labelName, sample.result)
		}
		try {
			repeat (8) {|i|
				sample = db.train.Get(i, `float):super
				Printf('Super: label=%d, labelName=%s, result=%s\n', sample.label, sample.labelName, sample.result)
			}
		} catch {|e| Println(e.text)}
	}
}

TestCase('ml.cifar.SampleSet#Shuffle()') {
	rand = Random(0)
	[db10, db100].Each {|db|
		repeat (3) {
			db.train.Shuffle(rand)
			sample = db.train.EachBatch(32, `float).NextValue()
			Println(sample.labels.Each():iter {|label| Format('%d', label)}.Join(','))
		}
	}
}
