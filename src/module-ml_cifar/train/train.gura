#!/usr/bin/env gurax
import(util.tester) {*}
import(ml)
cifar = import(ml.cifar100)

db = cifar.Database('..')
optimizer = ml.Optimizer.GradientDescent(0.01)
//------------------------------------------------------------------------------
model = `{
	t0 = image |*| reshape
	t1 = t0 |*| conv1 |*| ml.ReLU() |*| pool1
	t2 = t1 |*| ml.Flatten(3)
	t3 = t2 |*| linear1 |*| ml.ReLU()
	t4 = t3 |*| linear2
	t5 = t4 |*| ml.Softmax()
}
reshape = ml.Reshape(nil, 3, db.nRows, db.nCols)
conv1 = ml.Conv2d(nFilters = 30, nRowsFilter = 5, nColsFilter = 5, stride = 1, padding = 0)
pool1 = ml.MaxPool2d(nRowsKernel = 2, nColsKernel = 2, stride = 2)
linear1 = ml.Linear(100)
linear2 = ml.Linear(db.nClasses)
//------------------------------------------------------------------------------
nEpochs = 100
batchSize = 16
nIterations = 100
Printf('Training with %d samples [Image Size:%dx%d, Classes:%d] -- Press Q to abort the process.\n',
	cond(!nIterations || db.train.nSamples < batchSize * nIterations, db.train.nSamples, batchSize * nIterations),
	db.nRows, db.nCols, db.nClasses)
ml.Trainer(model, optimizer, `image) {|trainer|
	repeat (nEpochs) {|iEpoch|
		db.train.EachBatch(`float, batchSize = batchSize).Head(nIterations) {|sample|
			trainer.Train(sample.result, sample.input)
			sampleLast = sample
		}
		Printf('Epoch#%d error=%g\n', iEpoch + 1, trainer.CalcMeanSquaredError(sampleLast.result))
		ml.KeyAbort(Ord('q')) && break
	}
	trainer.CreateModule('recog')
}
