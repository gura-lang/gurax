#!/usr/bin/env gurax

//------------------------------------------------------------------------------
// ErrorDone
//------------------------------------------------------------------------------
ErrorDone(expr:Expr, msg:String) = {
	sys.cerr.Printf('line.%d: %s\n', expr.lineNoTop, msg)
	sys.Exit(1)
}

//------------------------------------------------------------------------------
// TypeInfo
//------------------------------------------------------------------------------
TypeInfo = class {
	decl:String
	cType:String
	vtype:String
	tmplPicker:Template
	tmplPickerVec:Template
	tmplFunctionBody:Template
	map:static = %{}
	__init__(decl:String, cType:String, vtype:String,
			codePicker:String, codePickerVec:String, codeFunctionBody:String) = {
		this.decl = decl, this.cType = cType, this.vtype = vtype
		this.tmplPicker = Template().Parse(codePicker)
		this.tmplPickerVec = Template().Parse(codePickerVec)
		this.tmplFunctionBody = Template().Parse(codeFunctionBody)
		this.map[this.decl] = this
	}
	ComposePicker(varName:String) = this.tmplPicker.Eval()
	ComposePickerVec(varName:String) = this.tmplPickerVec.Eval()
	ComposeFunctionBody(caller:String) = this.tmplFunctionBody.Eval()
}

TypeInfo_Number(decl:String, cType:String) = TypeInfo(decl, cType, 'Number',
R'''
${this.cType} ${varName} = args.PickNumber<${this.cType}>();
''', R'''
auto ${varName} = args.PickVector<${this.cType}>();
''', R'''
${this.cType} rtn = ${caller};
return new Value_${this.vtype}(rtn);
''')

TypeInfo_Number('char', 'char')
TypeInfo_Number('short', 'short')
TypeInfo_Number('long', 'long')
TypeInfo_Number('int', 'int')
TypeInfo_Number('float', 'float')
TypeInfo_Number('double', 'double')
TypeInfo_Number('long_long', 'long long')
TypeInfo_Number('unsigned_char', 'unsigned char')
TypeInfo_Number('unsigned_short', 'unsigned short')
TypeInfo_Number('unsigned_long', 'unsigned long')
TypeInfo_Number('unsigned_int', 'unsigned int')
TypeInfo_Number('unsigned_long_long', 'unsigned long long')
TypeInfo_Number('Char', 'Char')
TypeInfo_Number('UChar', 'UChar')
TypeInfo_Number('Short', 'Short')
TypeInfo_Number('UShort', 'UShort')
TypeInfo_Number('Int', 'Int')
TypeInfo_Number('UInt', 'UInt')
TypeInfo_Number('Long', 'Long')
TypeInfo_Number('ULong', 'ULong')
TypeInfo_Number('Int8', 'Int8')
TypeInfo_Number('UInt8', 'UInt8')
TypeInfo_Number('Int16', 'Int16')
TypeInfo_Number('UInt16', 'UInt16')
TypeInfo_Number('Int32', 'Int32')
TypeInfo_Number('UInt32', 'UInt32')
TypeInfo_Number('Int64', 'Int64')
TypeInfo_Number('UInt64', 'UInt64')
TypeInfo_Number('Float', 'Float')
TypeInfo_Number('Double', 'Double')

@(TypeInfo) {
	{ 'bool', 'bool', 'Bool',
		R'''
		${this.cType} ${varName} = args.PickBool();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>();
		''', R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''' }
	{ 'Bool', 'Bool', 'Bool',
		R'''
		${this.cType} ${varName} = args.PickBool();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>();
		''', R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''' }
	{ 'const_char_p', 'const char*', 'String',
		R'''
		${this.cType} ${varName} = args.PickString();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>();
		''', R'''
		if (${this.cType} rtn = ${caller}) {
			return new Value_${this.vtype}(rtn);
		}
		return Value::nil();
		''' }
}

//------------------------------------------------------------------------------
// ArgInfo
//------------------------------------------------------------------------------
ArgInfo = class {
	name:String
	type:String
	optionFlag:Bool
	typeInfo:TypeInfo
	tmplDeclaration:Template:static
	tmplImplementation:Template:static
	__init__(name:String, type:String, optionFlag:Bool) = {
		this.name = name, this.type = type, this.optionFlag = optionFlag
		this.typeInfo = TypeInfo.map[type]
	}
	ComposeDeclaration() = this.tmplDeclaration.Eval()
	ComposeImplementation() = this.typeInfo.ComposePicker(this.name)
}

ArgInfo.tmplDeclaration = tR'''
DeclareArg("${this.name}", VTYPE_${this.typeInfo.vtype}, ArgOccur::${cond(this.optionFlag, 'ZeroOrOnce', 'Once')}, ArgFlag::None);
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
FuncInfo = class {
	name:String
	type:String
	typeInfo:TypeInfo
	argInfoTbl[]:ArgInfo = []
	tmplFunctionBody:Template
	tmplImplementation:Template:static
	tmplAssignment:Template:static
	ComposeImplementation() = this.tmplImplementation.Eval()
	__init__(name:String, type:String, codeFunctionBody:String:nil) = {
		this.name = name, this.type = type
		if (type != 'void') { this.typeInfo = TypeInfo.map[type] }
		if (codeFunctionBody) { this.tmplFunctionBody = Template().Parse(codeFunctionBody) }
	}
	ComposeCaller() = {
		Format('%s(%s)', this.name, this.argInfoTbl:*name.Join(', ')) 
	}
}

FuncInfo.tmplImplementation = tR'''
// ${this.name}()
Gurax_DeclareFunction(${this.name})
{
	Declare(VTYPE_Any, Flag::None);
	${this.argInfoTbl::ComposeDeclaration()}
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunction(${this.name})
{
	// Arguments
	ArgPicker args(argument);
	${this.argInfoTbl::ComposeImplementation()}
	// Function body
	${if (this.tmplFunctionBody)}
	${this.tmplFunctionBody.Eval()}
	${elsif (this.typeInfo)}
	${this.typeInfo.ComposeFunctionBody(this.ComposeCaller())}
	${else}
	${this.ComposeCaller()};
	return Value::nil();
	${end}
}
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
Render(stream:Stream:w = sys.cout) {`block} = {
	funcInfoTbl = []
	block.EachElem {|exprElem|
		codeFunctionBody = nil
		if (exprElem.IsAssign()) {
			!exprElem.right.IsString() && ErrorDone(exprElem, 'assigned value must be a string')
			codeFunctionBody = exprElem.right.string
			exprElem = exprElem.left
		}
		!exprElem.IsCaller() && ErrorDone(expr, 'Caller is expected')
		!exprElem.car.IsIdentifier() && ErrorDone(exprElem, 'Identifier is expected')
		funcInfo = FuncInfo(exprElem.car.symbolName, exprElem.attr.dottedName, codeFunctionBody)
		funcInfoTbl.Add(funcInfo)
		exprElem.EachParam {|exprParam|
			//Println(exprParam)
			optionFlag = false
			if (exprParam.IsUnaryOp()) {
				if (exprParam.operator.symbol == `?) {
					optionFlag = true
				} else {
					ErrorDone(exprParam, 'invalid format of parameter')
				}
				exprParam = exprParam.child
			}
			!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
			argInfo = ArgInfo(exprParam.symbolName, exprParam.attr.dottedName, optionFlag)
			funcInfo.argInfoTbl.Add(argInfo)
		}
	}
	tmplFile.Render(stream)
}

tmplFile = tR'''
${funcInfoTbl:*ComposeImplementation().Join('\n')}

void Prepare(Frame& frameOuter)
{
	${funcInfoTbl.Each {|funcInfo|}}
	frameOuter.Assign(Gurax_CreateFunction(${funcInfo.name}));
	${end}
}
'''
