#!/usr/bin/env gurax
import(cbridge)

r = cbridge.Renderer()

//------------------------------------------------------------------------------
// Type Information
//------------------------------------------------------------------------------
r.DeclareType('int_ErrorIfFalse', 'int', 'Nil',
	codeFunctionBody = R'''
	if (${caller} != GLFW_TRUE) IssueError();
	return Value::nil();
	''')

r.DeclareType('int_Bool', 'int', 'Bool',
	codeFunctionBody = R'''
	bool rtn =(${caller} == GLFW_TRUE);
	return new Value_Bool(rtn);
	''')

r.DeclareType('GLFWimage', 'GLFWimage', 'glfw.GLFWimage',
	codePicker = R'''
	${this.cType}& ${varName} = *args.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = ''
	codePickerVec = R'''
	auto ${varName} = args.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn);
	}
	IssueError();
	return Value::nil();
	''')

cbridge.Renderer.DeclareType_Entity(decl:String, cType:String, vtypeFullName:String) = \
	this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	${this.cType} ${varName} = args.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args.IsValid()? args.Pick<Value_${this.vtype}>().GetEntity() : nullptr;
	'''
	codePickerVec = R'''
	auto ${varName} = args.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn);
	}
	IssueError();
	return Value::nil();
	''')

cbridge.Renderer.DeclareType_EntityEx(decl:String, cType:String, vtypeFullName:String) = \
	this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	${this.cType} ${varName} = args.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args.IsValid()? args.Pick<Value_${this.vtype}>().GetEntity() : nullptr;
	'''
	codePickerVec = R'''
	auto ${varName} = args.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn, processor.Reference());
	}
	IssueError();
	return Value::nil();
	''')

r.DeclareType_Entity('GLFWcursor_p', 'GLFWcursor*', 'glfw.GLFWcursor')
r.DeclareType_Entity('const_GLFWimage_p', 'const GLFWimage*', 'glfw.GLFWimage')
r.DeclareType_Entity('const_GLFWgammaramp_p', 'const GLFWgammaramp*', 'glfw.GLFWgammaramp')
r.DeclareType_Entity('const_GLFWvidmode_p', 'const GLFWvidmode*', 'glfw.GLFWvidmode')
r.DeclareType_Entity('GLFWmonitor_p', 'GLFWmonitor*', 'glfw.GLFWmonitor')
r.DeclareType_EntityEx('GLFWwindow_p', 'GLFWwindow*', 'glfw.GLFWwindow')

//------------------------------------------------------------------------------
// Function Registration: Context
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwMakeContextCurrent(window:GLFWwindow_p):void
 
glfwGetCurrentContext():GLFWwindow_p
 
glfwSwapInterval(interval:int):void
 
glfwExtensionSupported(extension:const_char_p):int_Bool
 
//glfwGetProcAddress(procname:const_char_p):GLFWglproc
 
}

//------------------------------------------------------------------------------
// Function Registration: Initialization, version and error
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwInit():int_ErrorIfFalse

glfwTerminate():void

glfwInitHint(hint:int, value:int):void

glfwGetVersion():any = \
	R'''
	int major, minor, rev;
	glfwGetVersion(&major, &minor, &rev);
	return Value_List::Create(new Value_Number(major), new Value_Number(minor), new Value_Number(rev));
	'''

glfwGetVersionString():const_char_p

glfwGetError():String = \
	R'''
	const char* description;
	glfwGetError(&description);
	return description? new Value_String(description) : Value::nil();
	'''

glfwSetErrorCallback(callback:Function:nil):void = \
	R'''
	glfwSetErrorCallback(callback? callback_ErrorCallback : nullptr);
	g_pProcessor_ErrorCallback.reset(callback? processor.Reference() : nullptr);
	g_pFunc_ErrorCallback.reset(callback.release());
	return Value::nil();
	'''
}

//------------------------------------------------------------------------------
// Function Registration: Input
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwGetInputMode(window:GLFWwindow_p, mode:int):int

glfwSetInputMode(window:GLFWwindow_p, mode:int, value:int):void

glfwRawMouseMotionSupported():int_Bool

glfwGetKeyName(key:int, scancode:int):const_char_p_NilIfNull

glfwGetKeyScancode(key:int):int

glfwGetKey(window:GLFWwindow_p, key:int):int

glfwGetMouseButton(window:GLFWwindow_p, button:int):int

glfwGetCursorPos(window:GLFWwindow_p):any = \
	R'''
	double xpos, ypos;
	glfwGetCursorPos(window, &xpos, &ypos);
	return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''

glfwSetCursorPos(window:GLFWwindow_p, xpos:double, ypos:double):void

glfwCreateCursor(image:const_GLFWimage_p, xhot:int, yhot:int):GLFWcursor_p

glfwCreateStandardCursor(shape:int):GLFWcursor_p

glfwDestroyCursor(cursor:GLFWcursor_p):void

glfwSetCursor(window:GLFWwindow_p, cursor:GLFWcursor_p):void

glfwSetKeyCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetKeyCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_KeyCallback : nullptr);
	valueThis.SetFunc_KeyCallback(callback.release());
	return Value::nil();
	'''

glfwSetCharCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCharCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CharCallback : nullptr);
	valueThis.SetFunc_CharCallback(callback.release());
	return Value::nil();
	'''

glfwSetCharModsCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCharModsCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CharModsCallback : nullptr);
	valueThis.SetFunc_CharModsCallback(callback.release());
	return Value::nil();
	'''

glfwSetMouseButtonCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetMouseButtonCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_MouseButtonCallback : nullptr);
	valueThis.SetFunc_MouseButtonCallback(callback.release());
	return Value::nil();
	'''

glfwSetCursorPosCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCursorPosCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CursorPosCallback : nullptr);
	valueThis.SetFunc_CursorPosCallback(callback.release());
	return Value::nil();
	'''

glfwSetCursorEnterCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCursorEnterCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CursorEnterCallback : nullptr);
	valueThis.SetFunc_CursorEnterCallback(callback.release());
	return Value::nil();
	'''

glfwSetScrollCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetScrollCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_ScrollCallback : nullptr);
	valueThis.SetFunc_ScrollCallback(callback.release());
	return Value::nil();
	'''

glfwSetDropCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetDropCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_DropCallback : nullptr);
	valueThis.SetFunc_DropCallback(callback.release());
	return Value::nil();
	'''

glfwJoystickPresent(jid:int):int

glfwGetJoystickAxes(jid:int):any = \
	R'''
	int count;
	if (const float* rtn = glfwGetJoystickAxes(jid, &count)) {
		return Value_List::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickButtons(jid:int):any = \
	R'''
	int count;
	if (const unsigned char* rtn = glfwGetJoystickButtons(jid, &count)) {
		return Value_List::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickHats(jid:int):any = \
	R'''
	int count;
	if (const unsigned char* rtn = glfwGetJoystickHats(jid, &count)) {
		return Value_List::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickName(jid:int):const_char_p_NilIfNull

glfwGetJoystickGUID(jid:int):const_char_p_NilIfNull

//glfwSetJoystickUserPointer(jid:int, pointer:void_p)

//glfwGetJoystickUserPointer(jid:int):void_p

glfwJoystickIsGamepad(jid:int):int_Bool

glfwSetJoystickCallback(jid:int, callback:Function:nil):void = \
	R'''
	//glfwSetJoystickCallback(jid,
	//		callback? Value_GLFWwindow::callback_JoystickCallback : nullptr);
	//valueThis.SetFunc_JoystickCallback(callback.release());
	return Value::nil();
	'''

glfwUpdateGamepadMappings(string:const_char_p):int_ErrorIfFalse

glfwGetGamepadName(jid:int):const_char_p_NilIfNull

//glfwGetGamepadState()

glfwSetClipboardString(window:GLFWwindow_p, string:const_char_p):void

glfwGetClipboardString(window:GLFWwindow_p):const_char_p_NilIfNull

glfwGetTime():double

glfwSetTime(time:double):void

glfwGetTimerValue():uint64_t

glfwGetTimerFrequency():uint64_t

}

//------------------------------------------------------------------------------
// Function Registration: Monitor
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwGetMonitors():any = \
	R'''
	int count;
	GLFWmonitor** rtn = glfwGetMonitors(&count);
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (int i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_GLFWmonitor(rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''

glfwGetPrimaryMonitor():GLFWmonitor_p
 
glfwGetMonitorPos(monitor:GLFWmonitor_p):any = \
	R'''
	int xpos, ypos;
	glfwGetMonitorPos(monitor, &xpos, &ypos);
	return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''
 
glfwGetMonitorWorkarea(monitor:GLFWmonitor_p):any = \
	R'''
	int xpos, ypos, width, height;
	glfwGetMonitorWorkarea(monitor, &xpos, &ypos, &width, &height);
	return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos),
						new Value_Number(width), new Value_Number(height));
	'''
 
glfwGetMonitorPhysicalSize(monitor:GLFWmonitor_p):any = \
	R'''
	int widthMM, heightMM;
	glfwGetMonitorPhysicalSize(monitor, &widthMM, &heightMM);
	return Value_List::Create(new Value_Number(widthMM), new Value_Number(heightMM));
	'''
 
glfwGetMonitorContentScale(monitor:GLFWmonitor_p):any = \
	R'''
	float xscale, yscale;
	glfwGetMonitorContentScale(monitor, &xscale, &yscale);
	return Value_List::Create(new Value_Number(xscale), new Value_Number(yscale));
	'''
 
glfwGetMonitorName(monitor:GLFWmonitor_p):const_char_p
 
//glfwSetMonitorUserPointer(monitor:GLFWmonitor_p, pointer:void_p)
 
//glfwGetMonitorUserPointer(monitor:GLFWmonitor_p):void_p
 
glfwSetMonitorCallback(callback:Function:nil):void = \
	R'''
	glfwSetMonitorCallback(callback? callback_MonitorCallback : nullptr);
	g_pProcessor_MonitorCallback.reset(callback? processor.Reference() : nullptr);
	g_pFunc_MonitorCallback.reset(callback.release());
	return Value::nil();
	'''
 
glfwGetVideoModes(monitor:GLFWmonitor_p):any = \
	R'''
	int count;
	const GLFWvidmode* rtn = glfwGetVideoModes(monitor, &count);
	if (!rtn) return Value::nil();
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (int i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_GLFWvidmode(&rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''
 
glfwGetVideoMode(monitor:GLFWmonitor_p):const_GLFWvidmode_p
 
glfwSetGamma(monitor:GLFWmonitor_p, gamma:float):void
 
glfwGetGammaRamp(monitor:GLFWmonitor_p):const_GLFWgammaramp_p
 
glfwSetGammaRamp(monitor:GLFWmonitor_p, ramp:const_GLFWgammaramp_p):void

}

//------------------------------------------------------------------------------
// Function Registration: Native Access
//------------------------------------------------------------------------------
r.Register('glfw') {
}

//------------------------------------------------------------------------------
// Function Registration: Vulkan
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwVulkanSupported():int_Bool
 
glfwGetRequiredInstanceExtensions():any = \
	R'''
	uint32_t count;
	const char** rtn = glfwGetRequiredInstanceExtensions(&count);
	if (!rtn) return Value::nil();
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (uint32_t i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_String(rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''
 
//glfwGetInstanceProcAddress(instance:VkInstance, procname:const_char_p):GLFWvkproc
 
//glfwGetPhysicalDevicePresentationSupport(instance:VkInstance, device:VkPhysicalDevice, queuefamily:uint32_t):int_Bool
 
//glfwCreateWindowSurface(instance:VkInstance, window:GLFWwindow_p, allocator:const_VkAllocationCallbacks_p, surface:VkSurfaceKHR_p):VkResult

}


//------------------------------------------------------------------------------
// Function Registration: Window
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwDefaultWindowHints():void

glfwWindowHint(hint:int, value:int):void

glfwWindowHintString(hint:int, value:const_char_p):void

glfwCreateWindow(width:int, height:int, title:const_char_p, monitor:GLFWmonitor_p:nil, share:GLFWwindow_p:nil):GLFWwindow_p

glfwDestroyWindow(window:GLFWwindow_p):void

glfwWindowShouldClose(window:GLFWwindow_p):bool

glfwSetWindowShouldClose(window:GLFWwindow_p, value:bool):void

glfwSetWindowTitle(window:GLFWwindow_p, title:const_char_p):void

glfwSetWindowIcon(window:GLFWwindow_p, images[]:GLFWimage):void = \
	R'''
	glfwSetWindowIcon(window, static_cast<int>(images.size()), images.data());
	return Value::nil();
	'''

glfwGetWindowPos(window:GLFWwindow_p):any = \
	R'''
	int xpos, ypos;
	glfwGetWindowPos(window, &xpos, &ypos);
	return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''

glfwSetWindowPos(window:GLFWwindow_p, xpos:int, ypos:int):void

glfwGetWindowSize(window:GLFWwindow_p):any = \
	R'''
	int width, height;
	glfwGetWindowSize(window, &width, &height);
	return Value_List::Create(new Value_Number(width), new Value_Number(height));
	'''

glfwSetWindowSizeLimits(window:GLFWwindow_p, minwidth:int, minheight:int, maxwidth:int, maxheight:int):void

glfwSetWindowAspectRatio(window:GLFWwindow_p, numer:int, denom:int):void

glfwSetWindowSize(window:GLFWwindow_p, width:int, height:int):void

glfwGetFramebufferSize(window:GLFWwindow_p):any = \
	R'''
	int width, height;
	glfwGetFramebufferSize(window, &width, &height);
	return Value_List::Create(new Value_Number(width), new Value_Number(height));
	'''

glfwGetWindowFrameSize(window:GLFWwindow_p):any = \
	R'''
	int left, top, right, bottom;
	glfwGetWindowFrameSize(window, &left, &top, &right, &bottom);
	return Value_List::Create(new Value_Number(left), new Value_Number(top),
							new Value_Number(right), new Value_Number(bottom));
	'''

glfwGetWindowContentScale(window:GLFWwindow_p):any = \
	R'''
	float xscale, yscale;
	glfwGetWindowContentScale(window, &xscale, &yscale);
	return Value_List::Create(new Value_Number(xscale), new Value_Number(yscale));
	'''

glfwGetWindowOpacity(window:GLFWwindow_p):float

glfwSetWindowOpacity(window:GLFWwindow_p, opacity:float):void

glfwIconifyWindow(window:GLFWwindow_p):void

glfwRestoreWindow(window:GLFWwindow_p):void
 
glfwMaximizeWindow(window:GLFWwindow_p):void
 
glfwShowWindow(window:GLFWwindow_p):void
 
glfwHideWindow(window:GLFWwindow_p):void
 
glfwFocusWindow(window:GLFWwindow_p):void
 
glfwRequestWindowAttention(window:GLFWwindow_p):void
 
glfwGetWindowMonitor(window:GLFWwindow_p):GLFWmonitor_p
 
glfwSetWindowMonitor(window:GLFWwindow_p, monitor:GLFWmonitor_p, xpos:int, ypos:int, width:int, height:int, refreshRate:int):void
 
glfwGetWindowAttrib(window:GLFWwindow_p, attrib:int):int
 
glfwSetWindowAttrib(window:GLFWwindow_p, attrib:int, value:int):void
 
//glfwSetWindowUserPointer(window:GLFWwindow_p, pointer:void_p):void
 
//glfwGetWindowUserPointer(window:GLFWwindow_p):void_p
 
glfwSetWindowPosCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowPosCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowPosCallback : nullptr);
	valueThis.SetFunc_WindowPosCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowSizeCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowSizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowSizeCallback : nullptr);
	valueThis.SetFunc_WindowSizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowCloseCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowCloseCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowCloseCallback : nullptr);
	valueThis.SetFunc_WindowCloseCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowRefreshCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowRefreshCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowRefreshCallback : nullptr);
	valueThis.SetFunc_WindowRefreshCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowFocusCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowFocusCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowFocusCallback : nullptr);
	valueThis.SetFunc_WindowFocusCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowIconifyCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowIconifyCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowIconifyCallback : nullptr);
	valueThis.SetFunc_WindowIconifyCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowMaximizeCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowMaximizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowMaximizeCallback : nullptr);
	valueThis.SetFunc_WindowMaximizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetFramebufferSizeCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetFramebufferSizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_FramebufferSizeCallback : nullptr);
	valueThis.SetFunc_FramebufferSizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowContentScaleCallback(window:GLFWwindow_p, callback:Function:nil):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowContentScaleCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowContentScaleCallback : nullptr);
	valueThis.SetFunc_WindowContentScaleCallback(callback.release());
	return Value::nil();
	'''
 
glfwPollEvents():void
 
glfwWaitEvents():void
 
glfwWaitEventsTimeout(timeout:double):void
 
glfwPostEmptyEvent():void
 
glfwSwapBuffers(window:GLFWwindow_p):void

}

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(glfw)

${r.ComposeImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeAssignment('frame.')}
}

Gurax_EndModuleScope(glfw)
'''.Render('Functions.cpp')
