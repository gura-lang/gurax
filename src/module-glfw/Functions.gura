#!/usr/bin/env gurax
import(cbridge)

@(cbridge.TypeInfo) {
	{ 'int_ErrorIfFalse', 'int', 'Nil', '', '',
		R'''
		if (${caller} != GLFW_TRUE) IssueError();
		return Value::nil();
		''' }
	{ 'int_Bool', 'int', 'Bool', '', '',
		R'''
		bool rtn = (${caller} == GLFW_TRUE);
		return new Value_Bool(rtn);
		''' }
	{ 'GLFWimage', 'GLFWimage', 'GLFWimage',
		R'''
		${this.cType}& ${varName} = *args.Pick<Value_${this.vtype}>().GetEntity();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>(Value_${this.vtype}::ValueForVector);
		''', R'''
		if (${this.cType} rtn = ${caller}) {
			return new Value_${this.vtype}(rtn);
		}
		IssueError();
		return Value::nil();
		''' }
	{ 'GLFWmonitor_p', 'GLFWmonitor*', 'GLFWmonitor',
		R'''
		${this.cType} ${varName} = args.Pick<Value_${this.vtype}>().GetEntity();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>(Value_${this.vtype}::ValueForVector);
		''', R'''
		if (${this.cType} rtn = ${caller}) {
			return new Value_${this.vtype}(rtn);
		}
		IssueError();
		return Value::nil();
		''' }
	{ 'GLFWwindow_p', 'GLFWwindow*', 'GLFWwindow',
		R'''
		${this.cType} ${varName} = args.Pick<Value_${this.vtype}>().GetEntity();
		''', R'''
		auto ${varName} = args.PickVector<${this.cType}>(Value_${this.vtype}::ValueForVector);
		''', R'''
		if (${this.cType} rtn = ${caller}) {
			return new Value_${this.vtype}(rtn);
		}
		IssueError();
		return Value::nil();
		''' }
}

r = cbridge.Renderer()
r.Register {
//------------------------------------------------------------------------------
glfwInit():int_ErrorIfFalse
//------------------------------------------------------------------------------
glfwTerminate():void
//------------------------------------------------------------------------------
glfwInitHint(hint:int, value:int):void
//------------------------------------------------------------------------------
glfwGetVersion():any = R'''
int major, minor, rev;
glfwGetVersion(&major, &minor, &rev);
return Value_List::Create(new Value_Number(major), new Value_Number(minor), new Value_Number(rev));
'''
//------------------------------------------------------------------------------
glfwGetVersionString():const_char_p
//------------------------------------------------------------------------------
glfwGetError():String = R'''
const char* description;
glfwGetError(&description);
return description? new Value_String(description) : Value::nil();
'''
//------------------------------------------------------------------------------
//glfwSetErrorCallback()
//------------------------------------------------------------------------------
glfwDefaultWindowHints():void
//------------------------------------------------------------------------------
glfwWindowHint(hint:int, value:int):void
//------------------------------------------------------------------------------
glfwWindowHintString(hint:int, value:const_char_p):void
//------------------------------------------------------------------------------
glfwCreateWindow(width:int, height:int, title:const_char_p, monitor?:GLFWmonitor_p, share?:GLFWwindow_p):GLFWwindow_p
//------------------------------------------------------------------------------
glfwDestroyWindow(window:GLFWwindow_p):void
//------------------------------------------------------------------------------
glfwWindowShouldClose(window:GLFWwindow_p):bool
//------------------------------------------------------------------------------
glfwSetWindowShouldClose(window:GLFWwindow_p, value:bool):void
//------------------------------------------------------------------------------
glfwSetWindowTitle(window:GLFWwindow_p, title:const_char_p):void
//------------------------------------------------------------------------------
glfwSetWindowIcon(window:GLFWwindow_p, images[]:GLFWimage):void = R'''
glfwSetWindowIcon(window, static_cast<int>(images.size()), images.data());
return Value::nil();
'''
//------------------------------------------------------------------------------
glfwGetWindowPos(window:GLFWwindow_p):bool = R'''
int xpos, ypos;
glfwGetWindowPos(window, &xpos, &ypos);
return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos));
'''
//------------------------------------------------------------------------------
glfwGetInputMode(window:GLFWwindow_p, mode:int):int
//------------------------------------------------------------------------------
glfwSetInputMode(window:GLFWwindow_p, mode:int, value:int):void
//------------------------------------------------------------------------------
glfwRawMouseMotionSupported():int_Bool
//------------------------------------------------------------------------------
glfwGetKeyName(key:int, scancode:int):const_char_p_NilIfNull
//------------------------------------------------------------------------------
glfwGetKeyScancode(key:int):int
//------------------------------------------------------------------------------
glfwGetKey(window:GLFWwindow_p, key:int):int
//------------------------------------------------------------------------------
glfwGetMouseButton(window:GLFWwindow_p, button:int):int
//------------------------------------------------------------------------------
glfwGetCursorPos(window:GLFWwindow_p):any = R'''
double xpos, ypos;
glfwGetCursorPos(window, &xpos, &ypos);
return Value_List::Create(new Value_Number(xpos), new Value_Number(ypos));
'''
//------------------------------------------------------------------------------
glfwSetCursorPos(window:GLFWwindow_p, xpos:double, ypos:double):void
}

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(glfw)

${r.ComposeImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeAssignment('frame.')}
}

Gurax_EndModuleScope(glfw)
'''.Render('Functions.cpp')
