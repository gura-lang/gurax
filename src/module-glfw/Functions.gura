#!/usr/bin/env gurax
import(cbridge)

r = cbridge.Renderer()

//------------------------------------------------------------------------------
// Type Information
//------------------------------------------------------------------------------
r.DeclareType('int_ErrorIfFalse', 'int', 'Nil',
	codeFunctionBody = R'''
	if (${caller} != GLFW_TRUE) IssueError();
	return Gurax::Value::nil();
	''')

r.DeclareType('int_Bool', 'int', 'Bool',
	codeFunctionBody = R'''
	bool rtn = (${caller} == GLFW_TRUE);
	return new Gurax::Value_Bool(rtn);
	''')

r.DeclareType('GLFWimage', 'GLFWimage', 'glfw.GLFWimage',
	codePicker = R'''
	${this.cType}& ${varName} = *args_gurax.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = ''
	codePickerVec = R'''
	auto ${varName} = args_gurax.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn);
	}
	IssueError();
	return Gurax::Value::nil();
	''')

cbridge.Renderer.DeclareType_Entity(decl as String, cType as String, vtypeFullName as String) = \
	this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	${this.cType} ${varName} = args_gurax.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Value_${this.vtype}>().GetEntity() : nullptr;
	'''
	codePickerVec = R'''
	auto ${varName} = args_gurax.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn);
	}
	IssueError();
	return Gurax::Value::nil();
	''')

cbridge.Renderer.DeclareType_EntityEx(decl as String, cType as String, vtypeFullName as String) = \
	this.DeclareType(decl, cType, vtypeFullName,
	codePicker = R'''
	${this.cType} ${varName} = args_gurax.Pick<Value_${this.vtype}>().GetEntity();
	'''
	codePickerValidation = R'''
	${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Value_${this.vtype}>().GetEntity() : nullptr;
	'''
	codePickerVec = R'''
	auto ${varName} = args_gurax.PickListT<${this.cType}>(Value_${this.vtype}::ValueForVector);
	'''
	codeFunctionBody = R'''
	if (${this.cType} rtn = ${caller}) {
		return new Value_${this.vtype}(rtn, processor_gurax.Reference());
	}
	IssueError();
	return Gurax::Value::nil();
	''')

r.DeclareType_Entity('GLFWcursor_p', 'GLFWcursor*', 'glfw.GLFWcursor')
r.DeclareType_Entity('const_GLFWimage_p', 'const GLFWimage*', 'glfw.GLFWimage')
r.DeclareType_Entity('const_GLFWgammaramp_p', 'const GLFWgammaramp*', 'glfw.GLFWgammaramp')
r.DeclareType_Entity('const_GLFWvidmode_p', 'const GLFWvidmode*', 'glfw.GLFWvidmode')
r.DeclareType_Entity('GLFWmonitor_p', 'GLFWmonitor*', 'glfw.GLFWmonitor')
r.DeclareType_EntityEx('GLFWwindow_p', 'GLFWwindow*', 'glfw.GLFWwindow')

//------------------------------------------------------------------------------
// Function Registration: Context
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwMakeContextCurrent(window as GLFWwindow_p):void
 
glfwGetCurrentContext() as GLFWwindow_p
 
glfwSwapInterval(interval as int):void
 
glfwExtensionSupported(extension as const_char_p) as int_Bool
 
//glfwGetProcAddress(procname as const_char_p) as GLFWglproc
 
}

//------------------------------------------------------------------------------
// Function Registration: Initialization, version and error
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwInit() as int_ErrorIfFalse

glfwTerminate():void

glfwInitHint(hint as int, value as int):void

glfwGetVersion() = \
	R'''
	int major, minor, rev;
	glfwGetVersion(&major, &minor, &rev);
	return Value_Tuple::Create(new Value_Number(major), new Value_Number(minor), new Value_Number(rev));
	'''

glfwGetVersionString() as const_char_p

glfwGetError() as String@gurax = \
	R'''
	const char* description;
	glfwGetError(&description);
	return description? new Value_String(description) : Value::nil();
	'''

glfwSetErrorCallback(callback:nil as Function@gurax):void = \
	R'''
	glfwSetErrorCallback(callback? callback_ErrorCallback : nullptr);
	g_pProcessor_ErrorCallback.reset(callback? processor_gurax.Reference() : nullptr);
	g_pFunc_ErrorCallback.reset(callback.release());
	return Value::nil();
	'''
}

//------------------------------------------------------------------------------
// Function Registration: Input
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwGetInputMode(window as GLFWwindow_p, mode as int) as int

glfwSetInputMode(window as GLFWwindow_p, mode as int, value as int):void

glfwRawMouseMotionSupported() as int_Bool

glfwGetKeyName(key as int, scancode as int) as const_char_p_NilIfNull

glfwGetKeyScancode(key as int) as int

glfwGetKey(window as GLFWwindow_p, key as int) as int

glfwGetMouseButton(window as GLFWwindow_p, button as int) as int

glfwGetCursorPos(window as GLFWwindow_p) as any = \
	R'''
	double xpos, ypos;
	glfwGetCursorPos(window, &xpos, &ypos);
	return Value_Tuple::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''

glfwSetCursorPos(window as GLFWwindow_p, xpos as double, ypos as double):void

glfwCreateCursor(image as const_GLFWimage_p, xhot as int, yhot as int) as GLFWcursor_p

glfwCreateStandardCursor(shape as int) as GLFWcursor_p

glfwDestroyCursor(cursor as GLFWcursor_p):void

glfwSetCursor(window as GLFWwindow_p, cursor as GLFWcursor_p):void

glfwSetKeyCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetKeyCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_KeyCallback : nullptr);
	valueThis.SetFunc_KeyCallback(callback.release());
	return Value::nil();
	'''

glfwSetCharCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCharCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CharCallback : nullptr);
	valueThis.SetFunc_CharCallback(callback.release());
	return Value::nil();
	'''

glfwSetCharModsCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCharModsCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CharModsCallback : nullptr);
	valueThis.SetFunc_CharModsCallback(callback.release());
	return Value::nil();
	'''

glfwSetMouseButtonCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetMouseButtonCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_MouseButtonCallback : nullptr);
	valueThis.SetFunc_MouseButtonCallback(callback.release());
	return Value::nil();
	'''

glfwSetCursorPosCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCursorPosCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CursorPosCallback : nullptr);
	valueThis.SetFunc_CursorPosCallback(callback.release());
	return Value::nil();
	'''

glfwSetCursorEnterCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetCursorEnterCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_CursorEnterCallback : nullptr);
	valueThis.SetFunc_CursorEnterCallback(callback.release());
	return Value::nil();
	'''

glfwSetScrollCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetScrollCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_ScrollCallback : nullptr);
	valueThis.SetFunc_ScrollCallback(callback.release());
	return Value::nil();
	'''

glfwSetDropCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetDropCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_DropCallback : nullptr);
	valueThis.SetFunc_DropCallback(callback.release());
	return Value::nil();
	'''

glfwJoystickPresent(jid as int) as int

glfwGetJoystickAxes(jid as int) as any = \
	R'''
	int count;
	if (const float* rtn = glfwGetJoystickAxes(jid, &count)) {
		return Value_Tuple::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickButtons(jid as int) as any = \
	R'''
	int count;
	if (const unsigned char* rtn = glfwGetJoystickButtons(jid, &count)) {
		return Value_Tuple::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickHats(jid as int) as any = \
	R'''
	int count;
	if (const unsigned char* rtn = glfwGetJoystickHats(jid, &count)) {
		return Value_Tuple::Create(rtn, count);
	}
	return Value::nil();
	'''

glfwGetJoystickName(jid as int) as const_char_p_NilIfNull

glfwGetJoystickGUID(jid as int) as const_char_p_NilIfNull

//glfwSetJoystickUserPointer(jid as int, pointer as void_p)

//glfwGetJoystickUserPointer(jid as int):void_p

glfwJoystickIsGamepad(jid as int) as int_Bool

glfwSetJoystickCallback(jid as int, callback:nil as Function@gurax):void = \
	R'''
	//glfwSetJoystickCallback(jid,
	//		callback? Value_GLFWwindow::callback_JoystickCallback : nullptr);
	//valueThis.SetFunc_JoystickCallback(callback.release());
	return Value::nil();
	'''

glfwUpdateGamepadMappings(string as const_char_p) as int_ErrorIfFalse

glfwGetGamepadName(jid as int) as const_char_p_NilIfNull

//glfwGetGamepadState()

glfwSetClipboardString(window as GLFWwindow_p, string as const_char_p):void

glfwGetClipboardString(window as GLFWwindow_p) as const_char_p_NilIfNull

glfwGetTime() as double

glfwSetTime(time as double):void

glfwGetTimerValue() as uint64_t

glfwGetTimerFrequency() as uint64_t

}

//------------------------------------------------------------------------------
// Function Registration: Monitor
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwGetMonitors() as any = \
	R'''
	int count;
	GLFWmonitor** rtn = glfwGetMonitors(&count);
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (int i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_GLFWmonitor(rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''

glfwGetPrimaryMonitor() as GLFWmonitor_p
 
glfwGetMonitorPos(monitor as GLFWmonitor_p) as any = \
	R'''
	int xpos, ypos;
	glfwGetMonitorPos(monitor, &xpos, &ypos);
	return Value_Tuple::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''
 
glfwGetMonitorWorkarea(monitor as GLFWmonitor_p) as any = \
	R'''
	int xpos, ypos, width, height;
	glfwGetMonitorWorkarea(monitor, &xpos, &ypos, &width, &height);
	return Value_Tuple::Create(new Value_Number(xpos), new Value_Number(ypos),
						new Value_Number(width), new Value_Number(height));
	'''
 
glfwGetMonitorPhysicalSize(monitor as GLFWmonitor_p) as any = \
	R'''
	int widthMM, heightMM;
	glfwGetMonitorPhysicalSize(monitor, &widthMM, &heightMM);
	return Value_Tuple::Create(new Value_Number(widthMM), new Value_Number(heightMM));
	'''
 
glfwGetMonitorContentScale(monitor as GLFWmonitor_p) as any = \
	R'''
	float xscale, yscale;
	glfwGetMonitorContentScale(monitor, &xscale, &yscale);
	return Value_Tuple::Create(new Value_Number(xscale), new Value_Number(yscale));
	'''
 
glfwGetMonitorName(monitor as GLFWmonitor_p) as const_char_p
 
//glfwSetMonitorUserPointer(monitor as GLFWmonitor_p, pointer as void_p)
 
//glfwGetMonitorUserPointer(monitor as GLFWmonitor_p):void_p
 
glfwSetMonitorCallback(callback:nil as Function@gurax):void = \
	R'''
	glfwSetMonitorCallback(callback? callback_MonitorCallback : nullptr);
	g_pProcessor_MonitorCallback.reset(callback? processor_gurax.Reference() : nullptr);
	g_pFunc_MonitorCallback.reset(callback.release());
	return Value::nil();
	'''
 
glfwGetVideoModes(monitor as GLFWmonitor_p) as any = \
	R'''
	int count;
	const GLFWvidmode* rtn = glfwGetVideoModes(monitor, &count);
	if (!rtn) return Value::nil();
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (int i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_GLFWvidmode(&rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''
 
glfwGetVideoMode(monitor as GLFWmonitor_p) as const_GLFWvidmode_p
 
glfwSetGamma(monitor as GLFWmonitor_p, gamma as float):void
 
glfwGetGammaRamp(monitor as GLFWmonitor_p) as const_GLFWgammaramp_p
 
glfwSetGammaRamp(monitor as GLFWmonitor_p, ramp as const_GLFWgammaramp_p):void

}

//------------------------------------------------------------------------------
// Function Registration: Native Access
//------------------------------------------------------------------------------
r.Register('glfw') {
}

//------------------------------------------------------------------------------
// Function Registration: Vulkan
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwVulkanSupported() as int_Bool
 
glfwGetRequiredInstanceExtensions() as any = \
	R'''
	uint32_t count;
	const char** rtn = glfwGetRequiredInstanceExtensions(&count);
	if (!rtn) return Value::nil();
	RefPtr<ValueOwner> pValueOwner(new ValueOwner());
	pValueOwner->reserve(count);
	for (uint32_t i = 0; i < count; i++) {
		pValueOwner->push_back(new Value_String(rtn[i]));
	}
	return new Value_List(pValueOwner.release());
	'''
 
//glfwGetInstanceProcAddress(instance as VkInstance, procname as const_char_p) as GLFWvkproc
 
//glfwGetPhysicalDevicePresentationSupport(instance as VkInstance, device as VkPhysicalDevice, queuefamily as uint32_t) as int_Bool
 
//glfwCreateWindowSurface(instance as VkInstance, window as GLFWwindow_p, allocator as const_VkAllocationCallbacks_p, surface as VkSurfaceKHR_p) as VkResult

}


//------------------------------------------------------------------------------
// Function Registration: Window
//------------------------------------------------------------------------------
r.Register('glfw') {

glfwDefaultWindowHints():void

glfwWindowHint(hint as int, value as int):void

glfwWindowHintString(hint as int, value as const_char_p):void

glfwCreateWindow(width as int, height as int, title as const_char_p, monitor:nil as GLFWmonitor_p, share:nil as GLFWwindow_p) as GLFWwindow_p

glfwDestroyWindow(window as GLFWwindow_p):void

glfwWindowShouldClose(window as GLFWwindow_p) as bool

glfwSetWindowShouldClose(window as GLFWwindow_p, value as bool):void

glfwSetWindowTitle(window as GLFWwindow_p, title as const_char_p):void

glfwSetWindowIcon(window as GLFWwindow_p, images[] as GLFWimage):void = \
	R'''
	glfwSetWindowIcon(window, static_cast<int>(images.size()), images.data());
	return Value::nil();
	'''

glfwGetWindowPos(window as GLFWwindow_p) as any = \
	R'''
	int xpos, ypos;
	glfwGetWindowPos(window, &xpos, &ypos);
	return Value_Tuple::Create(new Value_Number(xpos), new Value_Number(ypos));
	'''

glfwSetWindowPos(window as GLFWwindow_p, xpos as int, ypos as int):void

glfwGetWindowSize(window as GLFWwindow_p) as any = \
	R'''
	int width, height;
	glfwGetWindowSize(window, &width, &height);
	return Value_Tuple::Create(new Value_Number(width), new Value_Number(height));
	'''

glfwSetWindowSizeLimits(window as GLFWwindow_p, minwidth as int, minheight as int, maxwidth as int, maxheight as int):void

glfwSetWindowAspectRatio(window as GLFWwindow_p, numer as int, denom as int):void

glfwSetWindowSize(window as GLFWwindow_p, width as int, height as int):void

glfwGetFramebufferSize(window as GLFWwindow_p) as any = \
	R'''
	int width, height;
	glfwGetFramebufferSize(window, &width, &height);
	return Value_Tuple::Create(new Value_Number(width), new Value_Number(height));
	'''

glfwGetWindowFrameSize(window as GLFWwindow_p) as any = \
	R'''
	int left, top, right, bottom;
	glfwGetWindowFrameSize(window, &left, &top, &right, &bottom);
	return Value_Tuple::Create(new Value_Number(left), new Value_Number(top),
							new Value_Number(right), new Value_Number(bottom));
	'''

glfwGetWindowContentScale(window as GLFWwindow_p) as any = \
	R'''
	float xscale, yscale;
	glfwGetWindowContentScale(window, &xscale, &yscale);
	return Value_Tuple::Create(new Value_Number(xscale), new Value_Number(yscale));
	'''

glfwGetWindowOpacity(window as GLFWwindow_p) as float

glfwSetWindowOpacity(window as GLFWwindow_p, opacity as float):void

glfwIconifyWindow(window as GLFWwindow_p):void

glfwRestoreWindow(window as GLFWwindow_p):void
 
glfwMaximizeWindow(window as GLFWwindow_p):void
 
glfwShowWindow(window as GLFWwindow_p):void
 
glfwHideWindow(window as GLFWwindow_p):void
 
glfwFocusWindow(window as GLFWwindow_p):void
 
glfwRequestWindowAttention(window as GLFWwindow_p):void
 
glfwGetWindowMonitor(window as GLFWwindow_p) as GLFWmonitor_p
 
glfwSetWindowMonitor(window as GLFWwindow_p, monitor as GLFWmonitor_p, xpos as int, ypos as int, width as int, height as int, refreshRate as int):void
 
glfwGetWindowAttrib(window as GLFWwindow_p, attrib as int) as int
 
glfwSetWindowAttrib(window as GLFWwindow_p, attrib as int, value as int):void
 
//glfwSetWindowUserPointer(window as GLFWwindow_p, pointer as void_p):void
 
//glfwGetWindowUserPointer(window as GLFWwindow_p):void_p
 
glfwSetWindowPosCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowPosCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowPosCallback : nullptr);
	valueThis.SetFunc_WindowPosCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowSizeCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowSizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowSizeCallback : nullptr);
	valueThis.SetFunc_WindowSizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowCloseCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowCloseCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowCloseCallback : nullptr);
	valueThis.SetFunc_WindowCloseCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowRefreshCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowRefreshCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowRefreshCallback : nullptr);
	valueThis.SetFunc_WindowRefreshCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowFocusCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowFocusCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowFocusCallback : nullptr);
	valueThis.SetFunc_WindowFocusCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowIconifyCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowIconifyCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowIconifyCallback : nullptr);
	valueThis.SetFunc_WindowIconifyCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowMaximizeCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowMaximizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowMaximizeCallback : nullptr);
	valueThis.SetFunc_WindowMaximizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetFramebufferSizeCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetFramebufferSizeCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_FramebufferSizeCallback : nullptr);
	valueThis.SetFunc_FramebufferSizeCallback(callback.release());
	return Value::nil();
	'''
 
glfwSetWindowContentScaleCallback(window as GLFWwindow_p, callback:nil as Function@gurax):void = \
	R'''
	Value_GLFWwindow& valueThis = Value_GLFWwindow::GetValue(window);
	glfwSetWindowContentScaleCallback(valueThis.GetEntity(),
			callback? Value_GLFWwindow::callback_WindowContentScaleCallback : nullptr);
	valueThis.SetFunc_WindowContentScaleCallback(callback.release());
	return Value::nil();
	'''
 
glfwPollEvents():void
 
glfwWaitEvents():void
 
glfwWaitEventsTimeout(timeout as double):void
 
glfwPostEmptyEvent():void
 
glfwSwapBuffers(window as GLFWwindow_p):void

}

//Println(r.funcInfoTbl:*__str__())

tR'''
//==============================================================================
// Functions.cpp
//==============================================================================
#include "stdafx.h"

Gurax_BeginModuleScope(glfw)

${r.ComposeFunctionImplementation()}

void AssignFunctions(Frame& frame)
{
	${r.ComposeFunctionAssignment('frame.')}
}

Gurax_EndModuleScope(glfw)
'''.Render('Functions.cpp')
