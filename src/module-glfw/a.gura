expr = `{
glfwWindowHint(hint:int, value:int):void = R'''
	::glfwWindowHint(hint, value);
	return Value::nil();
'''

glfwWinwotHintString(hint:int, value:const_char_p):void = R'''
	::glfwWindowHintString(hint, value);
	return Value::nil();
'''

glfwCreateWindow(width:int, height:int, title:const_char_p, monitor?:GLFWmonitor, share?:GLFWwindow) = R'''
	GLFWwindow* window = ::glfwCreateWindow(width, height, title, monitor, share);
	if (!window) {
		IssueError();
		return Value::nil();
	}
	return new Value_GLFWwindow(window);
'''
}
ErrorDone(msg:String) = {
	sys.cerr.Println(msg)
	sys.Exit(1)
}
expr.EachElem {|expr|
	if (expr.IsPureAssign()) {
		!expr.left.IsCaller() && ErrorDone('Caller is expected')
		exprCaller = expr.left
		!exprCaller.car.IsIdentifier() && ErrorDone('Identifier is expected')
		funcName = exprCaller.car.symbolName
		Println(funcName)
		exprCaller.EachParam {|exprParam|
			!exprParam.IsIdentifier() && ErrorDone('Identifier is expected in parameter list')
			Println(exprParam.symbolName, ' ', exprParam.attr)
		}
		Println(exprCaller.attr)
		//Println(expr.right)
		Println()
	}
}
