expr = `{
glfwWindowHint(hint:int, value:int):void = R'''
	::glfwWindowHint(hint, value);
	return Value::nil();
'''

glfwWinwotHintString(hint:int, value:const_char_p):void = R'''
	::glfwWindowHintString(hint, value);
	return Value::nil();
'''

glfwCreateWindow(width:int, height:int, title:const_char_p, monitor?:GLFWmonitor, share?:GLFWwindow) = R'''
	GLFWwindow* window = ::glfwCreateWindow(width, height, title, monitor, share);
	if (!window) {
		IssueError();
		return Value::nil();
	}
	return new Value_GLFWwindow(window);
'''
}
ErrorDone(expr:Expr, msg:String) = {
	sys.cerr.Printf('line.%d: %s\n', expr.lineNoTop, msg)
	sys.Exit(1)
}

ArgInfo = struct {
	name:String
	type:String
	optionFlag:Bool
}

FuncInfo = struct {
	name:String
	type:String
	argInfoTbl[]:ArgInfo = []
	tmplImplementation:Template:static
	RenderImplementation(stream:Stream = sys.cout) = this.tmplImplementation.Render(stream)
}

FuncInfo.tmplImplementation = tR'''
// ${this.name}()
Gurax_DeclareFunction(${this.name})
{
	Declare(VTYPE_Any, Flag::None);
	DeclareArg("num", VTYPE_Number, ArgOccur::Once, ArgFlag::None);
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunction(${this.name})
{
	// Arguments
	ArgPicker args(argument);
	Int num = args.PickNumber<Int>();
	// Function body
	return new Value_Number(num * 3);
}
'''

funcInfoTbl = []
expr.EachElem {|expr|
	if (expr.IsPureAssign()) {
		!expr.left.IsCaller() && ErrorDone(expr, 'Caller is expected')
		exprCaller = expr.left
		!exprCaller.car.IsIdentifier() && ErrorDone(exprCaller, 'Identifier is expected')
		funcInfo = FuncInfo(exprCaller.car.symbolName)
		funcInfoTbl.Add(funcInfo)
		exprCaller.EachParam {|exprParam|
			//Println(exprParam)
			optionFlag = false
			if (exprParam.IsUnaryOp()) {
				if (exprParam.operator.symbol == `?) {
					optionFlag = true
				} else {
					ErrorDOne(exprParam, 'invalid format of parameter')
				}
				exprParam = exprParam.child
			}
			!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
			argInfo = ArgInfo(exprParam.symbolName, exprParam.attr.dottedName, optionFlag)
			funcInfo.argInfoTbl.Add(argInfo)
		}
		//Println(exprCaller.attr)
		//Println(expr.right)
		//Println()
	}
}
funcInfoTbl.Each {|funcInfo|
	funcInfo.RenderImplementation(sys.cout)
	//Println(funcInfo.name)
	//Println(funcInfo.argInfoTbl:*name.Join(', '))
}
