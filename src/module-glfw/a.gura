expr = `{
glfwWindowHint(hint:int, value:int):void = R'''
	::glfwWindowHint(hint, value);
	return Value::nil();
'''

glfwWinwotHintString(hint:int, value:const_char_p):void = R'''
	::glfwWindowHintString(hint, value);
	return Value::nil();
'''

glfwCreateWindow(width:int, height:int, title:const_char_p, monitor?:GLFWmonitor_p, share?:GLFWwindow_p):GLFWwindow_p = R'''
	GLFWwindow* window = ::glfwCreateWindow(width, height, title, monitor, share);
	if (!window) {
		IssueError();
		return Value::nil();
	}
	return new Value_GLFWwindow(window);
'''
}
ErrorDone(expr:Expr, msg:String) = {
	sys.cerr.Printf('line.%d: %s\n', expr.lineNoTop, msg)
	sys.Exit(1)
}

//------------------------------------------------------------------------------
// TypeInfo
//------------------------------------------------------------------------------
TypeInfo = class {
	decl:String
	cType:String
	vtype:String
	codeToPick:String
	codeToRtn:String
	map:static = %{}
	__init__(decl:String, cType:String, vtype:String, codeToPick:String, codeToRtn:String = '') = {
		this.decl = decl, this.cType = cType, this.vtype = vtype, this.codeToPick = codeToPick
		this.map[this.decl] = this
	}
}

@(TypeInfo) {
	{ 'int', 'int', 'Number', 'args.PickNumber<int>()' }
	{ 'const_char_p', 'const char*', 'String', 'args.PickString()' }
	{ 'GLFWmonitor_p', 'GLFWmonitor*', 'String', 'args.Pick<Value_GLFWmonitor>().GetEntity()' }
	{ 'GLFWwindow_p', 'GLFWwindow*', 'String', 'args.Pick<Value_GLFWwindow>().GetEntity()' }
}

//------------------------------------------------------------------------------
// ArgInfo
//------------------------------------------------------------------------------
ArgInfo = class {
	name:String
	type:String
	optionFlag:Bool
	typeInfo:TypeInfo
	tmplDeclaration:Template:static
	tmplImplementation:Template:static
	__init__(name:String, type:String, optionFlag:Bool) = {
		this.name = name, this.type = type, this.optionFlag = optionFlag
		this.typeInfo = TypeInfo.map[type]
	}
	ComposeDeclaration() = this.tmplDeclaration.Eval()
	ComposeImplementation() = this.tmplImplementation.Eval()
}

ArgInfo.tmplDeclaration = tR'''
DeclareArg("${this.name}", VTYPE_${this.typeInfo.vtype}, ArgOccur::${cond(this.optionFlag, 'ZeroOrOnce', 'Once')}, ArgFlag::None);
'''

ArgInfo.tmplImplementation = tR'''
${this.typeInfo.cType} ${this.name} = ${this.typeInfo.codeToPick};
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
FuncInfo = class {
	name:String
	type:String
	typeInfo:TypeInfo
	argInfoTbl[]:ArgInfo = []
	tmplImplementation:Template:static
	ComposeImplementation() = this.tmplImplementation.Eval()
	__init__(name:String, type:String) = {
		this.name = name, this.type = type
		if (type != 'void') { this.typeInfo = TypeInfo.map[type] }
	}
}

FuncInfo.tmplImplementation = tR'''
// ${this.name}()
Gurax_DeclareFunction(${this.name})
{
	Declare(VTYPE_Any, Flag::None);
	${this.argInfoTbl::ComposeDeclaration()}
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunction(${this.name})
{
	// Arguments
	ArgPicker args(argument);
	${this.argInfoTbl::ComposeImplementation()}
	// Function body
	${if (this.typeInfo)}
	${this.typeInfo.cType} rtn = ${this.name}(${this.argInfoTbl:*name.Join(', ')});
	return new Value_Number(num * 3);
	${else}
	${this.name}(${this.argInfoTbl:*name.Join(', ')});
	return Value::nil();
	${end}
}
'''

funcInfoTbl = []
expr.EachElem {|expr|
	if (expr.IsPureAssign()) {
		!expr.left.IsCaller() && ErrorDone(expr, 'Caller is expected')
		exprCaller = expr.left
		!exprCaller.car.IsIdentifier() && ErrorDone(exprCaller, 'Identifier is expected')
		funcInfo = FuncInfo(exprCaller.car.symbolName, exprCaller.attr.dottedName)
		funcInfoTbl.Add(funcInfo)
		exprCaller.EachParam {|exprParam|
			//Println(exprParam)
			optionFlag = false
			if (exprParam.IsUnaryOp()) {
				if (exprParam.operator.symbol == `?) {
					optionFlag = true
				} else {
					ErrorDOne(exprParam, 'invalid format of parameter')
				}
				exprParam = exprParam.child
			}
			!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
			argInfo = ArgInfo(exprParam.symbolName, exprParam.attr.dottedName, optionFlag)
			funcInfo.argInfoTbl.Add(argInfo)
		}
		//Println(exprCaller.attr)
		//Println(expr.right)
		//Println()
	}
}
funcInfoTbl.Each {|funcInfo|
	Print(funcInfo.ComposeImplementation())
	//Println(funcInfo.name)
	//Println(funcInfo.argInfoTbl:*name.Join(', '))
}
