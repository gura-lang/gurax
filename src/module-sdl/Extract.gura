#!/usr/bin/env gurax
import(re)

fileNames = [
	'SDL.h'
	'SDL_hints.h'
	'SDL_error.h'
	'SDL_log.h'
	'SDL_assert.h'
	'SDL_version.h'
	'SDL_video.h'
	'SDL_render.h'
	'SDL_pixels.h'
	'SDL_rect.h'
	'SDL_surface.h'
	'SDL_syswm.h'
	'SDL_clipboard.h'
	'SDL_vulkan.h'
	'SDL_events.h'
	'SDL_keyboard.h'
	'SDL_keycode.h'
	'SDL_scancode.h'
	'SDL_mouse.h'
	'SDL_joystick.h'
	'SDL_gamecontroller.h'
	'SDL_sensor.h'
	'SDL_haptic.h'
	'SDL_audio.h'
	'SDL_thread.h'
	'SDL_mutex.h'
	'SDL_atomic.h'
	'SDL_timer.h'
	'SDL_filesystem.h'
	'SDL_rwops.h'
	'SDL_loadso.h'
	'SDL_platform.h'
	'SDL_cpuinfo.h'
	'SDL_endian.h'
	'SDL_bits.h'
	'SDL_power.h'
	'SDL_system.h'
	'SDL_stdinc.h'
]

dirName = '../../guest/SDL2-2.0.12/include/'

ArgInfo = class {
	typeNameC:String
	typeNameP:String	// pseudo type name
	argName:String
	__init__(argRaw:String) = {
		argRaw = argRaw.Strip()
		fields = []
		argRaw.SplitReg(r'\s+') {|field|
			if (m = field.Match(r'^(\*+)(.*)')) {
				fields.Add(m[1])
				field = m[2]
			}
			field.Scan(r'(\w+)(\**)') {|m|
				fields.Add(m[1])
				!m[2].IsEmpty() && fields.Add(m[2])
			}
		}
		this.argName = fields.last
		fields.Erase(-1)
		this.typeNameC = fields.Join(' ').Sub(r'\s+\*', '*').Sub(r'\*\s+', '*')
		Println(this.typeNameC)
	}
}

ArgInfo('aaaaa **bbbb*ccccc** dddd')
sys.Exit()

FuncInfo = struct {
	rtnType:String
	funcName:String
	argInfoTbl[]:String
	ToString() = Format('%s %s(%s)', rtnType, funcName, argList)
}

funcInfoTbl = []

AddFuncInfo(rtnType:String, funcName:String, argList:String) = {
	funcInfo = FuncInfo(rtnType, funcName, ArgInfo(argList.Split(',')))
	Println(funcInfo.ToString())
	funcInfoTbl.Add(funcInfo)
}

stat = `entry
fileNames.Each {|fileName|
	ReadLines(path.Join(dirName, fileName)) {|line|
		line = line.Strip()
		if (stat == `entry) {
			if (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL\s+(\w+)\((.*)\)')) {
				rtnType = m[1]
				funcName = m[2]
				argList = m[3]
				AddFuncInfo(rtnType, funcName, argList)
			} elsif (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL\s+(\w+)\((.*)')) {
				rtnType = m[1]
				funcName = m[2]
				argList = m[3]
				stat = `args
			} elsif (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL')) {
				rtnType = m[1]
				stat = `entryCont
			}
		} elsif (stat == `args) {
			if (m = line.Match(r'(.*)\)')) {
				argList += ' ' + m[1]
				AddFuncInfo(rtnType, funcName, argList)
				stat = `entry
			} else {
				argList += ' ' + line
			}
		} elsif (stat == `entryCont) {
			if (m = line.Match(r'^\s*(\w+)\((.*)\)')) {
				funcName = m[1]
				argList = ' ' + m[2]
				AddFuncInfo(rtnType, funcName, argList)
				stat = `entry
			} elsif (m = line.Match(r'^\s*(\w+)\((.*)')) {
				funcName = m[1]
				argList = ' ' + m[2]
				stat = `args
			}
		}
	}
}
