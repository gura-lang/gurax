#!/usr/bin/env gurax
import(re)

FileInfo = struct {
	fileName as String
	remark as String
	funcInfoTbl[] as FuncInfo
}

fileInfoTbl = @(FileInfo) {
	{ 'SDL_ttf.h',			'TTF' }
}

/*
fileInfoTbl = @(FileInfo) {
	{ 'SDL_mixer.h',			'Mixer' }
}
*/

/*
fileInfoTbl = @(FileInfo) {
	{ 'SDL.h',					'Initialization and Shutdown' }
	{ 'SDL_hints.h',			'Configuration Variables' }
	{ 'SDL_error.h',			'Error Handling' }
	{ 'SDL_log.h',				'Log Handling' }
	{ 'SDL_assert.h',			'Assertions' }
	{ 'SDL_version.h',			'Querying SDL Version' }
	{ 'SDL_video.h',			'Display and Window Management' }
	{ 'SDL_render.h',			'2D Accelerated Rendering' }
	{ 'SDL_pixels.h',			'Pixel Formats and Conversion Routines' }
	{ 'SDL_rect.h',				'Rectangle Functions' }
	{ 'SDL_surface.h',			'Surface Creation and Simple Drawing' }
	{ 'SDL_syswm.h',			'Platform-specific Window Management' }
	{ 'SDL_clipboard.h',		'Clipboard Handling' }
	{ 'SDL_vulkan.h',			'Vulkan Support' }
	{ 'SDL_events.h',			'Event Handling' }
	{ 'SDL_keyboard.h',			'Keyboard Support' }
	{ 'SDL_keycode.h',			'Keyboard Support' }
	{ 'SDL_scancode.h',			'Keyboard Support' }
	{ 'SDL_mouse.h',			'Mouse Support' }
	{ 'SDL_joystick.h',			'Joystick Support' }
	{ 'SDL_gamecontroller.h',	'Game Controller Support' }
	{ 'SDL_sensor.h',			'Sensors' }
	{ 'SDL_haptic.h',			'Force Feedback Support' }
	{ 'SDL_audio.h',			'Audio Device Management, Playing and Recording' }
	{ 'SDL_thread.h',			'Thread Management' }
	{ 'SDL_mutex.h',			'Thread Synchronization Primitives' }
	{ 'SDL_atomic.h',			'Atomic Operations' }
	{ 'SDL_timer.h',			'Timer Support' }
	{ 'SDL_filesystem.h',		'Filesystem Paths' }
	{ 'SDL_rwops.h',			'File I/O Abstraction' }
	{ 'SDL_loadso.h',			'Shared Object Loading and Function Lookup' }
	{ 'SDL_platform.h',			'Platform Detection' }
	{ 'SDL_cpuinfo.h',			'CPU Feature Detection' }
	{ 'SDL_endian.h',			'Byte Order and Byte Swapping' }
	{ 'SDL_bits.h',				'Bit Manipulation' }
	{ 'SDL_power.h',			'Power Management Status' }
	{ 'SDL_system.h',			'Platform-specific Functionality' }
	{ 'SDL_stdinc.h',			'Standard Library Functionality' }
}
*/

ExtractFromDecl(decl as String):map = {
	fields = []
	decl.SplitReg(r'\s+') {|field|
		if (m = field.Match(r'^(\*+)(.*)')) {
			fields.Add(m[1])
			field = m[2]
		}
		field.Scan(r'(\w+)(\**)') {|m|
			fields.Add(m[1])
			!m[2].IsEmpty() && fields.Add(m[2])
		}
	}
	fields
}

RtnInfo = class {
	typeNameC as String
	typeNameP as String	// pseudo type name
	__init__(declRtn as String):map = {
		declRtn = declRtn.Strip()
		fields = ExtractFromDecl(declRtn)
		this.typeNameC = fields.Join(' ').Sub(r' \*', '*').Sub(r'\* ', '*')
		this.typeNameP = fields.Join('_').Sub(r'\*', 'p')
	}
}

ArgInfo = class {
	typeNameC as String
	typeNameP as String	// pseudo type name
	argName as String
	__init__(declArg as String):map = {
		declArg = declArg.Strip()
		fields = ExtractFromDecl(declArg)
		if (fields.len > 1) {
			this.argName = fields.last
			fields.Erase(-1)
			this.typeNameC = fields.Join(' ').Sub(r' \*', '*').Sub(r'\* ', '*')
			this.typeNameP = fields.Join('_').Sub(r'\*', 'p')
		} else {
			this.typeNameC = this.typeNameP = fields.first
		}
	}
	ToString() = Format('%s:%s', this.argName, this.typeNameP)
}

FuncInfo = struct {
	rtnInfo as RtnInfo
	funcName as String
	argInfoTbl[] as ArgInfo
	ToString() = Format('%s(%s):%s', this.funcName,
			this.argInfoTbl:*ToString().Join(', '), this.rtnInfo.typeNameP)
}

Extract(stream as Stream):map = {
	AddFuncInfo(declRtn as String, funcName as String, declArgJoined as String) = {
		declArgJoined = declArgJoined.Strip()
		if (declArgJoined == 'void') { declArgJoined = '' }
		funcInfo = FuncInfo(RtnInfo(declRtn), funcName, ArgInfo(declArgJoined.Split(',')))
		funcInfoTbl.Add(funcInfo)
	}
	funcInfoTbl = []
	stat = `entry
	stream.ReadLines {|line|
		line = line.Strip()
		if (stat == `entry) {
			if (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL\s+(\w+)\((.*)\)')) {
				declRtn = m[1]
				funcName = m[2]
				declArgJoined = m[3]
				AddFuncInfo(declRtn, funcName, declArgJoined)
			} elsif (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL\s+(\w+)\((.*)')) {
				declRtn = m[1]
				funcName = m[2]
				declArgJoined = m[3]
				stat = `args
			} elsif (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL\s+(\w+)')) {
				declRtn = m[1]
				funcName = m[2]
				declArgJoined = ''
				stat = `argsTop
			} elsif (m = line.Match(r'^extern DECLSPEC\s*(.+)\s*SDLCALL')) {
				declRtn = m[1]
				stat = `entryCont
			}
		} elsif (stat == `argsTop) {
			if (m = line.Match(r'\((.*)\)')) {
				declArgJoined = m[1]
				AddFuncInfo(declRtn, funcName, declArgJoined)
				stat = `entry
			} elsif (m = line.Match(r'\((.*)')) {
				declArgJoined = m[1]
				stat = `args
			} else {
				sys.cerr.Println('argument list not found')
				sys.Exit(1)
			}
		} elsif (stat == `args) {
			if (m = line.Match(r'(.*)\)')) {
				declArgJoined += ' ' + m[1]
				AddFuncInfo(declRtn, funcName, declArgJoined)
				stat = `entry
			} else {
				declArgJoined += ' ' + line
			}
		} elsif (stat == `entryCont) {
			if (m = line.Match(r'^\s*(\w+)\((.*)\)')) {
				funcName = m[1]
				declArgJoined = ' ' + m[2]
				AddFuncInfo(declRtn, funcName, declArgJoined)
				stat = `entry
			} elsif (m = line.Match(r'^\s*(\w+)\((.*)')) {
				funcName = m[1]
				declArgJoined = ' ' + m[2]
				stat = `args
			}
		}
	}
	funcInfoTbl
}

//dirName = '../../guest/SDL2-2.0.12/include/'
//dirName = '../../guest/SDL2_mixer-2.0.4/'
dirName = '../../guest/SDL2_ttf-2.0.15/'

fileInfoTbl.Each {|fileInfo|
	fileInfo.funcInfoTbl = Extract(path.Join(dirName, fileInfo.fileName))
	Printf('//======== %s (%s) ========\n', fileInfo.remark, fileInfo.fileName)
	Println('\n' + fileInfo.funcInfoTbl:*ToString())
	Println()
}
