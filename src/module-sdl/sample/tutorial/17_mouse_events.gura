#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/

import(sdl) {*}
import(png)

//Screen dimension constants
SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

//Button constants
BUTTON_WIDTH = 300;
BUTTON_HEIGHT = 200;
TOTAL_BUTTONS = 4;

BUTTON_SPRITE_MOUSE_OUT = 0,
BUTTON_SPRITE_MOUSE_OVER_MOTION = 1,
BUTTON_SPRITE_MOUSE_DOWN = 2,
BUTTON_SPRITE_MOUSE_UP = 3,
BUTTON_SPRITE_TOTAL = 4

//Texture wrapper class
LTexture = class {
	//Initializes variables
	__init__() = {
		//Initialize
		this.mTexture = nil;
		this.mWidth = 0;
		this.mHeight = 0;
	}

	//Deallocates memory
	__del__() = {
		this.free()
	};

	//Loads image at specified path
	loadFromFile(path:String) = {
		//Get rid of preexisting texture
		this.free();

		//The final texture
		newTexture = nil;

		//Load image at specified path
		loadedSurface = SDL_CreateRGBSurfaceFromImage(path);
		//Color key image
		SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface.format, 0, 0xFF, 0xFF));

		//Create texture from surface pixels
		newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
		//Get image dimensions
		this.mWidth = loadedSurface.w;
		this.mHeight = loadedSurface.h;

		//Get rid of old loaded surface
		SDL_FreeSurface(loadedSurface);

		//Return success
		this.mTexture = newTexture;
	}

	//Deallocates texture
	free() = {
		if (this.mTexture) {
			SDL_DestroyTexture(this.mTexture);
			this.mTexture = nil;
			this.mWidth = 0;
			this.mHeight = 0;
		}
	}

	//Set color modulation
	setColor(red:Number, green:Number, blue:Number) = {
		//Modulate texture
		SDL_SetTextureColorMod(this.mTexture, red, green, blue);
	}

	setBlendMode(blending:Number) = {
		//Set blending function
		SDL_SetTextureBlendMode(this.mTexture, blending);
	}
			
	setAlpha(alpha:Number) = {
		//Modulate texture alpha
		SDL_SetTextureAlphaMod(this.mTexture, alpha);
	}

	//Renders texture at given point
	render(x:Number, y:Number, clip?:SDL_Rect, angle:Number = 0, center?:SDL_Point, flip:Number = 0) = {
		//Set rendering space and render to screen
		renderQuad = SDL_Rect(x, y, this.mWidth, this.mHeight);

		//Set clip rendering dimensions
		if (clip) {
			renderQuad.w = clip.w;
			renderQuad.h = clip.h;
		}

		//Render to screen
		SDL_RenderCopyEx(gRenderer, this.mTexture, clip, renderQuad, angle, center, flip);
	}

	//Gets image dimensions
	getWidth() = this.mWidth;
	getHeight() = this.mHeight;

	//The actual hardware texture
	mTexture:SDL_Texture;

	//Image dimensions
	mWidth:Number;
	mHeight:Number;
};

//The mouse button
LButton = class {
	//Initializes internal variables
	__init__() = {
		this.mPosition = SDL_Point(0, 0);

		this.mCurrentSprite = BUTTON_SPRITE_MOUSE_OUT;
	}

	//Sets top left position
	setPosition(x:Number, y:Number) = {
		this.mPosition.x = x;
		this.mPosition.y = y;
	}

	//Handles mouse event
	handleEvent(e:SDL_Event) = {
		//If mouse event happened
		if (e.type == SDL_MOUSEMOTION || e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEBUTTONUP) {
			//Get mouse position
			[button, x, y] = SDL_GetMouseState();

			//Check if mouse is in button
			inside = true;

			if (x < this.mPosition.x) {
				//Mouse is left of the button
				inside = false;
			} elsif (x > this.mPosition.x + BUTTON_WIDTH) {
				//Mouse is right of the button
				inside = false;
			} elsif (y < this.mPosition.y) {
				//Mouse above the button
				inside = false;
			} elsif (y > this.mPosition.y + BUTTON_HEIGHT) {
				//Mouse below the button
				inside = false;
			}

			if (!inside) {
				//Mouse is outside button
				this.mCurrentSprite = BUTTON_SPRITE_MOUSE_OUT;
			} else {
				//Mouse is inside button
				//Set mouse over sprite
				if (e.type == SDL_MOUSEMOTION) {
					this.mCurrentSprite = BUTTON_SPRITE_MOUSE_OVER_MOTION;
				} elsif (e.type == SDL_MOUSEBUTTONDOWN) {
					this.mCurrentSprite = BUTTON_SPRITE_MOUSE_DOWN;
				} elsif (e.type == SDL_MOUSEBUTTONUP) {
					this.mCurrentSprite = BUTTON_SPRITE_MOUSE_UP;
				}
			}
		}
	}

	//Shows button sprite
	render() = {
		//Show current button sprite
		gButtonSpriteSheetTexture.render(this.mPosition.x, this.mPosition.y, gSpriteClips[this.mCurrentSprite]);
	}

	//Top left position
	mPosition:SDL_Point;

	//Currently used global sprite
	mCurrentSprite:Number;
};

//The window we'll be rendering to
gWindow = nil

//The window renderer
gRenderer = nil

//Mouse button sprites
gSpriteClips = Dim(BUTTON_SPRITE_TOTAL) { SDL_Rect() }
gButtonSpriteSheetTexture = LTexture();

//Buttons objects
gButtons = Dim(TOTAL_BUTTONS) { LButton() } 

//Scene sprites
gButtonSpriteSheetTexture = LTexture();


init() = {
	//Initialize SDL
	SDL_Init(SDL_INIT_VIDEO)
	if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
		Printf("Warning: Linear texture filtering not enabled!");
	}
 	//Create window
	gWindow:extern = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	//Create renderer for window
	gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
	SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
}

loadMedia() = {
	//Load front alpha texture
	gButtonSpriteSheetTexture.loadFromFile("17_mouse_events/button.png")

	//Set sprites
	repeat (BUTTON_SPRITE_TOTAL) {|i|
		gSpriteClips[i].x = 0;
		gSpriteClips[i].y = i * 200;
		gSpriteClips[i].w = BUTTON_WIDTH;
		gSpriteClips[i].h = BUTTON_HEIGHT;
	}

	//Set buttons in corners
	gButtons[0].setPosition(0, 0);
	gButtons[1].setPosition(SCREEN_WIDTH - BUTTON_WIDTH, 0);
	gButtons[2].setPosition(0, SCREEN_HEIGHT - BUTTON_HEIGHT);
	gButtons[3].setPosition(SCREEN_WIDTH - BUTTON_WIDTH, SCREEN_HEIGHT - BUTTON_HEIGHT);
}

close() = {
	//Free loaded images
	gButtonSpriteSheetTexture.free();

	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	SDL_Quit();
}

loadTexture(path:String) = {
	//Load image at specified path
	loadedSurface = SDL_CreateRGBSurfaceFromImage(path);
	//Create texture from surface pixels
	newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
	//Get rid of old loaded surface
	SDL_FreeSurface(loadedSurface);
	newTexture
}

main() = {
	//Start up SDL and create window
	init()
	//Load media
	loadMedia()

	quit = false

	//Event handler
	e = SDL_Event()

	//Angle of rotation
	degrees = 0;

	//Flip type
	flipType = SDL_FLIP_NONE;

	//While application is running
	while (!quit) {
		//Handle events on queue
		while (SDL_PollEvent(e) != 0) {
			//User requests quit
			if (e.type == SDL_QUIT) {
				quit = true;
			}
			//Handle button events
			repeat (TOTAL_BUTTONS) {|i|
				gButtons[i].handleEvent(e);
			}
		}

		//Clear screen
		SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
		SDL_RenderClear(gRenderer);

		//Render buttons
		repeat (TOTAL_BUTTONS) {|i|
			gButtons[i].render();
		}

		//Update screen
		SDL_RenderPresent(gRenderer);
	}

	//Free resources and close SDL
	close();
}

main()
