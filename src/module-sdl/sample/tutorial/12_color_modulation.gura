#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}
import(png)

SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

//Texture wrapper class
LTexture = class {
	//Initializes variables
	__init__() = {
		//Initialize
		this.mTexture = nil;
		this.mWidth = 0;
		this.mHeight = 0;
	}

	//Deallocates memory
	__del__() = {
		this.free()
	};

	//Loads image at specified path
	loadFromFile(path as String) = {
		//Get rid of preexisting texture
		this.free();

		//The final texture
		newTexture = nil;

		//Load image at specified path
		loadedSurface = IMG_Load(path);
		if (!loadedSurface) {
			Printf("Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError());
		} else {
			//Color key image
			SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface.format, 0, 0xFF, 0xFF));

			//Create texture from surface pixels
			newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
			if (!newTexture) {
				Printf("Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = loadedSurface.w;
				this.mHeight = loadedSurface.h;
			}

			//Get rid of old loaded surface
			SDL_FreeSurface(loadedSurface);
		}

		//Return success
		this.mTexture = newTexture;
		this.mTexture != nil;
	}

	//Deallocates texture
	free() = {
		if (this.mTexture) {
			SDL_DestroyTexture(this.mTexture);
			this.mTexture = nil;
			this.mWidth = 0;
			this.mHeight = 0;
		}
	}

	setColor(red as Number, green as Number, blue as Number) = {
		//Modulate texture
		SDL_SetTextureColorMod(this.mTexture, red, green, blue);
	}

	//Renders texture at given point
	render(x as Number, y as Number, clip?:SDL_Rect) = {
		//Set rendering space and render to screen
		renderQuad = SDL_Rect(x, y, this.mWidth, this.mHeight);

		//Set clip rendering dimensions
		if (clip) {
			renderQuad.w = clip.w;
			renderQuad.h = clip.h;
		}

		//Render to screen
		SDL_RenderCopy(gRenderer, this.mTexture, clip, renderQuad);
	}

	//Gets image dimensions
	getWidth() = this.mWidth;
	getHeight() = this.mHeight;

	//The actual hardware texture
	mTexture as SDL_Texture;

	//Image dimensions
	mWidth as Number;
	mHeight as Number;
};

//The window we'll be rendering to
gWindow = nil

//The window renderer
gRenderer = nil

//Scene sprites
gSpriteClips = Dim(4) {SDL_Rect()};
gModulatedTexture = LTexture();


init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
			Printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Create renderer for window
			gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
			if (!gRenderer) {
				Printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			} else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				imgFlags = IMG_INIT_PNG;
				if ((IMG_Init(imgFlags) & imgFlags) == 0) {
					Printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
			}
		}
	}

	success
}

loadMedia() = {
	//Loading success flag
	success = true;

	//Load texture
	if (!gModulatedTexture.loadFromFile("12_color_modulation/colors.png")) {
		Printf("Failed to load colors texture!\n");
		success = false;
	}
	
	success;
}

close() = {
	//Free loaded images
	gModulatedTexture.free();

	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//Modulation components
			r = 255;
			g = 255;
			b = 255;

			//While application is running
			while (!quit) {
				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					} elsif (e.type == SDL_KEYDOWN) {
						if (e.key.keysym.sym ==  SDLK_q) {
							//Increase red
							r += 32;
						} elsif (e.key.keysym.sym == SDLK_w) {
							//Increase green
							g += 32;
						} elsif (e.key.keysym.sym == SDLK_e) {
							//Increase blue
							b += 32;
						} elsif (e.key.keysym.sym == SDLK_a) {
							//Decrease red
							r -= 32;
						} elsif (e.key.keysym.sym == SDLK_s) {
							//Decrease green
							g -= 32;
						} elsif (e.key.keysym.sym == SDLK_d) {
							//Decrease blue
							b -= 32;
						}
					}
				}

				//Clear screen
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);

				//Modulate and render texture
				gModulatedTexture.setColor(r, g, b);
				gModulatedTexture.render(0, 0);

				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
