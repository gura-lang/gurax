#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}
import(png)

//Screen dimension constants
SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

//Texture wrapper class
LTexture = class {
	//Initializes variables
	__init__() = {
		//Initialize
		this.mTexture = nil;
		this.mWidth = 0;
		this.mHeight = 0;
	}

	//Deallocates memory
	__del__() = {
		this.free()
	};

	//Loads image at specified path
	loadFromFile(path as String) = {
		//Get rid of preexisting texture
		this.free();

		//The final texture
		newTexture = nil;

		//Load image at specified path
		loadedSurface = IMG_Load(path);
		if (!loadedSurface) {
			Printf("Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError());
		} else {
			//Color key image
			SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface.format, 0, 0xFF, 0xFF));

			//Create texture from surface pixels
			newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
			if (!newTexture) {
				Printf("Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = loadedSurface.w;
				this.mHeight = loadedSurface.h;
			}

			//Get rid of old loaded surface
			SDL_FreeSurface(loadedSurface);
		}

		//Return success
		this.mTexture = newTexture;
		this.mTexture != nil;
	}

	//Creates image from font string
	loadFromRenderedText(textureText as String, textColor as SDL_Color) = {
		//Get rid of preexisting texture
		this.free();

		//Render text surface
		textSurface = TTF_RenderText_Solid(gFont, textureText, textColor);
		if (!textSurface) {
			Printf("Unable to render text surface! SDL_ttf Error: %s\n", TTF_GetError());
		} else {
			//Create texture from surface pixels
			this.mTexture = SDL_CreateTextureFromSurface(gRenderer, textSurface);
			if (!this.mTexture) {
				Printf("Unable to create texture from rendered text! SDL Error: %s\n", SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = textSurface.w;
				this.mHeight = textSurface.h;
			}

			//Get rid of old surface
			SDL_FreeSurface(textSurface);
		}
		
		//Return success
		this.mTexture != nil;
	}

	//Deallocates texture
	free() = {
		if (this.mTexture) {
			SDL_DestroyTexture(this.mTexture);
			this.mTexture = nil;
			this.mWidth = 0;
			this.mHeight = 0;
		}
	}

	//Set color modulation
	setColor(red as Number, green as Number, blue as Number) = {
		//Modulate texture
		SDL_SetTextureColorMod(this.mTexture, red, green, blue);
	}

	//Set blending
	setBlendMode(blending as Number) = {
		//Set blending function
		SDL_SetTextureBlendMode(this.mTexture, blending);
	}
			
	//Set alpha modulation
	setAlpha(alpha as Number) = {
		//Modulate texture alpha
		SDL_SetTextureAlphaMod(this.mTexture, alpha);
	}

	//Renders texture at given point
	render(x as Number, y as Number, clip? as SDL_Rect, angle as Number = 0.0, center? as SDL_Point, flip as Number = SDL_FLIP_NONE) = {
		//Set rendering space and render to screen
		renderQuad = SDL_Rect(x, y, this.mWidth, this.mHeight);

		//Set clip rendering dimensions
		if (clip) {
			renderQuad.w = clip.w;
			renderQuad.h = clip.h;
		}

		//Render to screen
		SDL_RenderCopyEx(gRenderer, this.mTexture, clip, renderQuad, angle, center, flip);
	}

	//Gets image dimensions
	getWidth() = this.mWidth;
	getHeight() = this.mHeight;

	//The actual hardware texture
	mTexture as SDL_Texture;

	//Image dimensions
	mWidth as Number;
	mHeight as Number;
};

//The application time based timer
LTimer = class {
	//Initializes variables
	LTimer() = {
		//Initialize the variables
		this.mStartTicks = 0;
		this.mPausedTicks = 0;

		this.mPaused = false;
		this.mStarted = false;
	}

	//The various clock actions
	start() = {
		//Start the timer
		this.mStarted = true;

		//Unpause the timer
		this.mPaused = false;

		//Get the current clock time
		this.mStartTicks = SDL_GetTicks();
		this.mPausedTicks = 0;
	}

	stop() = {
		//Stop the timer
		this.mStarted = false;

		//Unpause the timer
		this.mPaused = false;

		//Clear tick variables
		this.mStartTicks = 0;
		this.mPausedTicks = 0;
	}

	pause() = {
		//If the timer is running and isn't already paused
		if (this.mStarted && !this.mPaused) {
			//Pause the timer
			this.mPaused = true;

			//Calculate the paused ticks
			this.mPausedTicks = SDL_GetTicks() - this.mStartTicks;
			this.mStartTicks = 0;
		}
	}

	unpause() = {
		//If the timer is running and paused
		if (this.mStarted && this.mPaused) {
			//Unpause the timer
			this.mPaused = false;

			//Reset the starting ticks
			this.mStartTicks = SDL_GetTicks() - this.mPausedTicks;

			//Reset the paused ticks
			this.mPausedTicks = 0;
		}
	}

	//Gets the timer's time
	getTicks() = {
		//The actual timer time
		time = 0;

		//If the timer is running
		if (this.mStarted) {
			//If the timer is paused
			if (this.mPaused) {
				//Return the number of ticks when the timer was paused
				time = this.mPausedTicks;
			} else {
				//Return the current time minus the start time
				time = SDL_GetTicks() - this.mStartTicks;
			}
		}

		time;
	}

	//Checks the status of the timer
	isStarted() = {
		//Timer is running and paused or unpaused
		this.mStarted;
	}

	isPaused() = {
		//Timer is running and paused
		this.mPaused && this.mStarted;
	}

	//The clock time when the timer started
	mStartTicks as Number;

	//The ticks stored when the timer was paused
	mPausedTicks as Number;

	//The timer status
	mPaused as Bool;
	mStarted as Bool;
};

//The window we'll be rendering to
gWindow = nil

//The window renderer
gRenderer = nil

//Globally used font
gFont = nil;

//Scene textures
gTimeTextTexture = LTexture();
gPausePromptTexture = LTexture();
gStartPromptTexture = LTexture();

init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
			Printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Create renderer for window
			gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
			if (!gRenderer) {
				Printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			} else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				imgFlags = IMG_INIT_PNG;
				if ((IMG_Init(imgFlags) & imgFlags) == 0) {
					Printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}

				 //Initialize SDL_ttf
				if (TTF_Init() == -1) {
					Printf("SDL_ttf could not initialize! SDL_ttf Error: %s\n", TTF_GetError());
					success = false;
				}
			}
		}
	}

	success
}

loadMedia() = {
	//Loading success flag
	success = true;

	//Open the font
	gFont:extern = TTF_OpenFont("23_advanced_timers/lazy.ttf", 28);
	if (!gFont) {
		Printf("Failed to load lazy font! SDL_ttf Error: %s\n", TTF_GetError());
		success = false;
	} else {
		//Set text color as black
		textColor = SDL_Color(0, 0, 0, 255);
		
		//Load stop prompt texture
		if (!gStartPromptTexture.loadFromRenderedText("Press S to Start or Stop the Timer", textColor)) {
			Printf("Unable to render start/stop prompt texture!\n");
			success = false;
		}
		
		//Load pause prompt texture
		if (!gPausePromptTexture.loadFromRenderedText("Press P to Pause or Unpause the Timer", textColor)) {
			Printf("Unable to render pause/unpause prompt texture!\n");
			success = false;
		}
	}

	success;
}

close() = {
	//Free loaded images
	gTimeTextTexture.free();
	gPausePromptTexture.free();
	gStartPromptTexture.free();

	//Free global font
	TTF_CloseFont(gFont);
	gFont:extern = nil;

	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	TTF_Quit();
	IMG_Quit();
	SDL_Quit();
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//Set text color as black
			textColor = SDL_Color(0, 0, 0, 255);

			//The application timer
			timer = LTimer();

			//While application is running
			while (!quit) {
				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					} elsif (e.type == SDL_KEYDOWN) {
						//Reset start time on return keypress
						if (e.key.keysym.sym == SDLK_s) {
							//Start/stop
							if (timer.isStarted()) {
								timer.stop();
							} else {
								timer.start();
							}
						} elsif (e.key.keysym.sym == SDLK_p) {
							//Pause/unpause
							if (timer.isPaused()) {
								timer.unpause();
							} else {
								timer.pause();
							}
						}
					}
				}

				//Set text to be rendered
				timeText = Format("Milliseconds since start time %d", timer.getTicks() / 1000); 

				//Render text
				if (!gTimeTextTexture.loadFromRenderedText(timeText, textColor)) {
					Printf("Unable to render time texture!\n");
				}

				//Clear screen
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);

				//Render textures
				gStartPromptTexture.render((SCREEN_WIDTH - gStartPromptTexture.getWidth()) / 2, 0);
				gPausePromptTexture.render((SCREEN_WIDTH - gPausePromptTexture.getWidth()) / 2, gStartPromptTexture.getHeight());
				gTimeTextTexture.render((SCREEN_WIDTH - gTimeTextTexture.getWidth()) / 2, (SCREEN_HEIGHT - gTimeTextTexture.getHeight()) / 2);

				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
