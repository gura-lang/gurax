#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}
import(png)

SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

gWindow = nil
gRenderer = nil
gTexture = nil

init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Set texture filtering to linear
		if (!SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
			Printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Create renderer for window
			gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
			if (!gRenderer) {
				Printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			} else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				imgFlags = IMG_INIT_PNG;
				if ((IMG_Init(imgFlags) & imgFlags) == 0) {
					Printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
			}
		}
	}

	success
}

loadMedia() = {
	//Load PNG surface
	success = true;

	//Nothing to load
	success;
}

close() = {
	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

loadTexture(path as String) = {
	//The final texture
	newTexture = nil;

	//Load image at specified path
	loadedSurface = IMG_Load(path);
	if (!loadedSurface) {
		printf("Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError());
	} else {
		//Create texture from surface pixels
        newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
		if (!newTexture) {
			printf("Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError());
		}

		//Get rid of old loaded surface
		SDL_FreeSurface(loadedSurface);
	}

	newTexture;
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//While application is running
			while (!quit) {
				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					}
				}

				//Clear screen
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);

				//Render red filled quad
				fillRect = SDL_Rect(SCREEN_WIDTH / 4, SCREEN_HEIGHT / 4, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0x00, 0x00, 0xFF);		
				SDL_RenderFillRect(gRenderer, fillRect);

				//Render green outlined quad
				outlineRect = SDL_Rect(SCREEN_WIDTH / 6, SCREEN_HEIGHT / 6, SCREEN_WIDTH * 2 / 3, SCREEN_HEIGHT * 2 / 3);
				SDL_SetRenderDrawColor(gRenderer, 0x00, 0xFF, 0x00, 0xFF);		
				SDL_RenderDrawRect(gRenderer, outlineRect);
		
				//Draw blue horizontal line
				SDL_SetRenderDrawColor(gRenderer, 0x00, 0x00, 0xFF, 0xFF);		
				SDL_RenderDrawLine(gRenderer, 0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2);

				//Draw vertical line of yellow dots
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0x00, 0xFF);
				i = 0
				while (i < SCREEN_HEIGHT) {
					SDL_RenderDrawPoint(gRenderer, SCREEN_WIDTH / 2, i);
					i += 4
				}

				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
