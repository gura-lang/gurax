#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}
import(png)

SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

//Number of data integers
TOTAL_DATA = 10;

//Texture wrapper class
LTexture = class {
	//Initializes variables
	__init__() = {
		//Initialize
		this.mTexture = nil;
		this.mWidth = 0;
		this.mHeight = 0;
	}

	//Deallocates memory
	__del__() = {
		this.free()
	};

	//Loads image at specified path
	loadFromFile(path:String) = {
		//Get rid of preexisting texture
		this.free();

		//The final texture
		newTexture = nil;

		//Load image at specified path
		loadedSurface = IMG_Load(path);
		if (!loadedSurface) {
			Printf("Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError());
		} else {
			//Color key image
			SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface.format, 0, 0xFF, 0xFF));

			//Create texture from surface pixels
			newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
			if (!newTexture) {
				Printf("Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = loadedSurface.w;
				this.mHeight = loadedSurface.h;
			}

			//Get rid of old loaded surface
			SDL_FreeSurface(loadedSurface);
		}

		//Return success
		this.mTexture = newTexture;
		this.mTexture != nil;
	}

	//Creates image from font string
	loadFromRenderedText(textureText:String, textColor:SDL_Color) = {
		//Get rid of preexisting texture
		this.free();

		//Render text surface
		textSurface = TTF_RenderText_Solid(gFont, textureText, textColor);
		if (!textSurface) {
			Printf("Unable to render text surface! SDL_ttf Error: %s\n", TTF_GetError());
		} else {
			//Create texture from surface pixels
			this.mTexture = SDL_CreateTextureFromSurface(gRenderer, textSurface);
			if (!this.mTexture) {
				Printf("Unable to create texture from rendered text! SDL Error: %s\n", SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = textSurface.w;
				this.mHeight = textSurface.h;
			}

			//Get rid of old surface
			SDL_FreeSurface(textSurface);
		}
		
		//Return success
		this.mTexture != nil;
	}

	//Deallocates texture
	free() = {
		if (this.mTexture) {
			SDL_DestroyTexture(this.mTexture);
			this.mTexture = nil;
			this.mWidth = 0;
			this.mHeight = 0;
		}
	}

	//Set color modulation
	setColor(red:Number, green:Number, blue:Number) = {
		//Modulate texture
		SDL_SetTextureColorMod(this.mTexture, red, green, blue);
	}

	//Set blending
	setBlendMode(blending:Number) = {
		//Set blending function
		SDL_SetTextureBlendMode(this.mTexture, blending);
	}
			
	//Set alpha modulation
	setAlpha(alpha:Number) = {
		//Modulate texture alpha
		SDL_SetTextureAlphaMod(this.mTexture, alpha);
	}

	//Renders texture at given point
	render(x:Number, y:Number, clip?:SDL_Rect, angle:Number = 0.0, center?:SDL_Point, flip:Number = SDL_FLIP_NONE) = {
		//Set rendering space and render to screen
		renderQuad = SDL_Rect(x, y, this.mWidth, this.mHeight);

		//Set clip rendering dimensions
		if (clip) {
			renderQuad.w = clip.w;
			renderQuad.h = clip.h;
		}

		//Render to screen
		SDL_RenderCopyEx(gRenderer, this.mTexture, clip, renderQuad, angle, center, flip);
	}

	//Gets image dimensions
	getWidth() = this.mWidth;
	getHeight() = this.mHeight;

	//The actual hardware texture
	mTexture:SDL_Texture;

	//Image dimensions
	mWidth:Number;
	mHeight:Number;
};

//The window we'll be rendering to
gWindow = nil;

//The window renderer
gRenderer = nil;

//Globally used font
gFont = nil;

//Scene sprites
gPromptTextTexture = LTexture();
gDataTextures = Dim(TOTAL_DATA) { LTexture() }

//Data points
gData = Dim(TOTAL_DATA) { 0 }

init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
			Printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Create renderer for window
			gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
			if (!gRenderer) {
				Printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			} else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				imgFlags = IMG_INIT_PNG;
				if ((IMG_Init(imgFlags) & imgFlags) == 0) {
					Printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
	
				 //Initialize SDL_ttf
				if (TTF_Init() == -1) {
					Printf("SDL_ttf could not initialize! SDL_ttf Error: %s\n", TTF_GetError());
					success = false;
				}
			}
		}
	}

	success
}

loadMedia() = {
	//Text rendering color
	textColor = SDL_Color(0, 0, 0, 0xFF);
	highlightColor = SDL_Color(0xFF, 0, 0, 0xFF);
	
	//Loading success flag
	success = true;

	//Open the font
	gFont:extern = TTF_OpenFont("33_file_reading_and_writing/lazy.ttf", 28);
	if (!gFont) {
		Printf("Failed to load lazy font! SDL_ttf Error: %s\n", TTF_GetError());
		success = false;
	} else {
		//Render text
		textColor = SDL_Color(0, 0, 0, 0xFF);
		if (!gPromptTextTexture.loadFromRenderedText("Enter Text:", textColor)) {
			Printf("Failed to render text texture!\n");
			success = false;
		}
	}

	//Open file for reading in binary
	file = SDL_RWFromFile("33_file_reading_and_writing/nums.bin", "r+b");

	//File does not exist
	if (!file) {
		Printf("Warning: Unable to open file! SDL Error: %s\n", SDL_GetError());
		
		//Create file for writing
		file = SDL_RWFromFile("33_file_reading_and_writing/nums.bin", "w+b");
		if (file) {
			Printf("New file created!\n");

			//Initialize data
			repeat (TOTAL_DATA) {|i|
				gData[i] = 0
				SDL_RWwrite(file, @int32([gData[i]]), Number.int32.bytes, 1);
			}
			
			//Close file handler
			SDL_RWclose(file);
		} else {
			Printf("Error: Unable to create file! SDL Error: %s\n", SDL_GetError());
			success = false;
		}
	} else {
		//File exists
		//Load data
		Printf("Reading file...!\n");
		repeat (TOTAL_DATA) {|i|
			gData[i] = @int32 {|v| SDL_RWread(file, v, Number.int32.bytes, 1), v[0]}
		}

		//Close file handler
		SDL_RWclose(file);
	}

	//Initialize data textures
	gDataTextures[0].loadFromRenderedText(gData[0], highlightColor);
	Range (1, TOTAL_DATA) {|i|
		gDataTextures[i].loadFromRenderedText(gData[i], textColor);
	}

	success;
}

close() = {
	//Open data for writing
	file = SDL_RWFromFile("33_file_reading_and_writing/nums.bin", "w+b");
	if (file) {
		//Save data
		repeat (TOTAL_DATA) {|i|
			SDL_RWwrite(file, @int32([gData[i]]), Number.int32.bytes, 1);
		}

		//Close file handler
		SDL_RWclose(file);
	} else {
		Printf("Error: Unable to save file! %s\n", SDL_GetError());
	}

	//Free loaded images
	gPromptTextTexture.free();
	repeat (TOTAL_DATA) {|i|
		gDataTextures[i].free();
	}

	//Free global font
	TTF_CloseFont(gFont);
	gFont:extern = nil;

	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	TTF_Quit();
	IMG_Quit();
	SDL_Quit();
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//Set text color as black
			textColor = SDL_Color(0, 0, 0, 0xFF);
			highlightColor = SDL_Color(0xFF, 0, 0, 0xFF);

			//Current input point
			currentData = 0;

			//While application is running
			while (!quit) {
				//The rerender text flag
				renderText = false;

				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					} elsif(e.type == SDL_KEYDOWN) {
						if (e.key.keysym.sym == SDLK_UP) {
							//Previous data entry
							//Rerender previous entry input point
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], textColor);
							currentData -= 1;
							if(currentData < 0) {
								currentData = TOTAL_DATA - 1;
							}
							
							//Rerender current entry input point
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], highlightColor);
						} elsif (e.key.keysym.sym == SDLK_DOWN) {
							//Next data entry
							//Rerender previous entry input point
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], textColor);
							currentData += 1;
							if(currentData == TOTAL_DATA) {
								currentData = 0;
							}
							
							//Rerender current entry input point
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], highlightColor);
						} elsif (e.key.keysym.sym == SDLK_LEFT) {
							//Decrement input point
							gData[currentData] -= 1;
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], highlightColor);
						} elsif (e.key.keysym.sym == SDLK_RIGHT) {
							//Increment input point
							gData[currentData] += 1;
							gDataTextures[currentData].loadFromRenderedText(gData[currentData], highlightColor);
						}
					}
				}

				//Clear screen
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);

				//Render text textures
				gPromptTextTexture.render((SCREEN_WIDTH - gPromptTextTexture.getWidth()) / 2, 0);
				repeat (TOTAL_DATA) {|i|
					gDataTextures[i].render((SCREEN_WIDTH - gDataTextures[i].getWidth()) / 2, gPromptTextTexture.getHeight() + gDataTextures[0].getHeight() * i);
				}

				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
