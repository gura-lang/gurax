#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/

import(sdl) {*}
import(png)

SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

gWindow = nil
gRenderer = nil
gTexture = nil

init() = {
	//Initialize SDL
	SDL_Init(SDL_INIT_VIDEO)
	if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
		Printf("Warning: Linear texture filtering not enabled!");
	}
 	//Create window
	gWindow:extern = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	//Create renderer for window
	gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
	SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
}

loadMedia() = {
	//Load PNG surface
	gTexture:extern = loadTexture("09_the_viewport/viewport.png");
}

close() = {
	//Deallocate surface
	SDL_DestroyTexture(gTexture);
	gTexture:extern = nil;
	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;
	//Quit SDL subsystems
	SDL_Quit();
}

loadTexture(path:String) = {
	//Load image at specified path
	loadedSurface = SDL_CreateRGBSurfaceFromImage(path);
	//Create texture from surface pixels
	newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
	//Get rid of old loaded surface
	SDL_FreeSurface(loadedSurface);
	newTexture
}

main() = {
	//Start up SDL and create window
	init()
	//Load media
	loadMedia()

	quit = false

	//Event handler
	e = SDL_Event()

	//While application is running
	while (!quit) {
		//Handle events on queue
		while (SDL_PollEvent(e) != 0) {
			//User requests quit
			if (e.type == SDL_QUIT) {
				quit = true;
			}
		}

		//Clear screen
		SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
		SDL_RenderClear(gRenderer);

		//Top left corner viewport
		topLeftViewport = SDL_Rect();
		topLeftViewport.x = 0;
		topLeftViewport.y = 0;
		topLeftViewport.w = SCREEN_WIDTH / 2;
		topLeftViewport.h = SCREEN_HEIGHT / 2;
		SDL_RenderSetViewport(gRenderer, topLeftViewport);
		
		//Render texture to screen
		SDL_RenderCopy(gRenderer, gTexture, nil, nil);


		//Top right viewport
		topRightViewport = SDL_Rect();
		topRightViewport.x = SCREEN_WIDTH / 2;
		topRightViewport.y = 0;
		topRightViewport.w = SCREEN_WIDTH / 2;
		topRightViewport.h = SCREEN_HEIGHT / 2;
		SDL_RenderSetViewport(gRenderer, topRightViewport);
		
		//Render texture to screen
		SDL_RenderCopy(gRenderer, gTexture, nil, nil);


		//Bottom viewport
		bottomViewport = SDL_Rect();
		bottomViewport.x = 0;
		bottomViewport.y = SCREEN_HEIGHT / 2;
		bottomViewport.w = SCREEN_WIDTH;
		bottomViewport.h = SCREEN_HEIGHT / 2;
		SDL_RenderSetViewport(gRenderer, bottomViewport);

		
		//Render texture to screen
		SDL_RenderCopy(gRenderer, gTexture, nil, nil);


		//Update screen
		SDL_RenderPresent(gRenderer);
	}

	//Free resources and close SDL
	close();
}

main()
