#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}

SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

gWindow = nil
gScreenSurface = nil
gStretchedSurface = nil

init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Get window surface
			gScreenSurface:extern = SDL_GetWindowSurface(gWindow);
		}
	}

	success
}

loadMedia() = {
	//Loading success flag
	success = true;

	//Load splash image
	gStretchedSurface:extern = loadSurface("05_optimized_surface_loading_and_soft_stretching/stretch.bmp");
	if (!gStretchedSurface) {
		Printf("Failed to load stretching image!\n");
		success = false;
	}

	success
}

close() = {
	//Deallocate surface
	SDL_FreeSurface(gStretchedSurface);
	gStretchedSurface:extern = nil;

	//Destroy window
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;

	//Quit SDL subsystems
	SDL_Quit();
}

loadSurface(path:String) = {
	//The final optimized image
	optimizedSurface = nil;

	//Load image at specified path
	loadedSurface = SDL_LoadBMP(path);
	if (!loadedSurface) {
		Printf("Unable to load image %s! SDL Error: %s\n", path, SDL_GetError());
	} else {
		//Convert surface to screen format
		optimizedSurface = SDL_ConvertSurface(loadedSurface, gScreenSurface.format, 0);
		if (!optimizedSurface) {
			Printf("Unable to optimize image %s! SDL Error: %s\n", path, SDL_GetError());
		}

		//Get rid of old loaded surface
		SDL_FreeSurface(loadedSurface);
	}

	optimizedSurface;
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//While application is running
			while (!quit) {
				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					}
				}

				//Apply the image stretched
				stretchRect = SDL_Rect();
				stretchRect.x = 0;
				stretchRect.y = 0;
				stretchRect.w = SCREEN_WIDTH;
				stretchRect.h = SCREEN_HEIGHT;
				SDL_BlitScaled(gStretchedSurface, nil, gScreenSurface, stretchRect);
			
				//Update the surface
				SDL_UpdateWindowSurface( gWindow );
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
