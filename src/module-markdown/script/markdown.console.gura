#!/usr/bin/env gurax
//=============================================================================
// markdown Console renderer
//=============================================================================
import(markdown) {*}
import(conio)

TableCol = struct { text:String, align:Symbol }
TableRow = struct { headerFlag:Bool, cols[]:TableCol }

JoinText(item:Item):map = {
	if (item.children) {
		JoinText(item.children).Join()
	} else {
		item.text
	}
}

Renderer = class {
	firstFlag:Bool
	wdScreen:Number
	htScreen:Number
	indexStack[]:Number
	__init__(colorFlag:Bool = true) = {
		[this.wdScreen, this.htScreen] = conio.GetWinSize()
		if (this.wdScreen == 0) {
			this.wdScreen = 80
		}
		this.wdScreen -= 1
		if (this.htScreen == 0) {
			this.htScreen = 25
		}
		this.indexStack = []
	}
	FeedDocument(doc:Document):void = {
		this.firstFlag = true
		this.FeedItem(doc.root)
	}
	FeedItem(item:Item):map:void = {
		if (item.type == `root) {
			this.FeedItem(item.children)
		} elsif (item.type == `h1) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `h2) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `h3) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `h4) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `h5) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `h6) {
			this.PrintlnConditional()
			conio.SetColor(`green) {
				this.FeedItem(item.children)
			}
			Println()
		} elsif (item.type == `p) {
			this.PrintlnConditional()
			this.FeedItem(item.children)
			Println()
		} elsif (item.type == `blockquote) {
			this.PrintlnConditional()
			this.FeedItem(item.children)
			Println()
		} elsif (item.type == `em) {
			conio.SetColor(`red) {
				this.FeedItem(item.children)
			}
		} elsif (item.type == `strong) {
			conio.SetColor(`red) {
				this.FeedItem(item.children)
			}
		} elsif (item.type == `strike) {
			conio.SetColor(`gray) {
				this.FeedItem(item.children)
			}
		} elsif (item.type == `codeblock) {
			this.PrintlnConditional()
			conio.SetColor(`blue) {
				this.FeedItem(item.children)
			}
		} elsif (item.type == `ol) {
			this.PrintlnConditional()
			this.indexStack.Add(0)
			this.FeedItem(item.children)
			this.indexStack.Erase(-1)
		} elsif (item.type == `ul) {
			this.PrintlnConditional()
			this.indexStack.Add(nil)
			this.FeedItem(item.children)
			this.indexStack.Erase(-1)
		} elsif (item.type == `li) {
			(this.indexStack.len > 0) && Print('  ' * (this.indexStack.len - 1))
			index = this.indexStack[-1]
			if (index) {
				Printf('%d. ', index + 1)
				this.indexStack[-1] += 1
			} else {
				Print('- ')
			}
			this.FeedItem(item.children)
			Println()
		} elsif (item.type == `line) {
			Print('|   ')
			this.FeedItem(item.children)
			Println()
		} elsif (item.type == `a) {
			this.FeedItem(item.children)
		} elsif (item.type == `img) {
			Print('[', item.text, ']')
		} elsif (item.type == `text) {
			Print(item.text)
		} elsif (item.type == `comment) {
			Print(item.text)
		} elsif (item.type == `code) {
			conio.SetColor(`blue) {
				Print(item.text)
			}
		} elsif (item.type == `entity) {
			conio.SetColor(`black, `white) {
				Print(item.text.escapehtml())
			}
		} elsif (item.type == `tag) {
			text = item.text.Lower()
			if (text == 'table') {
				this.RenderTable(item)
			} elsif (text == 'gura.funcentry') {
				fmt = if (m = item.attrs.match(r'format="([^\"]+)"')) {m[1]} else {''}
				Println(fmt)
				Println('-' * fmt.len)
				item.children && this.FeedItem(item.children)
			} else {
				item.children && this.FeedItem(item.children)
			}
		} elsif (item.type == `hr) {
			Println('--------')
		} elsif (item.type == `br) {
			Println()
		}
	}
	PrintlnConditional() = {
		if (this.firstFlag) {
			this.firstFlag = false
		} else {
			Println()
		}
	}
	RenderTable(item:Item) = {
		rows = item.children.Each():xlist {|item|
			(item.type != `tag || item.text.Lower() != 'tr') && continue
			headerFlag = false
			cols = item.children.Each():xlist {|item|
				(item.type != `tag) && continue
				tagName = item.text.Lower()
				if (tagName == 'th') {
					headerFlag = true
				} elsif (tagName == 'td') {
					// nothing to do
				} else {
					continue
				}
				TableCol(JoinText(item), item.align)
			}
			TableRow(headerFlag, cols)
		}
		nCols = rows:*cols:*len.Max()
		rows:&cols = rows:*cols::Align(nCols, TableCol('', `left)):list
		widths = repeat(nCols):list {|iCol|
			rows:*cols:*Get(iCol):*text:*len.Max()
		}
		wdAvailable = this.wdScreen + 1 - nCols // subtract width for vertical bar
		wdThreshold = Int(wdAvailable / nCols)
		wdSum = widths.Sum()
		if (wdSum > wdAvailable) {
			widthsShort = widths.Filter(widths < wdThreshold)
			widthsShortSum = widthsShort.Sum() || 0
			widthsLongSum = wdSum - widthsShortSum
			wdRest = wdAvailable - widthsShortSum
			if (wdRest < 0) {
				widthsWk = int(widths * wdAvailable / wdSum)
			} else {
				widthsWk = widths.Each():list {|width|
					if (width < wdThreshold) {
						width
					} else {
						width * wdRest / widthsLongSum
					}
				}
			}
			if ((widthsWk > 0).and()) {
				widths = widthsWk
			}
		}
		separator = ('-' * widths).Join('+')
		rows.Each {|row|
			textsFolded = row.cols:*text.Each():list {|text, i|
				text.Split('\n'):*Foldw(widths[i]).Flatten().Each()
			}
			while ((texts = textsFolded::NextValue()).Or()) {|i|
				Println(this.MakeAlign(texts || '', widths, row.cols:*align).Join('|'))
			}
			row.headerFlag && Println(separator)
		}
	}
	MakeAlign(str:String, width:Number, align:Symbol):map:static = str.Align(width, align)
}

Document.Render@console(colorFlag:Bool = true) = {
	Renderer(colorFlag).FeedDocument(this)
} %% R'''
Renders the content of markdown document to the console.

In default, it uses colors to highlight items.
Specify the argument `colorFlag` with `false` to disable the coloring process.
'''

sys.Presenter {|str:String| (Document() << str).Render@console() }
