#!/usr/bin/env gurax
//=============================================================================
// markdown HTML renderer
//=============================================================================
import(markdown) {*}

Renderer = class {
	out:Stream
	indices[]:Number
	enableAnchorFlags[]:Bool
	captionIndex:Bool
	__init__(out:Stream:w, captionIndex:Bool) = {
		this.out = out
		this.indices = Dim(6) {0}
		this.enableAnchorFlags = Dim(6) {true}
		this.captionIndex = captionIndex
	}
	Render(doc:Document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:Item):map:void = {
		!this.OnRenderItemPre(item) && return
		if (item.type == `root) {
			this.RenderItem(item.children)
		} elsif (item.type == `h1) {
			this.out.Print('<h1>')
			if (this.captionIndex) {
				this.indices[0] += 1
				this.indices[1..5] = 0
				this.out.Printf('<span class="caption-index-1">%d</span>',
								this.indices[0])
			}
			if (this.enableAnchorFlags[0]) {
				this.out.Printf('<a name="%s"></a>', this.MakeAnchorName([this.indices[0]]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h1>\n')
		} elsif (item.type == `h2) {
			this.out.Print('<h2>')
			if (this.captionIndex) {
				this.indices[1] += 1
				this.indices[2..5] = 0
				this.out.Printf('<span class="caption-index-2">%d.%d</span>',
								this.indices[0..1]*)
			}
			if (this.enableAnchorFlags[1]) {
				this.out.printf('<a name="%s"></a>', this.MakeAnchorName(this.indices[0..1]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h2>\n')
		} elsif (item.type == `h3) {
			this.out.Print('<h3>')
			if (this.captionIndex) {
				this.indices[2] += 1
				this.indices[3..5] = 0
				this.out.Printf('<span class="caption-index-3">%d.%d.%d</span>',
								this.indices[0..2]*)
			}
			if (this.enableAnchorFlags[2]) {
				this.out.Printf('<a name="%s"></a>', this.MakeAnchorName(this.indices[0..2]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h3>\n')
		} elsif (item.type == `h4) {
			this.out.Print('<h4>')
			if (this.captionIndex) {
				this.indices[3] += 1
				this.indices[4..5] = 0
				this.out.Printf('<span class="caption-index-4">%d.%d.%d.%d</span>',
								this.indices[0..3]*)
			}
			if (this.enableAnchorFlags[3]) {
				this.out.Printf('<a name="%s"></a>', this.MakeAnchorName(this.indices[0..3]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h4>\n')
		} elsif (item.type == `h5) {
			this.out.Print('<h5>')
			if (this.captionIndex) {
				this.indices[4] += 1
				this.indices[5] = 0
				this.out.Printf('<span class="caption-index-5">%d.%d.%d.%d.%d</span>',
								this.indices[0..4]*)
			}
			if (this.enableAnchorFlags[4]) {
				this.out.Printf('<a name="%s"></a>', this.MakeAnchorName(this.indices[0..4]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h5>\n')
		} elsif (item.type == `h6) {
			this.out.Print('<h6>')
			if (this.captionIndex) {
				this.indices[5] += 1
				this.out.Printf('<span class="caption-index-6">%d.%d.%d.%d.%d.%d</span>',
								this.indices[0..5]*)
			}
			if (this.enableAnchorFlags[5]) {
				this.out.Printf('<a name="%s"></a>', this.MakeAnchorName(this.indices[0..5]))
			}
			this.RenderItem(item.children)
			this.out.Print('</h6>\n')
		} elsif (item.type == `p) {
			this.out.Print('<p>\n')
			this.RenderItem(item.children)
			this.out.Println()
			this.out.Print('</p>\n')
		} elsif (item.type == `blockquote) {
			this.out.Print('<blockquote>\n')
			this.RenderItem(item.children)
			this.out.Println()
			this.out.Print('</blockquote>\n')
		} elsif (item.type == `em) {
			this.out.Print('<em>')
			this.RenderItem(item.children)
			this.out.Print('</em>')
		} elsif (item.type == `strong) {
			this.out.Print('<strong>')
			this.RenderItem(item.children)
			this.out.Print('</strong>')
		} elsif (item.type == `strike) {
			this.out.Print('<del>')
			this.RenderItem(item.children)
			this.out.Print('</del>')
		} elsif (item.type == `codeblock) {
			this.out.Print('<pre class="highlight"><code>')
			this.RenderItem(item.children)
			this.out.Print('</code></pre>\n')
		} elsif (item.type == `ol) {
			this.out.Print('<ol>\n')
			this.RenderItem(item.children)
			this.out.Print('</ol>\n')
		} elsif (item.type == `ul) {
			this.out.Print('<ul>\n')
			this.RenderItem(item.children)
			this.out.Print('</ul>\n')
		} elsif (item.type == `li) {
			this.out.Print('<li>')
			this.RenderItem(item.children)
			this.out.Print('</li>\n')
		} elsif (item.type == `line) {
			this.RenderItem(item.children)
			this.out.Print('\n')
		} elsif (item.type == `a) {
			this.out.Print('<a')
			item.url && this.out.Print(' href="', item.url.encodeuri(), '"')
			item.title && this.out.Print(' title="', item.title.escapehtml(), '"')
			this.out.Print('>')
			this.RenderItem(item.children)
			this.out.Print('</a>')
		} elsif (item.type == `img) {
			this.out.Print('<img')
			item.url && this.out.Print(' src="', item.url.encodeuri(), '"')
			item.text && this.out.Print(' alt="', item.text.escapehtml(), '"')
			item.title && this.out.Print(' title="', item.title.escapehtml(), '"')
			this.out.Print('>')
		} elsif (item.type == `text) {
			this.out.Print(item.text.escapehtml())
		} elsif (item.type == `comment) {
			this.out.Print(item.text)
		} elsif (item.type == `code) {
			this.out.Print('<code class="highlighter-rouge">')
			this.out.Print(item.text.escapehtml())
			this.out.Print('</code>')
		} elsif (item.type == `entity) {
			this.out.Print('&', item.text.escapehtml(), ';')
		} elsif (item.type == `tag) {
			if (item.text == 'gura.funcentry') {
				fmt = if (m = item.attrs.match('format="([^\"]+)"')) {m[1]} else {''}
				this.out.Printf('<div class="mb-2"><code>%s</code></div>\n', fmt)
				if (item.children) {
					this.out.Println('<div class="mb-2 ml-4">')
					this.RenderItem(item.children)
					this.out.Println()
					this.out.Println('</div>')
				}
			} elsif (item.text == 'gura.propentry') {
				fmt = if (m = item.attrs.match('format="([^\"]+)"')) {m[1]} else {''}
				typeName = if (m = item.attrs.match('type="([^\"]+)"')) {m[1]} else {''}
				accessMode = if (m = item.attrs.match('access="([^\"]+)"')) {m[1]} else {''}
				this.out.Printf('<div class="mb-2"><code>%s</code> &hellip; <code>%s</code> [%s]</div>\n',
								fmt, typeName, accessMode)
				if (item.children) {
					this.out.Println('<div class="mb-2 ml-4">')
					this.RenderItem(item.children)
					this.out.Println()
					this.out.Println('</div>')
				}
			} else {
				inlineFlag = isinlinetag(item.text)
				this.out.Print('<')
				this.out.Print(item.text)
				if (item.text == 'table') {
					this.out.Print(' ', 'class="table"')
				}
				item.attrs && this.out.Print(' ', item.attrs)
				if (item.children) {
					this.out.Print('>')
					!inlineFlag && this.out.Println()
					item.children && this.RenderItem(item.children)
					this.out.Print('</')
					this.out.Print(item.text)
					this.out.Print('>')
				} else {
					this.out.Print(' />')
				}
				!inlineFlag && this.out.Println()
			}
		} elsif (item.type == `hr) {
			this.out.Print('<hr />\n')
		} elsif (item.type == `br) {
			this.out.Print('<br />\n')
		}
		this.OnRenderItemPost(item)
	}
	MakeAnchorName(indices[]:number) = MakeAnchorNameDef(indices)
	OnRenderItemPre(item:Item) = true
	OnRenderItemPost(item:Item):void = nil
}

Document.Render@html(
		out:Stream:w, easyFormatFlag:Bool = true, captionIndex:Bool = false) = {
	easyFormatFlag && out.Print(R'''
	<html>
	<head>
	<!-- Required meta tags -->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/css/bootstrap.min.css" integrity="sha384-Smlep5jCw/wG7hdkwQ/Z5nLIefveQRIY9nfy6xoR1uRYBtpZgI6339F5dgvm/e9B" crossorigin="anonymous">
	<!-- Font Awesome CSS -->
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
	<!-- Private Style Sheet -->
	<link rel="stylesheet" href="http://www.gura-lang.org/assets/gura-template.css">
	<style type="text/css">
	</style>
	<title></title>
	</head>
	<body class="p-5">
	''')
	Renderer(out, captionIndex).Render(this)
	easyFormatFlag && out.Print(R'''
	</body>
	</html>
	''')
}
/*
%% { `en,
R'''
Renders the content of markdown document in HTML format.

The result will be put out to the stream speicified by the argument `out`.
If the argument is omitted, it will be put out to the standard output.

Specifying `true` to `easyFormatFlag` argument means it will generate an HTML with header tags. The default is `true`.

The argument `captionIndex` indicates whether caption indices are added to headers. The default is `false`.
'''
}
*/
