#!/usr/bin/env gurax
//=============================================================================
// markdown module
// The markdown module consists of the binary and script part, and this is
// the script part that mainly provides rendering functions.
//=============================================================================
import(re)
import(markdown):binary {*}
import(markdown.html)
import(markdown.console)

MakeAnchorNameDef(indices[]:Number) = 'anchor-' + Format('%d', indices).Join('-')

/*
_funcentry(lang:symbol, func:function, fmt:string):map = {
	str = format('<@gura.funcentry format="%s"', fmt.escapehtml())
	if (help = help@function(func, lang)) {
		str += '>\n'
		str += help.render('markdown')
		if (!str.endswith('\n')) { str += '\n' }
		str += '</@gura.funcentry>\n'
	} else {
		str += ' />\n'
	}
	str
}

_propentry(lang:symbol, propdecl:propdeclaration):map = {
	accessMode = if (propdecl.readable && !propdecl.writable) {
		'read-only'
	} elsif (!propdecl.readable && propdecl.writable) {
		'write-only'
	} elsif (propdecl.readable && propdecl.writable) {
		'read/write'
	} else {
		''
	}
	fmt = propdecl.fullname
	str = format('<@gura.propentry format="%s" type="%s" access="%s"',
				 fmt.escapehtml(), propdecl.type, accessMode)
	if (help = propdecl.gethelp(lang)) {
		str += '>\n'
		str += help.render('markdown')
		if (!str.endswith('\n')) { str += '\n' }
		str += '</@gura.propentry>\n'
	} else {
		str += ' />\n'
	}
	str
}

makedoc@module(lang:symbol, moduleName:string, headeroff?:number) = {
	moduleName += '.doc'
	mod = import(&moduleName)
	if (headeroff) {
		str = format('<gura.headerdown%d />\n', headeroff)
		str += mod.__doc@markdown__(lang)
		str += format('<gura.headerup%d />\n', headeroff)
	} else {
		str = mod.__doc@markdown__(lang)
	}
}

makedoc@class(lang:symbol, cls:class, headeroff?:number):dynamic_scope = {
	// The attribute :dynamic_scope is necessary when the help document contains template in it
	// that is expected to be evaluated with the outer environment.
	if (headeroff) {
		str = format('<gura.headerdown%d />\n', headeroff)
		str += help@class(cls, lang).doc
		str += format('<gura.headerup%d />\n', headeroff)
	} else {
		str = help@class(cls, lang).doc
	}
}

makedoc@function(lang:symbol, funcs*:function) = {
	funcs = funcs.each()
	_funcentry(lang, funcs, function.getformat(funcs))
}

makedoc@function$(lang:symbol, match:string, sub:string, funcs*:function) = {
	funcs = funcs.each()
	_funcentry(lang, funcs, function.getformat(funcs):*replace(match, sub))
}

makedoc@property(lang:symbol, obj) = {
	_propentry(lang, obj.__propdecls__())
}

main(mod:environment) = {
	import(argopt)
	argopt.Parser {|p|
		p.addParam('lang', 'l', 'the language of the document', 'value', 'en')
		try {
			[cfg, argv] = p.parse(sys.argv)
		} catch {|e|
			sys.stderr.Println(e.text)
			sys.exit(1)
		}
	}
	fmt = if (argv.len() == 0) { 'html' } else { argv[0] }
	lang = cfg['lang'].tosymbol()
	out = sys.stdout
	doc = markdown.Document()
	doc << mod.__doc@markdown__(lang)
	if (fmt == 'html') {
		doc.render@html(out, true)
	} elsif (fmt == 'tex') {
		doc.render@tex(out)
	} elsif (fmt == 'rtf') {
		doc.render@rtf(out)
	} else {
		sys.stderr.Println('unknown format: ', fmt)
	}
}

document_server(mod:environment, d:dict) = {
	mod.__doc@markdown__(lang:symbol) = {
		d.get(lang, d[d.keys().next()])
	}
	if (mod.__name__ == '__main__') {
		main(mod)
	}
} %% {`en, R'''
Registers a dictionary of document texts written in Markdown format
that are associated with language symbols as their keys.

The argument `mod` takes an `environment` instance referring to the module
envioronemnt in which the documents are provided.
You should usually specify `locals()` for that argument.

Below is an example to call this function:

    text@en = '..'
    text@ja = '..'
    text@fr = '..'
    register(locals(), %{
        `en => text@en
        `ja => text@ja
        `fr => text@fr
	})

It creates a module function that has the following format:

    write(doc:markdown.Document, lang:symbol)

The argument `doc` is a `markdown.document` instance into which the document is poured.

The argument `lang` is a symbol that specifies the language.
'''}
*/
