#!/usr/bin/env gurax
import(util.tester) {*}
import(re)

TestCase('Property') {
	Tester(`re.Match.__PropHandler__(`begin))
	Tester(`re.Match.__PropHandler__(`end))
	Tester(`re.Match.__PropHandler__(`source))
	Tester(`re.Match.__PropHandler__(`string))
	Tester(`re.Group.__PropHandler__(`begin))
	Tester(`re.Group.__PropHandler__(`end))
	Tester(`re.Group.__PropHandler__(`string))
}

TestCase('re.Match() / re.Pattern#Match() / String#Match()') {
	f(m:re.Match) = {
		Tester(`m)
		Tester(`m[0])
		Tester(`m.Group(0))
	}
	f(re.Match('', ''))
	f(re.Match('abc', 'abcdefg'))
	f(re.Pattern('abc').Match('abcdefg'))
	f('abcdefg'.Match('abc'))
	re.Match('(?<foo>a*)(?<bar>b*)(?<foo>c*)', 'aaabbbbcc') {|m|
		Tester(`m['foo'])
		Tester(`m['bar'])
		Tester(`m[0])
		Tester(`m[1])
		Tester(`m[2])
		Tester(`m[3])
		Tester(`m[4])
		Tester(`m['foo', 'bar'])
		Tester(`m[0, 1, 2, 3])
		Tester(`m.Groups():list)
		Tester(`m.Group(0))
		Tester(`m.Group(1))
		Tester(`m.Group(2))
		Tester(`m.Group(3))
		Tester(`m.Group('foo'))
		Tester(`m.Group('bar'))
	}
}

TestCase('re.Pattern#Scan() / String#Scan()') {
}

TestCase('re.Pattern#Split() / String#SplitReg()') {
	//Tester(`re.split('a+', 'aaaaaaabbbbbbaaacccccDDa').Join(','))
	Tester(`re.Pattern('a+').Split('aaaaaaabbbbbbaaacccccDDa').Join(','))
}

TestCase('re.Pattern#Sub() / String#Sub()') {
	Tester(`'hoge(ABCD, EFGH, IJKL), foo(MNOP, QRST), bar(UVWX, 1234)'.Sub(r'(\w+\()(\w+)', &{$m[1] + $m[2].Lower()}))
	//Tester(`'hoge(ABCD, EFGH, IJKL), foo(MNOP, QRST), bar(UVWX, 1234)'.Sub(r'(\w+\()(\w+)', 'AAA'))
}

TestCase('iterable#Grep()') {
	x = ['apple', 'orange', 'pencil', '1234', 'grape', '5678']
	Tester(`x.Grep(r'\w+'):*source.Join(','))
	Tester(`x.Grep(r'r'):*source.Join(','))
	Tester(`x.Grep(r'^a'):*source.Join(','))
	Tester(`x.Grep(r'^o'):*source.Join(','))
	Tester(`x.Grep(r'pe$'):*source.Join(','))
	Tester(`x.Grep(r'\d+'):*source.Join(','))
	Tester(`['1-1', '11-a', '1', '00-', '1-0'].Grep(r'\d+-\d+'):*source.Join(','))
}
