#!/usr/bin/env gurax
import(re)

Exec(pathName as String, pathNameOut? as String, silentFlag as Bool = false):map {block} = {
	linesSub = []
	cntReplaced = 0
	ReadLines(pathName) {|line, iLine|
		rtn = block(line, iLine)
		if (rtn.__instanceOf__(List) || line != rtn) {
			if (!silentFlag) {
				(cntReplaced == 0) && Printf('%s\n', pathName)
				Printf('-- replaced at line.%d\n', iLine + 1)
			}
			cntReplaced += 1
		}
		rtn && linesSub.Append(rtn)
	}
	(cntReplaced > 0) && Open(pathNameOut || pathName, 'w').Addcr(false).Print(linesSub)
}

Glob(pattern as String, arg%%):[silent] {`block} = {
	silentFlag = arg.IsSet(`silent)
	path.Glob(pattern):file {|pathName|
		Exec(pathName, pathName, silentFlag) {{block}}
	}
}

Walk(directory? as Directory, maxDepth? as Number, pattern* as String, arg%%):[silent] {`block} = {
	silentFlag = arg.IsSet(`silent)
	path.Walk(directory, maxDepth, pattern*):file {|pathName|
		Exec(pathName, pathName, silentFlag) {{block}}
	}
}
