#!/usr/bin/env gurax
//==============================================================================
// util.builder.gura
//==============================================================================

//------------------------------------------------------------------------------
// Builder
//------------------------------------------------------------------------------
Builder = class {
	cflags = ['-DGURA_MODULE_SEPARATED', '-fPIC']
	ldflags = ['-shared']
	libs = []
	__init__() = {
	}
	ShouldProcess(pathNameTgt:String, pathNamesDep+:String) = {
		!fs.Exists(pathNameTgt) || \
			(fs.Stat(pathNameTgt).mtime < fs.Stat(pathNamesDep):*mtime).Or()
	}
	Exec(pathName:String, args*:String) = {
		rtn = (os.Exec(pathName, args*) == 0)
		rtn
	}
	Compile(pathNameObj:String, pathNameSrc:String) = {
		cflags = this.cflags.Clone()
		this.Exec('gcc', cflags*, '-o', pathNameObj, '-c', pathNameSrc)
	}
	Build(name:String, pathNamesSrc[]:String) = {
		pathNameTgt = name + '.gurd'
		pathNamesObj = path.BaseName(pathNamesSrc) + '.o'
		for (pathNameObj in pathNamesObj, pathNameSrc in pathNamesSrc) {
			if (this.ShouldProcess(pathNameObj, pathNameSrc)) {
				this.Compile(pathNameObj, pathNameSrc)
			}
		}
	}
}
