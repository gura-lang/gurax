#!/usr/bin/env gurax
//==============================================================================
// util.builder.gura
//==============================================================================
import(argopt)

//------------------------------------------------------------------------------
// Builder
//------------------------------------------------------------------------------
Builder = class {
	cflags = ['-Wall', '-std=c++14', '-DGURAX_MODULE_SEPARATED', '-fPIC', '-I', sys.dirInclude]
	ldflags = ['-shared', '-L', sys.dirLib]
	libs = ['-lstdc++', '-lguraxcore']
	__init__() = {
	}
	ShouldProcess(pathNameTgt:String, pathNamesDep+:String) = {
		!fs.Exists(pathNameTgt) || \
			(fs.Stat(pathNameTgt).mtime < fs.Stat(pathNamesDep):*mtime).Or()
	}
	Exec(pathName:String, args*:String) = {
		rtn = (os.Exec(pathName, args*) == 0)
		rtn
	}
	Compile(pathNameObj:String, pathNameSrc:String) = {
		cflags = this.cflags.Clone()
		Printf('-- compiling: %s\n', pathNameSrc)
		this.Exec('gcc', cflags*, '-o', pathNameObj, '-c', pathNameSrc)
	}
	Link(pathNameGurd:String, pathNamesObj+:String) = {
		ldflags = this.ldflags.Clone()
		libs = this.libs.Clone()
		if (this.Exec('gcc', ldflags*, '-o', pathNameGurd, pathNamesObj*, libs*)) {
			Printf('-- generated: %s\n', pathNameGurd)
		}
	}
	Main(name:String, pathNamesSrc[]:String) = {
		pathNameGurd = name + '.gurd'
		pathNamesObj = path.BaseName(pathNamesSrc) + '.o'
		errorFlag = false
		for (pathNameObj in pathNamesObj, pathNameSrc in pathNamesSrc) {
			if (this.ShouldProcess(pathNameObj, pathNameSrc) && \
				!this.Compile(pathNameObj, pathNameSrc)) {
				return
			}
		}
		if (this.ShouldProcess(pathNameGurd, pathNamesObj*)) {
			this.Link(pathNameGurd, pathNamesObj*)
		}
	}
}
