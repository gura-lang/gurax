#!/usr/bin/env gurax
import(cairo) {*}
import(png)
import(jpeg)

Sample_arc = class {
	name:static = "arc"
	Draw(cr as cairo_t) = {
		xc = 128.0;
		yc = 128.0;
		radius = 100.0;
		angle1 = 45.0  * (math.pi/180.0);  /* angles are specified */
		angle2 = 180.0 * (math.pi/180.0);  /* in radians           */

		cairo_set_line_width (cr, 10.0);
		cairo_arc (cr, xc, yc, radius, angle1, angle2);
		cairo_stroke (cr);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);

		cairo_arc (cr, xc, yc, 10.0, 0, 2*math.pi);
		cairo_fill (cr);

		cairo_arc (cr, xc, yc, radius, angle1, angle1);
		cairo_line_to (cr, xc, yc);
		cairo_arc (cr, xc, yc, radius, angle2, angle2);
		cairo_line_to (cr, xc, yc);
		cairo_stroke (cr);
	}
}

Sample_arc_negative = class {
	name:static = "arc negative"
	Draw(cr as cairo_t) = {
		xc = 128.0;
		yc = 128.0;
		radius = 100.0;
		angle1 = 45.0  * (math.pi/180.0);  /* angles are specified */
		angle2 = 180.0 * (math.pi/180.0);  /* in radians           */

		cairo_set_line_width (cr, 10.0);
		cairo_arc_negative (cr, xc, yc, radius, angle1, angle2);
		cairo_stroke (cr);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);

		cairo_arc (cr, xc, yc, 10.0, 0, 2*math.pi);
		cairo_fill (cr);

		cairo_arc (cr, xc, yc, radius, angle1, angle1);
		cairo_line_to (cr, xc, yc);
		cairo_arc (cr, xc, yc, radius, angle2, angle2);
		cairo_line_to (cr, xc, yc);
		cairo_stroke (cr);
	}
}

Sample_clip = class {
	name:static = "clip"
	Draw(cr as cairo_t) = {
		cairo_arc (cr, 128.0, 128.0, 76.8, 0, 2 * math.pi);
		cairo_clip (cr);

		cairo_new_path (cr);  /* current path is not
								consumed by cairo_clip() */
		cairo_rectangle (cr, 0, 0, 256, 256);
		cairo_fill (cr);
		cairo_set_source_rgb (cr, 0, 1, 0);
		cairo_move_to (cr, 0, 0);
		cairo_line_to (cr, 256, 256);
		cairo_move_to (cr, 256, 0);
		cairo_line_to (cr, 0, 256);
		cairo_set_line_width (cr, 10.0);
		cairo_stroke (cr);
	}
}

Sample_clip_image = class {
	name:static = "clip image"
	Draw(cr as cairo_t) = {
		cairo_arc (cr, 128.0, 128.0, 76.8, 0, 2*math.pi);
		cairo_clip (cr);
		cairo_new_path (cr); /* path not consumed by clip()*/

		image = cairo_image_surface_create_from_png ("data/romedalen.png");
		w = cairo_image_surface_get_width (image);
		h = cairo_image_surface_get_height (image);

		cairo_scale (cr, 256.0/w, 256.0/h);

		cairo_set_source_surface (cr, image, 0, 0);
		cairo_paint (cr);

		cairo_surface_destroy (image);
	}
}

Sample_curve_rectangle = class {
	name:static = "curve rectangle"
	Draw(cr as cairo_t) = {
		/* a custom shape that could be wrapped in a function */
		x0      = 25.6,   /* parameters like cairo_rectangle */
		y0      = 25.6,
		rect_width  = 204.8,
		rect_height = 204.8,
		radius = 102.4;   /* and an approximate curvature radius */

		x1=x0+rect_width;
		y1=y0+rect_height;
		(rect_width == 0 || rect_height == 0) && return
		if (rect_width/2<radius) {
			if (rect_height/2<radius) {
				cairo_move_to  (cr, x0, (y0 + y1)/2);
				cairo_curve_to (cr, x0 ,y0, x0, y0, (x0 + x1)/2, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, (y0 + y1)/2);
				cairo_curve_to (cr, x1, y1, x1, y1, (x1 + x0)/2, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, (y0 + y1)/2);
			} else {
				cairo_move_to  (cr, x0, y0 + radius);
				cairo_curve_to (cr, x0 ,y0, x0, y0, (x0 + x1)/2, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, y0 + radius);
				cairo_line_to (cr, x1 , y1 - radius);
				cairo_curve_to (cr, x1, y1, x1, y1, (x1 + x0)/2, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, y1- radius);
			}
		} else {
			if (rect_height/2<radius) {
				cairo_move_to  (cr, x0, (y0 + y1)/2);
				cairo_curve_to (cr, x0 , y0, x0 , y0, x0 + radius, y0);
				cairo_line_to (cr, x1 - radius, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, (y0 + y1)/2);
				cairo_curve_to (cr, x1, y1, x1, y1, x1 - radius, y1);
				cairo_line_to (cr, x0 + radius, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, (y0 + y1)/2);
			} else {
				cairo_move_to  (cr, x0, y0 + radius);
				cairo_curve_to (cr, x0 , y0, x0 , y0, x0 + radius, y0);
				cairo_line_to (cr, x1 - radius, y0);
				cairo_curve_to (cr, x1, y0, x1, y0, x1, y0 + radius);
				cairo_line_to (cr, x1 , y1 - radius);
				cairo_curve_to (cr, x1, y1, x1, y1, x1 - radius, y1);
				cairo_line_to (cr, x0 + radius, y1);
				cairo_curve_to (cr, x0, y1, x0, y1, x0, y1- radius);
			}
		}
		cairo_close_path (cr);

		cairo_set_source_rgb (cr, 0.5, 0.5, 1);
		cairo_fill_preserve (cr);
		cairo_set_source_rgba (cr, 0.5, 0, 0, 0.5);
		cairo_set_line_width (cr, 10.0);
		cairo_stroke (cr);
	}
}

Sample_curve_to = class {
	name:static = "curve to"
	Draw(cr as cairo_t) = {
		x=25.6,  y=128.0;
		x1=102.4, y1=230.4,
		x2=153.6, y2=25.6,
		x3=230.4, y3=128.0;

		cairo_move_to (cr, x, y);
		cairo_curve_to (cr, x1, y1, x2, y2, x3, y3);

		cairo_set_line_width (cr, 10.0);
		cairo_stroke (cr);

		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);
		cairo_move_to (cr,x,y);   cairo_line_to (cr,x1,y1);
		cairo_move_to (cr,x2,y2); cairo_line_to (cr,x3,y3);
		cairo_stroke (cr);
	}
}

Sample_dash = class {
	name:static = "dash"
	Draw(cr as cairo_t) = {
		dashes = @{
			50.0,  /* ink */
			10.0,  /* skip */
			10.0,  /* ink */
			10.0   /* skip*/
		};
		offset = -50.0;

		cairo_set_dash (cr, dashes, offset);
		cairo_set_line_width (cr, 10.0);

		cairo_move_to (cr, 128.0, 25.6);
		cairo_line_to (cr, 230.4, 230.4);
		cairo_rel_line_to (cr, -102.4, 0.0);
		cairo_curve_to (cr, 51.2, 230.4, 51.2, 128.0, 128.0, 128.0);

		cairo_stroke (cr);
	}
}

Sample_fill_and_stroke2 = class {
	name:static = "fill and stroke2"
	Draw(cr as cairo_t) = {
		cairo_move_to (cr, 128.0, 25.6);
		cairo_line_to (cr, 230.4, 230.4);
		cairo_rel_line_to (cr, -102.4, 0.0);
		cairo_curve_to (cr, 51.2, 230.4, 51.2, 128.0, 128.0, 128.0);
		cairo_close_path (cr);

		cairo_move_to (cr, 64.0, 25.6);
		cairo_rel_line_to (cr, 51.2, 51.2);
		cairo_rel_line_to (cr, -51.2, 51.2);
		cairo_rel_line_to (cr, -51.2, -51.2);
		cairo_close_path (cr);

		cairo_set_line_width (cr, 10.0);
		cairo_set_source_rgb (cr, 0, 0, 1);
		cairo_fill_preserve (cr);
		cairo_set_source_rgb (cr, 0, 0, 0);
		cairo_stroke (cr);
	}
}

Sample_fill_style = class {
	name:static = "fill style"
	Draw(cr as cairo_t) = {
		cairo_set_line_width (cr, 6);

		cairo_rectangle (cr, 12, 12, 232, 70);
		cairo_new_sub_path (cr); cairo_arc (cr, 64, 64, 40, 0, 2*math.pi);
		cairo_new_sub_path (cr); cairo_arc_negative (cr, 192, 64, 40, 0, -2*math.pi);

		cairo_set_fill_rule (cr, CAIRO_FILL_RULE_EVEN_ODD);
		cairo_set_source_rgb (cr, 0, 0.7, 0); cairo_fill_preserve (cr);
		cairo_set_source_rgb (cr, 0, 0, 0); cairo_stroke (cr);

		cairo_translate (cr, 0, 128);
		cairo_rectangle (cr, 12, 12, 232, 70);
		cairo_new_sub_path (cr); cairo_arc (cr, 64, 64, 40, 0, 2*math.pi);
		cairo_new_sub_path (cr); cairo_arc_negative (cr, 192, 64, 40, 0, -2*math.pi);

		cairo_set_fill_rule (cr, CAIRO_FILL_RULE_WINDING);
		cairo_set_source_rgb (cr, 0, 0, 0.9); cairo_fill_preserve (cr);
		cairo_set_source_rgb (cr, 0, 0, 0); cairo_stroke (cr);
	}
}

Sample_gradient = class {
	name:static = "gradient"
	Draw(cr as cairo_t) = {
		pat = cairo_pattern_create_linear (0.0, 0.0,  0.0, 256.0);
		cairo_pattern_add_color_stop_rgba (pat, 1, 0, 0, 0, 1);
		cairo_pattern_add_color_stop_rgba (pat, 0, 1, 1, 1, 1);
		cairo_rectangle (cr, 0, 0, 256, 256);
		cairo_set_source (cr, pat);
		cairo_fill (cr);
		cairo_pattern_destroy (pat);

		pat = cairo_pattern_create_radial (115.2, 102.4, 25.6,
										102.4,  102.4, 128.0);
		cairo_pattern_add_color_stop_rgba (pat, 0, 1, 1, 1, 1);
		cairo_pattern_add_color_stop_rgba (pat, 1, 0, 0, 0, 1);
		cairo_set_source (cr, pat);
		cairo_arc (cr, 128.0, 128.0, 76.8, 0, 2 * math.pi);
		cairo_fill (cr);
		cairo_pattern_destroy (pat);
	}
}

Sample_image = class {
	name:static = "image"
	Draw(cr as cairo_t) = {
		image = cairo_image_surface_create_from_png ("data/romedalen.png");
		w = cairo_image_surface_get_width (image);
		h = cairo_image_surface_get_height (image);

		cairo_translate (cr, 128.0, 128.0);
		cairo_rotate (cr, 45* math.pi/180);
		cairo_scale  (cr, 256.0/w, 256.0/h);
		cairo_translate (cr, -0.5*w, -0.5*h);

		cairo_set_source_surface (cr, image, 0, 0);
		cairo_paint (cr);
		cairo_surface_destroy (image);
	}
}

Sample_imagepattern = class {
	name:static = "imagepattern"
	Draw(cr as cairo_t) = {
		image = cairo_image_surface_create_from_png ("data/romedalen.png");
		w = cairo_image_surface_get_width (image);
		h = cairo_image_surface_get_height (image);

		pattern = cairo_pattern_create_for_surface (image);
		cairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);

		cairo_translate (cr, 128.0, 128.0);
		cairo_rotate (cr, math.pi / 4);
		cairo_scale (cr, 1 / math.Sqrt (2), 1 / math.Sqrt (2));
		cairo_translate (cr, -128.0, -128.0);

		matrix = cairo_matrix_t()
		cairo_matrix_init_scale (matrix, w/256.0 * 5.0, h/256.0 * 5.0);
		cairo_pattern_set_matrix (pattern, matrix);

		cairo_set_source (cr, pattern);

		cairo_rectangle (cr, 0, 0, 256.0, 256.0);
		cairo_fill (cr);

		cairo_pattern_destroy (pattern);
		cairo_surface_destroy (image);
	}
}

Sample_multi_segment_caps = class {
	name:static = "multi segment caps"
	Draw(cr as cairo_t) = {
		cairo_move_to (cr, 50.0, 75.0);
		cairo_line_to (cr, 200.0, 75.0);

		cairo_move_to (cr, 50.0, 125.0);
		cairo_line_to (cr, 200.0, 125.0);

		cairo_move_to (cr, 50.0, 175.0);
		cairo_line_to (cr, 200.0, 175.0);

		cairo_set_line_width (cr, 30.0);
		cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
		cairo_stroke (cr);
	}
}

Sample_rounded_rectangle = class {
	name:static = "rounded rectangle"
	Draw(cr as cairo_t) = {
		/* a custom shape that could be wrapped in a function */
		x         = 25.6,        /* parameters like cairo_rectangle */
		y         = 25.6,
		width         = 204.8,
		height        = 204.8,
		aspect        = 1.0,     /* aspect ratio */
		corner_radius = height / 10.0;   /* and corner curvature radius */

		radius = corner_radius / aspect;
		degrees = math.pi / 180.0;

		cairo_new_sub_path (cr);
		cairo_arc (cr, x + width - radius, y + radius, radius, -90 * degrees, 0 * degrees);
		cairo_arc (cr, x + width - radius, y + height - radius, radius, 0 * degrees, 90 * degrees);
		cairo_arc (cr, x + radius, y + height - radius, radius, 90 * degrees, 180 * degrees);
		cairo_arc (cr, x + radius, y + radius, radius, 180 * degrees, 270 * degrees);
		cairo_close_path (cr);

		cairo_set_source_rgb (cr, 0.5, 0.5, 1);
		cairo_fill_preserve (cr);
		cairo_set_source_rgba (cr, 0.5, 0, 0, 0.5);
		cairo_set_line_width (cr, 10.0);
		cairo_stroke (cr);
	}
}

Sample_set_line_cap = class {
	name:static = "set line cap"
	Draw(cr as cairo_t) = {
		cairo_set_line_width (cr, 30.0);
		cairo_set_line_cap  (cr, CAIRO_LINE_CAP_BUTT); /* default */
		cairo_move_to (cr, 64.0, 50.0); cairo_line_to (cr, 64.0, 200.0);
		cairo_stroke (cr);
		cairo_set_line_cap  (cr, CAIRO_LINE_CAP_ROUND);
		cairo_move_to (cr, 128.0, 50.0); cairo_line_to (cr, 128.0, 200.0);
		cairo_stroke (cr);
		cairo_set_line_cap  (cr, CAIRO_LINE_CAP_SQUARE);
		cairo_move_to (cr, 192.0, 50.0); cairo_line_to (cr, 192.0, 200.0);
		cairo_stroke (cr);

		/* draw helping lines */
		cairo_set_source_rgb (cr, 1, 0.2, 0.2);
		cairo_set_line_width (cr, 2.56);
		cairo_move_to (cr, 64.0, 50.0); cairo_line_to (cr, 64.0, 200.0);
		cairo_move_to (cr, 128.0, 50.0);  cairo_line_to (cr, 128.0, 200.0);
		cairo_move_to (cr, 192.0, 50.0); cairo_line_to (cr, 192.0, 200.0);
		cairo_stroke (cr);
	}
}

Sample_set_line_join = class {
	name:static = "set line join"
	Draw(cr as cairo_t) = {
		cairo_set_line_width (cr, 40.96);
		cairo_move_to (cr, 76.8, 84.48);
		cairo_rel_line_to (cr, 51.2, -51.2);
		cairo_rel_line_to (cr, 51.2, 51.2);
		cairo_set_line_join (cr, CAIRO_LINE_JOIN_MITER); /* default */
		cairo_stroke (cr);

		cairo_move_to (cr, 76.8, 161.28);
		cairo_rel_line_to (cr, 51.2, -51.2);
		cairo_rel_line_to (cr, 51.2, 51.2);
		cairo_set_line_join (cr, CAIRO_LINE_JOIN_BEVEL);
		cairo_stroke (cr);

		cairo_move_to (cr, 76.8, 238.08);
		cairo_rel_line_to (cr, 51.2, -51.2);
		cairo_rel_line_to (cr, 51.2, 51.2);
		cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);
		cairo_stroke (cr);
	}
}

Sample_text = class {
	name:static = "text"
	Draw(cr as cairo_t) = {
		cairo_select_font_face (cr, "Sans", CAIRO_FONT_SLANT_NORMAL,
									CAIRO_FONT_WEIGHT_BOLD);
		cairo_set_font_size (cr, 90.0);

		cairo_move_to (cr, 10.0, 135.0);
		cairo_show_text (cr, "Hello");

		cairo_move_to (cr, 70.0, 165.0);
		cairo_text_path (cr, "void");
		cairo_set_source_rgb (cr, 0.5, 0.5, 1);
		cairo_fill_preserve (cr);
		cairo_set_source_rgb (cr, 0, 0, 0);
		cairo_set_line_width (cr, 2.56);
		cairo_stroke (cr);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_arc (cr, 10.0, 135.0, 5.12, 0, 2*math.pi);
		cairo_close_path (cr);
		cairo_arc (cr, 70.0, 165.0, 5.12, 0, 2*math.pi);
		cairo_fill (cr);
	}
}

Sample_text_align_center = class {
	name:static = "text align center"
	Draw(cr as cairo_t) = {
		utf8 = "cairo";

		cairo_select_font_face (cr, "Sans",
			CAIRO_FONT_SLANT_NORMAL,
			CAIRO_FONT_WEIGHT_NORMAL);

		cairo_set_font_size (cr, 52.0);
		extents = cairo_text_extents_t()
		cairo_text_extents (cr, utf8, extents);
		x = 128.0-(extents.width/2 + extents.x_bearing);
		y = 128.0-(extents.height/2 + extents.y_bearing);

		cairo_move_to (cr, x, y);
		cairo_show_text (cr, utf8);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);
		cairo_arc (cr, x, y, 10.0, 0, 2*math.pi);
		cairo_fill (cr);
		cairo_move_to (cr, 128.0, 0);
		cairo_rel_line_to (cr, 0, 256);
		cairo_move_to (cr, 0, 128.0);
		cairo_rel_line_to (cr, 256, 0);
		cairo_stroke (cr);
	}
}

Sample_text_extents = class {
	name:static = "text extents"
	Draw(cr as cairo_t) = {
		utf8 = "cairo";

		cairo_select_font_face (cr, "Sans",
			CAIRO_FONT_SLANT_NORMAL,
			CAIRO_FONT_WEIGHT_NORMAL);

		extents = cairo_text_extents_t()
		cairo_set_font_size (cr, 100.0);
		cairo_text_extents (cr, utf8, extents);

		x=25.0;
		y=150.0;

		cairo_move_to (cr, x,y);
		cairo_show_text (cr, utf8);

		/* draw helping lines */
		cairo_set_source_rgba (cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width (cr, 6.0);
		cairo_arc (cr, x, y, 10.0, 0, 2*math.pi);
		cairo_fill (cr);
		cairo_move_to (cr, x,y);
		cairo_rel_line_to (cr, 0, -extents.height);
		cairo_rel_line_to (cr, extents.width, 0);
		cairo_rel_line_to (cr, extents.x_bearing, -extents.y_bearing);
		cairo_stroke (cr);
	}
}

Sample_text_extents2 = class {
	name:static = "text extents 2"
	Draw(cr as cairo_t) = {
		utf8 = "A y o";

		cairo_select_font_face (cr, "Sans",
			CAIRO_FONT_SLANT_ITALIC,
			CAIRO_FONT_WEIGHT_NORMAL);

		extents = cairo_text_extents_t()
		cairo_set_font_size(cr, 80.0);
		cairo_text_extents(cr, utf8, extents);

		x = (256 - extents.width) / 2
		y = (256 - extents.height) / 2 - extents.y_bearing
		cairo_move_to(cr, x, y);
		cairo_show_text(cr, utf8);

		/* draw helping lines */
		cairo_set_source_rgba(cr, 1, 0.2, 0.2, 0.6);
		cairo_set_line_width(cr, 1.0);
		cairo_arc(cr, x, y, 10.0, 0, 2*math.pi);
		cairo_fill(cr);
		cairo_move_to(cr, x, y);
		cairo_rel_line_to(cr, extents.width, 0);
		cairo_move_to(cr, x, y + extents.y_bearing);
		cairo_rel_line_to(cr, extents.width, 0);
		cairo_move_to(cr, x, y + extents.height + extents.y_bearing);
		cairo_rel_line_to(cr, extents.width, 0);
		cairo_move_to(cr, x + extents.width, y + extents.height + extents.y_bearing);
		cairo_rel_line_to(cr, 0, -extents.height);
		cairo_move_to(cr, x + extents.width + extents.x_bearing, y + extents.height + extents.y_bearing);
		cairo_rel_line_to(cr, 0, -extents.height);
		cairo_stroke (cr);
	}
}

samples = [
	Sample_arc
	Sample_arc_negative
	Sample_clip
	Sample_clip_image
	Sample_curve_rectangle
	Sample_curve_to
	Sample_dash
	Sample_fill_and_stroke2
	Sample_fill_style
	Sample_gradient
	Sample_image
	Sample_imagepattern
	Sample_multi_segment_caps
	Sample_rounded_rectangle
	Sample_set_line_cap
	Sample_set_line_join
	Sample_text
	Sample_text_align_center
	Sample_text_extents
	Sample_text_extents2
]

main() = {
	nCols = 5, nRows = 5
	wdFrame = 280, htFrame = 320
	wdCanvas = 256, htCanvas = 256
	xOffset = (wdFrame - wdCanvas) / 2, yOffset = (htFrame - htCanvas) / 2
	i = j = 0
	surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, wdFrame * nCols, htFrame * nRows);
	//surface = cairo_pdf_surface_create("hoge.pdf", wdFrame * nCols, htFrame * nRows);
	cr = surface.create();
	cr.select_font_face("Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cr.set_font_size(30.0);
	extents = cr.font_extents()
	samples.Each {|sample|
		Println(sample.name)
		x = i * wdFrame, y = j * htFrame
		cr.save {
			cr.translate(x + xOffset, y + yOffset)
			cr.save {
				str = Format('%s', sample.name)
				cr.move_to(0, -extents.descent);
				cr.show_text(str);
				cr.set_source_rgba(.9, .9, .9, 1)
				cr.rectangle(0, 0, 256, 256)
				cr.fill()
			}
			cr.rectangle(0, 0, 256, 256)
			cr.clip()
			sample().Draw(cr)
		}
		i += 1
		if (i == nCols) {
			i = 0, j += 1
		}
	}
	cr.destroy();
	surface.write_to_png_stream("image.png");
	//surface.ToImage().Write('a.jpg')
	surface.destroy();
}

(__name__ == '__main__') && main()
