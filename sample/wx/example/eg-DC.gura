#!/usr/bin/env gurax
import(wx)
import(xpm)

sample_xpm = xpm.XPMFile('sample.xpm').lines

AppMain = class(wx.App) {
	OnInit() = {
		FrameMain(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(1000, 700)).Show()
		true
	}
}

FrameMain = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		wx.Notebook(this, wx.ID_ANY) {|noteBook|
			[Page_Brush, Page_Pen, Page_DrawLine, Page_DrawArc, Page_DrawCircle, Page_DrawEllipse, Page_EllipticArc, Page_Text].Each {|cls|
				noteBook.AddPage(cls(noteBook), cls.name)
			}
			noteBook.SetSelection(3)
		}
	}
}

wx.DC.PutText(text as String, x as Number, y as Number, anchor as Symbol):map = {
	size = this.GetTextExtent(text)
	if (anchor == `centre) {
		x -= size.GetWidth() / 2, y -= size.GetHeight() / 2
	} elsif (anchor == `north) {
		x -= size.GetWidth() / 2
	} elsif (anchor == `south) {
		x -= size.GetWidth() / 2, y -= size.GetHeight()
	} elsif (anchor == `east) {
		x -= size.GetWidth(), y -= size.GetHeight() / 2
	} elsif (anchor == `west) {
		y -= size.GetHeight() / 2
	} elsif (anchor == `northeast) {
		x -= size.GetWidth()
	} elsif (anchor == `southeast) {
		x -= size.GetWidth(), y -= size.GetHeight()
	} elsif (anchor == `northwest) {
		// nothing to do
	} elsif (anchor == `southwest) {
		y -= size.GetHeight()
	}
	this.DrawText(text, x, y)
	wx.Rect(x, y, size.GetWidth(), size.GetHeight())
}

Page_Brush = class(wx.Panel) {
	name:static = 'Brush'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		brushStyleTupleTbl = [
			//(wx.BRUSHSTYLE_INVALID,				'INVALID')
			(wx.BRUSHSTYLE_SOLID,					'SOLID')
			(wx.BRUSHSTYLE_TRANSPARENT,				'TRANSPARENT')
			//(wx.BRUSHSTYLE_STIPPLE_MASK_OPAQUE,	'STIPPLE_MASK_OPAQUE')
			//(wx.BRUSHSTYLE_STIPPLE_MASK,			'STIPPLE_MASK')
			(wx.BRUSHSTYLE_STIPPLE,					'STIPPLE')
			(wx.BRUSHSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH')
			(wx.BRUSHSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSS_HATCH,				'CROSS_HATCH')
			(wx.BRUSHSTYLE_HORIZONTAL_HATCH,		'HORIZONTAL_HATCH')
			(wx.BRUSHSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH')
			//(wx.BRUSHSTYLE_FIRST_HATCH,			'FIRST_HATCH')
			//(wx.BRUSHSTYLE_LAST_HATCH,			'LAST_HATCH')
		]
		brushTupleTbl = [
			(wx.NullBrush,							'NullBrush')
			(wx.BLACK_BRUSH,						'BLACK_BRUSH')
			(wx.BLUE_BRUSH,							'BLUE_BRUSH')
			(wx.CYAN_BRUSH,							'CYAN_BRUSH')
			(wx.GREEN_BRUSH,						'GREEN_BRUSH')
			(wx.YELLOW_BRUSH,						'YELLOW_BRUSH')
			(wx.GREY_BRUSH,							'GREY_BRUSH')
			(wx.LIGHT_GREY_BRUSH,					'LIGHT_GREY_BRUSH')
			(wx.MEDIUM_GREY_BRUSH,					'MEDIUM_GREY_BRUSH')
			(wx.RED_BRUSH,							'RED_BRUSH')
			(wx.TRANSPARENT_BRUSH,					'TRANSPARENT_BRUSH')
			(wx.WHITE_BRUSH,						'WHITE_BRUSH')			
		]
		dc.SetPen(this.pen)
		font = dc.GetFont()
		font.SetPointSize(10)
		dc.SetFont(font)
		brushStyleTupleTbl.Each {|tuple, i|
			[brushStyle, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(wx.Brush('#ff8888', brushStyle))
			dc.DrawRectangle(10, y, 120, 40)
			dc.DrawText(label, 10 + 120 + 10, y)
		}		
		dc.SetPen(wx.BLACK_PEN)
		brushTupleTbl.Each {|tuple, i|
			[brush, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(brush)
			dc.DrawRectangle(300, y, 120, 40)
			dc.DrawText(label, 300 + 120 + 10, y)
		}		
		dc = nil
	}
}

Page_Pen = class(wx.Panel) {
	name:static = 'Pen'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		penStyleTupleTbl = [
			//(wx.PENSTYLE_INVALID,					'INVALID') 	
			(wx.PENSTYLE_SOLID,						'SOLID') 	
			(wx.PENSTYLE_DOT,						'DOT') 	
			(wx.PENSTYLE_LONG_DASH,					'LONG_DASH') 	
			(wx.PENSTYLE_SHORT_DASH,				'SHORT_DASH') 	
			(wx.PENSTYLE_DOT_DASH,					'DOT_DASH') 	
			(wx.PENSTYLE_USER_DASH,					'USER_DASH') 	
			(wx.PENSTYLE_TRANSPARENT,				'TRANSPARENT') 	
			//(wx.PENSTYLE_STIPPLE_MASK_OPAQUE,		'STIPPLE_MASK_OPAQUE') 	
			//(wx.PENSTYLE_STIPPLE_MASK,			'STIPPLE_MASK') 	
			(wx.PENSTYLE_STIPPLE,					'STIPPLE') 	
			(wx.PENSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH') 	
			(wx.PENSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSS_HATCH,				'CROSS_HATCH') 	
			(wx.PENSTYLE_HORIZONTAL_HATCH,			'HORIZONTAL_HATCH') 	
			(wx.PENSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH') 	
			//(wx.PENSTYLE_FIRST_HATCH,				'FIRST_HATCH') 	
			//(wx.PENSTYLE_LAST_HATCH,				'LAST_HATCH') 	
		]
		penTupleTbl = [
			(wx.NullPen,							'NullPen')
			(wx.BLACK_DASHED_PEN,					'BLACK_DASHED_PEN')
			(wx.BLACK_PEN,							'BLACK_PEN')
			(wx.BLUE_PEN,							'BLUE_PEN')
			(wx.CYAN_PEN,							'CYAN_PEN')
			(wx.GREEN_PEN,							'GREEN_PEN')
			(wx.YELLOW_PEN,							'YELLOW_PEN')
			(wx.GREY_PEN,							'GREY_PEN')
			(wx.LIGHT_GREY_PEN,						'LIGHT_GREY_PEN')
			(wx.MEDIUM_GREY_PEN,					'MEDIUM_GREY_PEN')
			(wx.RED_PEN,							'RED_PEN')
			(wx.TRANSPARENT_PEN,					'TRANSPARENT_PEN')
			(wx.WHITE_PEN,							'WHITE_PEN')
		]
		dc.SetPen(this.pen)
		fontLabel = dc.GetFont()
		fontLabel.SetPointSize(10)
		fontWidth = dc.GetFont()
		fontWidth.SetPointSize(6)
		penStyleTupleTbl.Each {|tuple, i|
			[penStyle, label] = tuple
			x = 10 + Int(i / 8) * 240
			y = 10 + (i % 8) * 80
			dc.SetFont(fontLabel)
			dc.DrawText(label, x + 120 + 30, y)
			dc.SetFont(fontWidth)
			repeat (5) {|i|
				dc.DrawText(Format('%d', i), x + 120 + 10, y - 6)
				dc.SetPen(wx.Pen('#ff8888', i, penStyle))
				dc.DrawLine(x, y, x + 120, y)
				y += 12
			}
		}		
		dc.SetPen(wx.BLACK_PEN)
		penTupleTbl.Each {|tuple, i|
			[pen, label] = tuple
			x = 550
			y = 10 + i * 30
			dc.SetPen(pen)
			dc.DrawLine(x, y, x + 120, y)
			dc.SetFont(fontLabel)
			dc.DrawText(label, x + 120 + 10, y - 10)
		}
		dc = nil
	}
}

Page_DrawLine = class(wx.Panel) {
	name:static = 'DrawLine'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		fontLabel = dc.GetFont()
		fontLabel.SetPointSize(10)
		dc.SetFont(fontLabel)
		xOffset = 100
		[1, 10].Each {|wdPen|
			dc.SetPen(wx.Pen('#ff8888', wdPen, wx.PENSTYLE_SOLID))
			y = 120
			for (n in [5, 13, 29]) {
				radTbl = (math.pi * (n - 1) / n) * [0..n]
				radius = 70
				x = xOffset
				scope {
					dc.PutText('DrawLine(x1, y1, x2, y2)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					repeat (ptTbl.len - 1) {|i|
						dc.DrawLine(ptTbl[i].x, ptTbl[i].y, ptTbl[i + 1].x, ptTbl[i + 1].y)
					}
				}
				x += 150
				scope {
					dc.PutText('DrawLine(pt1, pt2)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					repeat (ptTbl.len - 1) {|i|
						dc.DrawLine(ptTbl[i], ptTbl[i + 1])
					}
				}
				x += 150
				scope {
					dc.PutText('DrawLines(ptTbl)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					dc.DrawLines(ptTbl)
				}
				y += 200
			}
			xOffset += 480
		}
		dc = nil
	}
}

Page_DrawArc = class(wx.Panel) {
	name:static = 'DrawArc'
	brush as wx.Brush
	ptCentre = wx.Point(500, 300)
	ptStart = wx.Point(500 + 200, 300)
	ptEnd = wx.Point(500 - 40, 300 - 200)
	rcCentre as wx.Rect
	rcStart as wx.Rect
	rcEnd as wx.Rect
	font as wx.Font
	stat = `neutral
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawArc(100 + 80, 100 - 10, 100 - 10, 100 - 10, 100, 100)
		dc.PutText('DrawArc(xStart, yStart, xEnd, yEnd, xCentre, yCentre)', 100, 100 - 30, `southwest)
		dc.DrawArc(wx.Point(100 + 80, 200 - 10), wx.Point(100 - 10, 200 - 10), wx.Point(100, 200))
		dc.PutText('DrawArc(ptStart, ptEnd, ptCentre)', 100, 200 - 30, `southwest)
		dc.DrawArc(this.ptStart, this.ptEnd, this.ptCentre)
		dc.SetPen(wx.Pen('#888888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		dc.DrawCircle(this.ptCentre.x, this.ptCentre.y, radiusPoint)
		dc.DrawCircle(this.ptStart.x, this.ptStart.y, radiusPoint)
		dc.DrawCircle(this.ptEnd.x, this.ptEnd.y, radiusPoint)
		dc.DrawLine(this.ptCentre, this.ptStart)
		dc.DrawLine(this.ptCentre, this.ptEnd)
		dc.PutText('Centre', this.ptCentre.x + 4, this.ptCentre.y + 4, `northwest)
		dc.PutText('Start', this.ptStart.x + 4, this.ptStart.y + 4, `northwest)
		dc.PutText('End', this.ptEnd.x + 4, this.ptEnd.y + 4, `northwest)
		this.rcCentre = wx.Rect(this.ptCentre.x - radiusPoint, this.ptCentre.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		this.rcStart = wx.Rect(this.ptStart.x - radiusPoint, this.ptStart.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		this.rcEnd = wx.Rect(this.ptEnd.x - radiusPoint, this.ptEnd.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		pt = event.GetPosition()
		if (this.stat == `neutral) {
			if (this.rcCentre.Contains(pt) || this.rcStart.Contains(pt) || this.rcEnd.Contains(pt)) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} elsif (this.stat == `moveCentre) {
			this.ptCentre = pt
			this.Refresh()
		} elsif (this.stat == `moveStart) {
			this.ptStart = pt
			this.Refresh()
		} elsif (this.stat == `moveEnd) {
			this.ptEnd = pt
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.stat = `neutral }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		pt = event.GetPosition()
		if (this.rcCentre.Contains(pt)) {
			this.stat = `moveCentre
		} elsif (this.rcStart.Contains(pt)) {
			this.stat = `moveStart
		} elsif (this.rcEnd.Contains(pt)) {
			this.stat = `moveEnd
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.stat = `neutral		
	}
}

Page_DrawCircle = class(wx.Panel) {
	name:static = 'DrawCircle'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		dc.DrawCircle(idxs * 100, 100, idxs * 10 + 10)
		dc = nil
	}
}

Page_DrawEllipse = class(wx.Panel) {
	name:static = 'DrawEllipse'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		dc.DrawEllipse(50, 50, 100, 50)
		dc.DrawEllipse(50, 120, 100, 100)
		dc.DrawEllipse(50, 250, 100, 150)
		dc.DrawEllipse(wx.Point(200, 50), wx.Size(100, 50))
		dc.DrawEllipse(wx.Point(200, 120), wx.Size(100, 100))
		dc.DrawEllipse(wx.Point(200, 250), wx.Size(100, 150))
		dc.DrawEllipse(wx.Rect(350, 50, 100, 50))
		dc.DrawEllipse(wx.Rect(350, 120, 100, 100))
		dc.DrawEllipse(wx.Rect(350, 250, 100, 150))
		dc = nil
	}
}

Page_EllipticArc = class(wx.Panel) {
	name:static = 'EllipticArc'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		idxs = Range(6):list
		dc.DrawEllipticArc(10 + idxs * 120, 10, 100, 40, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(10 + idxs * 120, 10 + 50, 100, 80, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(10 + idxs * 120, 10 + 140, 100, 120, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280), wx.Size(100, 40), 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280 + 50), wx.Size(100, 80), 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280 + 140), wx.Size(100, 120), 0, (idxs + 1) * 60)
		dc = nil
	}
}

Page_Text = class(wx.Panel) {
	name:static = 'DrawText'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
		dc.DrawCircle(50, 50, 5)
		dc.DrawText('DrawText(text, x, y)', 50, 50)
		dc.DrawCircle(50, 100, 5)
		dc.DrawText('DrawText(text, pt)', wx.Point(50, 100))
		dc.SetFont(wx.Font(30, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		x = 100, y = 200
		for (pair in [(`north, 0), (`south, 150), (`east, 0), (`west, 250),
				(`northeast, 0), (`southeast, 0), (`northwest, 0), (`southwest, 250), (`centre, 0)]) {|i|
			[anchor, xStep] = pair
			dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
			dc.DrawCircle(x, y, 5)
			dc.SetBrush(wx.TRANSPARENT_BRUSH)
			dc.DrawRectangle(dc.PutText(anchor, x, y, anchor))
			x += xStep
		}
		dc.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
		dc.DrawCircle(50, 500, 5)
		dc.DrawRotatedText('DrawRotatedText(text, x, y, 30)', 50, 500, 30)
		dc.DrawCircle(50, 550, 5)
		dc.DrawRotatedText('DrawRotatedText(text, pt, 30)', wx.Point(50, 550), 30)
		dc.SetFont(wx.Font(18, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		x = 600, y = 400
		dc.DrawCircle(x, y, 5)
		repeat (12) {|i|
			deg = i * 360 / 12
			dc.DrawRotatedText(Format('rotated %d', deg), x, y, deg)
		}
		x = 800, y = 400
		dc.DrawCircle(x, y, 5)
		repeat (8) {|i|
			deg = i * 360 / 8
			dc.DrawRotatedText(Format('rotated %d', deg), x, y, deg)
		}
		dc = nil
	}
}

wx.ImplementApp(AppMain())
