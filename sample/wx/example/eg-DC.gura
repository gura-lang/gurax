#!/usr/bin/env gurax
import(wx)
import(xpm)

sample_xpm = xpm.XPMFile('sample.xpm').lines

AppMain = class(wx.App) {
	OnInit() = {
		FrameMain(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(1000, 700)).Show()
		true
	}
}

FrameMain = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		wx.Notebook(this, wx.ID_ANY) {|noteBook|
			[Page_Brush, Page_Pen, Page_DrawLine,
			 Page_DrawArc, Page_DrawCircle, Page_DrawEllipse, Page_DrawEllipticArc,
			 Page_DrawRectangle, Page_DrawRoundedRectangle, Page_Text].Each {|cls|
				noteBook.AddPage(cls(noteBook), cls.name)
			}
			noteBook.SetSelection(8)
		}
	}
}

wx.DC.PutText(text as String, x as Number, y as Number, anchor as Symbol):map = {
	size = this.GetTextExtent(text)
	if (anchor == `centre) {
		x -= size.GetWidth() / 2, y -= size.GetHeight() / 2
	} elsif (anchor == `north) {
		x -= size.GetWidth() / 2
	} elsif (anchor == `south) {
		x -= size.GetWidth() / 2, y -= size.GetHeight()
	} elsif (anchor == `east) {
		x -= size.GetWidth(), y -= size.GetHeight() / 2
	} elsif (anchor == `west) {
		y -= size.GetHeight() / 2
	} elsif (anchor == `northeast) {
		x -= size.GetWidth()
	} elsif (anchor == `southeast) {
		x -= size.GetWidth(), y -= size.GetHeight()
	} elsif (anchor == `northwest) {
		// nothing to do
	} elsif (anchor == `southwest) {
		y -= size.GetHeight()
	}
	this.DrawText(text, x, y)
	wx.Rect(x, y, size.GetWidth(), size.GetHeight())
}

Page_Brush = class(wx.Panel) {
	name:static = 'Brush'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		brushStyleTupleTbl = [
			//(wx.BRUSHSTYLE_INVALID,				'INVALID')
			(wx.BRUSHSTYLE_SOLID,					'SOLID')
			(wx.BRUSHSTYLE_TRANSPARENT,				'TRANSPARENT')
			//(wx.BRUSHSTYLE_STIPPLE_MASK_OPAQUE,	'STIPPLE_MASK_OPAQUE')
			//(wx.BRUSHSTYLE_STIPPLE_MASK,			'STIPPLE_MASK')
			(wx.BRUSHSTYLE_STIPPLE,					'STIPPLE')
			(wx.BRUSHSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH')
			(wx.BRUSHSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSS_HATCH,				'CROSS_HATCH')
			(wx.BRUSHSTYLE_HORIZONTAL_HATCH,		'HORIZONTAL_HATCH')
			(wx.BRUSHSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH')
			//(wx.BRUSHSTYLE_FIRST_HATCH,			'FIRST_HATCH')
			//(wx.BRUSHSTYLE_LAST_HATCH,			'LAST_HATCH')
		]
		brushTupleTbl = [
			(wx.NullBrush,							'NullBrush')
			(wx.BLACK_BRUSH,						'BLACK_BRUSH')
			(wx.BLUE_BRUSH,							'BLUE_BRUSH')
			(wx.CYAN_BRUSH,							'CYAN_BRUSH')
			(wx.GREEN_BRUSH,						'GREEN_BRUSH')
			(wx.YELLOW_BRUSH,						'YELLOW_BRUSH')
			(wx.GREY_BRUSH,							'GREY_BRUSH')
			(wx.LIGHT_GREY_BRUSH,					'LIGHT_GREY_BRUSH')
			(wx.MEDIUM_GREY_BRUSH,					'MEDIUM_GREY_BRUSH')
			(wx.RED_BRUSH,							'RED_BRUSH')
			(wx.TRANSPARENT_BRUSH,					'TRANSPARENT_BRUSH')
			(wx.WHITE_BRUSH,						'WHITE_BRUSH')			
		]
		dc.SetPen(this.pen)
		font = dc.GetFont()
		font.SetPointSize(10)
		dc.SetFont(font)
		brushStyleTupleTbl.Each {|tuple, i|
			[brushStyle, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(wx.Brush('#ff8888', brushStyle))
			dc.DrawRectangle(10, y, 120, 40)
			dc.DrawText(label, 10 + 120 + 10, y)
		}		
		dc.SetPen(wx.BLACK_PEN)
		brushTupleTbl.Each {|tuple, i|
			[brush, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(brush)
			dc.DrawRectangle(300, y, 120, 40)
			dc.DrawText(label, 300 + 120 + 10, y)
		}		
		dc = nil
	}
}

Page_Pen = class(wx.Panel) {
	name:static = 'Pen'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		penStyleTupleTbl = [
			//(wx.PENSTYLE_INVALID,					'INVALID') 	
			(wx.PENSTYLE_SOLID,						'SOLID') 	
			(wx.PENSTYLE_DOT,						'DOT') 	
			(wx.PENSTYLE_LONG_DASH,					'LONG_DASH') 	
			(wx.PENSTYLE_SHORT_DASH,				'SHORT_DASH') 	
			(wx.PENSTYLE_DOT_DASH,					'DOT_DASH') 	
			(wx.PENSTYLE_USER_DASH,					'USER_DASH') 	
			(wx.PENSTYLE_TRANSPARENT,				'TRANSPARENT') 	
			//(wx.PENSTYLE_STIPPLE_MASK_OPAQUE,		'STIPPLE_MASK_OPAQUE') 	
			//(wx.PENSTYLE_STIPPLE_MASK,			'STIPPLE_MASK') 	
			(wx.PENSTYLE_STIPPLE,					'STIPPLE') 	
			(wx.PENSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH') 	
			(wx.PENSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSS_HATCH,				'CROSS_HATCH') 	
			(wx.PENSTYLE_HORIZONTAL_HATCH,			'HORIZONTAL_HATCH') 	
			(wx.PENSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH') 	
			//(wx.PENSTYLE_FIRST_HATCH,				'FIRST_HATCH') 	
			//(wx.PENSTYLE_LAST_HATCH,				'LAST_HATCH') 	
		]
		penTupleTbl = [
			(wx.NullPen,							'NullPen')
			(wx.BLACK_DASHED_PEN,					'BLACK_DASHED_PEN')
			(wx.BLACK_PEN,							'BLACK_PEN')
			(wx.BLUE_PEN,							'BLUE_PEN')
			(wx.CYAN_PEN,							'CYAN_PEN')
			(wx.GREEN_PEN,							'GREEN_PEN')
			(wx.YELLOW_PEN,							'YELLOW_PEN')
			(wx.GREY_PEN,							'GREY_PEN')
			(wx.LIGHT_GREY_PEN,						'LIGHT_GREY_PEN')
			(wx.MEDIUM_GREY_PEN,					'MEDIUM_GREY_PEN')
			(wx.RED_PEN,							'RED_PEN')
			(wx.TRANSPARENT_PEN,					'TRANSPARENT_PEN')
			(wx.WHITE_PEN,							'WHITE_PEN')
		]
		dc.SetPen(this.pen)
		fontLabel = dc.GetFont()
		fontLabel.SetPointSize(10)
		fontWidth = dc.GetFont()
		fontWidth.SetPointSize(6)
		penStyleTupleTbl.Each {|tuple, i|
			[penStyle, label] = tuple
			x = 10 + Int(i / 8) * 240
			y = 10 + (i % 8) * 80
			dc.SetFont(fontLabel)
			dc.DrawText(label, x + 120 + 30, y)
			dc.SetFont(fontWidth)
			repeat (5) {|i|
				dc.DrawText(Format('%d', i), x + 120 + 10, y - 6)
				dc.SetPen(wx.Pen('#ff8888', i, penStyle))
				dc.DrawLine(x, y, x + 120, y)
				y += 12
			}
		}		
		dc.SetPen(wx.BLACK_PEN)
		penTupleTbl.Each {|tuple, i|
			[pen, label] = tuple
			x = 550
			y = 10 + i * 30
			dc.SetPen(pen)
			dc.DrawLine(x, y, x + 120, y)
			dc.SetFont(fontLabel)
			dc.DrawText(label, x + 120 + 10, y - 10)
		}
		dc = nil
	}
}

Page_DrawLine = class(wx.Panel) {
	name:static = 'DrawLine'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		fontLabel = dc.GetFont()
		fontLabel.SetPointSize(10)
		dc.SetFont(fontLabel)
		xOffset = 100
		[1, 10].Each {|wdPen|
			dc.SetPen(wx.Pen('#ff8888', wdPen, wx.PENSTYLE_SOLID))
			y = 120
			for (n in [5, 13, 29]) {
				radTbl = (math.pi * (n - 1) / n) * [0..n]
				radius = 70
				x = xOffset
				scope {
					dc.PutText('DrawLine(x1, y1, x2, y2)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					repeat (ptTbl.len - 1) {|i|
						dc.DrawLine(ptTbl[i].x, ptTbl[i].y, ptTbl[i + 1].x, ptTbl[i + 1].y)
					}
				}
				x += 150
				scope {
					dc.PutText('DrawLine(pt1, pt2)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					repeat (ptTbl.len - 1) {|i|
						dc.DrawLine(ptTbl[i], ptTbl[i + 1])
					}
				}
				x += 150
				scope {
					dc.PutText('DrawLines(ptTbl)', x, y - radius - 10, `south)
					ptTbl = wx.Point(math.Cos(radTbl) * radius + x, math.Sin(radTbl) * radius + y):map
					dc.DrawLines(ptTbl)
				}
				y += 200
			}
			xOffset += 480
		}
		dc = nil
	}
}

Page_DrawArc = class(wx.Panel) {
	name:static = 'DrawArc'
	brush as wx.Brush
	ptDict = %{
		`centre => wx.Point(600, 300)
		`start => wx.Point(600 + 200, 300)
		`end => wx.Point(600 - 40, 300 - 200)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawArc(100 + 80, 100 - 10, 100 - 10, 100 - 10, 100, 100)
		dc.PutText('DrawArc(xStart, yStart, xEnd, yEnd, xCentre, yCentre)', 100, 100 - 30, `southwest)
		dc.DrawArc(wx.Point(100 + 80, 200 - 10), wx.Point(100 - 10, 200 - 10), wx.Point(100, 200))
		dc.PutText('DrawArc(ptStart, ptEnd, ptCentre)', 100, 200 - 30, `southwest)
		dc.DrawArc(this.ptDict[`start], this.ptDict[`end], this.ptDict[`centre])
		dc.SetPen(wx.Pen('#888888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.DrawLine(this.ptDict[`centre], this.ptDict[`start])
		dc.DrawLine(this.ptDict[`centre], this.ptDict[`end])
		dc.PutText('Centre', this.ptDict[`centre].x + 4, this.ptDict[`centre].y + 4, `northwest)
		dc.PutText('Start', this.ptDict[`start].x + 4, this.ptDict[`start].y + 4, `northwest)
		dc.PutText('End', this.ptDict[`end].x + 4, this.ptDict[`end].y + 4, `northwest)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} else {
			this.ptDict[this.target] = ptCursor
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_DrawCircle = class(wx.Panel) {
	name:static = 'DrawCircle'
	brush as wx.Brush
	ptDict = %{
		`centre => wx.Point(600, 300)
		`sizer => wx.Point(600 + 200, 300)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawCircle(100, 100, 60)
		dc.PutText('DrawCircle(xCentre, yCentre, radius)', 100, 100, `southwest)
		dc.DrawCircle(wx.Point(100, 250), 60)
		dc.PutText('DrawCircle(ptCentre, radius)', 100, 250, `southwest)
		dc.DrawCircle(this.ptDict[`centre], this.ptDict[`sizer].x - this.ptDict[`centre].x)
		dc.SetPen(wx.Pen('#888888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.DrawLine(this.ptDict[`centre], this.ptDict[`sizer])
		dc.PutText('Centre', this.ptDict[`centre].x + 4, this.ptDict[`centre].y + 4, `northwest)
		pt = (this.ptDict[`centre] + this.ptDict[`sizer]) / 2
		dc.PutText('Radius', pt.x, pt.y - 4, `south)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} elsif (this.target == `sizer) {
			this.ptDict[this.target] = ptCursor
			this.ptDict[`sizer].y = this.ptDict[`centre].y
			this.Refresh()
		} else {
			radius = this.ptDict[`sizer].x - this.ptDict[`centre].x
			this.ptDict[this.target] = ptCursor
			this.ptDict[`sizer].x = this.ptDict[`centre].x + radius
			this.ptDict[`sizer].y = this.ptDict[`centre].y
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_DrawEllipse = class(wx.Panel) {
	name:static = 'DrawEllipse'
	brush as wx.Brush
	ptDict = %{
		`lefttop => wx.Point(400, 100)
		`rightbottom => wx.Point(400 + 400, 100 + 300)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawEllipse(30, 40, 100, 70)
		dc.PutText('DrawEllipse(x, y, width, height)', 30 + 100 / 2, 40 + 70 / 2, `southwest)
		dc.DrawEllipse(wx.Point(30, 130), wx.Size(100, 70))
		dc.PutText('DrawEllipse(pt, size)', 30 + 100 / 2, 130 + 70 / 2, `southwest)
		dc.DrawEllipse(wx.Rect(30, 220, 100, 70))
		dc.PutText('DrawEllipse(rect)', 30 + 100 / 2, 220 + 70 / 2, `southwest)
		pt = this.ptDict[`rightbottom] - this.ptDict[`lefttop]
		dc.DrawEllipse(this.ptDict[`lefttop], wx.Size(pt.x, pt.y))
		dc.SetPen(wx.Pen('#888888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.DrawRectangle(this.ptDict[`lefttop], wx.Size(pt.x, pt.y))
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.PutText('pt', this.ptDict[`lefttop].x + 4, this.ptDict[`lefttop].y + 4, `northwest)
		ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
		dc.PutText('width', ptMiddle.x, this.ptDict[`lefttop].y - 4, `south)
		dc.PutText('height', this.ptDict[`rightbottom].x + 4, ptMiddle.y, `west)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} else {
			this.ptDict[this.target] = ptCursor
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_DrawEllipticArc = class(wx.Panel) {
	name:static = 'DrawEllipticArc'
	brush as wx.Brush
	radiusDict = %{ `angleStart => 100, `angleEnd => 90 }
	ptDict = %{
		`lefttop => wx.Point(400, 100)
		`rightbottom => wx.Point(400 + 400, 100 + 300)
		`angleStart => wx.Point(400 + 400 / 2 + 100, 100 + 300 / 2)
		`angleEnd => wx.Point(400 + 400 / 2, 100 + 300 / 2 + 90)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
		ptDiff = this.ptDict[`angleStart] - ptMiddle
		angleStart = math.Atan2(-ptDiff.y, ptDiff.x) * 180 / math.pi
		ptDiff = this.ptDict[`angleEnd] - ptMiddle
		angleEnd = math.Atan2(-ptDiff.y, ptDiff.x) * 180 / math.pi
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawEllipticArc(30, 40, 100, 70, 30, 290)
		dc.PutText('DrawEllipticArc(x, y, width, height, sa, ea)', 30 + 100 / 2, 40 + 70 / 2, `southwest)
		dc.DrawEllipticArc(wx.Point(30, 130), wx.Size(100, 70), 30, 290)
		dc.PutText('DrawEllipticArc(pt, size, sa, ea)', 30 + 100 / 2, 130 + 70 / 2, `southwest)
		pt = this.ptDict[`rightbottom] - this.ptDict[`lefttop]
		dc.DrawEllipticArc(this.ptDict[`lefttop], wx.Size(pt.x, pt.y), angleStart, angleEnd)
		dc.SetPen(wx.Pen('#888888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.DrawRectangle(this.ptDict[`lefttop], wx.Size(pt.x, pt.y))
		dc.SetPen(wx.Pen('#cccccc', 1, wx.PENSTYLE_SOLID))
		dc.DrawCircle(ptMiddle, this.radiusDict[`angleStart])
		dc.DrawCircle(ptMiddle, this.radiusDict[`angleEnd])
		dc.SetPen(wx.TRANSPARENT_PEN)
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.PutText('pt', this.ptDict[`lefttop].x + 4, this.ptDict[`lefttop].y + 4, `northwest)
		dc.PutText('width', ptMiddle.x, this.ptDict[`lefttop].y - 4, `south)
		dc.PutText('height', this.ptDict[`rightbottom].x + 4, ptMiddle.y, `west)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} elsif (this.target in [`angleStart, `angleEnd]) {
			ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
			ptDiff = ptCursor - ptMiddle
			rad = math.Atan2(ptDiff.y, ptDiff.x)
			radius = this.radiusDict[this.target]
			this.ptDict[this.target] = ptMiddle + wx.Point(radius * math.Cos(rad), radius * math.Sin(rad))
			this.Refresh()
		} else {
			ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
			radDict = %{}
			[`angleStart, `angleEnd].Each {|target|
				pt = this.ptDict[target]
				ptDiff = pt - ptMiddle
				radDict[target] = math.Atan2(ptDiff.y, ptDiff.x)
			}
			this.ptDict[this.target] = ptCursor
			ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
			[`angleStart, `angleEnd].Each {|target|
				rad = radDict[target]
				radius = this.radiusDict[target]
				this.ptDict[target] = ptMiddle + wx.Point(radius * math.Cos(rad), radius * math.Sin(rad))
			}
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_DrawRectangle = class(wx.Panel) {
	name:static = 'DrawRectangle'
	brush as wx.Brush
	ptDict = %{
		`lefttop => wx.Point(400, 100)
		`rightbottom => wx.Point(400 + 400, 100 + 300)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawRectangle(30, 40, 100, 70)
		dc.PutText('DrawRectangle(x, y, width, height)', 30 + 100 / 2, 40 + 70 / 2, `southwest)
		dc.DrawRectangle(wx.Point(30, 130), wx.Size(100, 70))
		dc.PutText('DrawRectangle(pt, size)', 30 + 100 / 2, 130 + 70 / 2, `southwest)
		dc.DrawRectangle(wx.Rect(30, 220, 100, 70))
		dc.PutText('DrawRectangle(rect)', 30 + 100 / 2, 220 + 70 / 2, `southwest)
		pt = this.ptDict[`rightbottom] - this.ptDict[`lefttop]
		dc.DrawRectangle(this.ptDict[`lefttop], wx.Size(pt.x, pt.y))
		dc.SetPen(wx.TRANSPARENT_PEN)
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.PutText('pt', this.ptDict[`lefttop].x + 4, this.ptDict[`lefttop].y + 4, `northwest)
		dc.PutText('width', ptMiddle.x, this.ptDict[`lefttop].y - 4, `south)
		dc.PutText('height', this.ptDict[`rightbottom].x + 4, ptMiddle.y, `west)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} else {
			this.ptDict[this.target] = ptCursor
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_DrawRoundedRectangle = class(wx.Panel) {
	name:static = 'DrawRoundedRectangle'
	brush as wx.Brush
	ptDict = %{
		`lefttop => wx.Point(400, 100)
		`rightbottom => wx.Point(400 + 400, 100 + 300)
		`corner => wx.Point(400 + 40, 100 + 300)
	}
	rcDict = %{}
	font as wx.Font
	target = `none
	__init__(parent as wx.Window) = {|parent|
		this.SetBackgroundStyle(wx.BG_STYLE_PAINT)
		this.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		radiusPoint = 5
		idxs = Range(10):list
		ptMiddle = (this.ptDict[`lefttop] + this.ptDict[`rightbottom]) / 2
		dc = wx.BufferedPaintDC(this)
		dc.SetBackground(wx.WHITE_BRUSH)
		dc.Clear()
		dc.SetFont(this.font)
		dc.SetTextForeground('#444444')
		pt = this.ptDict[`rightbottom] - this.ptDict[`lefttop]
		dc.SetPen(wx.Pen('#cccccc', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.DrawRectangle(this.ptDict[`lefttop], wx.Size(pt.x, pt.y))
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH))
		dc.DrawRoundedRectangle(30, 40, 100, 70, 10)
		dc.PutText('DrawRoundedRectangle(x, y, width, height, radius)', 30 + 100 / 2, 40 + 70 / 2, `southwest)
		dc.DrawRoundedRectangle(wx.Point(30, 130), wx.Size(100, 70), 10)
		dc.PutText('DrawRoundedRectangle(pt, size, radius)', 30 + 100 / 2, 130 + 70 / 2, `southwest)
		dc.DrawRoundedRectangle(wx.Rect(30, 220, 100, 70), 10)
		dc.PutText('DrawRoundedRectangle(rect, radius)', 30 + 100 / 2, 220 + 70 / 2, `southwest)
		radius = this.ptDict[`corner].x - this.ptDict[`lefttop].x
		dc.DrawRoundedRectangle(this.ptDict[`lefttop], wx.Size(pt.x, pt.y), radius)
		dc.SetPen(wx.TRANSPARENT_PEN)
		dc.SetBrush(wx.Brush('#888888', wx.BRUSHSTYLE_SOLID))
		this.ptDict.Each {|pair|
			[symbol, pt] = pair
			dc.DrawCircle(pt.x, pt.y, radiusPoint)
			this.rcDict[symbol] = wx.Rect(pt.x - radiusPoint, pt.y - radiusPoint, radiusPoint * 2, radiusPoint * 2)
		}
		dc.PutText('pt', this.ptDict[`lefttop].x + 4, this.ptDict[`lefttop].y + 4, `northwest)
		dc.PutText('width', ptMiddle.x, this.ptDict[`lefttop].y - 4, `south)
		dc.PutText('height', this.ptDict[`rightbottom].x + 4, ptMiddle.y, `west)
		dc.PutText('radius', (this.ptDict[`lefttop].x + this.ptDict[`corner].x) / 2, this.ptDict[`rightbottom].y + 4, `north)
		dc = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		if (this.target == `none) {
			if (this.rcDict.EachValue():*Contains(ptCursor).Or()) {
				this.SetCursor(wx.CROSS_CURSOR)
			} else {
				this.SetCursor(wx.STANDARD_CURSOR)
			}
		} elsif (this.target == `corner) {
			this.ptDict[`corner].x = Min(Max(ptCursor.x, this.ptDict[`lefttop].x), this.ptDict[`rightbottom].x)
			this.Refresh()
		} else {
			radius = this.ptDict[`corner].x - this.ptDict[`lefttop].x
			this.ptDict[this.target] = ptCursor
			this.ptDict[`corner] = wx.Point(Min(Max(this.ptDict[`lefttop].x + radius, this.ptDict[`lefttop].x), this.ptDict[`rightbottom].x), this.ptDict[`rightbottom].y)
			this.Refresh()
		}
		//mouseState = wx.GetMouseState()
		//if (!mouseState.LeftIsDown()) { this.target = `none }
	}
	OnLeftDown(event as wx.MouseEvent) = {
		ptCursor = event.GetPosition()
		this.rcDict.Each {|pair|
			[symbol, rc] = pair
			if (rc.Contains(ptCursor)) {
				this.target = symbol
				break
			}
		}
	}
	OnLeftUp(event as wx.MouseEvent) = {
		this.target = `none		
	}
}

Page_Text = class(wx.Panel) {
	name:static = 'DrawText'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID))
		dc.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
		dc.DrawCircle(50, 50, 5)
		dc.DrawText('DrawText(text, x, y)', 50, 50)
		dc.DrawCircle(50, 100, 5)
		dc.DrawText('DrawText(text, pt)', wx.Point(50, 100))
		dc.SetFont(wx.Font(30, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		x = 100, y = 200
		for (pair in [(`north, 0), (`south, 150), (`east, 0), (`west, 250),
				(`northeast, 0), (`southeast, 0), (`northwest, 0), (`southwest, 250), (`centre, 0)]) {|i|
			[anchor, xStep] = pair
			dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
			dc.DrawCircle(x, y, 5)
			dc.SetBrush(wx.TRANSPARENT_BRUSH)
			dc.DrawRectangle(dc.PutText(anchor, x, y, anchor))
			x += xStep
		}
		dc.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		dc.SetBrush(wx.Brush('#ff8888', wx.BRUSHSTYLE_SOLID))
		dc.DrawCircle(50, 500, 5)
		dc.DrawRotatedText('DrawRotatedText(text, x, y, 30)', 50, 500, 30)
		dc.DrawCircle(50, 550, 5)
		dc.DrawRotatedText('DrawRotatedText(text, pt, 30)', wx.Point(50, 550), 30)
		dc.SetFont(wx.Font(18, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		x = 600, y = 400
		dc.DrawCircle(x, y, 5)
		repeat (12) {|i|
			deg = i * 360 / 12
			dc.DrawRotatedText(Format('rotated %d', deg), x, y, deg)
		}
		x = 800, y = 400
		dc.DrawCircle(x, y, 5)
		repeat (8) {|i|
			deg = i * 360 / 8
			dc.DrawRotatedText(Format('rotated %d', deg), x, y, deg)
		}
		dc = nil
	}
}

wx.ImplementApp(AppMain())
