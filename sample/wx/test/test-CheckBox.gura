#!/usr/bin/env gurax
import(wx)

MyApp = class(wx.App) {
	OnInit() = {
		MyFrame(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(800, 600)).Show()
		true
	}
}

MyFrame = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		PanelTop(this)
	}
}

Row = struct {
	checkBox as wx.CheckBox
	radioButton_Unchecked as wx.RadioButton
	radioButton_Checked as wx.RadioButton
	radioButton_Undetermined as wx.RadioButton
}

tbl = @{
	('2 State', wx.CHK_2STATE)
	('3 State', wx.CHK_3STATE)
	('3 State && Allow 3rd State', wx.CHK_3STATE | wx.CHK_ALLOW_3RD_STATE_FOR_USER)
	('2 State', wx.CHK_2STATE | wx.ALIGN_RIGHT)
	('3 State', wx.CHK_3STATE | wx.ALIGN_RIGHT)
	('3 State && Allow 3rd State', wx.CHK_3STATE | wx.CHK_ALLOW_3RD_STATE_FOR_USER | wx.ALIGN_RIGHT)
}

PanelTop = class(wx.Panel) {
	textCtrl as wx.TextCtrl
	rows = Dim(tbl.len) {Row()}
	__init__(parent as wx.Window) = {|parent|
		sizerTop = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(sizerTop)
		wx.FlexGridSizer(4, wx.Size(16, 8)) {|sizer|
			sizerTop.Add(sizer, wx.SizerFlags().Expand().Border(wx.ALL, 12))
			for (tuple in tbl, row in this.rows) {
				[label, style] = tuple
				wx.CheckBox(this, wx.ID_ANY, label, style = style) {|ctrl|
					sizer.Add(ctrl, wx.SizerFlags().Expand())
					wx.EVT_CHECKBOX(ctrl, this.OnCheckBox, userData = row)
					row.checkBox = ctrl
				}
				wx.RadioButton(this, wx.ID_ANY, 'Unchecked', style = wx.RB_GROUP) {|ctrl|
					sizer.Add(ctrl, wx.SizerFlags().Expand())
					wx.EVT_RADIOBUTTON(ctrl, this.OnRadioButton_Unchecked, userData = row)
					row.radioButton_Unchecked = ctrl
				}
				wx.RadioButton(this, wx.ID_ANY, 'Checked') {|ctrl|
					sizer.Add(ctrl, wx.SizerFlags().Expand())
					wx.EVT_RADIOBUTTON(ctrl, this.OnRadioButton_Checked, userData = row)
					row.radioButton_Checked = ctrl
				}
				wx.RadioButton(this, wx.ID_ANY, 'Undetermined') {|ctrl|
					sizer.Add(ctrl, wx.SizerFlags().Expand())
					wx.EVT_RADIOBUTTON(ctrl, this.OnRadioButton_Undetermined, userData = row)
					row.radioButton_Undetermined = ctrl
					ctrl.Enable((style & wx.CHK_3STATE) != 0)
				}
			}
		}
		wx.TextCtrl(this, wx.ID_ANY, style = wx.TE_MULTILINE) {|ctrl|
			sizerTop.Add(ctrl, wx.SizerFlags(1).Expand())
			this.textCtrl = ctrl
		}
	}
	Printf(format as String, args*) = this.textCtrl.WriteText(Format(format, args*))
	OnCheckBox(event as wx.Event) = {
		row = event.GetEventUserData()
		this.Printf('Value = %s, 3-State = %d\n', row.checkBox.GetValue(), row.checkBox.Get3StateValue())
		value = row.checkBox.Get3StateValue()
		if (value == wx.CHK_UNCHECKED) {
			row.radioButton_Unchecked.SetValue(true)
		} elsif (value == wx.CHK_CHECKED) {
			row.radioButton_Checked.SetValue(true)
		} elsif (value == wx.CHK_UNDETERMINED) {
			row.radioButton_Undetermined.SetValue(true)
		}
	}
	OnRadioButton_Unchecked(event as wx.Event) = {
		row = event.GetEventUserData()
		row.checkBox.Set3StateValue(wx.CHK_UNCHECKED)
	}
	OnRadioButton_Checked(event as wx.Event) = {
		row = event.GetEventUserData()
		row.checkBox.Set3StateValue(wx.CHK_CHECKED)
	}
	OnRadioButton_Undetermined(event as wx.Event) = {
		row = event.GetEventUserData()
		row.checkBox.Set3StateValue(wx.CHK_UNDETERMINED)
	}
}

wx.ImplementApp(MyApp())
