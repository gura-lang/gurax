#!/usr/bin/env gurax
import(wx)

textCtrl as wx.TextCtrl = nil

LogPrintf(format as String, args*) = {
	textCtrl.AppendText(Format(format, args*))
}

AppMain = class(wx.App) {
	OnInit() = {
		FrameMain(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(800, 600)).Show()
		true
	}
}

FrameMain = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		PanelTop(this)
	}
}

panels = []

Panel = class(wx.Panel) {
	name as String
	vbox as wx.BoxSizer
	__init__(parent as wx.Window, name as String) = {|parent|
		this.name = name
		sizerTop = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(sizerTop)
		wx.Button(this, wx.ID_ANY, 'Show ' + this.name) {|ctrl|
			sizerTop.Add(ctrl, wx.SizerFlags().Expand().Border(wx.ALL, 8))
			ctrl.Bind(wx.EVT_BUTTON, this.OnButton)
		}
		this.vbox = wx.BoxSizer(wx.VERTICAL)
		sizerTop.Add(this.vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 8))
	}
	OnButton(event as wx.CommandEvent) = this.ShowDialog()
}

Panel_ColourDialog = class(Panel) {
	checkBox_ChooseFull
	__init__(parent as wx.Window) = {|parent, 'ColourDialog'|
		wx.CheckBox(this, wx.ID_ANY, 'ChooseFull') {|ctrl|
			this.vbox.Add(ctrl, wx.SizerFlags().Expand())
			this.checkBox_ChooseFull = ctrl
		}
	}
	ShowDialog() = {
		data = wx.ColourData()
		repeat (16) {|i|
			data.SetCustomColour(i, wx.Colour(i * 16, i * 16, i * 16))
		}
		data.SetChooseFull(this.checkBox_ChooseFull.IsChecked())
		dlg = wx.ColourDialog(this, data)
		rtn = dlg.ShowModal()
		LogPrintf('rtn = %d\n', rtn)
		if (rtn == wx.ID_OK) {
			colourData = dlg.GetColourData()
			LogPrintf('ToString():  %s\n', colourData.ToString())
			LogPrintf('GetColour(): %s\n', colourData.GetColour())
		}
	}
}
panels.Add(Panel_ColourDialog)

Panel_FontDialog = class(Panel) {
	__init__(parent as wx.Window) = {|parent, 'FontDialog'|}
	ShowDialog() = {
		data = wx.FontData()
		data.EnableEffects(false)
		data.SetAllowSymbols(false)
		data.SetInitialFont(textCtrl.GetFont())
		dlg = wx.FontDialog(this, data)
		rtn = dlg.ShowModal()
	}
}
panels.Add(Panel_FontDialog)

Panel_FileDialog = class(Panel) {
	checkBoxTbl = []
	styleTbl = []
	__init__(parent as wx.Window) = {|parent, 'FileDialog'|
		[('FD_OPEN', wx.FD_OPEN), ('FD_SAVE', wx.FD_SAVE), ('FD_OVERWRITE_PROMPT', wx.FD_OVERWRITE_PROMPT),
			('FD_FILE_MUST_EXIST', wx.FD_FILE_MUST_EXIST), ('FD_MULTIPLE', wx.FD_MULTIPLE),
			('FD_CHANGE_DIR', wx.FD_CHANGE_DIR), ('FD_PREVIEW', wx.FD_PREVIEW)].Each {|tuple, i|
			[label, style] = tuple
			(i > 0) && this.vbox.AddSpacer(8)
			wx.CheckBox(this, wx.ID_ANY, label) {|ctrl|
				this.vbox.Add(ctrl, wx.SizerFlags().Expand())
				this.checkBoxTbl.Add(ctrl)
			}
			this.styleTbl.Add(style)
		}
	}
	ShowDialog() = {
		style = 0
		this.checkBoxTbl.Each {|checkBox, i|
			if (checkBox.IsChecked()) { style |= this.styleTbl[i] }
		}
		dlg = wx.FileDialog(this,
			message = 'Test'
			defaultDir = ''
			defaultFile = ''
			wildcard = wx.FileSelectorDefaultWildcardStr
			style = style
			pos = wx.Point(300, 50)
			size = wx.DefaultSize)
		rtn = dlg.ShowModal()
		LogPrintf('rtn = %d\n', rtn)
		if (rtn == wx.ID_OK) {
			LogPrintf('GetCurrentlySelectedFilename: %s\n', dlg.GetCurrentlySelectedFilename())
			LogPrintf('GetDirectory   %s\n', dlg.GetDirectory())
			!(style & wx.FD_MULTIPLE) && LogPrintf('GetFilename    %s\n', dlg.GetFilename())
			LogPrintf('GetFilenames   %s\n', dlg.GetFilenames().Join('\n               '))
			LogPrintf('GetMessage     %s\n', dlg.GetMessage())
			!(style & wx.FD_MULTIPLE) && LogPrintf('GetPath        %s\n', dlg.GetPath())
			LogPrintf('GetPaths       %s\n', dlg.GetPaths().Join('\n               '))
			LogPrintf('GetWildcard    %s\n', dlg.GetWildcard())
		}
	}
}
panels.Add(Panel_FileDialog)

PanelTop = class(wx.Panel) {
	__init__(parent as wx.Window) = {|parent|
		sizerTop = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(sizerTop)
		wx.Notebook(this, wx.ID_ANY) {|notebook|
			sizerTop.Add(notebook, wx.SizerFlags(1).Expand())
			panels.Each {|Panel|
				Panel(notebook) {|panel| notebook.AddPage(panel, panel.name)}
			}
			//notebook.SetSelection(2)
		}
		wx.TextCtrl(this, wx.ID_ANY, '', style = wx.TE_MULTILINE) {|ctrl|
			ctrl.SetFont(wx.Font(12, wx.FONTFAMILY_TELETYPE,  wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
			textCtrl:extern = ctrl
			sizerTop.Add(ctrl, wx.SizerFlags(1).Expand())
		}
	}
}

wx.ImplementApp(AppMain())
