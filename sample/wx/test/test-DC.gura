#!/usr/bin/env gurax
import(wx)
import(xpm)

sample_xpm = xpm.XPMFile('sample.xpm').lines

MyApp = class(wx.App) {
	OnInit() = {
		MyFrame(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(800, 800)).Show()
		true
	}
}

MyFrame = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		wx.Notebook(this, wx.ID_ANY) {|noteBook|
			[Page_Brush, Page_Pen, Page_Line, Page_Arc, Page_Circle, Page_Ellipse, Page_EllipticArc, Page_Text].Each {|cls|
				noteBook.AddPage(cls(noteBook), cls.name)
			}
			noteBook.SetSelection(1)
		}
	}
}

Page_Brush = class(wx.Panel) {
	name:static = 'Brush'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		brushStyleTupleTbl = [
			//(wx.BRUSHSTYLE_INVALID,				'INVALID')
			(wx.BRUSHSTYLE_SOLID,					'SOLID')
			(wx.BRUSHSTYLE_TRANSPARENT,				'TRANSPARENT')
			//(wx.BRUSHSTYLE_STIPPLE_MASK_OPAQUE,	'STIPPLE_MASK_OPAQUE')
			//(wx.BRUSHSTYLE_STIPPLE_MASK,			'STIPPLE_MASK')
			(wx.BRUSHSTYLE_STIPPLE,					'STIPPLE')
			(wx.BRUSHSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH')
			(wx.BRUSHSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH')
			(wx.BRUSHSTYLE_CROSS_HATCH,				'CROSS_HATCH')
			(wx.BRUSHSTYLE_HORIZONTAL_HATCH,		'HORIZONTAL_HATCH')
			(wx.BRUSHSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH')
			//(wx.BRUSHSTYLE_FIRST_HATCH,			'FIRST_HATCH')
			//(wx.BRUSHSTYLE_LAST_HATCH,			'LAST_HATCH')
		]
		brushTupleTbl = [
			(wx.NullBrush,							'NullBrush')
			(wx.BLACK_BRUSH,						'BLACK_BRUSH')
			(wx.BLUE_BRUSH,							'BLUE_BRUSH')
			(wx.CYAN_BRUSH,							'CYAN_BRUSH')
			(wx.GREEN_BRUSH,						'GREEN_BRUSH')
			(wx.YELLOW_BRUSH,						'YELLOW_BRUSH')
			(wx.GREY_BRUSH,							'GREY_BRUSH')
			(wx.LIGHT_GREY_BRUSH,					'LIGHT_GREY_BRUSH')
			(wx.MEDIUM_GREY_BRUSH,					'MEDIUM_GREY_BRUSH')
			(wx.RED_BRUSH,							'RED_BRUSH')
			(wx.TRANSPARENT_BRUSH,					'TRANSPARENT_BRUSH')
			(wx.WHITE_BRUSH,						'WHITE_BRUSH')			
		]
		dc.SetPen(this.pen)
		font = dc.GetFont()
		font.SetPointSize(10)
		dc.SetFont(font)
		brushStyleTupleTbl.Each {|tuple, i|
			[brushStyle, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(wx.Brush('#ff8888', brushStyle))
			dc.DrawRectangle(10, y, 120, 40)
			dc.DrawText(label, 10 + 120 + 10, y)
		}		
		dc.SetPen(wx.BLACK_PEN)
		brushTupleTbl.Each {|tuple, i|
			[brush, label] = tuple
			y = 10 + i * 50
			dc.SetBrush(brush)
			dc.DrawRectangle(300, y, 120, 40)
			dc.DrawText(label, 300 + 120 + 10, y)
		}		
		dc = nil
	}
}

Page_Pen = class(wx.Panel) {
	name:static = 'Pen'
	pen as wx.Pen
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		penStyleTupleTbl = [
			//(wx.PENSTYLE_INVALID,					'INVALID') 	
			(wx.PENSTYLE_SOLID,						'SOLID') 	
			(wx.PENSTYLE_DOT,						'DOT') 	
			(wx.PENSTYLE_LONG_DASH,					'LONG_DASH') 	
			(wx.PENSTYLE_SHORT_DASH,				'SHORT_DASH') 	
			(wx.PENSTYLE_DOT_DASH,					'DOT_DASH') 	
			(wx.PENSTYLE_USER_DASH,					'USER_DASH') 	
			(wx.PENSTYLE_TRANSPARENT,				'TRANSPARENT') 	
			//(wx.PENSTYLE_STIPPLE_MASK_OPAQUE,		'STIPPLE_MASK_OPAQUE') 	
			//(wx.PENSTYLE_STIPPLE_MASK,			'STIPPLE_MASK') 	
			(wx.PENSTYLE_STIPPLE,					'STIPPLE') 	
			(wx.PENSTYLE_BDIAGONAL_HATCH,			'BDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSSDIAG_HATCH,			'CROSSDIAG_HATCH') 	
			(wx.PENSTYLE_FDIAGONAL_HATCH,			'FDIAGONAL_HATCH') 	
			(wx.PENSTYLE_CROSS_HATCH,				'CROSS_HATCH') 	
			(wx.PENSTYLE_HORIZONTAL_HATCH,			'HORIZONTAL_HATCH') 	
			(wx.PENSTYLE_VERTICAL_HATCH,			'VERTICAL_HATCH') 	
			//(wx.PENSTYLE_FIRST_HATCH,				'FIRST_HATCH') 	
			//(wx.PENSTYLE_LAST_HATCH,				'LAST_HATCH') 	


		]
		penTupleTbl = [
			(wx.NullPen,							'NullPen')
			(wx.BLACK_DASHED_PEN,					'BLACK_DASHED_PEN')
			(wx.BLACK_PEN,							'BLACK_PEN')
			(wx.BLUE_PEN,							'BLUE_PEN')
			(wx.CYAN_PEN,							'CYAN_PEN')
			(wx.GREEN_PEN,							'GREEN_PEN')
			(wx.YELLOW_PEN,							'YELLOW_PEN')
			(wx.GREY_PEN,							'GREY_PEN')
			(wx.LIGHT_GREY_PEN,						'LIGHT_GREY_PEN')
			(wx.MEDIUM_GREY_PEN,					'MEDIUM_GREY_PEN')
			(wx.RED_PEN,							'RED_PEN')
			(wx.TRANSPARENT_PEN,					'TRANSPARENT_PEN')
			(wx.WHITE_PEN,							'WHITE_PEN')
		]
		dc.SetPen(this.pen)
		fontLabel = dc.GetFont()
		fontLabel.SetPointSize(10)
		fontWidth = dc.GetFont()
		fontWidth.SetPointSize(6)
		penStyleTupleTbl.Each {|tuple, i|
			[penStyle, label] = tuple
			y = 10 + i * 50
			dc.SetFont(fontLabel)
			dc.DrawText(label, 10 + 120 + 30, y)
			dc.SetFont(fontWidth)
			repeat (5) {|i|
				dc.DrawText(Format('%d', i), 10 + 120 + 10, y - 6)
				dc.SetPen(wx.Pen('#ff8888', i, penStyle))
				dc.DrawLine(10, y, 10 + 120, y)
				y += 8
			}
		}		
		dc.SetPen(wx.BLACK_PEN)
		penTupleTbl.Each {|tuple, i|
			[pen, label] = tuple
			y = 10 + i * 30
			dc.SetPen(pen)
			dc.DrawLine(300, y, 300 + 120, y)
			dc.SetFont(fontLabel)
			dc.DrawText(label, 300 + 120 + 10, y - 10)
		}		
		dc = nil
	}
}

Page_Line = class(wx.Panel) {
	name:static = 'Line'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.DrawLine(0, 0, 100, 100)
		dc.DrawLines(@(wx.Point) {{0, 0}, {30, 100}, {50, 50}}, 300, 50)
		dc.DrawIcon(wx.Icon(sample_xpm), [200, 240, 280], 20)
		dc = nil
	}
}

Page_Arc = class(wx.Panel) {
	name:static = 'Arc'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs = Range(10):list
		dc = wx.PaintDC(this)
		xc = 100, yc = 100
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		dc.DrawArc(xc + 50, yc, xc - 40, yc - 50, xc, yc)
		dc = nil
	}
}

Page_Circle = class(wx.Panel) {
	name:static = 'Circle'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		idxs  = Range(10)
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		dc.DrawCircle(idxs * 100, 100, idxs * 10 + 10)
		dc = nil
	}
}

Page_Ellipse = class(wx.Panel) {
	name:static = 'Ellipse'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		dc.DrawEllipse(50, 50, 100, 50)
		dc.DrawEllipse(50, 120, 100, 100)
		dc.DrawEllipse(50, 250, 100, 150)
		dc.DrawEllipse(wx.Point(200, 50), wx.Size(100, 50))
		dc.DrawEllipse(wx.Point(200, 120), wx.Size(100, 100))
		dc.DrawEllipse(wx.Point(200, 250), wx.Size(100, 150))
		dc.DrawEllipse(wx.Rect(350, 50, 100, 50))
		dc.DrawEllipse(wx.Rect(350, 120, 100, 100))
		dc.DrawEllipse(wx.Rect(350, 250, 100, 150))
		dc = nil
	}
}

Page_EllipticArc = class(wx.Panel) {
	name:static = 'EllipticArc'
	pen as wx.Pen
	brush as wx.Brush
	__init__(parent as wx.Window) = {|parent|
		this.pen = wx.Pen('#ff8888', 1, wx.PENSTYLE_SOLID)
		this.brush = wx.Brush('#ff8888', wx.BRUSHSTYLE_BDIAGONAL_HATCH)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.SetPen(this.pen)
		dc.SetBrush(this.brush)
		idxs = Range(6):list
		dc.DrawEllipticArc(10 + idxs * 120, 10, 100, 40, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(10 + idxs * 120, 10 + 50, 100, 80, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(10 + idxs * 120, 10 + 140, 100, 120, 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280), wx.Size(100, 40), 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280 + 50), wx.Size(100, 80), 0, (idxs + 1) * 60)
		dc.DrawEllipticArc(wx.Point(10 + idxs * 120, 280 + 140), wx.Size(100, 120), 0, (idxs + 1) * 60)
		dc = nil
	}
}

Page_Text = class(wx.Panel) {
	name:static = 'Text'
	__init__(parent as wx.Window) = {|parent|
		this.Bind(wx.EVT_PAINT, this.OnPaint)
	}
	OnPaint(event) = {
		dc = wx.PaintDC(this)
		dc.DrawText('Hello World', 30, 200)
		dc.SetFont(wx.Font(30, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		dc.DrawText('Hello World', 30, 240)
		dc = nil
	}
}

wx.ImplementApp(MyApp())
