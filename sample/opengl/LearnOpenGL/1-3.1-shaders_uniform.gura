#!/usr/bin/env gurax
import(glfw) {*}
import(opengl) {*}

// settings
SCR_WIDTH = 800
SCR_HEIGHT = 600

vertexShaderSource = R'''
#version 330 core
layout (location = 0) in vec3 aPos;
void main()
{
	gl_Position = vec4(aPos, 1.0);
}
'''

fragmentShaderSource = R'''
#version 330 core
out vec4 FragColor;
uniform vec4 ourColor;
void main()
{
	FragColor = ourColor;
}
'''

main() = {
	// glfw: initialize and configure
	// ------------------------------
	glfwInit()
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE)

	//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE)

	// glfw window creation
	// --------------------
	window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, 'LearnOpenGL', nil, nil)
	if (!window) {
		Println('Failed to create GLFW window')
		glfwTerminate();
		return
	}
	glfwMakeContextCurrent(window)
	glfwSetFramebufferSizeCallback(window, &{|window, width, height|
		glViewport(0, 0, width, height)
	})

	// glew: load all OpenGL function pointers
	// ---------------------------------------
	glewInit()

	// build and compile our shader program
	// ------------------------------------
	// vertex shader
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, [vertexShaderSource], []);
	glCompileShader(vertexShader);
	// check for shader compile errors
	infoLog = @char(512)
	success = @int {|v| glGetShaderiv(vertexShader, GL_COMPILE_STATUS, v), v.@}
	if (success == 0) {
		glGetShaderInfoLog(vertexShader, infoLog.len, nil, infoLog);
		Println('ERROR::SHADER::VERTEX::COMPILATION_FAILED')
		Println(infoLog.ToString())
		sys.Exit(1)
	}
	// fragment shader
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, [fragmentShaderSource], [])
	glCompileShader(fragmentShader)
	// check for shader compile errors
	success = @int {|v| glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, v), v.@}
	if (success == 0) {
		glGetShaderInfoLog(fragmentShader, infoLog.len, nil, infoLog);
		Println('ERROR::SHADER::FRAGMENT::COMPILATION_FAILED')
		Println(infoLog.ToString())
		sys.Exit(1)
	}
	// link shaders
	shaderProgram = glCreateProgram()
	glAttachShader(shaderProgram, vertexShader)
	glAttachShader(shaderProgram, fragmentShader)
	glLinkProgram(shaderProgram);
	success = @int {|v| glGetProgramiv(shaderProgram, GL_LINK_STATUS, v), v.@}
	if (success == 0) {
		glGetProgramInfoLog(shaderProgram, infoLog.len, nil, infoLog);
		Println('ERROR::SHADER::PROGRAM::LINKING_FAILED')
		Println(infoLog.ToString())
		sys.Exit(1)
	}
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	// set up vertex data (and buffer(s)) and configure vertex attributes
	// ------------------------------------------------------------------
	vertices = @float([
		-0.5f, -0.5f, 0.0f, // left  
		 0.5f, -0.5f, 0.0f, // right 
		 0.0f,  0.5f, 0.0f  // top   
 	])
	VAO = @uint {|v| glGenVertexArrays(1, v), v.@}
	VBO = @uint {|v| glGenBuffers(1, v), v.@}
	// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, vertices.bytes, vertices, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * Number.float.bytes, 0);
	glEnableVertexAttribArray(0);

	// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
	glBindBuffer(GL_ARRAY_BUFFER, 0); 

	// bind the VAO (it was already bound, but just to demonstrate): seeing as we only have a single VAO we can 
	// just bind it beforehand before rendering the respective triangle; this is another approach.
	glBindVertexArray(VAO);

	// render loop
	// -----------
	while (!glfwWindowShouldClose(window)) {
		// input
		// -----
		processInput(window);

		// render
		// ------
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// be sure to activate the shader before any calls to glUniform
		glUseProgram(shaderProgram);

		// update shader uniform
		timeValue = glfwGetTime();
		greenValue = math.Sin(timeValue) / 2.0f + 0.5f;
		vertexColorLocation = glGetUniformLocation(shaderProgram, 'ourColor');
		glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);

		// render the triangle
		glDrawArrays(GL_TRIANGLES, 0, 3);

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// optional: de-allocate all resources once they've outlived their purpose:
	// ------------------------------------------------------------------------
	glDeleteVertexArrays(1, @uint {|v| v.@ = VAO, v})
	glDeleteBuffers(1, @uint {|v| v.@ = VBO, v})
	glDeleteProgram(shaderProgram);

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
}

processInput(window as GLFWwindow) = {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
		glfwSetWindowShouldClose(window, true);
	}
}

main()
