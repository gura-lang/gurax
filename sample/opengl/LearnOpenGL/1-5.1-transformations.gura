#!/usr/bin/env gurax
import(glfw) {*}
import(opengl) {*}
import(Shader) {*}
import(jpeg)
import(png)
import(ArrayExtension)

// settings
SCR_WIDTH = 800
SCR_HEIGHT = 600

vertexShaderSource = bR'''
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform mat4 transform;

void main()
{
	gl_Position = transform * vec4(aPos, 1.0);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
'''

fragmentShaderSource = bR'''
#version 330 core
out vec4 FragColor;
  
in vec3 ourColor;
in vec2 TexCoord;

uniform sampler2D texture1;
uniform sampler2D texture2;

void main()
{
	FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);
}
'''

main() = {
	// glfw: initialize and configure
	// ------------------------------
	glfwInit()
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE)

	//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE)

	// glfw window creation
	// --------------------
	window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, 'LearnOpenGL', nil, nil)
	if (!window) {
		Println('Failed to create GLFW window')
		glfwTerminate();
		return
	}
	glfwMakeContextCurrent(window)
	glfwSetFramebufferSizeCallback(window, &{|window, width, height|
		glViewport(0, 0, width, height)
	})

	// glew: load all OpenGL function pointers
	// ---------------------------------------
	glewInit()

	// build and compile our shader program
	// ------------------------------------
	ourShader = Shader(vertexShaderSource, fragmentShaderSource);

	// set up vertex data (and buffer(s)) and configure vertex attributes
	// ------------------------------------------------------------------
	vertices = @float([
		// positions          // texture coords
		 0.5f,  0.5f, 0.0f,   1.0f, 1.0f, // top right
		 0.5f, -0.5f, 0.0f,   1.0f, 0.0f, // bottom right
		-0.5f, -0.5f, 0.0f,   0.0f, 0.0f, // bottom left
		-0.5f,  0.5f, 0.0f,   0.0f, 1.0f  // top left 
 	])
	indices = @int([  
		0, 1, 3, // first triangle
		1, 2, 3  // second triangle
	])
	VAO = @uint {|v| glGenVertexArrays(1, v), v[0]}
	VBO = @uint {|v| glGenBuffers(1, v), v[0]}
	EBO = @uint {|v| glGenBuffers(1, v), v[0]}
	// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, vertices.bytes, vertices, GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.bytes, indices, GL_STATIC_DRAW);

	// position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, (3 + 2) * Number.float.bytes, 0);
	glEnableVertexAttribArray(0);
	// texture coord attribute
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, (3 + 2) * Number.float.bytes, 3 * Number.float.bytes);
	glEnableVertexAttribArray(1);

	// load and create a texture 
	// -------------------------
	// texture 1
	// ---------
	texture1 = @uint {|v| glGenTextures(1, v), v[0]}
	glBindTexture(GL_TEXTURE_2D, texture1);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	// set texture wrapping to GL_REPEAT (default wrapping method)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	Image('resources/textures/container.jpg'):rgb {|img|
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0, GL_BGR, GL_UNSIGNED_BYTE, img.p);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	// texture 2
	// ---------
	texture2 = @uint {|v| glGenTextures(1, v), v[0]}
	glBindTexture(GL_TEXTURE_2D, texture2);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	// set texture wrapping to GL_REPEAT (default wrapping method)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	Image('resources/textures/awesomeface.png'):rgba {|img|
		img = img.Flip(`vert)
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0, GL_BGRA, GL_UNSIGNED_BYTE, img.p);
		glGenerateMipmap(GL_TEXTURE_2D);
	}

	// tell opengl for each sampler to which texture unit it belongs to (only has to be done once)
	// -------------------------------------------------------------------------------------------
	ourShader.use(); // don't forget to activate/use the shader before setting uniforms!
	ourShader.setInt('texture1', 0);
	ourShader.setInt('texture2', 1);

	// render loop
	// -----------
	while (!glfwWindowShouldClose(window)) {
		// input
		// -----
		processInput(window);

		// render
		// ------
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// bind Texture
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture1);
		glActiveTexture(GL_TEXTURE1);
		glBindTexture(GL_TEXTURE_2D, texture2);

		// create transformations
		transform = Array.Identity(`float, 4)
		transform = transform |.| Array.Translation(`float, .5, -.5, 0)
		angle = glfwGetTime()
		transform = transform |.| Array.Rotation(`float, angle, 0, 0, 1)
	
		// get matrix's uniform location and set matrix
		ourShader.use()
		ourShader.setArray('transform', transform)

		// render container
		glBindVertexArray(VAO)
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nil);

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// optional: de-allocate all resources once they've outlived their purpose:
	// ------------------------------------------------------------------------
	glDeleteVertexArrays(1, @uint {|v| v[0] = VAO, v})
	glDeleteBuffers(1, @uint {|v| v[0] = VBO, v})

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
}

processInput(window as GLFWwindow) = {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
		glfwSetWindowShouldClose(window, true);
	}
}

main()
