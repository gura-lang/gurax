#!/usr/bin/env gurax
import(wx)
import(opengl) {*}
import(Samples)
import(model.stl)

faces = model.stl.Solid('cube-ascii.stl').EachFace()
Println(faces)
sys.Exit()

Pack = struct {
	sample as Samples.SampleBase
	context as wx.GLContext
	initializedFlag as Bool = false
}

AppMain = class(wx.App) {
	OnInit() = {
		FrameMain(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(900, 700)).Show()
		true
	}
}

FrameMain = class(wx.Frame) {
	canvas as Canvas
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		PanelTop(this)
	}
}

PanelTop = class(wx.Panel) {
	canvas as Canvas
	sashVert as wx.SashLayoutWindow
	sashHorz as wx.SashLayoutWindow
	sashRest as wx.Window
	textCtrl_Init as wx.TextCtrl
	textCtrl_Reshape as wx.TextCtrl
	textCtrl_Display as wx.TextCtrl
	packs[] as Pack
	__init__(parent as wx.Window) = {|parent|
		wx.SashLayoutWindow(this, wx.ID_ANY, style = wx.CLIP_CHILDREN) {|sash|
			sash.SetDefaultSize(wx.Size(1000, 300));
			sash.SetOrientation(wx.LAYOUT_HORIZONTAL);
			sash.SetAlignment(wx.LAYOUT_BOTTOM);
			sash.SetSashVisible(wx.SASH_TOP, true);
			this.sashHorz = sash
		}
		wx.SashLayoutWindow(this, wx.ID_ANY, style = wx.CLIP_CHILDREN) {|sash|
			sash.SetDefaultSize(wx.Size(200, 1000));
			sash.SetOrientation(wx.LAYOUT_VERTICAL);
			sash.SetAlignment(wx.LAYOUT_LEFT);
			sash.SetSashVisible(wx.SASH_RIGHT, true);
			this.sashVert = sash
		}
		choices = Samples.samples::name
		wx.ListBox(this.sashVert, wx.ID_ANY, choices = choices, style = wx.BORDER_SUNKEN) {|ctrl|
			wx.EVT_LISTBOX(ctrl, this.OnListBox)
			ctrl.SetSelection(0)
			ctrl.SetFocus()
		}
		Canvas(this) {|ctrl|
			this.canvas = ctrl
			this.sashRest = ctrl
		}
		wx.Notebook(this.sashHorz, wx.ID_ANY, style = wx.NB_FIXEDWIDTH) {|book|
			[this.textCtrl_Init, this.textCtrl_Reshape, this.textCtrl_Display] = \
			['Init', 'Reshape', 'Display'].Each:list {|label|
				ctrl = wx.TextCtrl(book, wx.ID_ANY, style = wx.TE_MULTILINE)
				book.AddPage(ctrl, label)
				ctrl.SetFont(wx.Font(12, wx.FONTFAMILY_TELETYPE,  wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
				ctrl
			}
			book.SetSelection(2)
		}
		this.packs = Samples.samples.Each:list {|sample| Pack(sample, wx.GLContext(this.canvas))}
		this.SetPack(this.packs[0])
		wx.EVT_SIZE(this, this.OnSize)
		wx.EVT_SASH_DRAGGED(this, this.OnSashDragged)
	}
	SetPack(pack as Pack) = {
		this.canvas.SetPack(pack)
		this.canvas.Refresh()
		this.textCtrl_Init.SetValue(pack.sample.Init.expr.EachElem():*Textize('    ').Join('\n'))
		this.textCtrl_Reshape.SetValue(pack.sample.Reshape.expr.EachElem():*Textize('    ').Join('\n'))
		this.textCtrl_Display.SetValue(pack.sample.Display.expr.EachElem():*Textize('    ').Join('\n'))
	}
	OnSize(event) = {
		wx.LayoutAlgorithm().LayoutWindow(this, this.sashRest)
		event.Skip()
	}
	OnSashDragged(event) = {
		if (event.GetDragStatus() != wx.SASH_STATUS_OUT_OF_RANGE) {
			id = event.GetId()
			if (id == this.sashVert.GetId()) {
				wdSash = event.GetDragRect().GetWidth() + 2
				this.sashVert.SetDefaultSize(wx.Size(wdSash, 1000))
			} elsif (id == this.sashHorz.GetId()) {
				htSash = event.GetDragRect().GetHeight() + 2
				this.sashHorz.SetDefaultSize(wx.Size(1000, htSash))
			}
			wx.LayoutAlgorithm().LayoutWindow(this, this.sashRest)
			this.sashRest.Refresh()
		}
	}
	OnListBox(event as wx.CommandEvent) = {
		this.SetPack(this.packs[event.GetSelection()])
	}
}

Canvas = class(wx.GLCanvas) {
	pack as Pack
	posStart as wx.Point
	posCur as wx.Point
	__init__(parent as wx.Window) = {|parent, wx.ID_ANY, size = wx.Size(400, 300), style = wx.BORDER_SUNKEN|
		this.posCur = wx.Point(0, 0)
		this.Bind(wx.EVT_SIZE, this.OnSize)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
	}
	SetPack(pack as Pack) = {
		size = this.GetClientSize()
		this.SetCurrent(pack.context)
		if (!pack.initializedFlag) {
			pack.sample.Init()
			pack.initializedFlag = true
		}
		pack.sample.Reshape(size.GetWidth(), size.GetHeight())
		this.pack = pack
		this.Refresh()
	}
	OnSize(event as wx.SizeEvent) = {
		size = event.GetSize()
		this.pack && this.pack.sample.Reshape(size.GetWidth(), size.GetHeight())
	}
	OnPaint(event as wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		if (this.pack) {
			this.SetCurrent(this.pack.context)
			this.pack.sample.Display()
			this.SwapBuffers()
		}
		dc = nil
	}
	OnLeftDown(event as wx.MouseEvent) = {
		this.posStart = event.GetPosition()
	}
	OnLeftUp(event as wx.MouseEvent) = {
		!this.posStart && return
		if (this.pack) {
			this.posCur += event.GetPosition() - this.posStart
			this.pack.sample.TrackEnd(this.posCur.x, this.posCur.y) && this.Refresh()
		}
		this.posStart = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		!this.posStart && return
		if (this.pack) {
			pt = this.posCur + event.GetPosition() - this.posStart
			this.pack.sample.Track(pt.x, pt.y) && this.Refresh()
		}
	}
}

wx.ImplementApp(AppMain())
