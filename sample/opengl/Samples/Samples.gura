#!/usr/bin/env gurax
import(opengl) {*}
import(glu) {*}

samples = []

Sample_triangle = class {
	name:static = "triangle"
	Init():static = {
	}
	Draw():static = {
		glClearColor(0.3, 0.4, 0.6, 1.0)
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		glBegin(GL_POLYGON)
			glColor3f(1, 0, 0); glVertex3f(-0.6, -0.75, 0.5)
			glColor3f(0, 1, 0); glVertex3f(0.6, -0.75, 0)
			glColor3f(0, 0, 1); glVertex3f(0, 0.75, 0)
		glEnd()
		glFlush()
	}
}
samples.Add(Sample_triangle)

Sample_tetrahedron = class {
	name:static = "tetrahedron"
	Init():static = {
	// Set the current clear color to sky blue and the current drawing color to
	// white.
	glClearColor(0.1, 0.39, 0.88, 1.0);
	glColor3f(1.0, 1.0, 1.0);

	// Tell the rendering engine not to draw backfaces.  Without this code,
	// all four faces of the tetrahedron would be drawn and it is possible
	// that faces farther away could be drawn after nearer to the viewer.
	// Since there is only one closed polyhedron in the whole scene,
	// eliminating the drawing of backfaces gives us the realism we need.
	// THIS DOES NOT WORK IN GENERAL.
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);

	// Set the camera lens so that we have a perspective viewing volume whose
	// horizontal bounds at the near clipping plane are -2..2 and vertical
	// bounds are -1.5..1.5.  The near clipping plane is 1 unit from the camera
	// and the far clipping plane is 40 units away.
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-2, 2, -1.5, 1.5, 1, 40);

	// Set up transforms so that the tetrahedron which is defined right at
	// the origin will be rotated and moved into the view volume.  First we
	// rotate 70 degrees around y so we can see a lot of the left side.
	// Then we rotate 50 degrees around x to "drop" the top of the pyramid
	// down a bit.  Then we move the object back 3 units "into the screen".
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0, 0, -3);
	glRotatef(50, 1, 0, 0);
	glRotatef(70, 0, 1, 0);
	}
	Draw():static = {
	glClear(GL_COLOR_BUFFER_BIT);

	// Draw a white grid "floor" for the tetrahedron to sit on.
	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_LINES);
	//for (GLfloat i = -2.5; i <= 2.5; i += 0.25) {
	i = -2.5
	while (i <= 2.5) {
		glVertex3f(i, 0, 2.5); glVertex3f(i, 0, -2.5);
		glVertex3f(2.5, 0, i); glVertex3f(-2.5, 0, i);
	i += 0.25
	}
	glEnd();

	// Draw the tetrahedron.  It is a four sided figure, so when defining it
	// with a triangle strip we have to repeat the last two vertices.
	glBegin(GL_TRIANGLE_STRIP);
		glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
		glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
		glColor3f(0, 1, 0); glVertex3f(1, 0, 1);
		glColor3f(0, 0, 1); glVertex3f(0, 0, -1.4);
		glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
		glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
	glEnd();

	glFlush();
	}
}
samples.Add(Sample_tetrahedron)

Sample_torus = class {
	name:static = "torus"
	Init():static = {
 // Set the current clear color to black and the current drawing color to
	// white.
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glColor3f(1.0, 1.0, 1.0);

	// Set the camera lens to have a 60 degree (vertical) field of view, an
	// aspect ratio of 4/3, and have everything closer than 1 unit to the
	// camera and greater than 40 units distant clipped away.
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, 4.0/3.0, 1, 40);

	// Position camera at (4, 6, 5) looking at (0, 0, 0) with the vector
	// <0, 1, 0> pointing upward.
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(4, 6, 5, 0, 0, 0, 0, 1, 0);

	}
	Draw():static = {
	glClear(GL_COLOR_BUFFER_BIT);

	// Draw a white torus of outer radius 3, inner radius 0.5 with 15 stacks
	// and 30 slices.
	glColor3f(1.0, 1.0, 1.0);
	//glutWireTorus(0.5, 3, 15, 30);

	// Draw a red x-axis, a green y-axis, and a blue z-axis.  Each of the
	// axes are ten units long.
	glBegin(GL_LINES);
		glColor3f(1, 0, 0); glVertex3f(0, 0, 0); glVertex3f(10, 0, 0);
		glColor3f(0, 1, 0); glVertex3f(0, 0, 0); glVertex3f(0, 10, 0);
		glColor3f(0, 0, 1); glVertex3f(0, 0, 0); glVertex3f(0, 0, 10);
	glEnd();

	glFlush();
	}
}
samples.Add(Sample_torus)
