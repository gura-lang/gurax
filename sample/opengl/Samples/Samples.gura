#!/usr/bin/env gurax
import(opengl) {*}
import(glu) {*}

samples = []

SampleBase = class {
	Init() = {}
	Reshape(width as Number, height as Number) = {}
	Diplay() = {}
}

Sample_cube = class(SampleBase) {
	name = "cube"
	vertex = [
		@double([0, 0, 0]), @double([1, 0, 0]), @double([1, 1, 0]), @double([0, 1, 0])
		@double([0, 0, 1]), @double([1, 0, 1]), @double([1, 1, 1]), @double([0, 1, 1])
	]
	Init() = {
		glClearColor(1, 1, 1, 1)
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		glEnable(GL_DEPTH_TEST)
		glEnable(GL_CULL_FACE)
		glEnable(GL_LIGHTING)
		glEnable(GL_LIGHT0)
		glEnable(GL_LIGHT1)
		glCullFace(GL_FRONT)
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
	}
	Reshape(w as Number, h as Number) = {
		glViewport(0, 0, w, h)
		gluPerspective(30, w / h, 1, 100)
	}
	Display() = {
		degree = 60
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		gluLookAt(3, 4, 5, 0, 0, 0, 0, 1, 0)
		glRotated(degree, 1, 1, 0)
		//glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, @float [0.8, 0.2, 0.2, 1])
		glBegin(GL_QUADS)
			glNormal3dv(@double([ 0,  0, -1]))
			this.vertex[0, 1, 2, 3].Each {|v| glVertex3dv(v)}
			glNormal3dv(@double([ 1,  0,  0])), this.vertex[1, 5, 6, 2].Each {|v| glVertex3dv(v)}
			glNormal3dv(@double([ 0,  0,  1])), this.vertex[5, 4, 7, 6].Each {|v| glVertex3dv(v)}
			glNormal3dv(@double([-1,  0,  0])), this.vertex[4, 0, 3, 7].Each {|v| glVertex3dv(v)}
			glNormal3dv(@double([ 0, -1,  0])), this.vertex[4, 5, 1, 0].Each {|v| glVertex3dv(v)}
			glNormal3dv(@double([ 0,  1,  0])), this.vertex[3, 2, 6, 7].Each {|v| glVertex3dv(v)}
		glEnd()
	}
}
samples.Add(Sample_cube())

Sample_triangle = class(SampleBase) {
	name = "triangle"
	Init() = {}
	Reshape(width as Number, height as Number) = {}
	Display() = {
		glClearColor(0.3, 0.4, 0.6, 1.0)
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		glBegin(GL_POLYGON)
			glColor3f(1, 0, 0); glVertex3f(-0.6, -0.75, 0.5)
			glColor3f(0, 1, 0); glVertex3f(0.6, -0.75, 0)
			glColor3f(0, 0, 1); glVertex3f(0, 0.75, 0)
		glEnd()
		glFlush()
	}
}
samples.Add(Sample_triangle())

Sample_tetrahedron = class(SampleBase) {
	name = "tetrahedron"
	Init() = {
		// Set the current clear color to sky blue and the current drawing color to
		// white.
		glClearColor(0.1, 0.39, 0.88, 1.0);
		glColor3f(1.0, 1.0, 1.0);

		// Tell the rendering engine not to draw backfaces.  Without this code,
		// all four faces of the tetrahedron would be drawn and it is possible
		// that faces farther away could be drawn after nearer to the viewer.
		// Since there is only one closed polyhedron in the whole scene,
		// eliminating the drawing of backfaces gives us the realism we need.
		// THIS DOES NOT WORK IN GENERAL.
		glEnable(GL_CULL_FACE);
		glCullFace(GL_BACK);

		// Set the camera lens so that we have a perspective viewing volume whose
		// horizontal bounds at the near clipping plane are -2..2 and vertical
		// bounds are -1.5..1.5.  The near clipping plane is 1 unit from the camera
		// and the far clipping plane is 40 units away.
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glFrustum(-2, 2, -1.5, 1.5, 1, 40);

		// Set up transforms so that the tetrahedron which is defined right at
		// the origin will be rotated and moved into the view volume.  First we
		// rotate 70 degrees around y so we can see a lot of the left side.
		// Then we rotate 50 degrees around x to "drop" the top of the pyramid
		// down a bit.  Then we move the object back 3 units "into the screen".
		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();
		glTranslatef(0, 0, -3);
		glRotatef(50, 1, 0, 0);
		glRotatef(70, 0, 1, 0);
	}
	Reshape(width as Number, height as Number) = {
	}
	Display() = {
		glClear(GL_COLOR_BUFFER_BIT);

		// Draw a white grid "floor" for the tetrahedron to sit on.
		glColor3f(1.0, 1.0, 1.0);
		glBegin(GL_LINES);
		i = -2.5
		while (i <= 2.5) {
			glVertex3f(i, 0, 2.5); glVertex3f(i, 0, -2.5);
			glVertex3f(2.5, 0, i); glVertex3f(-2.5, 0, i);
			i += 0.25
		}
		glEnd();

		// Draw the tetrahedron.  It is a four sided figure, so when defining it
		// with a triangle strip we have to repeat the last two vertices.
		glBegin(GL_TRIANGLE_STRIP);
			glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
			glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
			glColor3f(0, 1, 0); glVertex3f(1, 0, 1);
			glColor3f(0, 0, 1); glVertex3f(0, 0, -1.4);
			glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
			glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
		glEnd();

		glFlush();
	}
}
samples.Add(Sample_tetrahedron())
