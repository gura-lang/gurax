#!/usr/bin/env gurax
import(wx)
import(opengl) {*}
import(opengl.stl)
import(glu) {*}

AppMain = class(wx.App) {
	OnInit() = {
		FrameMain(path.BaseName(path.FileName(sys.argv[0])), wx.Point(50, 50), wx.Size(900, 700)).Show()
		true
	}
}

FrameMain = class(wx.Frame) {
	__init__(title as String, pos as wx.Point, size as wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		PanelTop(this)
	}
}

PanelTop = class(wx.Panel) {
	canvas as Canvas
	__init__(parent as wx.Window) = {|parent|
		vbox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(vbox)
		Canvas(this) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand())
			this.canvas = ctrl
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.ALL, 4))
			wx.StaticText(this, wx.ID_ANY, 'Ambient') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.CENTRE))
			}
			wx.ColourPickerCtrl(this, wx.ID_ANY, this.ArrayToColour(this.canvas.ambient)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 4))
				wx.EVT_COLOURPICKER_CHANGED(ctrl, this.OnColourPickerChanged_Ambient)
			}
			wx.StaticText(this, wx.ID_ANY, 'Diffuse') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.CENTRE).Border(wx.LEFT, 12))
			}
			wx.ColourPickerCtrl(this, wx.ID_ANY, this.ArrayToColour(this.canvas.diffuse)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 4))
				wx.EVT_COLOURPICKER_CHANGED(ctrl, this.OnColourPickerChanged_Diffuse)
			}
			wx.StaticText(this, wx.ID_ANY, 'Specular') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.CENTRE).Border(wx.LEFT, 12))
			}
			wx.ColourPickerCtrl(this, wx.ID_ANY, this.ArrayToColour(this.canvas.specular)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 4))
				wx.EVT_COLOURPICKER_CHANGED(ctrl, this.OnColourPickerChanged_Specular)
			}
		}
	}
	OnColourPickerChanged_Ambient(event as wx.ColourPickerEvent) = {
		this.canvas.ambient = this.ColourToArray(event.GetColour())
		this.canvas.Refresh()
	}
	OnColourPickerChanged_Diffuse(event as wx.ColourPickerEvent) = {
		this.canvas.diffuse = this.ColourToArray(event.GetColour())
		this.canvas.Refresh()
	}
	OnColourPickerChanged_Specular(event as wx.ColourPickerEvent) = {
		this.canvas.specular = this.ColourToArray(event.GetColour())
		this.canvas.Refresh()
	}
	ArrayToColour(array as Array):static = wx.Colour(array[0] * 255, array[1] * 255, array[2] * 255)
	ColourToArray(colour as wx.Colour):static = @float([colour.Red() / 255, colour.Green() / 255, colour.Blue() / 255])
}

Canvas = class(wx.GLCanvas) {
	posStart as wx.Point
	posCur as wx.Point
	list as Number
	rotX = 0
	rotY = 0
	distance = 5
	ambient = @float([1, 0, 0, 0])
	diffuse = @float([1, 1, 1, 0])
	specular = @float([1, 1, 1, 0])
	__init__(parent as wx.Window) = {|parent, wx.ID_ANY, style = wx.BORDER_SUNKEN|
		this.SetCurrent(wx.GLContext(this))
		this.posCur = wx.Point(0, 0)
		position = @float([0.0, 3.0, 3.0, 0.0])
		local_view = @float([0.0])
		glEnable(GL_DEPTH_TEST)
		glDepthFunc(GL_LESS)
		glLightfv(GL_LIGHT0, GL_POSITION, position)
		glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view)
		glFrontFace(GL_CW)
		glEnable(GL_LIGHTING)
		glEnable(GL_LIGHT0)
		glEnable(GL_AUTO_NORMAL)
		glEnable(GL_NORMALIZE)
		//glMaterialf(GL_FRONT, GL_SHININESS, 0.6 * 128.0)
		glMaterialf(GL_FRONT, GL_SHININESS, 0.9 * 128.0)
		this.list = opengl.stl.CreateList(pathNameSTL, true, false)
		this.Bind(wx.EVT_SIZE, this.OnSize)
		this.Bind(wx.EVT_PAINT, this.OnPaint)
		this.Bind(wx.EVT_LEFT_DOWN, this.OnLeftDown)
		this.Bind(wx.EVT_LEFT_UP, this.OnLeftUp)
		this.Bind(wx.EVT_MOTION, this.OnMotion)
		this.Bind(wx.EVT_MOUSEWHEEL, this.OnMouseWheel)
	}
	OnSize(event as wx.SizeEvent) = {
		size = event.GetSize()
		glViewport(0, 0, size.GetWidth(), size.GetHeight())
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		//glOrtho(-6.0, 6.0, -6.0, 6.0, -1.0, 10.0)
		gluPerspective(30, size.GetWidth() / size.GetHeight(), 1, 100)
	}
	OnPaint(event as wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		glClearColor(1, 1, 1, 1)
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		glMaterialfv(GL_FRONT, GL_AMBIENT, this.ambient)
		glMaterialfv(GL_FRONT, GL_DIFFUSE, this.diffuse)
		glMaterialfv(GL_FRONT, GL_SPECULAR, this.specular)
		glPushMatrix()
			glTranslatef(0.0, 0.0, -this.distance)
			glRotatef(this.rotX, 0.0, 1.0, 0.0)
			glRotatef(this.rotY, 1.0, 0.0, 0.0)
			glBegin(GL_TRIANGLES)
			//glBegin(GL_LINE_LOOP)
			glCallList(this.list)
			glEnd()
		glPopMatrix()
		glFlush()
		this.SwapBuffers()
		dc = nil
	}
	OnLeftDown(event as wx.MouseEvent) = {
		this.posStart = event.GetPosition()
	}
	OnLeftUp(event as wx.MouseEvent) = {
		!this.posStart && return
		this.posCur += event.GetPosition() - this.posStart
		this.posStart = nil
	}
	OnMotion(event as wx.MouseEvent) = {
		!this.posStart && return
		pt = this.posCur + event.GetPosition() - this.posStart
		this.rotX = pt.x
		this.rotY = pt.y
		this.Refresh()
	}
	OnMouseWheel(event as wx.MouseEvent) = {
		this.distance -= event.GetWheelRotation() * .01
		if (this.distance < 2) { this.distance = 2 }
		if (this.distance > 20) { this.distance = 20 }
		this.Refresh()
	}
}

if (sys.argv.len < 2) {
	sys.cerr.Println('usage: viewer STL')
	sys.Exit(1)
}
pathNameSTL = sys.argv[1]

wx.ImplementApp(AppMain())
