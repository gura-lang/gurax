#!/usr/bin/env gurax
import(sdl) {*}

Texture = class {
	wd as Number
	ht as Number
	entity as SDL_Texture
	__init__(renderer as SDL_Renderer, surface as SDL_Surface):map = {
		this.wd = surface.w, this.ht = surface.h
		this.entity = renderer.CreateTextureFromSurface(surface)
		surface.Free()
	}
	__del__() = this.entity.Destroy()
	__castTo__(declArg as DeclArg) = if (declArg.vtype == SDL_Texture) { this.entity }
}

SDL_Init(SDL_INIT_EVERYTHING)
TTF_Init()
[wdWindow, htWindow] = [800, 600]
window = SDL_CreateWindow(path.FileName(sys.argv[0]), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, wdWindow, htWindow, 0)
renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC)
pathNameFont = path.Join(sys.dirBase, 'sample/resource/LeroyLetteringLightBeta01.ttf')
fonts = TTF_OpenFont(pathNameFont, [10, 20, 50, 90]):map
[font10, font20, font50, font90] = fonts
event = SDL_Event()
i = 0
colorBg = (240, 255, 240, 255)
repeat {
	renderer.SetDrawColor(colorBg*)
	renderer.Clear()
	y = 10
	fonts.Each {|font|
		Texture(renderer, font20.RenderText_Solid(Format('Font Size: %d', , (255, 0, 0, 128))) {|texture|
			renderer.Copy(texture, nil, SDL_Rect(10, y, texture.wd, texture.ht))
			y += texture.ht
		}
		Texture(renderer, font.RenderText_Solid('Solid: ABCDEFG abcdefg 0123456789', (255, 0, 0, 128))) {|texture|
			renderer.Copy(texture, nil, SDL_Rect(10, y, texture.wd, texture.ht))
			y += texture.ht
		}
		Texture(renderer, font.RenderText_Shaded('Shaded: ABCDEFG abcdefg 0123456789', (255, 0, 0, 128), colorBg)) {|texture|
			renderer.Copy(texture, nil, SDL_Rect(10, y, texture.wd, texture.ht))
			y += texture.ht
		}
		Texture(renderer, font.RenderText_Blended('Blended: ABCDEFG abcdefg 0123456789', (255, 0, 0, 128))) {|texture|
			renderer.Copy(texture, nil, SDL_Rect(10, y, texture.wd, texture.ht))
			y += texture.ht
		}
	}
	i += 1
	rtn = SDL_WaitEventTimeout(event, 10) // 10msec
	if (rtn == 0) {
		// nothing to do
	} elsif (event.type == SDL_KEYDOWN) {
		(event.key.keysym.sym == SDLK_ESCAPE) && break
	} elsif (event.type == SDL_QUIT) {
		break
	}
	renderer.Present()
}
renderer.Destroy()
window.Destroy()
SDL_Quit()
