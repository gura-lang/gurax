#!/usr/bin/env gurax
/*This source code copyrighted by Lazy Foo' Productions (2004-2020)
and may not be redistributed without written permission.*/
// Translated to Gura by ypsitau.
// Don't make this public outside Git repository since it hasn't received permission by the author.

import(sdl) {*}
import(png)

//Screen dimension constants
SCREEN_WIDTH = 640;
SCREEN_HEIGHT = 480;

//Texture wrapper class
LTexture = class {
	//Initializes variables
	__init__() = {
		//Initialize
		this.mTexture = nil;
		this.mWidth = 0;
		this.mHeight = 0;
	}

	//Deallocates memory
	__del__() = {
		this.free()
	};

	//Loads image at specified path
	loadFromFile(path as String) = {
		//Get rid of preexisting texture
		this.free();

		//The final texture
		newTexture = nil;

		//Load image at specified path
		loadedSurface = IMG_Load(path);
		if (!loadedSurface) {
			Printf("Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError());
		} else {
			//Color key image
			SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface.format, 0, 0xFF, 0xFF));

			//Create texture from surface pixels
			newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
			if (!newTexture) {
				Printf("Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = loadedSurface.w;
				this.mHeight = loadedSurface.h;
			}

			//Get rid of old loaded surface
			SDL_FreeSurface(loadedSurface);
		}

		//Return success
		this.mTexture = newTexture;
		this.mTexture != nil;
	}

	//Creates image from font string
	loadFromRenderedText(textureText as String, textColor as SDL_Color) = {
		//Get rid of preexisting texture
		this.free();

		//Render text surface
		textSurface = TTF_RenderText_Solid(gFont, textureText, textColor);
		if (!textSurface) {
			Printf("Unable to render text surface! SDL_ttf Error: %s\n", TTF_GetError());
		} else {
			//Create texture from surface pixels
			this.mTexture = SDL_CreateTextureFromSurface(gRenderer, textSurface);
			if (!this.mTexture) {
				Printf("Unable to create texture from rendered text! SDL Error: %s\n", SDL_GetError());
			} else {
				//Get image dimensions
				this.mWidth = textSurface.w;
				this.mHeight = textSurface.h;
			}

			//Get rid of old surface
			SDL_FreeSurface(textSurface);
		}
		
		//Return success
		this.mTexture != nil;
	}

	//Deallocates texture
	free() = {
		if (this.mTexture) {
			SDL_DestroyTexture(this.mTexture);
			this.mTexture = nil;
			this.mWidth = 0;
			this.mHeight = 0;
		}
	}

	//Set color modulation
	setColor(red as Number, green as Number, blue as Number) = {
		//Modulate texture
		SDL_SetTextureColorMod(this.mTexture, red, green, blue);
	}

	//Set blending
	setBlendMode(blending as Number) = {
		//Set blending function
		SDL_SetTextureBlendMode(this.mTexture, blending);
	}
			
	//Set alpha modulation
	setAlpha(alpha as Number) = {
		//Modulate texture alpha
		SDL_SetTextureAlphaMod(this.mTexture, alpha);
	}

	//Renders texture at given point
	render(x as Number, y as Number, clip? as SDL_Rect, angle as Number = 0.0, center? as SDL_Point, flip as Number = SDL_FLIP_NONE) = {
		//Set rendering space and render to screen
		renderQuad = SDL_Rect(x, y, this.mWidth, this.mHeight);

		//Set clip rendering dimensions
		if (clip) {
			renderQuad.w = clip.w;
			renderQuad.h = clip.h;
		}

		//Render to screen
		SDL_RenderCopyEx(gRenderer, this.mTexture, clip, renderQuad, angle, center, flip);
	}

	//Gets image dimensions
	getWidth() = this.mWidth;
	getHeight() = this.mHeight;

	//The actual hardware texture
	mTexture as SDL_Texture;

	//Image dimensions
	mWidth as Number;
	mHeight as Number;
};

//The dot that will move around on the screen
Dot = class {
	//The dimensions of the dot
	DOT_WIDTH:static = 20;
	DOT_HEIGHT:static = 20;

	//Maximum axis velocity of the dot
	DOT_VEL:static = 10;

	//Initializes the variables
	__init__() = {
		//Initialize the offsets
		this.mPosX = 0;
		this.mPosY = 0;

		//Set collision box dimension
		this.mCollider = SDL_Rect(0, 0, this.DOT_WIDTH, this.DOT_HEIGHT);

		//Initialize the velocity
		this.mVelX = 0;
		this.mVelY = 0;
	}

	//Takes key presses and adjusts the dot's velocity
	handleEvent(e as SDL_Event):void = {
		if (e.type == SDL_KEYDOWN && e.key.repeat == 0) {
			//If a key was pressed
			//Adjust the velocity
			if (e.key.keysym.sym == SDLK_UP) {
				this.mVelY -= this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_DOWN) {
				this.mVelY += this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_LEFT) {
				this.mVelX -= this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_RIGHT) {
				this.mVelX += this.DOT_VEL;
			}
		} elsif (e.type == SDL_KEYUP && e.key.repeat == 0) {
			//If a key was released
			//Adjust the velocity
			if (e.key.keysym.sym == SDLK_UP) {
				this.mVelY += this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_DOWN) {
				this.mVelY -= this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_LEFT) {
				this.mVelX += this.DOT_VEL;
			} elsif (e.key.keysym.sym == SDLK_RIGHT) {
				this.mVelX -= this.DOT_VEL;
			}
		}
	}

	//Moves the dot
	move(wall as SDL_Rect):void = {
		//Move the dot left or right
		this.mPosX += this.mVelX;
		this.mCollider.x = this.mPosX;

		//If the dot went too far to the left or right
		if ((this.mPosX < 0) || (this.mPosX + this.DOT_WIDTH > SCREEN_WIDTH) || checkCollision(this.mCollider, wall)) {
			//Move back
			this.mPosX -= this.mVelX;
			this.mCollider.x = this.mPosX;
		}

		//Move the dot up or down
		this.mPosY += this.mVelY;
		this.mCollider.y = this.mPosY;

		//If the dot went too far up or down
		if((this.mPosY < 0) || (this.mPosY + this.DOT_HEIGHT > SCREEN_HEIGHT) || checkCollision(this.mCollider, wall)) {
			//Move back
			this.mPosY -= this.mVelY;
			this.mCollider.y = this.mPosY;
		}
	}

	//Shows the dot on the screen
	render():void = {
		//Show the dot
		gDotTexture.render(this.mPosX, this.mPosY);
	}

	//The X and Y offsets of the dot
	mPosX as Number;
	mPosY as Number;

	//The velocity of the dot
	mVelX as Number;
	mVelY as Number;

	//Dot's collision box
	mCollider as SDL_Rect;
};

//The window we'll be rendering to
gWindow = nil

//The window renderer
gRenderer = nil

//Scene textures
gDotTexture = LTexture();

init() = {
	//Initialization flag
	success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		Printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	} else {
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
			Printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow:extern = gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (!gWindow)  {
			Printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		} else {
			//Create renderer for window
			gRenderer:extern = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
			if (!gRenderer) {
				Printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			} else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				imgFlags = IMG_INIT_PNG;
				if ((IMG_Init(imgFlags) & imgFlags) == 0) {
					Printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
			}
		}
	}

	success
}

loadMedia() = {
	//Loading success flag
	success = true;

	//Load dot texture
	if (!gDotTexture.loadFromFile("27_collision_detection/dot.bmp")) {
		Printf("Failed to load dot texture!\n");
		success = false;
	}

	success;
}

close() = {
	//Free loaded images
	gDotTexture.free();

	//Destroy window
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow:extern = nil;
	gRenderer:extern = nil;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

checkCollision(a as SDL_Rect, b as SDL_Rect) = {
	//Calculate the sides of rect A
	leftA = a.x;
	rightA = a.x + a.w;
	topA = a.y;
	bottomA = a.y + a.h;

	//Calculate the sides of rect B
	leftB = b.x;
	rightB = b.x + b.w;
	topB = b.y;
	bottomB = b.y + b.h;

	//If any of the sides from A are outside of B
	if (bottomA <= topB) {
		return(false);
	}

	if (topA >= bottomB) {
		return(false);
	}

	if (rightA <= leftB) {
		return(false);
	}

	if (leftA >= rightB) {
		return(false);
	}

	//If none of the sides from A are outside B
	true;
}

main() = {
	//Start up SDL and create window
	if (!init()) {
		Printf("Failed to initialize!\n");
	} else {
		//Load media
		if (!loadMedia()) {
			Printf("Failed to load media!\n");
		} else {
			//Main loop flag
			quit = false

			//Event handler
			e = SDL_Event()

			//The dot that will be moving around on the screen
			dot = Dot();

			//Set the wall
			wall = SDL_Rect();
			wall.x = 300;
			wall.y = 40;
			wall.w = 40;
			wall.h = 400;

			//While application is running
			while (!quit) {
				//Handle events on queue
				while (SDL_PollEvent(e) != 0) {
					//User requests quit
					if (e.type == SDL_QUIT) {
						quit = true;
					}

					//Handle input for the dot
					dot.handleEvent(e);
				}

				//Move the dot
				dot.move(wall);

				//Clear screen
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
				SDL_RenderClear(gRenderer);

				//Render wall
				SDL_SetRenderDrawColor(gRenderer, 0x00, 0x00, 0x00, 0xFF);		
				SDL_RenderDrawRect(gRenderer, wall);

				//Render objects
				dot.render();

				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
}

main()
