#!/usr/bin/env gurax

ComposeFunctionHelp(func, lang as Symbol = `en):map = {
	str = '__' + func.__str__():unbracket.Replace('`', '\\`') + '__\n\n'
	help = Help(func, lang)
	if (help) {
	doc = help.doc
		str += doc
		str += cond(doc.EndsWith('\n'), '', '\n')
	}
	str
}

ComposePropertyHelp(vtype as VType, lang as Symbol = `en) = {
	str = ''
	if (lang == `ja) {
		str += eR'''
		# プロパティ

		`${vtype.__fullName__}` クラスには以下のプロパティがあります:

		'''
	} else {
		str += eR'''
		# Property

		The `${vtype.__fullName__}` class has the following properties:

		'''
	}
	vtype.__propSlots__().Each {|propSlot|
		doc = Help(propSlot, lang).doc
		str += Format('- `%s%s%s` as `%s` (%s) ... %s%s', vtype.__fullName__,
			cond(propSlot.isOfClass, '.', '#'), propSlot.name, propSlot.vtype.__fullName__,
			cond(propSlot.IsSet(`R) && !propSlot.IsSet(`W), 'read only',
				cond(!propSlot.IsSet(`R) && propSlot.IsSet(`W), 'write only', 'read/write')),
			doc, cond(doc.EndsWith('\n'), '', '\n'))
	}
	str
}

ComposeConstructorHelp(vtype as VType, lang as Symbol = `en) = {
	!vtype.__init__ && return('')
	str = ''
	if (lang == `ja) {
		str += eR'''
		# コンストラクタ
		
		`${vtype.__fullName__}` クラスには以下のコンストラクタがあります:

		'''
	} else {
		str += eR'''
		# Constructor

		The `${vtype.__fullName__}` class has the following constructor:

		'''
	}
	str += ComposeFunctionHelp(vtype.__init__, lang)
	str += '\n'
	str
}

ComposeMethodHelp(vtype as VType, lang as Symbol = `en) = {
	str = ''
	methodsClass = vtype.__methods__():class:list
	methodsHybrid = vtype.__methods__():hybrid:list
	methodsInstance = vtype.__methods__():instance:list
	if (!methodsClass.IsEmpty()) {
		if (lang == `ja) {
			str += eR'''
			# クラスメソッド

			`${vtype.__fullName__}` クラスには以下のクラスメソッドがあります:

			'''
		} else {
			str += eR'''
			# Class Method

			The `${vtype.__fullName__}` class has the following class methods:

			'''
		}
		methodsClass.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
	}
	if (!methodsHybrid.IsEmpty()) {
		if (lang == `ja) {
			str += eR'''
			# ハイブリッドメソッド

			`${vtype.__fullName__}` クラスには、以下のハイブリッドメソッド (クラスにもインスタンスにも呼び出せるメソッド) があります:

			'''
		} else {
			str += eR'''
			# Hybrid Method

			The `${vtype.__fullName__}` class has the following hybrid methods, which can be called with a class or an instance:

			'''
		}
		methodsHybrid.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
	}
	if (!methodsInstance.IsEmpty()) {
		if (lang == `ja) {
			str += eR'''
			# インスタンスメソッド

			`${vtype.__fullName__}` クラスには以下のインスタンスメソッドがあります:

			'''
		} else {
			str += eR'''
			# Instance Method

			The `${vtype.__fullName__}` class has the following instance methods:

			'''
		}
		methodsInstance.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
	}
	str
}

Render@html(vtype as VType, lang as Symbol = `en, out?:w as Stream, headerOffset as Number = 0) = {
	out = out || sys.cout
	out.Printf(cond(lang == `ja, '<h%d>%s クラス</h%d>\n\n', '<h%d>%s Class</h%d>\n\n'),
		headerOffset + 1, vtype.__fullName__, headerOffset + 1)
	markdown.Document(Help(vtype, lang):class.tmplDoc.Eval().ToReader(), headerOffset + 1).Render@html(out)
}

Render@console(vtype as VType, lang as Symbol = `en, colorFlag as Bool = true, headerOffset as Number = 0) = {
	markdown.Document(Help(vtype, lang):class.tmplDoc.Eval().ToReader(), headerOffset + 1).Render@console(colorFlag)
}
