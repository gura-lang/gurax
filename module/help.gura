#!/usr/bin/env gurax

ComposeFunctionHelp(func, lang as Symbol = `en) = {
	doc = Help(func, lang).doc
	str = '__' + func.__str__():unbracket + '__\n\n'
	str += doc
	str += cond(doc.EndsWith('\n'), '', '\n')
	str
}

ComposePropertyHelp(vtype as VType, lang as Symbol = `en) = {
	str = ''
	str += cond(lang == `ja, '# プロパティ\n\n', '# Property\n\n')
	vtype.__propSlots__().Each {|propSlot|
		doc = Help(propSlot, lang).doc
		str += Format('__%s%s%s__ as `%s` (%s) ... %s', vtype.__fullName__,
			cond(propSlot.isOfClass, '.', '#'), propSlot.name, propSlot.vtype.__fullName__,
			cond(propSlot.IsSet(`R) && !propSlot.IsSet(`W), 'read only',
				cond(!propSlot.IsSet(`R) && propSlot.IsSet(`W), 'write only', 'read/write')),
			doc)
		str += cond(doc.EndsWith('\n'), '', '\n')
		str += '\n'
	}
	str
}

ComposeConstructorHelp(vtype as VType, lang as Symbol = `en) = {
	if (vtype.__init__) {
		str = ''
		str += cond(lang == `ja, '# コンストラクタ\n\n', '# Constructor\n\n')
		str += ComposeFunctionHelp(vtype.__init__, lang)
		str += '\n'
		str
	}
}

ComposeMethodHelp(vtype as VType, lang as Symbol = `en) = {
	str = ''
	methodsClass = vtype.__methods__():class:list
	methodsHybrid = vtype.__methods__():hybrid:list
	methodsInstance = vtype.__methods__():instance:list
	if (!methodsClass.IsEmpty()) {
		str += cond(lang == `ja, '# クラスメソッド\n\n', '# Class Method\n\n')
		methodsClass.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
		methodsHybrid.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
	}
	if (!methodsInstance.IsEmpty()) {
		str += cond(lang == `ja, '# インスタンスメソッド\n\n', '# Instance Method\n\n')
		methodsInstance.Each {|method|
			str += ComposeFunctionHelp(method, lang)
			str += '\n'
		}
	}
	str
}

Render@html(vtype as VType, lang as Symbol = `en, out?:w as Stream, headerOffset = 0) = {
	out = out || sys.cout
	out.Printf(cond(lang == `ja, '<h%d>%s クラス</h%d>\n\n', '<h%d>%s Class</h%d>\n\n'),
		headerOffset + 1, vtype.__fullName__, headerOffset + 1)
	markdown.Document(Help(vtype, lang):class.tmplDoc.Eval().ToReader(), headerOffset + 1).Render@html(out)
}

Render@console(vtype as VType, lang as Symbol = `en, colorFlag as Bool = true, headerOffset = 0) = {
	markdown.Document(Help(vtype, lang):class.tmplDoc.Eval().ToReader(), headerOffset + 1).Render@console(colorFlag)
}
