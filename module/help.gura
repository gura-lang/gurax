#!/usr/bin/env gurax

ComposeFunctionHelp(func) = {
	doc = func.__help__().doc
	str = '__' + func.__str__():unbracket + '__\n\n'
	str += doc
	str += cond(doc.EndsWith('\n'), '', '\n')
	str
}

ComposePropertyHelp(vtype as VType) = {
	str = ''
	str += '# Property\n'
	str
}

ComposeConstructorHelp(vtype as VType) = {
	if (vtype.__init__) {
		str = ''
		str += '# Constructor\n\n'
		str += ComposeFunctionHelp(vtype.__init__)
		str += '\n'
		str
	}
}

ComposeMethodHelp(vtype as VType) = {
	str = ''
	methodsClass = vtype.__methods__():class:list
	methodsHybrid = vtype.__methods__():hybrid:list
	methodsInstance = vtype.__methods__():instance:list
	if (!methodsClass.IsEmpty()) {
		str += '# Class Method\n\n'
		methodsClass.Each {|method|
			str += ComposeFunctionHelp(method)
			str += '\n'
		}
		methodsHybrid.Each {|method|
			str += ComposeFunctionHelp(method)
			str += '\n'
		}
	}
	if (!methodsInstance.IsEmpty()) {
		str += '# Instance Method\n\n'
		methodsInstance.Each {|method|
			str += ComposeFunctionHelp(method)
			str += '\n'
		}
	}
	str
}

Render@html(vtype as VType, out?:w as Stream) = {
	markdown.Document(vtype.__help__():class.tmplDoc.Eval().ToReader()).Render@html(out || sys.cout)
}
