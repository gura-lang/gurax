#!/usr/bin/env gurax
Entry = struct {
	type:Symbol = `none
	longName:String = ''
	shortName:String:nil
	help:String:nil
	helpValue:String:nil
	valueDefault
	value
	MakeHelpIndex(longNameFlag:Bool, shortNameFlag:Bool) = {
		str = ''
		if (!shortNameFlag) {
			strSep = ''
		} elsif (this.shortName) {
			str += '-' + this.shortName
			strSep = ', '
		} else {
			str += '  '
			strSep = '  '
		}
		if (longNameFlag && this.longName) {
			str += strSep
			str += '--'
			str += this.longName
		}
		if (this.type == `flag) {
			// nothing to do
		} else {
			if (longNameFlag && this.longName) {
				str += '='
			} elsif (shortNameFlag && this.shortName) {
				str += ' '
			}
			str += this.helpValue || 'X'
		}
		str
	}
}

Parser = class {
	entries[]:Entry = []
	Parse(argv[]:String) = {
		dictByLongName = %{}
		dictByShortName = %{}
		dictByLongName.Put(this.entries:*longName, this.entries)
		this.entries.Each {|entry|
			if (entry.shortName) {
				dictByShortName.Put(entry.shrotName, entry)
			}
		}
		argvRest = []
		iter = argv.Offset(1)
		while (arg = iter.NextValue()) {
			value = dictByLongName.Get(arg)
			Println(value)
		}
		//Println(argv)
		//Println(this.entries[0].MakeHelpIndex(true, true))
	}
	AddParam(longName:String, shortName?:String, help?:String, helpValue?:String, valueDefault?:String) = {
		this.entries.Add(Entry(`param, longName, shortName, help, helpValue, valueDefault))
	}
	AddFlag(longName:String, shortName?:String, help?:String) = {
		this.entries.Add(Entry(`flag, longName, shortName, help, nil, false))
	}
}

Parser {|p|
	p.AddParam('value', valueDefault = 'xx')
	p.AddFlag('flag')
	p.Parse(sys.argv)
}
