#!/usr/bin/env gurax
//==============================================================================
// argopt.gura
// Example:
//   tmplHelp = tR'''
//   usage: script [options]
//   options:
//     ${p.FormatHelp() + '\n'}
//   '''
//   argopt.Parser {|p|
//       p.OptString('param1', 'p', 'help for param1')
//       p.OptString('param2', 'q', 'help for param2')
//       p.OptBool('flag1', 'f', 'help for flag1')
//       p.OptBool('flag2', 'g', 'help for flag2')
//       opt = nil
//       try {[argv, opt] = p.Parse(sys.argv)} catch {|e| sys.cerr.Println(e.text)}
//       if (!opt) {
//           tmplHelp.Render(sys.cerr)
//           sys.Exit(1)
//       }
//   }
//   Println(opt['param1'])
//==============================================================================

//------------------------------------------------------------------------------
// Entry
//------------------------------------------------------------------------------
Entry = struct {
	type as Symbol = `none
	longName as String = ''
	shortName:nil as String
	help:nil as String
	helpValue:nil as String
	MakeHelpIndex(longNameFlag as Bool, shortNameFlag as Bool) = {
		str = ''
		if (!shortNameFlag) {
			strSep = ''
		} elsif (this.shortName) {
			str += '-' + this.shortName
			strSep = ', '
		} else {
			str += '  '
			strSep = '  '
		}
		if (longNameFlag && this.longName) {
			str += strSep
			str += '--'
			str += this.longName
		}
		if (this.type == `Bool) {
			// nothing to do
		} else {
			if (longNameFlag && this.longName) {
				str += '='
			} elsif (shortNameFlag && this.shortName) {
				str += ' '
			}
			str += this.helpValue || 'X'
		}
		str
	}
}

//------------------------------------------------------------------------------
// Parser
//------------------------------------------------------------------------------
Parser = class {
	entries[] as Entry = []
	Parse(argv[] as String) = {
		dictByLongName = %{}
		dictByShortName = %{}
		dictByLongName.Put(this.entries:*longName, this.entries)
		argvRest = []
		opt = %{}
		this.entries.Each {|entry|
			if (entry.shortName) {
				dictByShortName.Put(entry.shortName, entry)
			}
			opt[entry.longName] = nil
		}
		iter = argv.Offset(1)
		while (arg = iter.NextValue()) {
			if ((argBody = arg.StartsWith('--'):rest) && !argBody.IsEmpty()) {
				fields = argBody.Split('=', 1):list
				[longName, value] = cond(fields.len == 1, [fields[0], nil], fields)
				entry = dictByLongName.Get(longName)
				!entry && Error.Raise(Error.CommandError, 'unknown option: --%s', longName)
				if (entry.type == `Bool) {
					value && Error.Raise(Error.CommandError, 'value is unnecessary')
					opt[entry.longName] = true
				} else {
					!value && Error.Raise(Error.CommandError, 'value must be specified')
					if (entry.type == `Int) {
						opt[entry.longName] = Int(value)
					} else { // entry.type == `String
						opt[entry.longName] = value
					}
				}
			} elsif (shortName = arg.StartsWith('-'):rest) {
				entry = dictByShortName.Get(shortName)
				!entry && Error.Raise(Error.CommandError, 'unknown option: -%s', shortName)
				if (entry.type == `Bool) {
					opt[entry.longName] = true
				} else {
					value = iter.NextValue()
					!value && Error.Raise(Error.CommandError, 'value must be specified')
					if (entry.type == `Int) {
						opt[entry.longName] = Int(value)
					} else { // entry.type == `String
						opt[entry.longName] = value
					}
				}
			} else {
				argvRest.Add(arg)
			}
		}
		[argvRest, opt]
	}
	OptBool(longName as String, shortName? as String, help? as String) = {
		this.entries.Add(Entry(`Bool, longName, shortName, help, nil))
	}
	OptInt(longName as String, shortName? as String, help? as String, helpValue? as String) = {
		this.entries.Add(Entry(`Int, longName, shortName, help, helpValue))
	}
	OptString(longName as String, shortName? as String, help? as String, helpValue? as String) = {
		this.entries.Add(Entry(`String, longName, shortName, help, helpValue))
	}
	FormatHelp(longNameFlag as Bool = true, shortNameFlag as Bool = true) = {
		indices = this.entries::MakeHelpIndex(longNameFlag, shortNameFlag)
		Format('%-*s  %s', indices::len.Max(), indices, this.entries:*help)
	}
}
