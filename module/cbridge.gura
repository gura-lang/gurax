#!/usr/bin/env gurax

//------------------------------------------------------------------------------
// ErrorDone
//------------------------------------------------------------------------------
ErrorDone(expr:Expr, msg:String) = {
	sys.cerr.Printf('line.%d: %s\n', expr.lineNoTop, msg)
	sys.Exit(1)
}

//------------------------------------------------------------------------------
// TypeInfo
//------------------------------------------------------------------------------
TypeInfo = class {
	decl:String
	moduleName:String
	cType:String
	vtype:String
	tmplPicker:Template
	tmplPickerValidation:Template
	tmplPickerListVar:Template
	tmplFunctionBody:Template
	__init__(decl:String, moduleName:String, cType:String, vtype:String,
			codePicker:String, codePickerValidation:String,
			codePickerVec:String, codeFunctionBody:String) = {
		this.decl = decl, this.moduleName = moduleName, this.cType = cType, this.vtype = vtype
		this.tmplPicker = Template().Parse(codePicker)
		this.tmplPickerValidation = Template().Parse(codePickerValidation)
		this.tmplPickerListVar = Template().Parse(codePickerVec)
		this.tmplFunctionBody = Template().Parse(codeFunctionBody)
	}
	ComposePicker(varName:String, listVarFlag:Bool, validationFlag:Bool) = {
		cond(listVarFlag, this.tmplPickerListVar, cond(validationFlag, this.tmplPickerValidation, this.tmplPicker)).Eval()
	}
	ComposeFunctionBody(caller:String) = this.tmplFunctionBody.Eval()
	MakeFullTypeName() = cond(this.moduleName.IsEmpty(), this.vtype, this.moduleName + '.' + this.vtype)
}

//------------------------------------------------------------------------------
// ArgInfo
//------------------------------------------------------------------------------
ArgInfo = class {
	name:String
	type:String
	listVarFlag:Bool
	optionFlag:Bool
	nilFlag:Bool
	typeInfo:TypeInfo
	tmplDeclaration:Template:static
	tmplImplementation:Template:static
	__init__(r:Renderer, name:String, attr:Attribute, listVarFlag:Bool, optionFlag:Bool) = {
		this.name = name
		this.type = attr.dottedName
		this.listVarFlag = listVarFlag
		this.optionFlag = optionFlag
		this.nilFlag = attr.IsSet(`nil)
		this.typeInfo = r.typeInfoMap[this.type]
	}
	ComposeDeclaration() = {
		strArgOccur = 'ArgOccur::' + cond(this.optionFlag, 'ZeroOrOnce', 'Once')
		argFlags = []
		this.listVarFlag && argFlags.Add('ListVar')
		this.nilFlag && argFlags.Add('Nil')
		argFlags.IsEmpty() && argFlags.Add('None')
		strArgFlags = ('ArgFlag::' + argFlags).Join(' | ')
		this.tmplDeclaration.Eval()
	}
	ComposeImplementation() = this.typeInfo.ComposePicker(
			this.name, this.listVarFlag, this.optionFlag || this.nilFlag)
	ToString() = Format('%s%s%s:%s%s', this.name, cond(this.listVarFlag, '[]', ''),
			cond(this.optionFlag, '?', ''), this.typeInfo.MakeFullTypeName(),
			cond(this.nilFlag, ':nil', ''))
}

ArgInfo.tmplDeclaration = tR'''
DeclareArg("${this.name}", VTYPE_${this.typeInfo.vtype}, ${strArgOccur}, ${strArgFlags});
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
FuncInfo = class {
	moduleName:String
	name:String
	type:String
	typeInfo:TypeInfo
	argInfoTbl[]:ArgInfo = []
	tmplFunctionBody:Template
	tmplImplementation:Template:static
	tmplAssignment:Template:static
	ComposeImplementation() = this.tmplImplementation.Eval()
	ComposeAssignment() = this.tmplAssignment.Eval()
	__init__(r:Renderer, moduleName:String, name:String, type:String, codeFunctionBody:String:nil) = {
		this.moduleName = moduleName, this.name = name, this.type = type
		this.typeInfo = r.typeInfoMap[type]
		if (codeFunctionBody) { this.tmplFunctionBody = Template().Parse(codeFunctionBody) }
	}
	ComposeCaller() = {
		Format('%s(%s)', this.name, this.argInfoTbl:*name.Join(', ')) 
	}
	ToString() = Format('%s.%s(%s)', this.moduleName, this.name, this.argInfoTbl:*ToString().Join(', '))
}

FuncInfo.tmplImplementation = tR'''
// ${this.ToString()}
Gurax_DeclareFunction(${this.name})
{
	Declare(VTYPE_${this.typeInfo.vtype}, Flag::None);
	${this.argInfoTbl::ComposeDeclaration()}
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunction(${this.name})
{
	${if (!this.argInfoTbl.IsEmpty())}
	// Arguments
	ArgPicker args(argument);
	${this.argInfoTbl::ComposeImplementation()}
	${end}
	// Function body
	${if (this.tmplFunctionBody)}
	${this.tmplFunctionBody.Eval()}
	${else}
	${this.typeInfo.ComposeFunctionBody(this.ComposeCaller())}
	${end}
}
'''

FuncInfo.tmplAssignment = t'Assign(Gurax_CreateFunction(${this.name}));'

//------------------------------------------------------------------------------
// Renderer
//------------------------------------------------------------------------------
Renderer = class {
	funcInfoTbl = []
	typeInfoMap = %{}
	DeclareTypeInfo(decl:String, moduleName:String, cType:String, vtype:String,
			codePicker:String, codePickerValidation:String,
			codePickerVec:String, codeFunctionBody:String) = {
		this.typeInfoMap[decl] = TypeInfo(decl, moduleName, cType, vtype,
				codePicker, codePickerValidation, codePickerVec, codeFunctionBody)
	}
	DeclareTypeInfo_Number(decl:String, cType:String) = this.DeclareTypeInfo(decl, '', cType, 'Number',
		R'''
		${this.cType} ${varName} = args.PickNumber<${this.cType}>();
		''', R'''
		${this.cType} ${varName} = args.IsValid()? args.PickNumber<${this.cType}>() : 0;
		''', R'''
		auto ${varName} = args.PickNumList<${this.cType}>();
		''', R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''')
	Register(moduleName:String) {`block} = this.RegisterExpr(moduleName, block.EachElem())
	RegisterExpr(moduleName:String, expr:Expr):map:void = {
		codeFunctionBody = nil
		if (expr.IsAssign()) {
			!expr.right.IsString() && ErrorDone(expr, 'assigned value must be a string')
			codeFunctionBody = expr.right.string
			expr = expr.left
		}
		!expr.IsCaller() && ErrorDone(expr, 'Caller is expected')
		!expr.car.IsIdentifier() && ErrorDone(expr, 'Identifier is expected')
		Println(expr.car.symbolName)
		funcInfo = FuncInfo(this, moduleName, expr.car.symbolName, expr.attr.dottedName, codeFunctionBody)
		this.funcInfoTbl.Add(funcInfo)
		expr.EachParam {|exprParam|
			//Println(exprParam)
			listVarFlag = false
			optionFlag = false
			if (exprParam.IsUnaryOp()) {
				if (exprParam.operator.symbol == `?) {
					optionFlag = true
				} else {
					ErrorDone(exprParam, 'invalid format of parameter')
	w				}
				exprParam = exprParam.child
			}
			attr = exprParam.attr
			if (exprParam.IsIndexer()) {
				listVarFlag = true
				exprParam = exprParam.car
			}
			!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
			argInfo = ArgInfo(this, exprParam.symbolName, attr, listVarFlag, optionFlag)
			funcInfo.argInfoTbl.Add(argInfo)
		}
	}
	ComposeImplementation() = this.funcInfoTbl:*ComposeImplementation().Join('\n')
	ComposeAssignment(codePrefix:String) = (codePrefix + this.funcInfoTbl:*ComposeAssignment()).Join('\n')
}

Renderer.__init__() = {
	this.DeclareTypeInfo('any', '', '', 'Any', '', '', '', '')
	this.DeclareTypeInfo('void', '', 'void', 'Nil', '', '', '',
		codeFunctionBody = R'''
		${caller};
		return Value::nil();
		''')
	this.DeclareTypeInfo('String', '', '', 'String', '', '', '', '')
	this.DeclareTypeInfo('Function', '', '', 'Function',
		codePicker = R'''
		RefPtr<Function> ${varName}(args.PickFunction().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Function> ${varName}(args.IsValid()? args.PickFunction().Reference() : nullptr);
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareTypeInfo_Number('char', 'char')
	this.DeclareTypeInfo_Number('short', 'short')
	this.DeclareTypeInfo_Number('long', 'long')
	this.DeclareTypeInfo_Number('int', 'int')
	this.DeclareTypeInfo_Number('long_long', 'long long')
	this.DeclareTypeInfo_Number('float', 'float')
	this.DeclareTypeInfo_Number('double', 'double')
	this.DeclareTypeInfo_Number('unsigned_char', 'unsigned char')
	this.DeclareTypeInfo_Number('unsigned_short', 'unsigned short')
	this.DeclareTypeInfo_Number('unsigned_long', 'unsigned long')
	this.DeclareTypeInfo_Number('unsigned_int', 'unsigned int')
	this.DeclareTypeInfo_Number('unsigned_long_long', 'unsigned long long')
	this.DeclareTypeInfo_Number('int8_t', 'int8_t')
	this.DeclareTypeInfo_Number('int16_t', 'int16_t')
	this.DeclareTypeInfo_Number('int32_t', 'int32_t')
	this.DeclareTypeInfo_Number('int64_t', 'int64_t')
	this.DeclareTypeInfo_Number('uint8_t', 'uint8_t')
	this.DeclareTypeInfo_Number('uint16_t', 'uint16_t')
	this.DeclareTypeInfo_Number('uint32_t', 'uint32_t')
	this.DeclareTypeInfo_Number('uint64_t', 'uint64_t')
	this.DeclareTypeInfo_Number('Char', 'Char')
	this.DeclareTypeInfo_Number('UChar', 'UChar')
	this.DeclareTypeInfo_Number('Short', 'Short')
	this.DeclareTypeInfo_Number('UShort', 'UShort')
	this.DeclareTypeInfo_Number('Int', 'Int')
	this.DeclareTypeInfo_Number('UInt', 'UInt')
	this.DeclareTypeInfo_Number('Long', 'Long')
	this.DeclareTypeInfo_Number('ULong', 'ULong')
	this.DeclareTypeInfo_Number('Int8', 'Int8')
	this.DeclareTypeInfo_Number('UInt8', 'UInt8')
	this.DeclareTypeInfo_Number('Int16', 'Int16')
	this.DeclareTypeInfo_Number('UInt16', 'UInt16')
	this.DeclareTypeInfo_Number('Int32', 'Int32')
	this.DeclareTypeInfo_Number('UInt32', 'UInt32')
	this.DeclareTypeInfo_Number('Int64', 'Int64')
	this.DeclareTypeInfo_Number('UInt64', 'UInt64')
	this.DeclareTypeInfo_Number('Float', 'Float')
	this.DeclareTypeInfo_Number('Double', 'Double')
	this.DeclareTypeInfo('bool', '', 'bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args.IsValid()? args.PickBool() : false;
		'''
		codePickerVec = R'''
		auto ${varName} = args.PickVector<bool>(Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''')
	this.DeclareTypeInfo('Bool', '', 'Bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args.IsValid()? args.PickBool() : false;
		'''
		codePickerVec = R'''
		auto ${varName} = args.PickVector<bool>(Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''')
	this.DeclareTypeInfo('const_char_p', '', 'const char*', 'String',
		codePicker = R'''
		${this.cType} ${varName} = args.PickString();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args.IsValid()? args.PickString() : nullptr;
		'''
		codePickerVec = R'''
		auto ${varName} = args.PickVector<${this.cType}>(Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Value_${this.vtype}(rtn);
		''')
	this.DeclareTypeInfo('const_char_p_NilIfNull', '', 'const char*', 'String', '', '', '',
		codeFunctionBody = R'''
		if (${this.cType} rtn = ${caller}) {
			return new Value_${this.vtype}(rtn);
		}
		return Value::nil();
		''')
}
