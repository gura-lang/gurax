#!/usr/bin/env gurax

//------------------------------------------------------------------------------
// ErrorDone
//------------------------------------------------------------------------------
ErrorDone(expr as Expr, msg as String) = {
	sys.cerr.Printf('%s:%d: %s\n', expr.pathNameSrc, expr.lineNoTop, msg)
	sys.Exit(1)
}

//------------------------------------------------------------------------------
// TypeInfo
//------------------------------------------------------------------------------
TypeInfo = class {
	decl as String
	cType as String
	cTypeElem as String
	vtypeFullName as String
	vtypeDisplay as String
	moduleName as String = ''
	vtype as String = ''
	tmplPicker as Template
	tmplPickerValidation as Template
	tmplPickerListVar as Template
	tmplFunctionBody as Template
	tmplArgRef as Template
	__init__(decl as String, cType as String, vtypeFullName as String, vtypeDisplay as String,
			codePicker as String, codePickerValidation as String,
			codePickerVec as String, codeFunctionBody as String, codeArgRef as String) = {
		this.decl = decl, this.cType = cType
		this.cTypeElem = cType.Sub(r'(const\s+)?(\w+).*', r'\2')
		this.vtypeFullName = vtypeFullName
		this.vtypeDisplay = vtypeDisplay
		fields = vtypeFullName.Split('.'):list
		if (!fields.IsEmpty()) {
			this.moduleName = fields.Head(fields.len - 1).Join('.')
			this.vtype = fields.last
		}
		this.tmplPicker = Template().Parse(codePicker)
		this.tmplPickerValidation = Template().Parse(codePickerValidation)
		this.tmplPickerListVar = Template().Parse(codePickerVec)
		this.tmplFunctionBody = Template().Parse(codeFunctionBody)
		this.tmplArgRef = Template().Parse(codeArgRef)
	}
	ComposePicker(varName as String, defaultValue:nil as String, listVarFlag as Bool, validationFlag as Bool) = {
		cond(listVarFlag, this.tmplPickerListVar, cond(validationFlag, this.tmplPickerValidation, this.tmplPicker)).Eval()
	}
	ComposeFunctionBody(caller as String) = this.tmplFunctionBody.Eval()
	ComposeArgRef(varName as String) = this.tmplArgRef.Eval()
}

//------------------------------------------------------------------------------
// ArgInfo
//------------------------------------------------------------------------------
ArgInfo = class {
	name as String
	typeName as String
	defaultValue as String
	listVarFlag as Bool
	occurSymbol as Symbol
	nilFlag as Bool
	streamWFlag as Bool
	streamRFlag as Bool
	typeInfo as TypeInfo
	tmplDeclaration:static as Template
	tmplRangeCheck:static as Template
	__init__(r as Renderer, name as String, typeName:nil as String, defaultValue:nil as String, attr as Attribute, listVarFlag as Bool, occurSymbol as Symbol) = {
		this.name = name
		this.typeName = typeName
		this.defaultValue = defaultValue
		this.listVarFlag = listVarFlag
		this.occurSymbol = occurSymbol
		this.nilFlag = attr.IsSet(`nil)
		this.streamWFlag = attr.IsSet(`w)
		this.streamRFlag = attr.IsSet(`r)
	}
	ComposeDeclaration() = {
		strArgOccur = 'ArgOccur::' + this.occurSymbol
		argFlags = []
		this.listVarFlag && argFlags.Add('ListVar')
		this.nilFlag && argFlags.Add('Nil')
		this.streamWFlag && argFlags.Add('StreamW')
		this.streamRFlag && argFlags.Add('StreamR')
		argFlags.IsEmpty() && argFlags.Add('None')
		strArgFlags = ('ArgFlag::' + argFlags).Join(' | ')
		this.tmplDeclaration.Eval()
	}
	ComposeImplementation() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo.ComposePicker(this.name, this.defaultValue,
			(this.occurSymbol == `ZeroOrMore) || (this.occurSymbol == `OnceOrMore) || this.listVarFlag,
			(this.occurSymbol == `ZeroOrOnce) || this.nilFlag)
	}
	ComposeArgRef() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo.ComposeArgRef(this.name)
	}
	ToString() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		Format('%s%s%s%s%s%s as %s', this.name, cond(this.listVarFlag, '[]', ''),
			cond(this.occurSymbol == `ZeroOrOnce, '?', cond(this.occurSymbol == `ZeroOrMore, '*',
				cond(this.occurSymbol == `OnceOrMore, '+', ''))),
			cond(this.nilFlag, ':nil', ''),
			cond(this.streamWFlag, ':w', ''), cond(this.streamRFlag, ':r', ''),
			this.typeInfo.vtypeDisplay)
	}
}

CreateArgInfoTbl(r as Renderer, expr as Expr) = {
	argInfoTbl = []
	expr.EachParam {|exprParam|
		//Println(exprParam)
		defaultValue = nil
		listVarFlag = false
		occurSymbol = `Once
		typeName = 'any'
		if (exprParam.IsAssign()) {
			occurSymbol = `ZeroOrOnce
			defaultValue = exprParam.right.__str__():dquoteString
			exprParam = exprParam.left
		}
		if (exprParam.IsBinaryOp()) {
			if (exprParam.operator.symbol == `as) {
				!exprParam.right.IsIdentifier() && ErrorDone('invalid format for value type')
				typeName = exprParam.right.symbolName
			} else {
				ErrorDone(exprParam, 'invalid format of parameter')
			}
			exprParam = exprParam.left
		}
		if (exprParam.IsUnaryOp()) {
			if (exprParam.operator.symbol == `?) {
				occurSymbol = `ZeroOrOnce
			} elsif (exprParam.operator.symbol == `*) {
				occurSymbol = `ZeroOrMore
			} elsif (exprParam.operator.symbol == `+) {
				occurSymbol = `OnceOrMore
			} else {
				ErrorDone(exprParam, 'invalid format of parameter')
			}
			exprParam = exprParam.child
		}
		attr = exprParam.attr
		if (exprParam.IsIndexer()) {
			listVarFlag = true
			exprParam = exprParam.car
		}
		!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
		argInfoTbl.Add(ArgInfo(r, exprParam.symbolName, typeName, defaultValue, attr, listVarFlag, occurSymbol))
	}
	argInfoTbl
}

ArgInfo.tmplDeclaration = tR'''
DeclareArg("${this.name}", VTYPE_${this.typeInfo.vtype}, ${strArgOccur}, ${strArgFlags});
'''

ArgInfo.tmplRangeCheck = tR'''
if (${this.name}.size() != 3) {
	return Gurax::Value::nil();
}
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
FuncInfo = class {
	r as Renderer
	moduleName as String
	name as String
	argInfoTbl[] as ArgInfo
	typeName as String
	_typeInfo as TypeInfo
	tmplFunctionBody as Template
	virtualFlag as Bool
	returnThisFlag as Bool
	__init__(r as Renderer, moduleName as String, name as String, argInfoTbl[] as ArgInfo, typeName as String, codeFunctionBody:nil as String,
			virtualFlag as Bool, returnThisFlag as Bool) = {
		this.r = r, this.moduleName = moduleName, this.name = name, this.argInfoTbl = argInfoTbl, this.typeName = typeName
		this.virtualFlag = virtualFlag, this.returnThisFlag = returnThisFlag
		if (codeFunctionBody) { this.tmplFunctionBody = Template().Parse(codeFunctionBody) }
	}
	GetTypeInfo() = {
		if (!this._typeInfo) { this._typeInfo = this.r.typeInfoMap[this.typeName] }
		this._typeInfo
	}
	ComposeArgs() = this.argInfoTbl:*ComposeArgRef().Join(', ')
	ComposeCaller() = Format('%s(%s)', this.name, this.ComposeArgs())
	ToString() = Format('%s.%s(%s)', this.moduleName, this.name, this.argInfoTbl:*ToString().Join(', '))
}

CreateFuncInfo(r as Renderer, moduleName as String, expr as Expr) = {
	codeFunctionBody = nil
	if (expr.IsAssign()) {
		!expr.right.IsString() && ErrorDone(expr, 'assigned value must be a string')
		codeFunctionBody = expr.right.string
		expr = expr.left
	}
	typeName = ''
	virtualFlag = false
	returnThisFlag = false
	if (expr.IsBinaryOp()) {
		if (expr.operator.symbol == `as) {
			!expr.right.IsIdentifier() && ErrorDone('invalid format for value type')
			typeName = expr.right.symbolName
		} else {
			ErrorDone(expr, 'invalid format of parameter')
		}
		expr = expr.left
	}
	!expr.IsCaller() && ErrorDone(expr, 'Caller is expected')
	!expr.car.IsIdentifier() && ErrorDone(expr, 'Identifier is expected')
	if (expr.attr.IsSet(`void)) { typeName = 'void' }
	if (expr.attr.IsSet(`virtual)) { virtualFlag = true }
	if (expr.attr.IsSet(`returnThis)) { returnThisFlag = true }
	argInfoTbl = CreateArgInfoTbl(r, expr)
	if (typeName.IsEmpty()) { typeName = 'any' }
	symbolName = expr.car.symbolName
	//(symbolName, argInfoTbl, typeInfo, codeFunctionBody)
	FuncInfo(r, moduleName, symbolName, argInfoTbl, typeName, codeFunctionBody, virtualFlag, returnThisFlag)
}

tmplFunctionImplementation = tR'''
// ${funcInfo.ToString()}
Gurax_DeclareFunctionAlias(${funcInfo.name}_gurax, "${funcInfo.name}")
{
	Declare(VTYPE_${funcInfo.GetTypeInfo().vtype}, Flag::None);
	${funcInfo.argInfoTbl::ComposeDeclaration()}
	AddHelp(
		Gurax_Symbol(en),
		"");
}

Gurax_ImplementFunctionEx(${funcInfo.name}_gurax, processor_gurax, argument_gurax)
{
	${if (!funcInfo.argInfoTbl.IsEmpty())}
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	${funcInfo.argInfoTbl::ComposeImplementation()}
	${end}
	// Function body
	${if (funcInfo.tmplFunctionBody)}
	${funcInfo.tmplFunctionBody.Eval()}
	${else}
	${funcInfo.GetTypeInfo().ComposeFunctionBody(funcInfo.ComposeCaller())}
	${end}
}
'''

EvalTmplFunctionImplementation(funcInfo as FuncInfo):map = tmplFunctionImplementation.Eval()

tmplFunctionAssignment = t'Assign(Gurax_CreateFunction(${funcInfo.name}_gurax));'

EvalTmplFunctionAssignment(funcInfo as FuncInfo):map = tmplFunctionAssignment.Eval()

//------------------------------------------------------------------------------
// Renderer
//------------------------------------------------------------------------------
Renderer = class {
	funcInfoTbl = []
	typeInfoMap = %{}
	DeclareType(decl as String, cType as String, vtypeFullName as String, vtypeDisplay? as String,
			codePicker as String = '', codePickerValidation as String = '',
			codePickerVec as String = '', codeFunctionBody as String = '', codeArgRef = '${varName}') = {
		typeInfo = TypeInfo(decl, cType, vtypeFullName, vtypeDisplay || vtypeFullName,
				codePicker, codePickerValidation, codePickerVec, codeFunctionBody, codeArgRef)
		this.typeInfoMap[decl] = typeInfo
		typeInfo
	}
	DeclareType_Number(decl as String, cType? as String) = this.DeclareType(decl, cType || decl, 'Number',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickNumber<${this.cType}>();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickNumber<${this.cType}>() : ${defaultValue || '0'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickNumList<${this.cType}>();
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	DeclareType_Pointer(decl as String, cType as String) = this.DeclareType(decl, cType, 'Pointer',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetPointerC<${this.cTypeElem}>();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetPointerC<${this.cTypeElem}>() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>([](Gurax::Value& value) {
			return Gurax::Value_Pointer::GetPointer(value).GetPointerC<${this.cTypeElem}>();
		});
		''')
	DeclareType_WritablePointer(decl as String, cType as String) = this.DeclareType(decl, cType, 'Pointer',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetWritablePointerC<${this.cTypeElem}>();
		if (!${varName}) {
			Error::Issue(ErrorType::MemoryError, "the pointer is not writable");
			return Value::nil();
		}
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetWritablePointerC<${this.cTypeElem}>() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>([](Gurax::Value& value) -> ${this.cType} {
			auto p = Gurax::Value_Pointer::GetPointer(value).GetWritablePointerC<${this.cTypeElem}>();
			if (!p) {
				Error::Issue(ErrorType::MemoryError, "the pointer is not writable");
				return nullptr;
			}
			return p;
		});
		''')
	Register(moduleName as String) {`block} = this.RegisterExpr(moduleName, block.EachElem())
	RegisterExpr(moduleName as String, expr as Expr):map:void = {
		if (expr.IsAssign() && expr.right.IsCaller() && expr.right.car == `class) {
			this.RegisterClass(moduleName, expr)
		} else {
			this.RegisterFunction(moduleName, expr)
		}
	}
	RegisterClass(moduleName as String, expr as Expr):map:void = {
		!expr.left.IsIdentifier() && ErrorDone(expr.left, 'Identifier is expected for class name')
		className = expr.left.symbolName
		Println(className)
	}
	RegisterFunction(moduleName as String, expr as Expr):map:void = {
		funcInfo = CreateFuncInfo(this, moduleName, expr)
		Println(funcInfo.name)
		this.funcInfoTbl.Add(funcInfo)
	}
	ComposeFunctionImplementation() = EvalTmplFunctionImplementation(this.funcInfoTbl.Each()).Join('\n')
	ComposeFunctionAssignment(codePrefix as String) = (codePrefix + EvalTmplFunctionAssignment(this.funcInfoTbl.Each())).Join('\n')
}

Renderer.__init__() = {
	this.DeclareType('void', 'void', 'Nil',
		codeFunctionBody = R'''
		${caller};
		return Gurax::Value::nil();
		''')
	this.DeclareType('any', '', 'Any',
		codePicker = R'''
		const Gurax::Value& ${varName} = args_gurax.PickValue();
		'''
		codePickerValidation = R'''
		const Gurax::Value& ${varName} = args_gurax.IsValid()? args_gurax.PickValue() : Value::C_nil();
		'''
		codePickerVec = R'''
		const Gurax::ValueList& ${varName} = args_gurax.PickList();
		'''
		codeFunctionBody = R'''
		${caller};
		return Gurax::Value::nil();
		''')
	this.DeclareType('String@gurax', '', 'String')
	this.DeclareType('Number@gurax', '', 'Number',
		codePicker = R'''
		Gurax::Value_Number& ${varName} = args_gurax.Pick<Gurax::Value_Number>();
		'''
		codePickerVec = R'''
		const Gurax::ValueList& ${varName} = args_gurax.PickList();
		''')
	this.DeclareType('Function@gurax', '', 'Function',
		codePicker = R'''
		RefPtr<Function> ${varName}(args_gurax.PickFunction().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Function> ${varName}(args_gurax.IsValid()? args_gurax.PickFunction().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType('Stream@gurax', '', 'Stream',
		codePicker = R'''
		RefPtr<Stream> ${varName}(args_gurax.PickStream().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Stream> ${varName}(args_gurax.IsValid()? args_gurax.PickStream().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType_Number('char')
	this.DeclareType_Number('short')
	this.DeclareType_Number('long')
	this.DeclareType_Number('int')
	this.DeclareType_Number('long_long', 'long long')
	this.DeclareType_Number('float')
	this.DeclareType_Number('double')
	this.DeclareType_Number('unsigned_char', 'unsigned char')
	this.DeclareType_Number('unsigned_short', 'unsigned short')
	this.DeclareType_Number('unsigned_long', 'unsigned long')
	this.DeclareType_Number('unsigned_int', 'unsigned int')
	this.DeclareType_Number('unsigned_long_long', 'unsigned long long')
	this.DeclareType_Number('size_t')
	this.DeclareType_Number('int8_t')
	this.DeclareType_Number('int16_t')
	this.DeclareType_Number('int32_t')
	this.DeclareType_Number('int64_t')
	this.DeclareType_Number('uint8_t')
	this.DeclareType_Number('uint16_t')
	this.DeclareType_Number('uint32_t')
	this.DeclareType_Number('uint64_t')
	this.DeclareType_Number('Char@gurax')
	this.DeclareType_Number('UChar@gurax')
	this.DeclareType_Number('Short@gurax')
	this.DeclareType_Number('UShort@gurax')
	this.DeclareType_Number('Int@gurax')
	this.DeclareType_Number('UInt@gurax')
	this.DeclareType_Number('Long@gurax')
	this.DeclareType_Number('ULong@gurax')
	this.DeclareType_Number('Int8@gurax')
	this.DeclareType_Number('UInt8@gurax')
	this.DeclareType_Number('Int16@gurax')
	this.DeclareType_Number('UInt16@gurax')
	this.DeclareType_Number('Int32@gurax')
	this.DeclareType_Number('UInt32@gurax')
	this.DeclareType_Number('Int64@gurax')
	this.DeclareType_Number('UInt64@gurax')
	this.DeclareType_Number('Float@gurax')
	this.DeclareType_Number('Double@gurax')
	this.DeclareType_Pointer('const_void_p', 'const void*')
	this.DeclareType_WritablePointer('void_p', 'void*')
	this.DeclareType('bool', 'bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickBool() : ${defaultValue || 'false'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<bool>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('Bool@gurax', 'Bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickBool() : ${defaultValue || 'false'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<bool>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('const_char_p', 'const char*', 'String',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickString();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickString() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('const_char_p_NilIfNull', 'const char*', 'String',
		codeFunctionBody = R'''
		if (${this.cType} rtn = ${caller}) {
			return new Gurax::Value_${this.vtype}(rtn);
		}
		return Gurax::Value::nil();
		''')
}
