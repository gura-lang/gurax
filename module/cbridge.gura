#!/usr/bin/env gurax

//------------------------------------------------------------------------------
// ErrorDone
//------------------------------------------------------------------------------
ErrorDone(expr as Expr, msg as String) = {
	sys.cerr.Printf('%s:%d: %s\n', expr.pathNameSrc, expr.lineNoTop, msg)
	sys.Exit(1)
}

//------------------------------------------------------------------------------
// HelpInfo
//------------------------------------------------------------------------------
HelpInfo = struct {
	langCode as Symbol
	doc as String
}

//------------------------------------------------------------------------------
// TypeInfo
//------------------------------------------------------------------------------
TypeInfo = class {
	decl as String
	cType as String
	cTypeElem as String
	vtypeFullName as String
	vtypeDisplay as String
	listVarFlag as Bool
	blockOccurFlag as Bool
	moduleName as String = ''
	vtype as String = ''
	tmplPicker as Template
	tmplPickerValidation as Template
	tmplPickerListVar as Template
	tmplConvToC as Template
	tmplConvToGurax as Template
	tmplFunctionBody as Template
	tmplArgRef as Template
	__init__(decl as String, cType as String, vtypeFullName as String, vtypeDisplay as String,
			listVarFlag as Bool, blockOccurFlag as Bool,
			codePicker as String, codePickerValidation as String, codePickerVec as String,
			codeConvToC as String, codeConvToGurax as String,
			codeFunctionBody as String, codeArgRef as String) = {
		this.decl = decl, this.cType = cType
		this.cTypeElem = cType.Sub(r'(const\s+)?(\w+).*', r'\2')
		this.vtypeFullName = vtypeFullName
		this.vtypeDisplay = vtypeDisplay
		this.listVarFlag = listVarFlag
		this.blockOccurFlag = blockOccurFlag
		fields = vtypeFullName.Split('.'):list
		if (!fields.IsEmpty()) {
			this.moduleName = fields.Head(fields.len - 1).Join('.')
			this.vtype = fields.last
		}
		this.tmplPicker = Template().Parse(codePicker)
		this.tmplPickerValidation = Template().Parse(codePickerValidation)
		this.tmplPickerListVar = Template().Parse(codePickerVec)
		this.tmplConvToC = Template().Parse(codeConvToC)
		this.tmplConvToGurax = Template().Parse(codeConvToGurax)
		this.tmplFunctionBody = Template().Parse(codeFunctionBody)
		this.tmplArgRef = Template().Parse(codeArgRef)
	}
	ComposePicker(varName as String, defaultValue:nil as String, listVarFlag as Bool, validationFlag as Bool) = {
		cond(listVarFlag, this.tmplPickerListVar, cond(validationFlag, this.tmplPickerValidation, this.tmplPicker)).Eval()
	}
	ComposeConvToC(src as String) = this.tmplConvToC.Eval()
	ComposeConvToGurax(varName as String) = this.tmplConvToGurax.Eval()
	ComposeFunctionBody(caller as String) = this.tmplFunctionBody.Eval()
	ComposeArgRef(varName as String) = this.tmplArgRef.Eval()
	ComposeArgCDecl(varName as String) = Format('%s %s', this.cType, varName)
}

//------------------------------------------------------------------------------
// ArgInfo
//------------------------------------------------------------------------------
ArgInfo = class {
	name as String
	typeName as String
	defaultValue as String
	listVarFlag as Bool
	occurSymbol as Symbol
	nilFlag as Bool
	streamWFlag as Bool
	streamRFlag as Bool
	typeInfo as TypeInfo
	tmplDeclaration:static as Template
	tmplRangeCheck:static as Template
	__init__(r as Renderer, name as String, typeName:nil as String, defaultValue:nil as String, attr:nil as Attribute, listVarFlag as Bool, occurSymbol as Symbol) = {
		if (defaultValue == 'wxEmptyString') {
			defaultValue = '""'
		}
		this.name = name
		this.typeName = typeName
		this.defaultValue = defaultValue
		this.listVarFlag = listVarFlag
		this.occurSymbol = occurSymbol
		if (attr) {
			this.nilFlag = attr.IsSet(`nil)
			this.streamWFlag = attr.IsSet(`w)
			this.streamRFlag = attr.IsSet(`r)
		} else {
			this.nilFlag = false
			this.streamWFlag = false
			this.streamRFlag = false
		}
	}
	IsList() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.listVarFlag || this.typeInfo.listVarFlag
	}
	ComposeDeclaration() = {
		strArgOccur = 'ArgOccur::' + this.occurSymbol
		argFlags = []
		this.IsList() && argFlags.Add('ListVar')
		this.nilFlag && argFlags.Add('Nil')
		this.streamWFlag && argFlags.Add('StreamW')
		this.streamRFlag && argFlags.Add('StreamR')
		argFlags.IsEmpty() && argFlags.Add('None')
		strArgFlags = ('ArgFlag::' + argFlags).Join(' | ')
		this.tmplDeclaration.Eval()
	}
	GetTypeInfo() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo
	}
	ComposeImplementation() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo.ComposePicker(this.name, this.defaultValue,
			(this.occurSymbol == `ZeroOrMore) || (this.occurSymbol == `OnceOrMore) || this.IsList(),
			(this.occurSymbol == `ZeroOrOnce) || this.nilFlag)
	}
	ComposeConvToGurax() = this.typeInfo.ComposeConvToGurax(this.name)
	ComposeArgRef() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo.ComposeArgRef(this.name)
	}
	ComposeArgCDecl() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		this.typeInfo.ComposeArgCDecl(this.name)
	}
	ToString() = {
		if (!this.typeInfo) { this.typeInfo = r.typeInfoMap[this.typeName] }
		Format('%s%s%s%s%s%s as %s', this.name, cond(this.IsList(), '[]', ''),
			cond(this.occurSymbol == `ZeroOrOnce, '?', cond(this.occurSymbol == `ZeroOrMore, '*',
				cond(this.occurSymbol == `OnceOrMore, '+', ''))),
			cond(this.nilFlag, ':nil', ''),
			cond(this.streamWFlag, ':w', ''), cond(this.streamRFlag, ':r', ''),
			this.typeInfo.vtypeDisplay)
	}
}

CreateArgInfoTbl(r as Renderer, expr as Expr) = {
	argInfoTbl = []
	expr.EachParam {|exprParam|
		//Println(exprParam)
		defaultValue = nil
		listVarFlag = false
		occurSymbol = `Once
		typeName = 'any'
		if (exprParam.IsAssign()) {
			occurSymbol = `ZeroOrOnce
			defaultValue = exprParam.right.__str__():dquoteString
			if (exprParam.right.IsBinaryOp()) {
				defaultValue = '(' + defaultValue + ')'
			}
			exprParam = exprParam.left
		}
		if (exprParam.IsBinaryOp()) {
			if (exprParam.operator.symbol == `as) {
				//!exprParam.right.IsIdentifier() && ErrorDone('invalid format for value type')
				//typeName = exprParam.right.symbolName
				typeName = exprParam.right.__str__()
			} else {
				ErrorDone(exprParam, 'invalid format of parameter')
			}
			exprParam = exprParam.left
		}
		if (exprParam.IsUnaryOp()) {
			if (exprParam.operator.symbol == `?) {
				occurSymbol = `ZeroOrOnce
			} elsif (exprParam.operator.symbol == `*) {
				occurSymbol = `ZeroOrMore
			} elsif (exprParam.operator.symbol == `+) {
				occurSymbol = `OnceOrMore
			} else {
				ErrorDone(exprParam, 'invalid format of parameter')
			}
			exprParam = exprParam.child
		}
		attr = exprParam.attr
		if (exprParam.IsIndexer()) {
			listVarFlag = true
			exprParam = exprParam.car
		}
		!exprParam.IsIdentifier() && ErrorDone(exprParam, 'Identifier is expected in parameter list')
		argInfoTbl.Add(ArgInfo(r, exprParam.symbolName, typeName, defaultValue, attr, listVarFlag, occurSymbol))
	}
	argInfoTbl
}

ArgInfo.tmplDeclaration = tR'''
DeclareArg("${this.name}", VTYPE_${this.typeInfo.vtype}, ${strArgOccur}, ${strArgFlags});
'''

ArgInfo.tmplRangeCheck = tR'''
if (${this.name}.size() != 3) {
	return Gurax::Value::nil();
}
'''

//------------------------------------------------------------------------------
// FuncInfo
//------------------------------------------------------------------------------
FuncInfo = class {
	r as Renderer
	moduleName as String
	name as String
	nameOnCall as String
	argInfoTbl[] as ArgInfo
	typeName as String
	_typeInfo as TypeInfo
	tmplFunctionBody as Template
	virtualFlag as Bool
	returnThisFlag as Bool
	returnNilFlag as Bool
	constFlag as Bool
	staticFlag as Bool
	mapFlag as Bool
	type as Symbol
	operator as Operator
	helpInfoTbl[] as HelpInfo
	__init__(r as Renderer, moduleName as String, name as String, nameOnCall:nil as String, argInfoTbl[] as ArgInfo, typeName as String, codeFunctionBody:nil as String,
			virtualFlag as Bool, returnThisFlag as Bool, returnNilFlag as Bool, constFlag as Bool, staticFlag as Bool, mapFlag as Bool, type as Symbol, operator? as Operator, helpInfoTbl[] as HelpInfo = []) = {
		this.r = r, this.moduleName = moduleName, this.name = name, this.nameOnCall = nameOnCall
		this.argInfoTbl = argInfoTbl, this.typeName = typeName
		this.virtualFlag = virtualFlag, this.returnThisFlag = returnThisFlag, this.returnNilFlag = returnNilFlag, this.constFlag = constFlag
		this.staticFlag = staticFlag, this.mapFlag = mapFlag
		this.type = type, this.operator = operator, this.helpInfoTbl = helpInfoTbl
		if (codeFunctionBody) { this.tmplFunctionBody = Template().Parse(codeFunctionBody) }
	}
	GetTypeInfo() = {
		if (!this._typeInfo) { this._typeInfo = this.r.typeInfoMap[this.typeName] }
		this._typeInfo
	}
	GetFlags() = cond(this.mapFlag, 'Flag::Map', 'Flag::None')
	IsVoid() = (this.typeName == 'void')
	ComposeArgs() = this.argInfoTbl:*ComposeArgRef().Join(', ')
	ComposeArgsCDecl() = this.argInfoTbl:*ComposeArgCDecl().Join(', ')
	ComposeCaller(prefix as String = '') = Format('%s%s(%s)', prefix, this.nameOnCall || this.name, this.ComposeArgs())
	ComposeCDecl(prefix as String = '') = {
		typeInfo = this.GetTypeInfo()
		Format('%s %s%s(%s)%s', typeInfo.cType, prefix, this.nameOnCall || this.name, this.ComposeArgsCDecl(), cond(this.constFlag, ' const', ''))
	}
	ToString() = Format('%s.%s(%s)%s%s', this.moduleName, this.name, this.argInfoTbl:*ToString().Join(', '),
		cond(this.mapFlag, ':map', ''), cond(this.GetTypeInfo().blockOccurFlag, ' {block?}', ''))
}

CreateFuncInfo(r as Renderer, moduleName as String, expr as Expr) = {
	codeFunctionBody = nil
	symbolNameOnCall = nil
	exprsHelp = []
	if (expr.IsAssign()) {
		exprAssigned = expr.right
		while (exprAssigned.IsBinaryOp(`%%)) {
			exprsHelp.Add(exprAssigned.right)
			exprAssigned = exprAssigned.left
		}
		if (exprAssigned.IsString()) {
			codeFunctionBody = exprAssigned.string
		} elsif (exprAssigned.IsIdentifier()) {
			symbolNameOnCall = exprAssigned.symbolName
		} else {
			ErrorDone(expr, 'assigned value must be a string or an identifier')
		}
		expr = expr.left
	} else {
		while (expr.IsBinaryOp(`%%)) {
			exprsHelp.Add(expr.right)
			expr = expr.left
		}
	}
	helpInfoTbl = []
	exprsHelp.Reverse {|exprHelp|
		if (exprHelp.IsString()) {
			helpInfoTbl.Add(HelpInfo(`en, exprHelp.string))
		} elsif (exprHelp.IsSuffixed()) {
			helpInfoTbl.Add(HelpInfo(exprHelp.symbol, exprHelp.string))
		}
	}
	typeName = 'any'
	virtualFlag = false
	returnThisFlag = false
	returnNilFlag = false
	constFlag = false
	staticFlag = false
	mapFlag = false
	if (expr.IsBinaryOp()) {
		if (expr.operator.symbol == `as) {
			//!expr.right.IsIdentifier() && ErrorDone('invalid format for value type')
			//typeName = expr.right.symbolName
			typeName = expr.right.__str__()
		} else {
			ErrorDone(expr, 'invalid format of parameter')
		}
		expr = expr.left
	}
	type = `function
	operator = nil
	if (expr.IsCaller()) {
		!expr.car.IsIdentifier() && ErrorDone(expr, 'Identifier is expected')
		if (expr.attr.IsSet(`void)) { typeName = 'void' }
		if (expr.attr.IsSet(`virtual)) { virtualFlag = true }
		if (expr.attr.IsSet(`returnThis)) { returnThisFlag = true }
		if (expr.attr.IsSet(`returnNil)) { returnNilFlag = true }
		if (expr.attr.IsSet(`const)) { constFlag = true }
		if (expr.attr.IsSet(`static)) { staticFlag = true }
		if (expr.attr.IsSet(`map)) { mapFlag = true }
		argInfoTbl = CreateArgInfoTbl(r, expr)
		if (typeName.IsEmpty()) { typeName = 'any' }
		symbolName = expr.car.symbolName
	} elsif (expr.IsMember()) {
		!expr.target.IsIdentifier() && ErrorDone(expr, 'Identifier is expected')
		!codeFunctionBody && ErrorDone(expr, 'Function body must be specified')
		if (expr.symbol == `getter) {
			type = `propGetter
		} elsif (expr.symbol == `setter) {
			type = `propSetter
		} else {
			ErrorDone(expr, 'Invalid property declaration')
		}
		argInfoTbl = []
		symbolName = expr.target.symbolName
	} elsif (expr.IsBinaryOp()) {
		defaultValue = nil
		attr = nil
		listVarFlag = false
		occurSymbol = `Once
		type = `operator
		operator = expr.operator
		symbolName = expr.operator.name
		argInfoTbl = [
			ArgInfo(r, 'left', expr.left.__str__(), defaultValue, attr, listVarFlag, occurSymbol)
			ArgInfo(r, 'right', expr.right.__str__(), defaultValue, attr, listVarFlag, occurSymbol)
		]
	} elsif (expr.IsUnaryOp()) {
		symbolName = expr.operator.name
		defaultValue = nil
		attr = nil
		listVarFlag = false
		occurSymbol = `Once
		type = `operator
		operator = expr.operator
		symbolName = expr.operator.name
		argInfoTbl = [
			ArgInfo(r, 'value', expr.child.__str__(), defaultValue, attr, listVarFlag, occurSymbol)
		]
	} else {
		ErrorDone(expr, 'Caller is expected')
	}
	FuncInfo(r, moduleName, symbolName, symbolNameOnCall, argInfoTbl, typeName, codeFunctionBody, virtualFlag, returnThisFlag, returnNilFlag, constFlag,
		staticFlag, mapFlag, type, operator, helpInfoTbl)
}

tmplFunctionImplementation = tR'''
// ${funcInfo.ToString()}
Gurax_DeclareFunctionAlias(${funcInfo.name}_gurax, "${funcInfo.name}")
{
	Declare(VTYPE_${funcInfo.GetTypeInfo().vtype}, ${funcInfo.GetFlags()});
	${funcInfo.argInfoTbl::ComposeDeclaration()}
	${if (funcInfo.GetTypeInfo().blockOccurFlag)}
	DeclareBlock(BlkOccur::ZeroOrOnce);
	${end}
	${funcInfo.helpInfoTbl.Each {|helpInfo|}}
	AddHelp(Gurax_Symbol(${helpInfo.langCode}), u8R"""(
${helpInfo.doc}
)""");
	${end}
}

Gurax_ImplementFunctionEx(${funcInfo.name}_gurax, processor_gurax, argument_gurax)
{
	${if (!funcInfo.argInfoTbl.IsEmpty())}
	// Arguments
	Gurax::ArgPicker args_gurax(argument_gurax);
	${funcInfo.argInfoTbl::ComposeImplementation()}
	${end}
	// Function body
	${if (funcInfo.tmplFunctionBody)}
	${funcInfo.tmplFunctionBody.Eval()}
	${else}
	${funcInfo.GetTypeInfo().ComposeFunctionBody(funcInfo.ComposeCaller())}
	${end}
}
'''

tmplOpUnaryImplementation = tR'''
Gurax_ImplementOpUnary(${funcInfo.name}, ${funcInfo.argInfoTbl[0].GetTypeInfo().vtype})
{
	const auto& elem = ${funcInfo.argInfoTbl[0].GetTypeInfo().ComposeConvToC('value')};
	auto elemResult = ${funcInfo.operator.symbol.symbolName}elem;
	return ${funcInfo.GetTypeInfo().ComposeConvToGurax('elemResult')};
}
'''

tmplOpBinaryImplementation = tR'''
Gurax_ImplementOpBinary(${funcInfo.name}, ${funcInfo.argInfoTbl[0].GetTypeInfo().vtype}, ${funcInfo.argInfoTbl[1].GetTypeInfo().vtype})
{
	const auto& elemL = ${funcInfo.argInfoTbl[0].GetTypeInfo().ComposeConvToC('valueL')};
	const auto& elemR = ${funcInfo.argInfoTbl[1].GetTypeInfo().ComposeConvToC('valueR')};
	auto elemResult = elemL ${funcInfo.operator.symbol.symbolName} elemR;
	return ${funcInfo.GetTypeInfo().ComposeConvToGurax('elemResult')};
}
'''

EvalTmplFunctionImplementation(funcInfo as FuncInfo):map = tmplFunctionImplementation.Eval()

EvalTmplOperatorImplementation(funcInfo as FuncInfo):map = {
	if (funcInfo.argInfoTbl.len == 1) {
		tmplOpUnaryImplementation.Eval()
	} else {
		tmplOpBinaryImplementation.Eval()
	}
}

tmplFunctionAssignment = t'Assign(Gurax_CreateFunction(${funcInfo.name}_gurax));'
tmplOpUnaryAssignment = t'Gurax_AssignOpUnary(${funcInfo.operator.name}, ${funcInfo.argInfoTbl[0].GetTypeInfo().vtype});'
tmplOpBinaryAssignment = t'Gurax_AssignOpBinary(${funcInfo.operator.name}, ${funcInfo.argInfoTbl[0].GetTypeInfo().vtype}, ${funcInfo.argInfoTbl[1].GetTypeInfo().vtype});'

EvalTmplFunctionAssignment(funcInfo as FuncInfo):map = tmplFunctionAssignment.Eval()
EvalTmplOperatorAssignment(funcInfo as FuncInfo):map = {
	if (funcInfo.argInfoTbl.len == 1) {
		tmplOpUnaryAssignment.Eval()
	} else {
		tmplOpBinaryAssignment.Eval()
	}
}

//------------------------------------------------------------------------------
// Renderer
//------------------------------------------------------------------------------
Renderer = class {
	funcInfoTbl = []
	typeInfoMap = %{}
	DeclareType(decl as String, cType as String, vtypeFullName as String, vtypeDisplay? as String,
			blockOccurFlag as Bool = false,
			codePicker as String = '', codePickerValidation as String = '', codePickerVec as String = '',
			codeConvToC as String = '', codeConvToGurax as String = 'new Gurax::Value_${this.vtype}(${varName})',
			codeFunctionBody as String = '', codeArgRef = '${varName}') = {
		listVarFlag = false
		if (m = vtypeFullName.Match(r'^(\w+)\[\]')) {
			vtypeFullName = m[1]
			listVarFlag = true
		}
		typeInfo = TypeInfo(decl, cType, vtypeFullName, vtypeDisplay || vtypeFullName,
				listVarFlag, blockOccurFlag,
				codePicker, codePickerValidation, codePickerVec,
				codeConvToC, codeConvToGurax, codeFunctionBody, codeArgRef)
		this.typeInfoMap[decl] = typeInfo
		typeInfo
	}
	DeclareType_Number(decl as String, cType? as String) = this.DeclareType(decl, cType || decl, 'Number',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickNumber<${this.cType}>();
		'''
		codePickerValidation = R'''
		bool ${varName}_validFlag = args_gurax.IsValid();
		${this.cType} ${varName} = ${varName}_validFlag? args_gurax.PickNumber<${this.cType}>() : ${defaultValue || '0'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickNumList<${this.cType}>();
		'''
		codeConvToC = 'Value_Number::GetNumber<${this.cType}>(${src})'
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	DeclareType_Pointer(decl as String, cType as String) = this.DeclareType(decl, cType, 'Pointer',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetPointerC<${this.cTypeElem}>();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetPointerC<${this.cTypeElem}>() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>([](Gurax::Value& value) {
			return Gurax::Value_Pointer::GetPointer(value).GetPointerC<${this.cTypeElem}>();
		});
		''')
	DeclareType_WritablePointer(decl as String, cType as String) = this.DeclareType(decl, cType, 'Pointer',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetWritablePointerC<${this.cTypeElem}>();
		if (!${varName}) {
			Error::Issue(ErrorType::MemoryError, "the pointer is not writable");
			return Value::nil();
		}
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.Pick<Gurax::Value_Pointer>().GetPointer().GetWritablePointerC<${this.cTypeElem}>() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>([](Gurax::Value& value) -> ${this.cType} {
			auto p = Gurax::Value_Pointer::GetPointer(value).GetWritablePointerC<${this.cTypeElem}>();
			if (!p) {
				Error::Issue(ErrorType::MemoryError, "the pointer is not writable");
				return nullptr;
			}
			return p;
		});
		''')
	Register(moduleName as String) {`block} = this.RegisterExpr(moduleName, block.EachElem())
	RegisterExpr(moduleName as String, expr as Expr):map:void = {
		if (expr.IsAssign() && expr.right.IsCaller() && expr.right.car == `class) {
			this.RegisterClass(moduleName, expr)
		} else {
			this.RegisterFunction(moduleName, expr)
		}
	}
	RegisterClass(moduleName as String, expr as Expr):map:void = {
		!expr.left.IsIdentifier() && ErrorDone(expr.left, 'Identifier is expected for class name')
		className = expr.left.symbolName
		Println(className)
	}
	RegisterFunction(moduleName as String, expr as Expr):map:void = {
		funcInfo = CreateFuncInfo(this, moduleName, expr)
		Println(funcInfo.name)
		this.funcInfoTbl.Add(funcInfo)
	}
	ComposeFunctionImplementation() = EvalTmplFunctionImplementation(this.funcInfoTbl.Each()).Join('\n')
	ComposeFunctionAssignment(codePrefix as String) = (codePrefix + EvalTmplFunctionAssignment(this.funcInfoTbl.Each())).Join('\n')
}

Renderer.__init__() = {
	this.DeclareType('void', 'void', 'Nil',
		codeFunctionBody = R'''
		${caller};
		return Gurax::Value::nil();
		''')
	this.DeclareType('any', '', 'Any',
		codePicker = R'''
		const Gurax::Value& ${varName} = args_gurax.PickValue();
		'''
		codePickerValidation = R'''
		const Gurax::Value& ${varName} = args_gurax.IsValid()? args_gurax.PickValue() : Value::C_nil();
		'''
		codePickerVec = R'''
		const Gurax::ValueList& ${varName} = args_gurax.PickList();
		'''
		codeFunctionBody = R'''
		${caller};
		return Gurax::Value::nil();
		''')
	this.DeclareType('String@gurax', '', 'String')
	this.DeclareType('Tuple@gurax', '', 'Tuple')
	this.DeclareType('List@gurax', '', 'List')
	this.DeclareType('Number@gurax', '', 'Number',
		codePicker = R'''
		Gurax::Value_Number& ${varName} = args_gurax.Pick<Gurax::Value_Number>();
		'''
		codePickerVec = R'''
		const Gurax::ValueList& ${varName} = args_gurax.PickList();
		''')
	this.DeclareType('Referencer@gurax', '', 'Referencer',
		codePicker = R'''
		Gurax::Referencer& ${varName} = args_gurax.PickReferencer();
		''')
	this.DeclareType('Function@gurax', '', 'Function',
		codePicker = R'''
		RefPtr<Function> ${varName}(args_gurax.PickFunction().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Function> ${varName}(args_gurax.IsValid()? args_gurax.PickFunction().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType('Image@gurax', '', 'Image',
		codePicker = R'''
		RefPtr<Image> ${varName}(args_gurax.PickImage().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Image> ${varName}(args_gurax.IsValid()? args_gurax.PickImage().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType('Stream@gurax', '', 'Stream',
		codePicker = R'''
		RefPtr<Stream> ${varName}(args_gurax.PickStream().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Stream> ${varName}(args_gurax.IsValid()? args_gurax.PickStream().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType('Pointer@gurax', '', 'Pointer',
		codePicker = R'''
		RefPtr<Pointer> ${varName}(args_gurax.PickPointer().Reference());
		'''
		codePickerValidation = R'''
		RefPtr<Pointer> ${varName}(args_gurax.IsValid()? args_gurax.PickPointer().Reference() : ${defaultValue || 'nullptr'});
		'''
		codePickerVec = ''
		codeFunctionBody = '')
	this.DeclareType_Number('char')
	this.DeclareType_Number('short')
	this.DeclareType_Number('long')
	this.DeclareType_Number('int')
	this.DeclareType_Number('long_long', 'long long')
	this.DeclareType_Number('float')
	this.DeclareType_Number('double')
	this.DeclareType_Number('unsigned')
	this.DeclareType_Number('unsigned_char', 'unsigned char')
	this.DeclareType_Number('unsigned_short', 'unsigned short')
	this.DeclareType_Number('unsigned_long', 'unsigned long')
	this.DeclareType_Number('unsigned_int', 'unsigned int')
	this.DeclareType_Number('unsigned_long_long', 'unsigned long long')
	this.DeclareType_Number('size_t')
	this.DeclareType_Number('int8_t')
	this.DeclareType_Number('int16_t')
	this.DeclareType_Number('int32_t')
	this.DeclareType_Number('int64_t')
	this.DeclareType_Number('uint8_t')
	this.DeclareType_Number('uint16_t')
	this.DeclareType_Number('uint32_t')
	this.DeclareType_Number('uint64_t')
	this.DeclareType_Number('Char')
	this.DeclareType_Number('UChar')
	this.DeclareType_Number('Short')
	this.DeclareType_Number('UShort')
	this.DeclareType_Number('Int')
	this.DeclareType_Number('UInt')
	this.DeclareType_Number('Long')
	this.DeclareType_Number('ULong')
	this.DeclareType_Number('LongLong', 'long long')
	this.DeclareType_Number('ULongLong', 'unsigned long long')
	this.DeclareType_Number('Int8')
	this.DeclareType_Number('UInt8')
	this.DeclareType_Number('Int16')
	this.DeclareType_Number('UInt16')
	this.DeclareType_Number('Int32')
	this.DeclareType_Number('UInt32')
	this.DeclareType_Number('Int64')
	this.DeclareType_Number('UInt64')
	this.DeclareType_Number('Float')
	this.DeclareType_Number('Double')
	this.DeclareType_Number('Char@gurax')
	this.DeclareType_Number('UChar@gurax')
	this.DeclareType_Number('Short@gurax')
	this.DeclareType_Number('UShort@gurax')
	this.DeclareType_Number('Int@gurax')
	this.DeclareType_Number('UInt@gurax')
	this.DeclareType_Number('Long@gurax')
	this.DeclareType_Number('ULong@gurax')
	this.DeclareType_Number('Int8@gurax')
	this.DeclareType_Number('UInt8@gurax')
	this.DeclareType_Number('Int16@gurax')
	this.DeclareType_Number('UInt16@gurax')
	this.DeclareType_Number('Int32@gurax')
	this.DeclareType_Number('UInt32@gurax')
	this.DeclareType_Number('Int64@gurax')
	this.DeclareType_Number('UInt64@gurax')
	this.DeclareType_Number('Float@gurax')
	this.DeclareType_Number('Double@gurax')
	this.DeclareType_Pointer('const_void_p', 'const void*')
	this.DeclareType_WritablePointer('void_p', 'void*')
	this.DeclareType('bool', 'bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickBool() : ${defaultValue || 'false'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<bool>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeConvToC = 'Value_Bool::GetBool(${src})'
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('Bool@gurax', 'Bool', 'Bool',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickBool();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickBool() : ${defaultValue || 'false'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<bool>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('const_char_p', 'const char*', 'String',
		codePicker = R'''
		${this.cType} ${varName} = args_gurax.PickString();
		'''
		codePickerValidation = R'''
		${this.cType} ${varName} = args_gurax.IsValid()? args_gurax.PickString() : ${defaultValue || 'nullptr'};
		'''
		codePickerVec = R'''
		auto ${varName} = args_gurax.PickListT<${this.cType}>(Gurax::Value_${this.vtype}::ValueForVector);
		'''
		codeConvToC = 'Value_String::GetString(${src})'
		codeFunctionBody = R'''
		${this.cType} rtn = ${caller};
		return new Gurax::Value_${this.vtype}(rtn);
		''')
	this.DeclareType('const_char_p_NilIfNull', 'const char*', 'String',
		codeFunctionBody = R'''
		if (${this.cType} rtn = ${caller}) {
			return new Gurax::Value_${this.vtype}(rtn);
		}
		return Gurax::Value::nil();
		''')
}
