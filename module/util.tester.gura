#!/usr/bin/env gurax
//==============================================================================
// util.tester.gura
//==============================================================================

TestCase(title:String):void {`block} = {
	PrintTitle(title)
	block.Eval()
}

PrintTitle(title:String) = {
	Printf('======== %s ========\n', title)
}

Tester(expr:Expr, arg%%):void:dynamic_scope:map:[quote] {block?} = {
	Printf('%s ..', expr)
	try {
		rtn = expr.Eval()
		rtnStr = rtn.ToString()
		if (arg.IsSet(`quote)) { rtnStr = rtnStr.Escape():surround }
		Printf(cond(rtnStr.Find('\n'), '\n%s\n', ' %s\n'), rtnStr):nomap
		block && block(rtn)
	} catch {|e|
		Printf(' %s\n', e.text)
	}
}

PrintPUnit(expr:Expr):void:map = {
	seqIdOffset = 0
	punits = expr.EachPUnit()
	punit = punits.NextValue()
	!punit && return
	seqIdOffset = punit.seqId
	while (punit) {
		Printf('  ##%d %s\n', punit.seqId - seqIdOffset, punit.ToString(seqIdOffset))
		punit = punits.NextValue()
	}
}

PrintPUnitWithLabel(expr:Expr):void:map = {
	Printf('%s\n', expr)
	PrintPUnit(expr)
}

PrintProperty(vtype:VType) = {
	props = vtype.__EachProp__():list
	maxLenSymbolName = [props:*symbol:*name:*len*, 16].Max()
	maxLenVTypeFullName = [props:*vtype:*__fullName__:*len*, 12].Max()
	Printf('%s\n', vtype.__fullName__)
	props.Each {|prop|
		Printf('  %s%-*s %-*s %s%s\n',
			cond(prop.isOfClass, '.', '#'),
			maxLenSymbolName, prop.symbol.name,
			maxLenVTypeFullName, prop.vtype.__fullName__,
			['', 'R', 'W', 'R/W'][cond(prop.IsSet(`R), 1, 0) + cond(prop.IsSet(`W), 2, 0)],
			cond(prop.IsSet(`nil), ',nil', ''))
	}
}
