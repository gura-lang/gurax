#!/usr/bin/env gurax
//==============================================================================
// util.gura
//==============================================================================
Expr.PrintPUnit(stream as Stream = sys.cout, strIndent as String = ''):void = {
	punits = this.EachPUnit():list
	punits.IsEmpty() && return
	seqIdFirst = punits.first.seqId
	wdSeqId = Format('%d', punits.last.seqId - seqIdFirst).len
	stream.Printf('%s##%-*d %s\n', strIndent, wdSeqId,
					punits:*seqId - seqIdFirst, punits:*__str__(seqIdFirst))
}

Expr.PrintPUnitWithLabel(stream as Stream = sys.cout, strIndent as String = '  '):void = {
	Printf('%s\n', this)
	this.PrintPUnit(stream, strIndent)
}

VType.PrintPropSlots(stream as Stream = sys.cout):void:static  = {
	propSlots = this.__propSlots__():list
	wdSymbolName = [propSlots:*symbol:*symbolName:*len*, 16].Max()
	wdVTypeFullName = [propSlots:*vtype:*__fullName__:*len*, 12].Max()
	stream.Printf('%s\n', this.__fullName__)
	propSlots.Each {|propSlot|
		stream.Printf('  %s%-*s %-*s %s%s\n',
			cond(propSlot.isOfClass, '.', '#'),
			wdSymbolName, propSlot.symbol.symbolName,
			wdVTypeFullName, propSlot.vtype.__fullName__,
			['', 'R', 'W', 'R/W'][cond(propSlot.IsSet(`R), 1, 0) + cond(propSlot.IsSet(`W), 2, 0)],
			cond(propSlot.IsSet(`nil), ',nil', ''))
	}
}

DetectMemoryLeak():dynamicScope {`block} = {
	nBlocksPrev = MemoryPool.CountBlocksAllocated() + 1
	block.Eval()
	nBlocksLeaked = MemoryPool.CountBlocksAllocated() - nBlocksPrev
	(nBlocksLeaked > 0) && Error.Raise(Error.MemoryError,
					'failed to release %s blocks', nBlocksLeaked)
}
