#!/usr/bin/env gurax
//==============================================================================
// util.modbuild.gura
//==============================================================================
import(argopt)

//------------------------------------------------------------------------------
// PrintHelp
//------------------------------------------------------------------------------
PrintHelp(p:argopt.Parser) = tR'''
Usage: build.gura [options] [commands]
Commands:
  build    build the module
  rebuild  rebuld the module
  clean    clean all the generated files
  install  install the module and other files 
Options:
  ${p.FormatHelp() + '\n'}
'''.Render(sys.cerr)

//------------------------------------------------------------------------------
// Builder
//------------------------------------------------------------------------------
Builder = class {
	targetName = ''
	pathNameGurd = ''
	pathNameHdr:nil = 'stdafx.h'
	pathNamePch:String = nil
	pathNamesSrc = []
	pathNamesScript = []
	pathNamesObj = []
	dirNamesInc = []
	dirNamesLib = []
	dirNameSysInc = sys.dirInclude
	dirNameSysLib = sys.dirLib
	dirNameSysModule = sys.dirModule
	cflags = []
	cxxflags = []
	ldflags = []
	libs = []
	opt = %{}
	rebuildFlag = false
	errorFlag = false
	nameOut = ''
	dirNameOut = ''
	compiler = ''
	linker = ''
	cflagsBase = []
	cxxflagsBase = []
	ldflagsBase = []
	cflagsCompile = []
	cxxflagsCompile = []
	cxxflagsPreCompile = []
	libsBase = []
	__init__(targetName:String) = {
		this.targetName = targetName
		if (sys.platform == `darwin) {
			this.nameOut = 'gnuc'
			this.compiler = 'clang'
			this.linker = 'clang'
			this.cflagsBase = ['-fPIC', '-Wall', '-DGURAX_MODULE_SEPARATED']
			this.cxxflagsBase = ['-fPIC', '-Wall', '-std=c++14', '-DGURAX_MODULE_SEPARATED']
			this.ldflagsBase = ['-fPIC', '-shared', '-install_name', this.targetName + '.gurd']
			this.cxxflagsPreCompile = ['-x', 'c++-header']
			this.libsBase = ['stdc++', 'guraxcore']
		}
	}
	ShouldProcess(pathNameTgt:String, pathNamesDep+:String) = {
		this.rebuildFlag || !fs.Exists(pathNameTgt) || \
			(fs.Stat(pathNameTgt).mtime < fs.Stat(pathNamesDep):*mtime).Or()
	}
	Exec(pathName:String, args*:String) = {
		this.opt.Get('verbose') && Printf('%s %s\n', pathName, args.Join(' '))
		os.Exec(pathName, args*) == 0
	}
	PreCompile() = {
		(!this.pathNameHdr || !this.ShouldProcess(this.pathNamePch, this.pathNameHdr)) && return(true)
		Printf('-- compiling: %s\n', this.pathNameHdr)
		this.Exec(this.compiler, this.cxxflagsBase*, this.cxxflagsPreCompile*, this.cxxflags*,
				  ('-I' + this.dirNameSysInc), ('-I' + this.dirNamesInc)*,
				  '-o' + this.pathNamePch, this.pathNameHdr)
	}
	Compile(pathNameObj:String, pathNameSrc:String) = {
		!this.ShouldProcess(pathNameObj, pathNameSrc) && return(true)
		Printf('-- compiling: %s\n', pathNameSrc)
		if (pathNameSrc.EndsWith('.c'):icase) {
			this.Exec(this.compiler, this.cflagsBase*, this.cflagsCompile*, this.cflags*,
					  ('-I' + this.dirNameSysInc), ('-I' + this.dirNamesInc)*,
					  '-o' + pathNameObj, '-c', pathNameSrc)
		} else {
			this.Exec(this.compiler, this.cxxflagsBase*, this.cxxflagsCompile*, this.cxxflags*,
					  ('-I' + this.dirNameSysInc), ('-I' + this.dirNamesInc)*,
					  '-o' + pathNameObj, '-c', pathNameSrc)
		}
	}
	Link(pathNameGurd:String, pathNamesObj+:String) = {
		!this.ShouldProcess(pathNameGurd, pathNamesObj*) && return(true)
		!this.Exec(this.linker, this.ldflagsBase*, this.ldflags*,
				   '-L' + this.dirNameSysLib, ('-L' + this.dirNamesLib)*,
				   '-o' + pathNameGurd, pathNamesObj*,
				   ('-l' + this.libsBase)*, ('-l' + this.libs)*) && return(false)
		Printf('-- generated: %s\n', pathNameGurd)
		true
	}
	Command_build() = {
		!this.PreCompile() && return
		for (pathNameObj in this.pathNamesObj, pathNameSrc in this.pathNamesSrc) {
			!this.Compile(pathNameObj, pathNameSrc) && return(false)
		}
		this.Link(this.pathNameGurd, this.pathNamesObj*)
	}
	Command_rebuild() = {
		this.rebuildFlag = true
		this.Command_build()
	}
	Command_clean() = {
		fs.Remove(this.pathNameGurd)
		fs.Remove(this.pathNamesObj)
		this.pathNamePch && fs.Remove(this.pathNamePch)
		Printf('-- cleaned\n')
		true
	}
	Command_install() = {
		for (pathName in (this.pathNameGurd |+| this.pathNamesScript)) {
			Printf('-- installing: %s\n', pathName)
			fs.Copy(pathName, path.Join(this.dirNameSysModule, 'site')):overwrite
		}
		true
	}
	Run() = {
		[argv, this.opt] = argopt.Parser {|p|
			p.AddFlag('help',		'h', 'print this help')
			p.AddFlag('verbose',	'v', 'verbose mode')
			p.AddFlag('quiet',		'q', 'quiet mode')
			p.AddParam('incdir',	'I', 'include directory', 'DIR')
			p.AddParam('libdir',	'L', 'library directory', 'DIR')
			p.AddParam('moddir',	'M', 'directory to which module files are installed', 'DIR')
			p.AddParam('basedir',	'B', 'base directory for output', 'DIR')
			try {
				[argv, opt] = p.Parse(sys.argv)
			} catch {|e|
				sys.cerr.Println(e.text)
				sys.Exit(1)
			}
			if (opt['help']) {
				PrintHelp(p)
				sys.Exit(1)
			}
			[argv, opt]
		}
		if (dirName = this.opt['incdir']) { this.dirNameSysInc = dirName }
		if (dirName = this.opt['libdir']) { this.dirNameSysLib = dirName }
		if (dirName = this.opt['moddir']) { this.dirNameSysModule = dirName }
		this.dirNameOut = cond(dirName = this.opt['basedir'],
							   path.Join(dirName, this.nameOut), this.nameOut)
		!fs.Exists(this.dirNameOut) && fs.CreateDir(this.dirNameOut):tree
		if (!this.pathNameHdr) {
			// nothing to do
		} elsif (sys.platform == `darwin) {
			this.pathNamePch = path.Join(this.dirNameOut, path.FileName(this.pathNameHdr) + '.gch')
			this.cxxflagsCompile.Add('-include-pch', this.pathNamePch)
		}
		this.pathNameGurd = path.Join(this.dirNameOut, this.targetName + '.gurd')
		this.pathNamesObj = path.Join(this.dirNameOut, path.BaseName(this.pathNamesSrc)::Replace('/', '_') + '.o')
		if (argv.IsEmpty()) { argv.Append('build') }
		argv.Each {|command|
			if (command == 'build') {
				!this.Command_build() && break
			} elsif (command == 'rebuild') {
				!this.Command_rebuild() && break
			} elsif (command == 'clean') {
				!this.Command_clean() && break
			} elsif (command == 'install') {
				!this.Command_install() && break
			} else {
				sys.cerr.Printf('unknown command: %s\n', argv[0])
				sys.Exit(1)
			}
		}
		this
	}
}
