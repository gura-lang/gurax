#!/usr/bin/env gurax
//==============================================================================
// util.builder.gura
//==============================================================================
import(argopt)

//------------------------------------------------------------------------------
// Builder
//------------------------------------------------------------------------------
Builder = class {
	targetName = ''
	pathNameGurd = ''
	pathNamesSrc = []
	pathNamesScript = []
	pathNamesObj = []
	dirNameOut = 'gnuc'
	dirNamesInc = []
	dirNamesLib = []
	cflags = []
	ldflags = []
	libs = []
	opt = %{}
	cflagsBase = ['-Wall', '-std=c++14', '-DGURAX_MODULE_SEPARATED', '-fPIC']
	ldflagsBase = ['-shared']
	libsBase = ['stdc++', 'guraxcore']
	__init__(targetName:String) = {
		this.targetName = targetName
	}
	ShouldProcess(pathNameTgt:String, pathNamesDep+:String) = {
		!fs.Exists(pathNameTgt) || \
			(fs.Stat(pathNameTgt).mtime < fs.Stat(pathNamesDep):*mtime).Or()
	}
	Exec(pathName:String, args*:String) = {
		this.opt.Get('verbose') && Printf('%s %s\n', pathName, args.Join(' '))
		rtn = (os.Exec(pathName, args*) == 0)
		rtn
	}
	Compile(pathNameObj:String, pathNameSrc:String) = {
		cflags = this.cflags.Clone()
		Printf('-- compiling: %s\n', pathNameSrc)
		this.Exec('gcc', this.cflagsBase*, this.cflags*,
				  ('-I' + sys.dirInclude), ('-I' + this.dirNamesInc)*,
				  '-o', pathNameObj, '-c', pathNameSrc)
	}
	Link(pathNameGurd:String, pathNamesObj+:String) = {
		if (this.Exec('gcc', this.ldflagsBase*, this.ldflags*,
					  '-L' + sys.dirLib, ('-L' + this.dirNamesLib)*,
					  '-o', pathNameGurd, pathNamesObj*,
					  ('-l' + this.libsBase)*, ('-l' + this.libs)*)) {
			Printf('-- generated: %s\n', pathNameGurd)
		}
	}
	Command_build() = {
		errorFlag = false
		for (pathNameObj in this.pathNamesObj, pathNameSrc in this.pathNamesSrc) {
			if (this.ShouldProcess(pathNameObj, pathNameSrc) && \
				!this.Compile(pathNameObj, pathNameSrc)) {
				return
			}
		}
		if (this.ShouldProcess(this.pathNameGurd, this.pathNamesObj*)) {
			this.Link(this.pathNameGurd, this.pathNamesObj*)
		}
	}
	Command_clean() = {
		fs.Remove(this.pathNameGurd)
		fs.Remove(this.pathNamesObj)
		Printf('-- cleaned\n')
	}
	Command_install() = {
		fs.Copy(this.pathNameGurd, path.Join(sys.dirModule, 'site'))
		Printf('-- installed\n')
	}
	Run() = {
		this.pathNameGurd = path.Join(this.dirNameOut, this.targetName + '.gurd')
		this.pathNamesObj = path.Join(this.dirNameOut, path.BaseName(this.pathNamesSrc)::Replace('/', '_') + '.o')
		!fs.Exists(this.dirNameOut) && fs.CreateDir(this.dirNameOut)
		[argv, this.opt] = argopt.Parser {|p|
			p.AddFlag('verbose', 'v', 'verbose mode')
			p.Parse(sys.argv)
		}
		if (argv.IsEmpty()) {
			this.Command_build()
		} elsif (argv[0] == 'clean') {
			this.Command_clean()
		} elsif (argv[0] == 'install') {
			this.Command_install()
		} else {
			sys.cerr.Printf('unknown command: %s\n', argv[0])
			sys.Exit(1)
		}
	}
}
